
PotentiometerTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009334  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  080094c8  080094c8  000194c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009840  08009840  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009840  08009840  00019840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009848  08009848  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009848  08009848  00019848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800984c  0800984c  0001984c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009850  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  200001e0  08009a30  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08009a30  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e093  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001dde  00000000  00000000  0002e2a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cf8  00000000  00000000  00030088  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c00  00000000  00000000  00030d80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000283ed  00000000  00000000  00031980  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a2e6  00000000  00000000  00059d6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fc97b  00000000  00000000  00064053  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001609ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048ac  00000000  00000000  00160a4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080094ac 	.word	0x080094ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	080094ac 	.word	0x080094ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f92:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <HAL_Init+0x3c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <HAL_Init+0x3c>)
 8000f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f9c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f9e:	2003      	movs	r0, #3
 8000fa0:	f001 fa90 	bl	80024c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f000 f80f 	bl	8000fc8 <HAL_InitTick>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d002      	beq.n	8000fb6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	71fb      	strb	r3, [r7, #7]
 8000fb4:	e001      	b.n	8000fba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fb6:	f003 fe9f 	bl	8004cf8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fba:	79fb      	ldrb	r3, [r7, #7]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40022000 	.word	0x40022000

08000fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <HAL_InitTick+0x68>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d022      	beq.n	8001022 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fdc:	4b15      	ldr	r3, [pc, #84]	; (8001034 <HAL_InitTick+0x6c>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b13      	ldr	r3, [pc, #76]	; (8001030 <HAL_InitTick+0x68>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fe8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f001 fa8e 	bl	8002512 <HAL_SYSTICK_Config>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d10f      	bne.n	800101c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b0f      	cmp	r3, #15
 8001000:	d809      	bhi.n	8001016 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001002:	2200      	movs	r2, #0
 8001004:	6879      	ldr	r1, [r7, #4]
 8001006:	f04f 30ff 	mov.w	r0, #4294967295
 800100a:	f001 fa66 	bl	80024da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800100e:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <HAL_InitTick+0x70>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6013      	str	r3, [r2, #0]
 8001014:	e007      	b.n	8001026 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	73fb      	strb	r3, [r7, #15]
 800101a:	e004      	b.n	8001026 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	73fb      	strb	r3, [r7, #15]
 8001020:	e001      	b.n	8001026 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001026:	7bfb      	ldrb	r3, [r7, #15]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000004 	.word	0x20000004
 8001034:	2000000c 	.word	0x2000000c
 8001038:	20000000 	.word	0x20000000

0800103c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <HAL_IncTick+0x1c>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <HAL_IncTick+0x20>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4413      	add	r3, r2
 800104a:	4a03      	ldr	r2, [pc, #12]	; (8001058 <HAL_IncTick+0x1c>)
 800104c:	6013      	str	r3, [r2, #0]
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	20000208 	.word	0x20000208
 800105c:	20000004 	.word	0x20000004

08001060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return uwTick;
 8001064:	4b03      	ldr	r3, [pc, #12]	; (8001074 <HAL_GetTick+0x14>)
 8001066:	681b      	ldr	r3, [r3, #0]
}
 8001068:	4618      	mov	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000208 	.word	0x20000208

08001078 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001080:	f7ff ffee 	bl	8001060 <HAL_GetTick>
 8001084:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001090:	d004      	beq.n	800109c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <HAL_Delay+0x40>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	4413      	add	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800109c:	bf00      	nop
 800109e:	f7ff ffdf 	bl	8001060 <HAL_GetTick>
 80010a2:	4602      	mov	r2, r0
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	68fa      	ldr	r2, [r7, #12]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d8f7      	bhi.n	800109e <HAL_Delay+0x26>
  {
  }
}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000004 	.word	0x20000004

080010bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	431a      	orrs	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	609a      	str	r2, [r3, #8]
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	431a      	orrs	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	609a      	str	r2, [r3, #8]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001118:	4618      	mov	r0, r3
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001124:	b490      	push	{r4, r7}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
 8001130:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	3360      	adds	r3, #96	; 0x60
 8001136:	461a      	mov	r2, r3
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001140:	6822      	ldr	r2, [r4, #0]
 8001142:	4b08      	ldr	r3, [pc, #32]	; (8001164 <LL_ADC_SetOffset+0x40>)
 8001144:	4013      	ands	r3, r2
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	430a      	orrs	r2, r1
 8001150:	4313      	orrs	r3, r2
 8001152:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001156:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001158:	bf00      	nop
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bc90      	pop	{r4, r7}
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	03fff000 	.word	0x03fff000

08001168 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001168:	b490      	push	{r4, r7}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	3360      	adds	r3, #96	; 0x60
 8001176:	461a      	mov	r2, r3
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4413      	add	r3, r2
 800117e:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001180:	6823      	ldr	r3, [r4, #0]
 8001182:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bc90      	pop	{r4, r7}
 800118e:	4770      	bx	lr

08001190 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001190:	b490      	push	{r4, r7}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	3360      	adds	r3, #96	; 0x60
 80011a0:	461a      	mov	r2, r3
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80011aa:	6823      	ldr	r3, [r4, #0]
 80011ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc90      	pop	{r4, r7}
 80011be:	4770      	bx	lr

080011c0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d101      	bne.n	80011d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80011d4:	2301      	movs	r3, #1
 80011d6:	e000      	b.n	80011da <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80011e6:	b490      	push	{r4, r7}
 80011e8:	b084      	sub	sp, #16
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	60f8      	str	r0, [r7, #12]
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	3330      	adds	r3, #48	; 0x30
 80011f6:	461a      	mov	r2, r3
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	0a1b      	lsrs	r3, r3, #8
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	f003 030c 	and.w	r3, r3, #12
 8001202:	4413      	add	r3, r2
 8001204:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001206:	6822      	ldr	r2, [r4, #0]
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	f003 031f 	and.w	r3, r3, #31
 800120e:	211f      	movs	r1, #31
 8001210:	fa01 f303 	lsl.w	r3, r1, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	401a      	ands	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	0e9b      	lsrs	r3, r3, #26
 800121c:	f003 011f 	and.w	r1, r3, #31
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	f003 031f 	and.w	r3, r3, #31
 8001226:	fa01 f303 	lsl.w	r3, r1, r3
 800122a:	4313      	orrs	r3, r2
 800122c:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800122e:	bf00      	nop
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bc90      	pop	{r4, r7}
 8001236:	4770      	bx	lr

08001238 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001238:	b490      	push	{r4, r7}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	3314      	adds	r3, #20
 8001248:	461a      	mov	r2, r3
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	0e5b      	lsrs	r3, r3, #25
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	4413      	add	r3, r2
 8001256:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001258:	6822      	ldr	r2, [r4, #0]
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	0d1b      	lsrs	r3, r3, #20
 800125e:	f003 031f 	and.w	r3, r3, #31
 8001262:	2107      	movs	r1, #7
 8001264:	fa01 f303 	lsl.w	r3, r1, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	401a      	ands	r2, r3
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	0d1b      	lsrs	r3, r3, #20
 8001270:	f003 031f 	and.w	r3, r3, #31
 8001274:	6879      	ldr	r1, [r7, #4]
 8001276:	fa01 f303 	lsl.w	r3, r1, r3
 800127a:	4313      	orrs	r3, r2
 800127c:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bc90      	pop	{r4, r7}
 8001286:	4770      	bx	lr

08001288 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012a0:	43db      	mvns	r3, r3
 80012a2:	401a      	ands	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f003 0318 	and.w	r3, r3, #24
 80012aa:	4908      	ldr	r1, [pc, #32]	; (80012cc <LL_ADC_SetChannelSingleDiff+0x44>)
 80012ac:	40d9      	lsrs	r1, r3
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	400b      	ands	r3, r1
 80012b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012b6:	431a      	orrs	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80012be:	bf00      	nop
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	0007ffff 	.word	0x0007ffff

080012d0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f003 031f 	and.w	r3, r3, #31
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001318:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	6093      	str	r3, [r2, #8]
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800133c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001340:	d101      	bne.n	8001346 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001342:	2301      	movs	r3, #1
 8001344:	e000      	b.n	8001348 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001364:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001368:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001390:	d101      	bne.n	8001396 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001392:	2301      	movs	r3, #1
 8001394:	e000      	b.n	8001398 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001396:	2300      	movs	r3, #0
}
 8001398:	4618      	mov	r0, r3
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013b8:	f043 0201 	orr.w	r2, r3, #1
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d101      	bne.n	80013e4 <LL_ADC_IsEnabled+0x18>
 80013e0:	2301      	movs	r3, #1
 80013e2:	e000      	b.n	80013e6 <LL_ADC_IsEnabled+0x1a>
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001402:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001406:	f043 0204 	orr.w	r2, r3, #4
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	2b04      	cmp	r3, #4
 800142c:	d101      	bne.n	8001432 <LL_ADC_REG_IsConversionOngoing+0x18>
 800142e:	2301      	movs	r3, #1
 8001430:	e000      	b.n	8001434 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f003 0308 	and.w	r3, r3, #8
 8001450:	2b08      	cmp	r3, #8
 8001452:	d101      	bne.n	8001458 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001454:	2301      	movs	r3, #1
 8001456:	e000      	b.n	800145a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001468:	b590      	push	{r4, r7, lr}
 800146a:	b089      	sub	sp, #36	; 0x24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001470:	2300      	movs	r3, #0
 8001472:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001474:	2300      	movs	r3, #0
 8001476:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e134      	b.n	80016ec <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	691b      	ldr	r3, [r3, #16]
 8001486:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800148c:	2b00      	cmp	r3, #0
 800148e:	d109      	bne.n	80014a4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f003 fc55 	bl	8004d40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff3f 	bl	800132c <LL_ADC_IsDeepPowerDownEnabled>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d004      	beq.n	80014be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff25 	bl	8001308 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff ff5a 	bl	800137c <LL_ADC_IsInternalRegulatorEnabled>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d113      	bne.n	80014f6 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff ff3e 	bl	8001354 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80014d8:	4b86      	ldr	r3, [pc, #536]	; (80016f4 <HAL_ADC_Init+0x28c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	099b      	lsrs	r3, r3, #6
 80014de:	4a86      	ldr	r2, [pc, #536]	; (80016f8 <HAL_ADC_Init+0x290>)
 80014e0:	fba2 2303 	umull	r2, r3, r2, r3
 80014e4:	099b      	lsrs	r3, r3, #6
 80014e6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80014e8:	e002      	b.n	80014f0 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	3b01      	subs	r3, #1
 80014ee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f9      	bne.n	80014ea <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff ff3e 	bl	800137c <LL_ADC_IsInternalRegulatorEnabled>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d10d      	bne.n	8001522 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800150a:	f043 0210 	orr.w	r2, r3, #16
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001516:	f043 0201 	orr.w	r2, r3, #1
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff ff77 	bl	800141a <LL_ADC_REG_IsConversionOngoing>
 800152c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001532:	f003 0310 	and.w	r3, r3, #16
 8001536:	2b00      	cmp	r3, #0
 8001538:	f040 80cf 	bne.w	80016da <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	2b00      	cmp	r3, #0
 8001540:	f040 80cb 	bne.w	80016da <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001548:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800154c:	f043 0202 	orr.w	r2, r3, #2
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff ff37 	bl	80013cc <LL_ADC_IsEnabled>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d115      	bne.n	8001590 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001564:	4865      	ldr	r0, [pc, #404]	; (80016fc <HAL_ADC_Init+0x294>)
 8001566:	f7ff ff31 	bl	80013cc <LL_ADC_IsEnabled>
 800156a:	4604      	mov	r4, r0
 800156c:	4864      	ldr	r0, [pc, #400]	; (8001700 <HAL_ADC_Init+0x298>)
 800156e:	f7ff ff2d 	bl	80013cc <LL_ADC_IsEnabled>
 8001572:	4603      	mov	r3, r0
 8001574:	431c      	orrs	r4, r3
 8001576:	4863      	ldr	r0, [pc, #396]	; (8001704 <HAL_ADC_Init+0x29c>)
 8001578:	f7ff ff28 	bl	80013cc <LL_ADC_IsEnabled>
 800157c:	4603      	mov	r3, r0
 800157e:	4323      	orrs	r3, r4
 8001580:	2b00      	cmp	r3, #0
 8001582:	d105      	bne.n	8001590 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	4619      	mov	r1, r3
 800158a:	485f      	ldr	r0, [pc, #380]	; (8001708 <HAL_ADC_Init+0x2a0>)
 800158c:	f7ff fd96 	bl	80010bc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	7e5b      	ldrb	r3, [r3, #25]
 8001594:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800159a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80015a0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80015a6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015ae:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d106      	bne.n	80015cc <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c2:	3b01      	subs	r3, #1
 80015c4:	045b      	lsls	r3, r3, #17
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d009      	beq.n	80015e8 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	68da      	ldr	r2, [r3, #12]
 80015ee:	4b47      	ldr	r3, [pc, #284]	; (800170c <HAL_ADC_Init+0x2a4>)
 80015f0:	4013      	ands	r3, r2
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	6812      	ldr	r2, [r2, #0]
 80015f6:	69b9      	ldr	r1, [r7, #24]
 80015f8:	430b      	orrs	r3, r1
 80015fa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff0a 	bl	800141a <LL_ADC_REG_IsConversionOngoing>
 8001606:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ff17 	bl	8001440 <LL_ADC_INJ_IsConversionOngoing>
 8001612:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d13d      	bne.n	8001696 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d13a      	bne.n	8001696 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001624:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800162c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800163c:	f023 0302 	bic.w	r3, r3, #2
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	6812      	ldr	r2, [r2, #0]
 8001644:	69b9      	ldr	r1, [r7, #24]
 8001646:	430b      	orrs	r3, r1
 8001648:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001650:	2b01      	cmp	r3, #1
 8001652:	d118      	bne.n	8001686 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800165e:	f023 0304 	bic.w	r3, r3, #4
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800166a:	4311      	orrs	r1, r2
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001670:	4311      	orrs	r1, r2
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001676:	430a      	orrs	r2, r1
 8001678:	431a      	orrs	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 0201 	orr.w	r2, r2, #1
 8001682:	611a      	str	r2, [r3, #16]
 8001684:	e007      	b.n	8001696 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	691a      	ldr	r2, [r3, #16]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 0201 	bic.w	r2, r2, #1
 8001694:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d10c      	bne.n	80016b8 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a4:	f023 010f 	bic.w	r1, r3, #15
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69db      	ldr	r3, [r3, #28]
 80016ac:	1e5a      	subs	r2, r3, #1
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	430a      	orrs	r2, r1
 80016b4:	631a      	str	r2, [r3, #48]	; 0x30
 80016b6:	e007      	b.n	80016c8 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 020f 	bic.w	r2, r2, #15
 80016c6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016cc:	f023 0303 	bic.w	r3, r3, #3
 80016d0:	f043 0201 	orr.w	r2, r3, #1
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	655a      	str	r2, [r3, #84]	; 0x54
 80016d8:	e007      	b.n	80016ea <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016de:	f043 0210 	orr.w	r2, r3, #16
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80016ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3724      	adds	r7, #36	; 0x24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd90      	pop	{r4, r7, pc}
 80016f4:	2000000c 	.word	0x2000000c
 80016f8:	053e2d63 	.word	0x053e2d63
 80016fc:	50040000 	.word	0x50040000
 8001700:	50040100 	.word	0x50040100
 8001704:	50040200 	.word	0x50040200
 8001708:	50040300 	.word	0x50040300
 800170c:	fff0c007 	.word	0xfff0c007

08001710 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001718:	4857      	ldr	r0, [pc, #348]	; (8001878 <HAL_ADC_Start+0x168>)
 800171a:	f7ff fdd9 	bl	80012d0 <LL_ADC_GetMultimode>
 800171e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fe78 	bl	800141a <LL_ADC_REG_IsConversionOngoing>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	f040 809c 	bne.w	800186a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001738:	2b01      	cmp	r3, #1
 800173a:	d101      	bne.n	8001740 <HAL_ADC_Start+0x30>
 800173c:	2302      	movs	r3, #2
 800173e:	e097      	b.n	8001870 <HAL_ADC_Start+0x160>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f000 fcdd 	bl	8002108 <ADC_Enable>
 800174e:	4603      	mov	r3, r0
 8001750:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001752:	7dfb      	ldrb	r3, [r7, #23]
 8001754:	2b00      	cmp	r3, #0
 8001756:	f040 8083 	bne.w	8001860 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800175e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001762:	f023 0301 	bic.w	r3, r3, #1
 8001766:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a42      	ldr	r2, [pc, #264]	; (800187c <HAL_ADC_Start+0x16c>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d002      	beq.n	800177e <HAL_ADC_Start+0x6e>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	e000      	b.n	8001780 <HAL_ADC_Start+0x70>
 800177e:	4b40      	ldr	r3, [pc, #256]	; (8001880 <HAL_ADC_Start+0x170>)
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	6812      	ldr	r2, [r2, #0]
 8001784:	4293      	cmp	r3, r2
 8001786:	d002      	beq.n	800178e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d105      	bne.n	800179a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001792:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800179e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017a6:	d106      	bne.n	80017b6 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ac:	f023 0206 	bic.w	r2, r3, #6
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	659a      	str	r2, [r3, #88]	; 0x58
 80017b4:	e002      	b.n	80017bc <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	221c      	movs	r2, #28
 80017c2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a2a      	ldr	r2, [pc, #168]	; (800187c <HAL_ADC_Start+0x16c>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d002      	beq.n	80017dc <HAL_ADC_Start+0xcc>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	e000      	b.n	80017de <HAL_ADC_Start+0xce>
 80017dc:	4b28      	ldr	r3, [pc, #160]	; (8001880 <HAL_ADC_Start+0x170>)
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	6812      	ldr	r2, [r2, #0]
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d008      	beq.n	80017f8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	2b05      	cmp	r3, #5
 80017f0:	d002      	beq.n	80017f8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	2b09      	cmp	r3, #9
 80017f6:	d114      	bne.n	8001822 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d007      	beq.n	8001816 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800180a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800180e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff fde9 	bl	80013f2 <LL_ADC_REG_StartConversion>
 8001820:	e025      	b.n	800186e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001826:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a12      	ldr	r2, [pc, #72]	; (800187c <HAL_ADC_Start+0x16c>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d002      	beq.n	800183e <HAL_ADC_Start+0x12e>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	e000      	b.n	8001840 <HAL_ADC_Start+0x130>
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <HAL_ADC_Start+0x170>)
 8001840:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00f      	beq.n	800186e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001852:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001856:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	655a      	str	r2, [r3, #84]	; 0x54
 800185e:	e006      	b.n	800186e <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001868:	e001      	b.n	800186e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800186a:	2302      	movs	r3, #2
 800186c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800186e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	50040300 	.word	0x50040300
 800187c:	50040100 	.word	0x50040100
 8001880:	50040000 	.word	0x50040000

08001884 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b088      	sub	sp, #32
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800188e:	4862      	ldr	r0, [pc, #392]	; (8001a18 <HAL_ADC_PollForConversion+0x194>)
 8001890:	f7ff fd1e 	bl	80012d0 <LL_ADC_GetMultimode>
 8001894:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	2b08      	cmp	r3, #8
 800189c:	d102      	bne.n	80018a4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800189e:	2308      	movs	r3, #8
 80018a0:	61fb      	str	r3, [r7, #28]
 80018a2:	e02a      	b.n	80018fa <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d005      	beq.n	80018b6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	2b05      	cmp	r3, #5
 80018ae:	d002      	beq.n	80018b6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	2b09      	cmp	r3, #9
 80018b4:	d111      	bne.n	80018da <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d007      	beq.n	80018d4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c8:	f043 0220 	orr.w	r2, r3, #32
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e09d      	b.n	8001a10 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80018d4:	2304      	movs	r3, #4
 80018d6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80018d8:	e00f      	b.n	80018fa <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80018da:	484f      	ldr	r0, [pc, #316]	; (8001a18 <HAL_ADC_PollForConversion+0x194>)
 80018dc:	f7ff fd06 	bl	80012ec <LL_ADC_GetMultiDMATransfer>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d007      	beq.n	80018f6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ea:	f043 0220 	orr.w	r2, r3, #32
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e08c      	b.n	8001a10 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80018f6:	2304      	movs	r3, #4
 80018f8:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80018fa:	f7ff fbb1 	bl	8001060 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001900:	e01a      	b.n	8001938 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001908:	d016      	beq.n	8001938 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800190a:	f7ff fba9 	bl	8001060 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	429a      	cmp	r2, r3
 8001918:	d302      	bcc.n	8001920 <HAL_ADC_PollForConversion+0x9c>
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d10b      	bne.n	8001938 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001924:	f043 0204 	orr.w	r2, r3, #4
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e06b      	b.n	8001a10 <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	4013      	ands	r3, r2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0dd      	beq.n	8001902 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff fc32 	bl	80011c0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d01c      	beq.n	800199c <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	7e5b      	ldrb	r3, [r3, #25]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d118      	bne.n	800199c <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0308 	and.w	r3, r3, #8
 8001974:	2b08      	cmp	r3, #8
 8001976:	d111      	bne.n	800199c <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800197c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001988:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d105      	bne.n	800199c <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001994:	f043 0201 	orr.w	r2, r3, #1
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a1e      	ldr	r2, [pc, #120]	; (8001a1c <HAL_ADC_PollForConversion+0x198>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d002      	beq.n	80019ac <HAL_ADC_PollForConversion+0x128>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	e000      	b.n	80019ae <HAL_ADC_PollForConversion+0x12a>
 80019ac:	4b1c      	ldr	r3, [pc, #112]	; (8001a20 <HAL_ADC_PollForConversion+0x19c>)
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6812      	ldr	r2, [r2, #0]
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d008      	beq.n	80019c8 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d005      	beq.n	80019c8 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	2b05      	cmp	r3, #5
 80019c0:	d002      	beq.n	80019c8 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	2b09      	cmp	r3, #9
 80019c6:	d104      	bne.n	80019d2 <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	61bb      	str	r3, [r7, #24]
 80019d0:	e00c      	b.n	80019ec <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a11      	ldr	r2, [pc, #68]	; (8001a1c <HAL_ADC_PollForConversion+0x198>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d002      	beq.n	80019e2 <HAL_ADC_PollForConversion+0x15e>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	e000      	b.n	80019e4 <HAL_ADC_PollForConversion+0x160>
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <HAL_ADC_PollForConversion+0x19c>)
 80019e4:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	2b08      	cmp	r3, #8
 80019f0:	d104      	bne.n	80019fc <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2208      	movs	r2, #8
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	e008      	b.n	8001a0e <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d103      	bne.n	8001a0e <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	220c      	movs	r2, #12
 8001a0c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3720      	adds	r7, #32
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	50040300 	.word	0x50040300
 8001a1c:	50040100 	.word	0x50040100
 8001a20:	50040000 	.word	0x50040000

08001a24 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
	...

08001a40 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b0a6      	sub	sp, #152	; 0x98
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d101      	bne.n	8001a62 <HAL_ADC_ConfigChannel+0x22>
 8001a5e:	2302      	movs	r3, #2
 8001a60:	e348      	b.n	80020f4 <HAL_ADC_ConfigChannel+0x6b4>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fcd3 	bl	800141a <LL_ADC_REG_IsConversionOngoing>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f040 8329 	bne.w	80020ce <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b05      	cmp	r3, #5
 8001a82:	d824      	bhi.n	8001ace <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	3b02      	subs	r3, #2
 8001a8a:	2b03      	cmp	r3, #3
 8001a8c:	d81b      	bhi.n	8001ac6 <HAL_ADC_ConfigChannel+0x86>
 8001a8e:	a201      	add	r2, pc, #4	; (adr r2, 8001a94 <HAL_ADC_ConfigChannel+0x54>)
 8001a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a94:	08001aa5 	.word	0x08001aa5
 8001a98:	08001aad 	.word	0x08001aad
 8001a9c:	08001ab5 	.word	0x08001ab5
 8001aa0:	08001abd 	.word	0x08001abd
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	220c      	movs	r2, #12
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	e011      	b.n	8001ad0 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	2212      	movs	r2, #18
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	e00d      	b.n	8001ad0 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	2218      	movs	r2, #24
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	e009      	b.n	8001ad0 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	e004      	b.n	8001ad0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	2206      	movs	r2, #6
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	e000      	b.n	8001ad0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001ace:	bf00      	nop
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6818      	ldr	r0, [r3, #0]
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	6859      	ldr	r1, [r3, #4]
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	461a      	mov	r2, r3
 8001ade:	f7ff fb82 	bl	80011e6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff fc97 	bl	800141a <LL_ADC_REG_IsConversionOngoing>
 8001aec:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff fca3 	bl	8001440 <LL_ADC_INJ_IsConversionOngoing>
 8001afa:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001afe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f040 8148 	bne.w	8001d98 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f040 8143 	bne.w	8001d98 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6818      	ldr	r0, [r3, #0]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	6819      	ldr	r1, [r3, #0]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	f7ff fb8a 	bl	8001238 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	695a      	ldr	r2, [r3, #20]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	08db      	lsrs	r3, r3, #3
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	d00a      	beq.n	8001b5c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6818      	ldr	r0, [r3, #0]
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	6919      	ldr	r1, [r3, #16]
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b56:	f7ff fae5 	bl	8001124 <LL_ADC_SetOffset>
 8001b5a:	e11d      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2100      	movs	r1, #0
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fb00 	bl	8001168 <LL_ADC_GetOffsetChannel>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10a      	bne.n	8001b88 <HAL_ADC_ConfigChannel+0x148>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2100      	movs	r1, #0
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff faf5 	bl	8001168 <LL_ADC_GetOffsetChannel>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	0e9b      	lsrs	r3, r3, #26
 8001b82:	f003 021f 	and.w	r2, r3, #31
 8001b86:	e012      	b.n	8001bae <HAL_ADC_ConfigChannel+0x16e>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff faea 	bl	8001168 <LL_ADC_GetOffsetChannel>
 8001b94:	4603      	mov	r3, r0
 8001b96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b9e:	fa93 f3a3 	rbit	r3, r3
 8001ba2:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ba4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ba6:	fab3 f383 	clz	r3, r3
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	461a      	mov	r2, r3
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d105      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x186>
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	0e9b      	lsrs	r3, r3, #26
 8001bc0:	f003 031f 	and.w	r3, r3, #31
 8001bc4:	e00a      	b.n	8001bdc <HAL_ADC_ConfigChannel+0x19c>
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bce:	fa93 f3a3 	rbit	r3, r3
 8001bd2:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8001bd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bd6:	fab3 f383 	clz	r3, r3
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d106      	bne.n	8001bee <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2200      	movs	r2, #0
 8001be6:	2100      	movs	r1, #0
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff fad1 	bl	8001190 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff fab7 	bl	8001168 <LL_ADC_GetOffsetChannel>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10a      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x1da>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2101      	movs	r1, #1
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff faac 	bl	8001168 <LL_ADC_GetOffsetChannel>
 8001c10:	4603      	mov	r3, r0
 8001c12:	0e9b      	lsrs	r3, r3, #26
 8001c14:	f003 021f 	and.w	r2, r3, #31
 8001c18:	e010      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x1fc>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2101      	movs	r1, #1
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff faa1 	bl	8001168 <LL_ADC_GetOffsetChannel>
 8001c26:	4603      	mov	r3, r0
 8001c28:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c2c:	fa93 f3a3 	rbit	r3, r3
 8001c30:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c34:	fab3 f383 	clz	r3, r3
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d105      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x214>
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	0e9b      	lsrs	r3, r3, #26
 8001c4e:	f003 031f 	and.w	r3, r3, #31
 8001c52:	e00a      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x22a>
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c5c:	fa93 f3a3 	rbit	r3, r3
 8001c60:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001c62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c64:	fab3 f383 	clz	r3, r3
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d106      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2200      	movs	r2, #0
 8001c74:	2101      	movs	r1, #1
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff fa8a 	bl	8001190 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2102      	movs	r1, #2
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff fa70 	bl	8001168 <LL_ADC_GetOffsetChannel>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10a      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x268>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2102      	movs	r1, #2
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff fa65 	bl	8001168 <LL_ADC_GetOffsetChannel>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	0e9b      	lsrs	r3, r3, #26
 8001ca2:	f003 021f 	and.w	r2, r3, #31
 8001ca6:	e010      	b.n	8001cca <HAL_ADC_ConfigChannel+0x28a>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2102      	movs	r1, #2
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff fa5a 	bl	8001168 <LL_ADC_GetOffsetChannel>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cba:	fa93 f3a3 	rbit	r3, r3
 8001cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8001cc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cc2:	fab3 f383 	clz	r3, r3
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	461a      	mov	r2, r3
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d105      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x2a2>
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	0e9b      	lsrs	r3, r3, #26
 8001cdc:	f003 031f 	and.w	r3, r3, #31
 8001ce0:	e00a      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x2b8>
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cea:	fa93 f3a3 	rbit	r3, r3
 8001cee:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001cf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cf2:	fab3 f383 	clz	r3, r3
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d106      	bne.n	8001d0a <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2200      	movs	r2, #0
 8001d02:	2102      	movs	r1, #2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff fa43 	bl	8001190 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2103      	movs	r1, #3
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff fa29 	bl	8001168 <LL_ADC_GetOffsetChannel>
 8001d16:	4603      	mov	r3, r0
 8001d18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d10a      	bne.n	8001d36 <HAL_ADC_ConfigChannel+0x2f6>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2103      	movs	r1, #3
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff fa1e 	bl	8001168 <LL_ADC_GetOffsetChannel>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	0e9b      	lsrs	r3, r3, #26
 8001d30:	f003 021f 	and.w	r2, r3, #31
 8001d34:	e010      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x318>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2103      	movs	r1, #3
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff fa13 	bl	8001168 <LL_ADC_GetOffsetChannel>
 8001d42:	4603      	mov	r3, r0
 8001d44:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d48:	fa93 f3a3 	rbit	r3, r3
 8001d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d50:	fab3 f383 	clz	r3, r3
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	461a      	mov	r2, r3
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d105      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x330>
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	0e9b      	lsrs	r3, r3, #26
 8001d6a:	f003 031f 	and.w	r3, r3, #31
 8001d6e:	e00a      	b.n	8001d86 <HAL_ADC_ConfigChannel+0x346>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d78:	fa93 f3a3 	rbit	r3, r3
 8001d7c:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8001d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d80:	fab3 f383 	clz	r3, r3
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d106      	bne.n	8001d98 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2103      	movs	r1, #3
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff f9fc 	bl	8001190 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff fb15 	bl	80013cc <LL_ADC_IsEnabled>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f040 810c 	bne.w	8001fc2 <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6818      	ldr	r0, [r3, #0]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	6819      	ldr	r1, [r3, #0]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	461a      	mov	r2, r3
 8001db8:	f7ff fa66 	bl	8001288 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	4aad      	ldr	r2, [pc, #692]	; (8002078 <HAL_ADC_ConfigChannel+0x638>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	f040 80fd 	bne.w	8001fc2 <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10b      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x3b0>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	0e9b      	lsrs	r3, r3, #26
 8001dde:	3301      	adds	r3, #1
 8001de0:	f003 031f 	and.w	r3, r3, #31
 8001de4:	2b09      	cmp	r3, #9
 8001de6:	bf94      	ite	ls
 8001de8:	2301      	movls	r3, #1
 8001dea:	2300      	movhi	r3, #0
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	e012      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x3d6>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001df8:	fa93 f3a3 	rbit	r3, r3
 8001dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e00:	fab3 f383 	clz	r3, r3
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	3301      	adds	r3, #1
 8001e08:	f003 031f 	and.w	r3, r3, #31
 8001e0c:	2b09      	cmp	r3, #9
 8001e0e:	bf94      	ite	ls
 8001e10:	2301      	movls	r3, #1
 8001e12:	2300      	movhi	r3, #0
 8001e14:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d064      	beq.n	8001ee4 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d107      	bne.n	8001e36 <HAL_ADC_ConfigChannel+0x3f6>
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	0e9b      	lsrs	r3, r3, #26
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	069b      	lsls	r3, r3, #26
 8001e30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e34:	e00e      	b.n	8001e54 <HAL_ADC_ConfigChannel+0x414>
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e3e:	fa93 f3a3 	rbit	r3, r3
 8001e42:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e46:	fab3 f383 	clz	r3, r3
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	069b      	lsls	r3, r3, #26
 8001e50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d109      	bne.n	8001e74 <HAL_ADC_ConfigChannel+0x434>
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	0e9b      	lsrs	r3, r3, #26
 8001e66:	3301      	adds	r3, #1
 8001e68:	f003 031f 	and.w	r3, r3, #31
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e72:	e010      	b.n	8001e96 <HAL_ADC_ConfigChannel+0x456>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e7c:	fa93 f3a3 	rbit	r3, r3
 8001e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e84:	fab3 f383 	clz	r3, r3
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	f003 031f 	and.w	r3, r3, #31
 8001e90:	2101      	movs	r1, #1
 8001e92:	fa01 f303 	lsl.w	r3, r1, r3
 8001e96:	ea42 0103 	orr.w	r1, r2, r3
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10a      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x47c>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	0e9b      	lsrs	r3, r3, #26
 8001eac:	3301      	adds	r3, #1
 8001eae:	f003 021f 	and.w	r2, r3, #31
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	4413      	add	r3, r2
 8001eb8:	051b      	lsls	r3, r3, #20
 8001eba:	e011      	b.n	8001ee0 <HAL_ADC_ConfigChannel+0x4a0>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec4:	fa93 f3a3 	rbit	r3, r3
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	fab3 f383 	clz	r3, r3
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	f003 021f 	and.w	r2, r3, #31
 8001ed8:	4613      	mov	r3, r2
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	4413      	add	r3, r2
 8001ede:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ee0:	430b      	orrs	r3, r1
 8001ee2:	e069      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d107      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x4c0>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	0e9b      	lsrs	r3, r3, #26
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	069b      	lsls	r3, r3, #26
 8001efa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001efe:	e00e      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x4de>
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f06:	6a3b      	ldr	r3, [r7, #32]
 8001f08:	fa93 f3a3 	rbit	r3, r3
 8001f0c:	61fb      	str	r3, [r7, #28]
  return result;
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	fab3 f383 	clz	r3, r3
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	3301      	adds	r3, #1
 8001f18:	069b      	lsls	r3, r3, #26
 8001f1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d109      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x4fe>
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	0e9b      	lsrs	r3, r3, #26
 8001f30:	3301      	adds	r3, #1
 8001f32:	f003 031f 	and.w	r3, r3, #31
 8001f36:	2101      	movs	r1, #1
 8001f38:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3c:	e010      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x520>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	fa93 f3a3 	rbit	r3, r3
 8001f4a:	617b      	str	r3, [r7, #20]
  return result;
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	fab3 f383 	clz	r3, r3
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	3301      	adds	r3, #1
 8001f56:	f003 031f 	and.w	r3, r3, #31
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f60:	ea42 0103 	orr.w	r1, r2, r3
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10d      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x54c>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	0e9b      	lsrs	r3, r3, #26
 8001f76:	3301      	adds	r3, #1
 8001f78:	f003 021f 	and.w	r2, r3, #31
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	4413      	add	r3, r2
 8001f82:	3b1e      	subs	r3, #30
 8001f84:	051b      	lsls	r3, r3, #20
 8001f86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f8a:	e014      	b.n	8001fb6 <HAL_ADC_ConfigChannel+0x576>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	fa93 f3a3 	rbit	r3, r3
 8001f98:	60fb      	str	r3, [r7, #12]
  return result;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	fab3 f383 	clz	r3, r3
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	f003 021f 	and.w	r2, r3, #31
 8001fa8:	4613      	mov	r3, r2
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	4413      	add	r3, r2
 8001fae:	3b1e      	subs	r3, #30
 8001fb0:	051b      	lsls	r3, r3, #20
 8001fb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fb6:	430b      	orrs	r3, r1
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	6892      	ldr	r2, [r2, #8]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	f7ff f93b 	bl	8001238 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	4b2d      	ldr	r3, [pc, #180]	; (800207c <HAL_ADC_ConfigChannel+0x63c>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 808c 	beq.w	80020e8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fd0:	482b      	ldr	r0, [pc, #172]	; (8002080 <HAL_ADC_ConfigChannel+0x640>)
 8001fd2:	f7ff f899 	bl	8001108 <LL_ADC_GetCommonPathInternalCh>
 8001fd6:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a29      	ldr	r2, [pc, #164]	; (8002084 <HAL_ADC_ConfigChannel+0x644>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d12b      	bne.n	800203c <HAL_ADC_ConfigChannel+0x5fc>
 8001fe4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fe8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d125      	bne.n	800203c <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a24      	ldr	r2, [pc, #144]	; (8002088 <HAL_ADC_ConfigChannel+0x648>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d004      	beq.n	8002004 <HAL_ADC_ConfigChannel+0x5c4>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a23      	ldr	r2, [pc, #140]	; (800208c <HAL_ADC_ConfigChannel+0x64c>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d16e      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002004:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002008:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800200c:	4619      	mov	r1, r3
 800200e:	481c      	ldr	r0, [pc, #112]	; (8002080 <HAL_ADC_ConfigChannel+0x640>)
 8002010:	f7ff f867 	bl	80010e2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002014:	4b1e      	ldr	r3, [pc, #120]	; (8002090 <HAL_ADC_ConfigChannel+0x650>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	099b      	lsrs	r3, r3, #6
 800201a:	4a1e      	ldr	r2, [pc, #120]	; (8002094 <HAL_ADC_ConfigChannel+0x654>)
 800201c:	fba2 2303 	umull	r2, r3, r2, r3
 8002020:	099a      	lsrs	r2, r3, #6
 8002022:	4613      	mov	r3, r2
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	4413      	add	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800202c:	e002      	b.n	8002034 <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	3b01      	subs	r3, #1
 8002032:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1f9      	bne.n	800202e <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800203a:	e052      	b.n	80020e2 <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a15      	ldr	r2, [pc, #84]	; (8002098 <HAL_ADC_ConfigChannel+0x658>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d12a      	bne.n	800209c <HAL_ADC_ConfigChannel+0x65c>
 8002046:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800204a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d124      	bne.n	800209c <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a0c      	ldr	r2, [pc, #48]	; (8002088 <HAL_ADC_ConfigChannel+0x648>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d004      	beq.n	8002066 <HAL_ADC_ConfigChannel+0x626>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a0a      	ldr	r2, [pc, #40]	; (800208c <HAL_ADC_ConfigChannel+0x64c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d13f      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002066:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800206a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800206e:	4619      	mov	r1, r3
 8002070:	4803      	ldr	r0, [pc, #12]	; (8002080 <HAL_ADC_ConfigChannel+0x640>)
 8002072:	f7ff f836 	bl	80010e2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002076:	e036      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x6a6>
 8002078:	407f0000 	.word	0x407f0000
 800207c:	80080000 	.word	0x80080000
 8002080:	50040300 	.word	0x50040300
 8002084:	c7520000 	.word	0xc7520000
 8002088:	50040000 	.word	0x50040000
 800208c:	50040200 	.word	0x50040200
 8002090:	2000000c 	.word	0x2000000c
 8002094:	053e2d63 	.word	0x053e2d63
 8002098:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a16      	ldr	r2, [pc, #88]	; (80020fc <HAL_ADC_ConfigChannel+0x6bc>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d120      	bne.n	80020e8 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80020a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d11a      	bne.n	80020e8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a12      	ldr	r2, [pc, #72]	; (8002100 <HAL_ADC_ConfigChannel+0x6c0>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d115      	bne.n	80020e8 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020c4:	4619      	mov	r1, r3
 80020c6:	480f      	ldr	r0, [pc, #60]	; (8002104 <HAL_ADC_ConfigChannel+0x6c4>)
 80020c8:	f7ff f80b 	bl	80010e2 <LL_ADC_SetCommonPathInternalCh>
 80020cc:	e00c      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d2:	f043 0220 	orr.w	r2, r3, #32
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80020e0:	e002      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020e2:	bf00      	nop
 80020e4:	e000      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020e6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80020f0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3798      	adds	r7, #152	; 0x98
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	80000001 	.word	0x80000001
 8002100:	50040000 	.word	0x50040000
 8002104:	50040300 	.word	0x50040300

08002108 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff f959 	bl	80013cc <LL_ADC_IsEnabled>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d146      	bne.n	80021ae <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	4b24      	ldr	r3, [pc, #144]	; (80021b8 <ADC_Enable+0xb0>)
 8002128:	4013      	ands	r3, r2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00d      	beq.n	800214a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002132:	f043 0210 	orr.w	r2, r3, #16
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213e:	f043 0201 	orr.w	r2, r3, #1
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e032      	b.n	80021b0 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff f928 	bl	80013a4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002154:	f7fe ff84 	bl	8001060 <HAL_GetTick>
 8002158:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800215a:	e021      	b.n	80021a0 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff f933 	bl	80013cc <LL_ADC_IsEnabled>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d104      	bne.n	8002176 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff f917 	bl	80013a4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002176:	f7fe ff73 	bl	8001060 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d90d      	bls.n	80021a0 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002188:	f043 0210 	orr.w	r2, r3, #16
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002194:	f043 0201 	orr.w	r2, r3, #1
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e007      	b.n	80021b0 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d1d6      	bne.n	800215c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	8000003f 	.word	0x8000003f

080021bc <LL_ADC_IsEnabled>:
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d101      	bne.n	80021d4 <LL_ADC_IsEnabled+0x18>
 80021d0:	2301      	movs	r3, #1
 80021d2:	e000      	b.n	80021d6 <LL_ADC_IsEnabled+0x1a>
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <LL_ADC_REG_IsConversionOngoing>:
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 0304 	and.w	r3, r3, #4
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d101      	bne.n	80021fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002208:	b590      	push	{r4, r7, lr}
 800220a:	b09f      	sub	sp, #124	; 0x7c
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002212:	2300      	movs	r3, #0
 8002214:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800221e:	2b01      	cmp	r3, #1
 8002220:	d101      	bne.n	8002226 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002222:	2302      	movs	r3, #2
 8002224:	e08f      	b.n	8002346 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a47      	ldr	r2, [pc, #284]	; (8002350 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d102      	bne.n	800223e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002238:	4b46      	ldr	r3, [pc, #280]	; (8002354 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800223a:	60bb      	str	r3, [r7, #8]
 800223c:	e001      	b.n	8002242 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800223e:	2300      	movs	r3, #0
 8002240:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10b      	bne.n	8002260 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224c:	f043 0220 	orr.w	r2, r3, #32
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e072      	b.n	8002346 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff ffbd 	bl	80021e2 <LL_ADC_REG_IsConversionOngoing>
 8002268:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff ffb7 	bl	80021e2 <LL_ADC_REG_IsConversionOngoing>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d154      	bne.n	8002324 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800227a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800227c:	2b00      	cmp	r3, #0
 800227e:	d151      	bne.n	8002324 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002280:	4b35      	ldr	r3, [pc, #212]	; (8002358 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002282:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d02c      	beq.n	80022e6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800228c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	6859      	ldr	r1, [r3, #4]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800229e:	035b      	lsls	r3, r3, #13
 80022a0:	430b      	orrs	r3, r1
 80022a2:	431a      	orrs	r2, r3
 80022a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022a6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022a8:	4829      	ldr	r0, [pc, #164]	; (8002350 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80022aa:	f7ff ff87 	bl	80021bc <LL_ADC_IsEnabled>
 80022ae:	4604      	mov	r4, r0
 80022b0:	4828      	ldr	r0, [pc, #160]	; (8002354 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80022b2:	f7ff ff83 	bl	80021bc <LL_ADC_IsEnabled>
 80022b6:	4603      	mov	r3, r0
 80022b8:	431c      	orrs	r4, r3
 80022ba:	4828      	ldr	r0, [pc, #160]	; (800235c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80022bc:	f7ff ff7e 	bl	80021bc <LL_ADC_IsEnabled>
 80022c0:	4603      	mov	r3, r0
 80022c2:	4323      	orrs	r3, r4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d137      	bne.n	8002338 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80022c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80022d0:	f023 030f 	bic.w	r3, r3, #15
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	6811      	ldr	r1, [r2, #0]
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	6892      	ldr	r2, [r2, #8]
 80022dc:	430a      	orrs	r2, r1
 80022de:	431a      	orrs	r2, r3
 80022e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022e2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80022e4:	e028      	b.n	8002338 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80022e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022f0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022f2:	4817      	ldr	r0, [pc, #92]	; (8002350 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80022f4:	f7ff ff62 	bl	80021bc <LL_ADC_IsEnabled>
 80022f8:	4604      	mov	r4, r0
 80022fa:	4816      	ldr	r0, [pc, #88]	; (8002354 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80022fc:	f7ff ff5e 	bl	80021bc <LL_ADC_IsEnabled>
 8002300:	4603      	mov	r3, r0
 8002302:	431c      	orrs	r4, r3
 8002304:	4815      	ldr	r0, [pc, #84]	; (800235c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002306:	f7ff ff59 	bl	80021bc <LL_ADC_IsEnabled>
 800230a:	4603      	mov	r3, r0
 800230c:	4323      	orrs	r3, r4
 800230e:	2b00      	cmp	r3, #0
 8002310:	d112      	bne.n	8002338 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800231a:	f023 030f 	bic.w	r3, r3, #15
 800231e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002320:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002322:	e009      	b.n	8002338 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002328:	f043 0220 	orr.w	r2, r3, #32
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002336:	e000      	b.n	800233a <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002338:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002342:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002346:	4618      	mov	r0, r3
 8002348:	377c      	adds	r7, #124	; 0x7c
 800234a:	46bd      	mov	sp, r7
 800234c:	bd90      	pop	{r4, r7, pc}
 800234e:	bf00      	nop
 8002350:	50040000 	.word	0x50040000
 8002354:	50040100 	.word	0x50040100
 8002358:	50040300 	.word	0x50040300
 800235c:	50040200 	.word	0x50040200

08002360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002370:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800237c:	4013      	ands	r3, r2
 800237e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002388:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800238c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002392:	4a04      	ldr	r2, [pc, #16]	; (80023a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	60d3      	str	r3, [r2, #12]
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000ed00 	.word	0xe000ed00

080023a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023ac:	4b04      	ldr	r3, [pc, #16]	; (80023c0 <__NVIC_GetPriorityGrouping+0x18>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	0a1b      	lsrs	r3, r3, #8
 80023b2:	f003 0307 	and.w	r3, r3, #7
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	6039      	str	r1, [r7, #0]
 80023ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	db0a      	blt.n	80023ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	490c      	ldr	r1, [pc, #48]	; (8002410 <__NVIC_SetPriority+0x4c>)
 80023de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e2:	0112      	lsls	r2, r2, #4
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	440b      	add	r3, r1
 80023e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023ec:	e00a      	b.n	8002404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	4908      	ldr	r1, [pc, #32]	; (8002414 <__NVIC_SetPriority+0x50>)
 80023f4:	79fb      	ldrb	r3, [r7, #7]
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	3b04      	subs	r3, #4
 80023fc:	0112      	lsls	r2, r2, #4
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	440b      	add	r3, r1
 8002402:	761a      	strb	r2, [r3, #24]
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	e000e100 	.word	0xe000e100
 8002414:	e000ed00 	.word	0xe000ed00

08002418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002418:	b480      	push	{r7}
 800241a:	b089      	sub	sp, #36	; 0x24
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	f1c3 0307 	rsb	r3, r3, #7
 8002432:	2b04      	cmp	r3, #4
 8002434:	bf28      	it	cs
 8002436:	2304      	movcs	r3, #4
 8002438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	3304      	adds	r3, #4
 800243e:	2b06      	cmp	r3, #6
 8002440:	d902      	bls.n	8002448 <NVIC_EncodePriority+0x30>
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	3b03      	subs	r3, #3
 8002446:	e000      	b.n	800244a <NVIC_EncodePriority+0x32>
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800244c:	f04f 32ff 	mov.w	r2, #4294967295
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43da      	mvns	r2, r3
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	401a      	ands	r2, r3
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002460:	f04f 31ff 	mov.w	r1, #4294967295
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	fa01 f303 	lsl.w	r3, r1, r3
 800246a:	43d9      	mvns	r1, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002470:	4313      	orrs	r3, r2
         );
}
 8002472:	4618      	mov	r0, r3
 8002474:	3724      	adds	r7, #36	; 0x24
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
	...

08002480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3b01      	subs	r3, #1
 800248c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002490:	d301      	bcc.n	8002496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002492:	2301      	movs	r3, #1
 8002494:	e00f      	b.n	80024b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002496:	4a0a      	ldr	r2, [pc, #40]	; (80024c0 <SysTick_Config+0x40>)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3b01      	subs	r3, #1
 800249c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800249e:	210f      	movs	r1, #15
 80024a0:	f04f 30ff 	mov.w	r0, #4294967295
 80024a4:	f7ff ff8e 	bl	80023c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024a8:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <SysTick_Config+0x40>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ae:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <SysTick_Config+0x40>)
 80024b0:	2207      	movs	r2, #7
 80024b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	e000e010 	.word	0xe000e010

080024c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f7ff ff47 	bl	8002360 <__NVIC_SetPriorityGrouping>
}
 80024d2:	bf00      	nop
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b086      	sub	sp, #24
 80024de:	af00      	add	r7, sp, #0
 80024e0:	4603      	mov	r3, r0
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	607a      	str	r2, [r7, #4]
 80024e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024ec:	f7ff ff5c 	bl	80023a8 <__NVIC_GetPriorityGrouping>
 80024f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	68b9      	ldr	r1, [r7, #8]
 80024f6:	6978      	ldr	r0, [r7, #20]
 80024f8:	f7ff ff8e 	bl	8002418 <NVIC_EncodePriority>
 80024fc:	4602      	mov	r2, r0
 80024fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002502:	4611      	mov	r1, r2
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff ff5d 	bl	80023c4 <__NVIC_SetPriority>
}
 800250a:	bf00      	nop
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff ffb0 	bl	8002480 <SysTick_Config>
 8002520:	4603      	mov	r3, r0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
	...

0800252c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800252c:	b480      	push	{r7}
 800252e:	b087      	sub	sp, #28
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002536:	2300      	movs	r3, #0
 8002538:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800253a:	e17f      	b.n	800283c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	2101      	movs	r1, #1
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	fa01 f303 	lsl.w	r3, r1, r3
 8002548:	4013      	ands	r3, r2
 800254a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2b00      	cmp	r3, #0
 8002550:	f000 8171 	beq.w	8002836 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b02      	cmp	r3, #2
 800255a:	d003      	beq.n	8002564 <HAL_GPIO_Init+0x38>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2b12      	cmp	r3, #18
 8002562:	d123      	bne.n	80025ac <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	08da      	lsrs	r2, r3, #3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3208      	adds	r2, #8
 800256c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002570:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	220f      	movs	r2, #15
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	4013      	ands	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	691a      	ldr	r2, [r3, #16]
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	4313      	orrs	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	08da      	lsrs	r2, r3, #3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3208      	adds	r2, #8
 80025a6:	6939      	ldr	r1, [r7, #16]
 80025a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	2203      	movs	r2, #3
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	4013      	ands	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 0203 	and.w	r2, r3, #3
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d00b      	beq.n	8002600 <HAL_GPIO_Init+0xd4>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d007      	beq.n	8002600 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025f4:	2b11      	cmp	r3, #17
 80025f6:	d003      	beq.n	8002600 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	2b12      	cmp	r3, #18
 80025fe:	d130      	bne.n	8002662 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	2203      	movs	r2, #3
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	4013      	ands	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	68da      	ldr	r2, [r3, #12]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4313      	orrs	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002636:	2201      	movs	r2, #1
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43db      	mvns	r3, r3
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	4013      	ands	r3, r2
 8002644:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	091b      	lsrs	r3, r3, #4
 800264c:	f003 0201 	and.w	r2, r3, #1
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4313      	orrs	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	2b03      	cmp	r3, #3
 800266c:	d118      	bne.n	80026a0 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002672:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002674:	2201      	movs	r2, #1
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	4013      	ands	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	08db      	lsrs	r3, r3, #3
 800268a:	f003 0201 	and.w	r2, r3, #1
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	4313      	orrs	r3, r2
 8002698:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	2203      	movs	r2, #3
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	4013      	ands	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 80ac 	beq.w	8002836 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026de:	4b5e      	ldr	r3, [pc, #376]	; (8002858 <HAL_GPIO_Init+0x32c>)
 80026e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e2:	4a5d      	ldr	r2, [pc, #372]	; (8002858 <HAL_GPIO_Init+0x32c>)
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	6613      	str	r3, [r2, #96]	; 0x60
 80026ea:	4b5b      	ldr	r3, [pc, #364]	; (8002858 <HAL_GPIO_Init+0x32c>)
 80026ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	60bb      	str	r3, [r7, #8]
 80026f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026f6:	4a59      	ldr	r2, [pc, #356]	; (800285c <HAL_GPIO_Init+0x330>)
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	089b      	lsrs	r3, r3, #2
 80026fc:	3302      	adds	r3, #2
 80026fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002702:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	220f      	movs	r2, #15
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4013      	ands	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002720:	d025      	beq.n	800276e <HAL_GPIO_Init+0x242>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a4e      	ldr	r2, [pc, #312]	; (8002860 <HAL_GPIO_Init+0x334>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d01f      	beq.n	800276a <HAL_GPIO_Init+0x23e>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a4d      	ldr	r2, [pc, #308]	; (8002864 <HAL_GPIO_Init+0x338>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d019      	beq.n	8002766 <HAL_GPIO_Init+0x23a>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a4c      	ldr	r2, [pc, #304]	; (8002868 <HAL_GPIO_Init+0x33c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d013      	beq.n	8002762 <HAL_GPIO_Init+0x236>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a4b      	ldr	r2, [pc, #300]	; (800286c <HAL_GPIO_Init+0x340>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d00d      	beq.n	800275e <HAL_GPIO_Init+0x232>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a4a      	ldr	r2, [pc, #296]	; (8002870 <HAL_GPIO_Init+0x344>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d007      	beq.n	800275a <HAL_GPIO_Init+0x22e>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a49      	ldr	r2, [pc, #292]	; (8002874 <HAL_GPIO_Init+0x348>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d101      	bne.n	8002756 <HAL_GPIO_Init+0x22a>
 8002752:	2306      	movs	r3, #6
 8002754:	e00c      	b.n	8002770 <HAL_GPIO_Init+0x244>
 8002756:	2307      	movs	r3, #7
 8002758:	e00a      	b.n	8002770 <HAL_GPIO_Init+0x244>
 800275a:	2305      	movs	r3, #5
 800275c:	e008      	b.n	8002770 <HAL_GPIO_Init+0x244>
 800275e:	2304      	movs	r3, #4
 8002760:	e006      	b.n	8002770 <HAL_GPIO_Init+0x244>
 8002762:	2303      	movs	r3, #3
 8002764:	e004      	b.n	8002770 <HAL_GPIO_Init+0x244>
 8002766:	2302      	movs	r3, #2
 8002768:	e002      	b.n	8002770 <HAL_GPIO_Init+0x244>
 800276a:	2301      	movs	r3, #1
 800276c:	e000      	b.n	8002770 <HAL_GPIO_Init+0x244>
 800276e:	2300      	movs	r3, #0
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	f002 0203 	and.w	r2, r2, #3
 8002776:	0092      	lsls	r2, r2, #2
 8002778:	4093      	lsls	r3, r2
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	4313      	orrs	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002780:	4936      	ldr	r1, [pc, #216]	; (800285c <HAL_GPIO_Init+0x330>)
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	089b      	lsrs	r3, r3, #2
 8002786:	3302      	adds	r3, #2
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800278e:	4b3a      	ldr	r3, [pc, #232]	; (8002878 <HAL_GPIO_Init+0x34c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	43db      	mvns	r3, r3
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	4013      	ands	r3, r2
 800279c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027b2:	4a31      	ldr	r2, [pc, #196]	; (8002878 <HAL_GPIO_Init+0x34c>)
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80027b8:	4b2f      	ldr	r3, [pc, #188]	; (8002878 <HAL_GPIO_Init+0x34c>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	43db      	mvns	r3, r3
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	4013      	ands	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	4313      	orrs	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027dc:	4a26      	ldr	r2, [pc, #152]	; (8002878 <HAL_GPIO_Init+0x34c>)
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027e2:	4b25      	ldr	r3, [pc, #148]	; (8002878 <HAL_GPIO_Init+0x34c>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	43db      	mvns	r3, r3
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	4013      	ands	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	4313      	orrs	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002806:	4a1c      	ldr	r2, [pc, #112]	; (8002878 <HAL_GPIO_Init+0x34c>)
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800280c:	4b1a      	ldr	r3, [pc, #104]	; (8002878 <HAL_GPIO_Init+0x34c>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	43db      	mvns	r3, r3
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	4013      	ands	r3, r2
 800281a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	4313      	orrs	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002830:	4a11      	ldr	r2, [pc, #68]	; (8002878 <HAL_GPIO_Init+0x34c>)
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	3301      	adds	r3, #1
 800283a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	fa22 f303 	lsr.w	r3, r2, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	f47f ae78 	bne.w	800253c <HAL_GPIO_Init+0x10>
  }
}
 800284c:	bf00      	nop
 800284e:	371c      	adds	r7, #28
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	40021000 	.word	0x40021000
 800285c:	40010000 	.word	0x40010000
 8002860:	48000400 	.word	0x48000400
 8002864:	48000800 	.word	0x48000800
 8002868:	48000c00 	.word	0x48000c00
 800286c:	48001000 	.word	0x48001000
 8002870:	48001400 	.word	0x48001400
 8002874:	48001800 	.word	0x48001800
 8002878:	40010400 	.word	0x40010400

0800287c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	460b      	mov	r3, r1
 8002886:	807b      	strh	r3, [r7, #2]
 8002888:	4613      	mov	r3, r2
 800288a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800288c:	787b      	ldrb	r3, [r7, #1]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002892:	887a      	ldrh	r2, [r7, #2]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002898:	e002      	b.n	80028a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800289a:	887a      	ldrh	r2, [r7, #2]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80028b0:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	40007000 	.word	0x40007000

080028c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028d6:	d130      	bne.n	800293a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80028d8:	4b23      	ldr	r3, [pc, #140]	; (8002968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028e4:	d038      	beq.n	8002958 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028e6:	4b20      	ldr	r3, [pc, #128]	; (8002968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028ee:	4a1e      	ldr	r2, [pc, #120]	; (8002968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80028f6:	4b1d      	ldr	r3, [pc, #116]	; (800296c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2232      	movs	r2, #50	; 0x32
 80028fc:	fb02 f303 	mul.w	r3, r2, r3
 8002900:	4a1b      	ldr	r2, [pc, #108]	; (8002970 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002902:	fba2 2303 	umull	r2, r3, r2, r3
 8002906:	0c9b      	lsrs	r3, r3, #18
 8002908:	3301      	adds	r3, #1
 800290a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800290c:	e002      	b.n	8002914 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	3b01      	subs	r3, #1
 8002912:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002914:	4b14      	ldr	r3, [pc, #80]	; (8002968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800291c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002920:	d102      	bne.n	8002928 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1f2      	bne.n	800290e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002928:	4b0f      	ldr	r3, [pc, #60]	; (8002968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002934:	d110      	bne.n	8002958 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e00f      	b.n	800295a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800293a:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002946:	d007      	beq.n	8002958 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002948:	4b07      	ldr	r3, [pc, #28]	; (8002968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002950:	4a05      	ldr	r2, [pc, #20]	; (8002968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002952:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002956:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	40007000 	.word	0x40007000
 800296c:	2000000c 	.word	0x2000000c
 8002970:	431bde83 	.word	0x431bde83

08002974 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b088      	sub	sp, #32
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e39d      	b.n	80030c2 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002986:	4ba4      	ldr	r3, [pc, #656]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 030c 	and.w	r3, r3, #12
 800298e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002990:	4ba1      	ldr	r3, [pc, #644]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	f003 0303 	and.w	r3, r3, #3
 8002998:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0310 	and.w	r3, r3, #16
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 80e1 	beq.w	8002b6a <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d007      	beq.n	80029be <HAL_RCC_OscConfig+0x4a>
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	2b0c      	cmp	r3, #12
 80029b2:	f040 8088 	bne.w	8002ac6 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	f040 8084 	bne.w	8002ac6 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029be:	4b96      	ldr	r3, [pc, #600]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d005      	beq.n	80029d6 <HAL_RCC_OscConfig+0x62>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e375      	b.n	80030c2 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a1a      	ldr	r2, [r3, #32]
 80029da:	4b8f      	ldr	r3, [pc, #572]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d004      	beq.n	80029f0 <HAL_RCC_OscConfig+0x7c>
 80029e6:	4b8c      	ldr	r3, [pc, #560]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029ee:	e005      	b.n	80029fc <HAL_RCC_OscConfig+0x88>
 80029f0:	4b89      	ldr	r3, [pc, #548]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 80029f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029f6:	091b      	lsrs	r3, r3, #4
 80029f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d223      	bcs.n	8002a48 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f000 fd09 	bl	800341c <RCC_SetFlashLatencyFromMSIRange>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e356      	b.n	80030c2 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a14:	4b80      	ldr	r3, [pc, #512]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a7f      	ldr	r2, [pc, #508]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 8002a1a:	f043 0308 	orr.w	r3, r3, #8
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	4b7d      	ldr	r3, [pc, #500]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	497a      	ldr	r1, [pc, #488]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a32:	4b79      	ldr	r3, [pc, #484]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	021b      	lsls	r3, r3, #8
 8002a40:	4975      	ldr	r1, [pc, #468]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	604b      	str	r3, [r1, #4]
 8002a46:	e022      	b.n	8002a8e <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a48:	4b73      	ldr	r3, [pc, #460]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a72      	ldr	r2, [pc, #456]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 8002a4e:	f043 0308 	orr.w	r3, r3, #8
 8002a52:	6013      	str	r3, [r2, #0]
 8002a54:	4b70      	ldr	r3, [pc, #448]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	496d      	ldr	r1, [pc, #436]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a66:	4b6c      	ldr	r3, [pc, #432]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	021b      	lsls	r3, r3, #8
 8002a74:	4968      	ldr	r1, [pc, #416]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 fccc 	bl	800341c <RCC_SetFlashLatencyFromMSIRange>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e319      	b.n	80030c2 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a8e:	f000 fc03 	bl	8003298 <HAL_RCC_GetSysClockFreq>
 8002a92:	4601      	mov	r1, r0
 8002a94:	4b60      	ldr	r3, [pc, #384]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	091b      	lsrs	r3, r3, #4
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	4a5f      	ldr	r2, [pc, #380]	; (8002c1c <HAL_RCC_OscConfig+0x2a8>)
 8002aa0:	5cd3      	ldrb	r3, [r2, r3]
 8002aa2:	f003 031f 	and.w	r3, r3, #31
 8002aa6:	fa21 f303 	lsr.w	r3, r1, r3
 8002aaa:	4a5d      	ldr	r2, [pc, #372]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002aac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002aae:	4b5d      	ldr	r3, [pc, #372]	; (8002c24 <HAL_RCC_OscConfig+0x2b0>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fe fa88 	bl	8000fc8 <HAL_InitTick>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d052      	beq.n	8002b68 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8002ac2:	7bfb      	ldrb	r3, [r7, #15]
 8002ac4:	e2fd      	b.n	80030c2 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d032      	beq.n	8002b34 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ace:	4b52      	ldr	r3, [pc, #328]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a51      	ldr	r2, [pc, #324]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ada:	f7fe fac1 	bl	8001060 <HAL_GetTick>
 8002ade:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ae0:	e008      	b.n	8002af4 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ae2:	f7fe fabd 	bl	8001060 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e2e6      	b.n	80030c2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002af4:	4b48      	ldr	r3, [pc, #288]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d0f0      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b00:	4b45      	ldr	r3, [pc, #276]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a44      	ldr	r2, [pc, #272]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 8002b06:	f043 0308 	orr.w	r3, r3, #8
 8002b0a:	6013      	str	r3, [r2, #0]
 8002b0c:	4b42      	ldr	r3, [pc, #264]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	493f      	ldr	r1, [pc, #252]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b1e:	4b3e      	ldr	r3, [pc, #248]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	021b      	lsls	r3, r3, #8
 8002b2c:	493a      	ldr	r1, [pc, #232]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	604b      	str	r3, [r1, #4]
 8002b32:	e01a      	b.n	8002b6a <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b34:	4b38      	ldr	r3, [pc, #224]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a37      	ldr	r2, [pc, #220]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 8002b3a:	f023 0301 	bic.w	r3, r3, #1
 8002b3e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b40:	f7fe fa8e 	bl	8001060 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b48:	f7fe fa8a 	bl	8001060 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e2b3      	b.n	80030c2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b5a:	4b2f      	ldr	r3, [pc, #188]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f0      	bne.n	8002b48 <HAL_RCC_OscConfig+0x1d4>
 8002b66:	e000      	b.n	8002b6a <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d074      	beq.n	8002c60 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	d005      	beq.n	8002b88 <HAL_RCC_OscConfig+0x214>
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	2b0c      	cmp	r3, #12
 8002b80:	d10e      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d10b      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b88:	4b23      	ldr	r3, [pc, #140]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d064      	beq.n	8002c5e <HAL_RCC_OscConfig+0x2ea>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d160      	bne.n	8002c5e <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e290      	b.n	80030c2 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba8:	d106      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x244>
 8002baa:	4b1b      	ldr	r3, [pc, #108]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a1a      	ldr	r2, [pc, #104]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 8002bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb4:	6013      	str	r3, [r2, #0]
 8002bb6:	e01d      	b.n	8002bf4 <HAL_RCC_OscConfig+0x280>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bc0:	d10c      	bne.n	8002bdc <HAL_RCC_OscConfig+0x268>
 8002bc2:	4b15      	ldr	r3, [pc, #84]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a14      	ldr	r2, [pc, #80]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 8002bc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	4b12      	ldr	r3, [pc, #72]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a11      	ldr	r2, [pc, #68]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 8002bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	e00b      	b.n	8002bf4 <HAL_RCC_OscConfig+0x280>
 8002bdc:	4b0e      	ldr	r3, [pc, #56]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a0d      	ldr	r2, [pc, #52]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 8002be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002be6:	6013      	str	r3, [r2, #0]
 8002be8:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a0a      	ldr	r2, [pc, #40]	; (8002c18 <HAL_RCC_OscConfig+0x2a4>)
 8002bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d01c      	beq.n	8002c36 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfc:	f7fe fa30 	bl	8001060 <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c02:	e011      	b.n	8002c28 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c04:	f7fe fa2c 	bl	8001060 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b64      	cmp	r3, #100	; 0x64
 8002c10:	d90a      	bls.n	8002c28 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e255      	b.n	80030c2 <HAL_RCC_OscConfig+0x74e>
 8002c16:	bf00      	nop
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	080094d4 	.word	0x080094d4
 8002c20:	2000000c 	.word	0x2000000c
 8002c24:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c28:	4bae      	ldr	r3, [pc, #696]	; (8002ee4 <HAL_RCC_OscConfig+0x570>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0e7      	beq.n	8002c04 <HAL_RCC_OscConfig+0x290>
 8002c34:	e014      	b.n	8002c60 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c36:	f7fe fa13 	bl	8001060 <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c3e:	f7fe fa0f 	bl	8001060 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b64      	cmp	r3, #100	; 0x64
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e238      	b.n	80030c2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c50:	4ba4      	ldr	r3, [pc, #656]	; (8002ee4 <HAL_RCC_OscConfig+0x570>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1f0      	bne.n	8002c3e <HAL_RCC_OscConfig+0x2ca>
 8002c5c:	e000      	b.n	8002c60 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c5e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d060      	beq.n	8002d2e <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d005      	beq.n	8002c7e <HAL_RCC_OscConfig+0x30a>
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	2b0c      	cmp	r3, #12
 8002c76:	d119      	bne.n	8002cac <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d116      	bne.n	8002cac <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c7e:	4b99      	ldr	r3, [pc, #612]	; (8002ee4 <HAL_RCC_OscConfig+0x570>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d005      	beq.n	8002c96 <HAL_RCC_OscConfig+0x322>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e215      	b.n	80030c2 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c96:	4b93      	ldr	r3, [pc, #588]	; (8002ee4 <HAL_RCC_OscConfig+0x570>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	061b      	lsls	r3, r3, #24
 8002ca4:	498f      	ldr	r1, [pc, #572]	; (8002ee4 <HAL_RCC_OscConfig+0x570>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002caa:	e040      	b.n	8002d2e <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d023      	beq.n	8002cfc <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cb4:	4b8b      	ldr	r3, [pc, #556]	; (8002ee4 <HAL_RCC_OscConfig+0x570>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a8a      	ldr	r2, [pc, #552]	; (8002ee4 <HAL_RCC_OscConfig+0x570>)
 8002cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc0:	f7fe f9ce 	bl	8001060 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cc8:	f7fe f9ca 	bl	8001060 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e1f3      	b.n	80030c2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cda:	4b82      	ldr	r3, [pc, #520]	; (8002ee4 <HAL_RCC_OscConfig+0x570>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0f0      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce6:	4b7f      	ldr	r3, [pc, #508]	; (8002ee4 <HAL_RCC_OscConfig+0x570>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	061b      	lsls	r3, r3, #24
 8002cf4:	497b      	ldr	r1, [pc, #492]	; (8002ee4 <HAL_RCC_OscConfig+0x570>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	604b      	str	r3, [r1, #4]
 8002cfa:	e018      	b.n	8002d2e <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cfc:	4b79      	ldr	r3, [pc, #484]	; (8002ee4 <HAL_RCC_OscConfig+0x570>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a78      	ldr	r2, [pc, #480]	; (8002ee4 <HAL_RCC_OscConfig+0x570>)
 8002d02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d08:	f7fe f9aa 	bl	8001060 <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d10:	f7fe f9a6 	bl	8001060 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e1cf      	b.n	80030c2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d22:	4b70      	ldr	r3, [pc, #448]	; (8002ee4 <HAL_RCC_OscConfig+0x570>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1f0      	bne.n	8002d10 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d03c      	beq.n	8002db4 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d01c      	beq.n	8002d7c <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d42:	4b68      	ldr	r3, [pc, #416]	; (8002ee4 <HAL_RCC_OscConfig+0x570>)
 8002d44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d48:	4a66      	ldr	r2, [pc, #408]	; (8002ee4 <HAL_RCC_OscConfig+0x570>)
 8002d4a:	f043 0301 	orr.w	r3, r3, #1
 8002d4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d52:	f7fe f985 	bl	8001060 <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d5a:	f7fe f981 	bl	8001060 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e1aa      	b.n	80030c2 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d6c:	4b5d      	ldr	r3, [pc, #372]	; (8002ee4 <HAL_RCC_OscConfig+0x570>)
 8002d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0ef      	beq.n	8002d5a <HAL_RCC_OscConfig+0x3e6>
 8002d7a:	e01b      	b.n	8002db4 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d7c:	4b59      	ldr	r3, [pc, #356]	; (8002ee4 <HAL_RCC_OscConfig+0x570>)
 8002d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d82:	4a58      	ldr	r2, [pc, #352]	; (8002ee4 <HAL_RCC_OscConfig+0x570>)
 8002d84:	f023 0301 	bic.w	r3, r3, #1
 8002d88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d8c:	f7fe f968 	bl	8001060 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d94:	f7fe f964 	bl	8001060 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e18d      	b.n	80030c2 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002da6:	4b4f      	ldr	r3, [pc, #316]	; (8002ee4 <HAL_RCC_OscConfig+0x570>)
 8002da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1ef      	bne.n	8002d94 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 80a5 	beq.w	8002f0c <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002dc6:	4b47      	ldr	r3, [pc, #284]	; (8002ee4 <HAL_RCC_OscConfig+0x570>)
 8002dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10d      	bne.n	8002dee <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd2:	4b44      	ldr	r3, [pc, #272]	; (8002ee4 <HAL_RCC_OscConfig+0x570>)
 8002dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd6:	4a43      	ldr	r2, [pc, #268]	; (8002ee4 <HAL_RCC_OscConfig+0x570>)
 8002dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ddc:	6593      	str	r3, [r2, #88]	; 0x58
 8002dde:	4b41      	ldr	r3, [pc, #260]	; (8002ee4 <HAL_RCC_OscConfig+0x570>)
 8002de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de6:	60bb      	str	r3, [r7, #8]
 8002de8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dea:	2301      	movs	r3, #1
 8002dec:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dee:	4b3e      	ldr	r3, [pc, #248]	; (8002ee8 <HAL_RCC_OscConfig+0x574>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d118      	bne.n	8002e2c <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dfa:	4b3b      	ldr	r3, [pc, #236]	; (8002ee8 <HAL_RCC_OscConfig+0x574>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a3a      	ldr	r2, [pc, #232]	; (8002ee8 <HAL_RCC_OscConfig+0x574>)
 8002e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e06:	f7fe f92b 	bl	8001060 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e0e:	f7fe f927 	bl	8001060 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e150      	b.n	80030c2 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e20:	4b31      	ldr	r3, [pc, #196]	; (8002ee8 <HAL_RCC_OscConfig+0x574>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0f0      	beq.n	8002e0e <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d108      	bne.n	8002e46 <HAL_RCC_OscConfig+0x4d2>
 8002e34:	4b2b      	ldr	r3, [pc, #172]	; (8002ee4 <HAL_RCC_OscConfig+0x570>)
 8002e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e3a:	4a2a      	ldr	r2, [pc, #168]	; (8002ee4 <HAL_RCC_OscConfig+0x570>)
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e44:	e024      	b.n	8002e90 <HAL_RCC_OscConfig+0x51c>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	2b05      	cmp	r3, #5
 8002e4c:	d110      	bne.n	8002e70 <HAL_RCC_OscConfig+0x4fc>
 8002e4e:	4b25      	ldr	r3, [pc, #148]	; (8002ee4 <HAL_RCC_OscConfig+0x570>)
 8002e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e54:	4a23      	ldr	r2, [pc, #140]	; (8002ee4 <HAL_RCC_OscConfig+0x570>)
 8002e56:	f043 0304 	orr.w	r3, r3, #4
 8002e5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e5e:	4b21      	ldr	r3, [pc, #132]	; (8002ee4 <HAL_RCC_OscConfig+0x570>)
 8002e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e64:	4a1f      	ldr	r2, [pc, #124]	; (8002ee4 <HAL_RCC_OscConfig+0x570>)
 8002e66:	f043 0301 	orr.w	r3, r3, #1
 8002e6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e6e:	e00f      	b.n	8002e90 <HAL_RCC_OscConfig+0x51c>
 8002e70:	4b1c      	ldr	r3, [pc, #112]	; (8002ee4 <HAL_RCC_OscConfig+0x570>)
 8002e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e76:	4a1b      	ldr	r2, [pc, #108]	; (8002ee4 <HAL_RCC_OscConfig+0x570>)
 8002e78:	f023 0301 	bic.w	r3, r3, #1
 8002e7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e80:	4b18      	ldr	r3, [pc, #96]	; (8002ee4 <HAL_RCC_OscConfig+0x570>)
 8002e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e86:	4a17      	ldr	r2, [pc, #92]	; (8002ee4 <HAL_RCC_OscConfig+0x570>)
 8002e88:	f023 0304 	bic.w	r3, r3, #4
 8002e8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d016      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e98:	f7fe f8e2 	bl	8001060 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e9e:	e00a      	b.n	8002eb6 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea0:	f7fe f8de 	bl	8001060 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e105      	b.n	80030c2 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eb6:	4b0b      	ldr	r3, [pc, #44]	; (8002ee4 <HAL_RCC_OscConfig+0x570>)
 8002eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d0ed      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x52c>
 8002ec4:	e019      	b.n	8002efa <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec6:	f7fe f8cb 	bl	8001060 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ecc:	e00e      	b.n	8002eec <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ece:	f7fe f8c7 	bl	8001060 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d905      	bls.n	8002eec <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e0ee      	b.n	80030c2 <HAL_RCC_OscConfig+0x74e>
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002eec:	4b77      	ldr	r3, [pc, #476]	; (80030cc <HAL_RCC_OscConfig+0x758>)
 8002eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1e9      	bne.n	8002ece <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002efa:	7ffb      	ldrb	r3, [r7, #31]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d105      	bne.n	8002f0c <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f00:	4b72      	ldr	r3, [pc, #456]	; (80030cc <HAL_RCC_OscConfig+0x758>)
 8002f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f04:	4a71      	ldr	r2, [pc, #452]	; (80030cc <HAL_RCC_OscConfig+0x758>)
 8002f06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f0a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 80d5 	beq.w	80030c0 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	2b0c      	cmp	r3, #12
 8002f1a:	f000 808e 	beq.w	800303a <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d15b      	bne.n	8002fde <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f26:	4b69      	ldr	r3, [pc, #420]	; (80030cc <HAL_RCC_OscConfig+0x758>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a68      	ldr	r2, [pc, #416]	; (80030cc <HAL_RCC_OscConfig+0x758>)
 8002f2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f32:	f7fe f895 	bl	8001060 <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f3a:	f7fe f891 	bl	8001060 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e0ba      	b.n	80030c2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f4c:	4b5f      	ldr	r3, [pc, #380]	; (80030cc <HAL_RCC_OscConfig+0x758>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1f0      	bne.n	8002f3a <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f58:	4b5c      	ldr	r3, [pc, #368]	; (80030cc <HAL_RCC_OscConfig+0x758>)
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	4b5c      	ldr	r3, [pc, #368]	; (80030d0 <HAL_RCC_OscConfig+0x75c>)
 8002f5e:	4013      	ands	r3, r2
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f68:	3a01      	subs	r2, #1
 8002f6a:	0112      	lsls	r2, r2, #4
 8002f6c:	4311      	orrs	r1, r2
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f72:	0212      	lsls	r2, r2, #8
 8002f74:	4311      	orrs	r1, r2
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f7a:	0852      	lsrs	r2, r2, #1
 8002f7c:	3a01      	subs	r2, #1
 8002f7e:	0552      	lsls	r2, r2, #21
 8002f80:	4311      	orrs	r1, r2
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f86:	0852      	lsrs	r2, r2, #1
 8002f88:	3a01      	subs	r2, #1
 8002f8a:	0652      	lsls	r2, r2, #25
 8002f8c:	4311      	orrs	r1, r2
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f92:	0912      	lsrs	r2, r2, #4
 8002f94:	0452      	lsls	r2, r2, #17
 8002f96:	430a      	orrs	r2, r1
 8002f98:	494c      	ldr	r1, [pc, #304]	; (80030cc <HAL_RCC_OscConfig+0x758>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f9e:	4b4b      	ldr	r3, [pc, #300]	; (80030cc <HAL_RCC_OscConfig+0x758>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a4a      	ldr	r2, [pc, #296]	; (80030cc <HAL_RCC_OscConfig+0x758>)
 8002fa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fa8:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002faa:	4b48      	ldr	r3, [pc, #288]	; (80030cc <HAL_RCC_OscConfig+0x758>)
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	4a47      	ldr	r2, [pc, #284]	; (80030cc <HAL_RCC_OscConfig+0x758>)
 8002fb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fb4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb6:	f7fe f853 	bl	8001060 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fbe:	f7fe f84f 	bl	8001060 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e078      	b.n	80030c2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fd0:	4b3e      	ldr	r3, [pc, #248]	; (80030cc <HAL_RCC_OscConfig+0x758>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0f0      	beq.n	8002fbe <HAL_RCC_OscConfig+0x64a>
 8002fdc:	e070      	b.n	80030c0 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fde:	4b3b      	ldr	r3, [pc, #236]	; (80030cc <HAL_RCC_OscConfig+0x758>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a3a      	ldr	r2, [pc, #232]	; (80030cc <HAL_RCC_OscConfig+0x758>)
 8002fe4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fe8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002fea:	4b38      	ldr	r3, [pc, #224]	; (80030cc <HAL_RCC_OscConfig+0x758>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d105      	bne.n	8003002 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002ff6:	4b35      	ldr	r3, [pc, #212]	; (80030cc <HAL_RCC_OscConfig+0x758>)
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	4a34      	ldr	r2, [pc, #208]	; (80030cc <HAL_RCC_OscConfig+0x758>)
 8002ffc:	f023 0303 	bic.w	r3, r3, #3
 8003000:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003002:	4b32      	ldr	r3, [pc, #200]	; (80030cc <HAL_RCC_OscConfig+0x758>)
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	4a31      	ldr	r2, [pc, #196]	; (80030cc <HAL_RCC_OscConfig+0x758>)
 8003008:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800300c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003010:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003012:	f7fe f825 	bl	8001060 <HAL_GetTick>
 8003016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003018:	e008      	b.n	800302c <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800301a:	f7fe f821 	bl	8001060 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e04a      	b.n	80030c2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800302c:	4b27      	ldr	r3, [pc, #156]	; (80030cc <HAL_RCC_OscConfig+0x758>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1f0      	bne.n	800301a <HAL_RCC_OscConfig+0x6a6>
 8003038:	e042      	b.n	80030c0 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e03d      	b.n	80030c2 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003046:	4b21      	ldr	r3, [pc, #132]	; (80030cc <HAL_RCC_OscConfig+0x758>)
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	f003 0203 	and.w	r2, r3, #3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003056:	429a      	cmp	r2, r3
 8003058:	d130      	bne.n	80030bc <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003064:	3b01      	subs	r3, #1
 8003066:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003068:	429a      	cmp	r2, r3
 800306a:	d127      	bne.n	80030bc <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003076:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003078:	429a      	cmp	r2, r3
 800307a:	d11f      	bne.n	80030bc <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003086:	2a07      	cmp	r2, #7
 8003088:	bf14      	ite	ne
 800308a:	2201      	movne	r2, #1
 800308c:	2200      	moveq	r2, #0
 800308e:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003090:	4293      	cmp	r3, r2
 8003092:	d113      	bne.n	80030bc <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800309e:	085b      	lsrs	r3, r3, #1
 80030a0:	3b01      	subs	r3, #1
 80030a2:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d109      	bne.n	80030bc <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	085b      	lsrs	r3, r3, #1
 80030b4:	3b01      	subs	r3, #1
 80030b6:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d001      	beq.n	80030c0 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e000      	b.n	80030c2 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3720      	adds	r7, #32
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40021000 	.word	0x40021000
 80030d0:	f99d808c 	.word	0xf99d808c

080030d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e0c8      	b.n	800327a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030e8:	4b66      	ldr	r3, [pc, #408]	; (8003284 <HAL_RCC_ClockConfig+0x1b0>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d910      	bls.n	8003118 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f6:	4b63      	ldr	r3, [pc, #396]	; (8003284 <HAL_RCC_ClockConfig+0x1b0>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f023 0207 	bic.w	r2, r3, #7
 80030fe:	4961      	ldr	r1, [pc, #388]	; (8003284 <HAL_RCC_ClockConfig+0x1b0>)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	4313      	orrs	r3, r2
 8003104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003106:	4b5f      	ldr	r3, [pc, #380]	; (8003284 <HAL_RCC_ClockConfig+0x1b0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d001      	beq.n	8003118 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e0b0      	b.n	800327a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b00      	cmp	r3, #0
 8003122:	d04c      	beq.n	80031be <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2b03      	cmp	r3, #3
 800312a:	d107      	bne.n	800313c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800312c:	4b56      	ldr	r3, [pc, #344]	; (8003288 <HAL_RCC_ClockConfig+0x1b4>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d121      	bne.n	800317c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e09e      	b.n	800327a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	2b02      	cmp	r3, #2
 8003142:	d107      	bne.n	8003154 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003144:	4b50      	ldr	r3, [pc, #320]	; (8003288 <HAL_RCC_ClockConfig+0x1b4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d115      	bne.n	800317c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e092      	b.n	800327a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d107      	bne.n	800316c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800315c:	4b4a      	ldr	r3, [pc, #296]	; (8003288 <HAL_RCC_ClockConfig+0x1b4>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d109      	bne.n	800317c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e086      	b.n	800327a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800316c:	4b46      	ldr	r3, [pc, #280]	; (8003288 <HAL_RCC_ClockConfig+0x1b4>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003174:	2b00      	cmp	r3, #0
 8003176:	d101      	bne.n	800317c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e07e      	b.n	800327a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800317c:	4b42      	ldr	r3, [pc, #264]	; (8003288 <HAL_RCC_ClockConfig+0x1b4>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f023 0203 	bic.w	r2, r3, #3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	493f      	ldr	r1, [pc, #252]	; (8003288 <HAL_RCC_ClockConfig+0x1b4>)
 800318a:	4313      	orrs	r3, r2
 800318c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800318e:	f7fd ff67 	bl	8001060 <HAL_GetTick>
 8003192:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003194:	e00a      	b.n	80031ac <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003196:	f7fd ff63 	bl	8001060 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e066      	b.n	800327a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ac:	4b36      	ldr	r3, [pc, #216]	; (8003288 <HAL_RCC_ClockConfig+0x1b4>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 020c 	and.w	r2, r3, #12
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d1eb      	bne.n	8003196 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d008      	beq.n	80031dc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031ca:	4b2f      	ldr	r3, [pc, #188]	; (8003288 <HAL_RCC_ClockConfig+0x1b4>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	492c      	ldr	r1, [pc, #176]	; (8003288 <HAL_RCC_ClockConfig+0x1b4>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031dc:	4b29      	ldr	r3, [pc, #164]	; (8003284 <HAL_RCC_ClockConfig+0x1b0>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d210      	bcs.n	800320c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ea:	4b26      	ldr	r3, [pc, #152]	; (8003284 <HAL_RCC_ClockConfig+0x1b0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 0207 	bic.w	r2, r3, #7
 80031f2:	4924      	ldr	r1, [pc, #144]	; (8003284 <HAL_RCC_ClockConfig+0x1b0>)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fa:	4b22      	ldr	r3, [pc, #136]	; (8003284 <HAL_RCC_ClockConfig+0x1b0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d001      	beq.n	800320c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e036      	b.n	800327a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b00      	cmp	r3, #0
 8003216:	d008      	beq.n	800322a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003218:	4b1b      	ldr	r3, [pc, #108]	; (8003288 <HAL_RCC_ClockConfig+0x1b4>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	4918      	ldr	r1, [pc, #96]	; (8003288 <HAL_RCC_ClockConfig+0x1b4>)
 8003226:	4313      	orrs	r3, r2
 8003228:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b00      	cmp	r3, #0
 8003234:	d009      	beq.n	800324a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003236:	4b14      	ldr	r3, [pc, #80]	; (8003288 <HAL_RCC_ClockConfig+0x1b4>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	4910      	ldr	r1, [pc, #64]	; (8003288 <HAL_RCC_ClockConfig+0x1b4>)
 8003246:	4313      	orrs	r3, r2
 8003248:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800324a:	f000 f825 	bl	8003298 <HAL_RCC_GetSysClockFreq>
 800324e:	4601      	mov	r1, r0
 8003250:	4b0d      	ldr	r3, [pc, #52]	; (8003288 <HAL_RCC_ClockConfig+0x1b4>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	091b      	lsrs	r3, r3, #4
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	4a0c      	ldr	r2, [pc, #48]	; (800328c <HAL_RCC_ClockConfig+0x1b8>)
 800325c:	5cd3      	ldrb	r3, [r2, r3]
 800325e:	f003 031f 	and.w	r3, r3, #31
 8003262:	fa21 f303 	lsr.w	r3, r1, r3
 8003266:	4a0a      	ldr	r2, [pc, #40]	; (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 8003268:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800326a:	4b0a      	ldr	r3, [pc, #40]	; (8003294 <HAL_RCC_ClockConfig+0x1c0>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f7fd feaa 	bl	8000fc8 <HAL_InitTick>
 8003274:	4603      	mov	r3, r0
 8003276:	72fb      	strb	r3, [r7, #11]

  return status;
 8003278:	7afb      	ldrb	r3, [r7, #11]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	40022000 	.word	0x40022000
 8003288:	40021000 	.word	0x40021000
 800328c:	080094d4 	.word	0x080094d4
 8003290:	2000000c 	.word	0x2000000c
 8003294:	20000000 	.word	0x20000000

08003298 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003298:	b480      	push	{r7}
 800329a:	b089      	sub	sp, #36	; 0x24
 800329c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800329e:	2300      	movs	r3, #0
 80032a0:	61fb      	str	r3, [r7, #28]
 80032a2:	2300      	movs	r3, #0
 80032a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032a6:	4b3d      	ldr	r3, [pc, #244]	; (800339c <HAL_RCC_GetSysClockFreq+0x104>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 030c 	and.w	r3, r3, #12
 80032ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032b0:	4b3a      	ldr	r3, [pc, #232]	; (800339c <HAL_RCC_GetSysClockFreq+0x104>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f003 0303 	and.w	r3, r3, #3
 80032b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d005      	beq.n	80032cc <HAL_RCC_GetSysClockFreq+0x34>
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	2b0c      	cmp	r3, #12
 80032c4:	d121      	bne.n	800330a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d11e      	bne.n	800330a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80032cc:	4b33      	ldr	r3, [pc, #204]	; (800339c <HAL_RCC_GetSysClockFreq+0x104>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0308 	and.w	r3, r3, #8
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d107      	bne.n	80032e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032d8:	4b30      	ldr	r3, [pc, #192]	; (800339c <HAL_RCC_GetSysClockFreq+0x104>)
 80032da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032de:	0a1b      	lsrs	r3, r3, #8
 80032e0:	f003 030f 	and.w	r3, r3, #15
 80032e4:	61fb      	str	r3, [r7, #28]
 80032e6:	e005      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80032e8:	4b2c      	ldr	r3, [pc, #176]	; (800339c <HAL_RCC_GetSysClockFreq+0x104>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	091b      	lsrs	r3, r3, #4
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80032f4:	4a2a      	ldr	r2, [pc, #168]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10d      	bne.n	8003320 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003308:	e00a      	b.n	8003320 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	2b04      	cmp	r3, #4
 800330e:	d102      	bne.n	8003316 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003310:	4b24      	ldr	r3, [pc, #144]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003312:	61bb      	str	r3, [r7, #24]
 8003314:	e004      	b.n	8003320 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	2b08      	cmp	r3, #8
 800331a:	d101      	bne.n	8003320 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800331c:	4b22      	ldr	r3, [pc, #136]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x110>)
 800331e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	2b0c      	cmp	r3, #12
 8003324:	d133      	bne.n	800338e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003326:	4b1d      	ldr	r3, [pc, #116]	; (800339c <HAL_RCC_GetSysClockFreq+0x104>)
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f003 0303 	and.w	r3, r3, #3
 800332e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2b02      	cmp	r3, #2
 8003334:	d002      	beq.n	800333c <HAL_RCC_GetSysClockFreq+0xa4>
 8003336:	2b03      	cmp	r3, #3
 8003338:	d003      	beq.n	8003342 <HAL_RCC_GetSysClockFreq+0xaa>
 800333a:	e005      	b.n	8003348 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800333c:	4b19      	ldr	r3, [pc, #100]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800333e:	617b      	str	r3, [r7, #20]
      break;
 8003340:	e005      	b.n	800334e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003342:	4b19      	ldr	r3, [pc, #100]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003344:	617b      	str	r3, [r7, #20]
      break;
 8003346:	e002      	b.n	800334e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	617b      	str	r3, [r7, #20]
      break;
 800334c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800334e:	4b13      	ldr	r3, [pc, #76]	; (800339c <HAL_RCC_GetSysClockFreq+0x104>)
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	091b      	lsrs	r3, r3, #4
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	3301      	adds	r3, #1
 800335a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800335c:	4b0f      	ldr	r3, [pc, #60]	; (800339c <HAL_RCC_GetSysClockFreq+0x104>)
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	0a1b      	lsrs	r3, r3, #8
 8003362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	fb02 f203 	mul.w	r2, r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003372:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003374:	4b09      	ldr	r3, [pc, #36]	; (800339c <HAL_RCC_GetSysClockFreq+0x104>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	0e5b      	lsrs	r3, r3, #25
 800337a:	f003 0303 	and.w	r3, r3, #3
 800337e:	3301      	adds	r3, #1
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	fbb2 f3f3 	udiv	r3, r2, r3
 800338c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800338e:	69bb      	ldr	r3, [r7, #24]
}
 8003390:	4618      	mov	r0, r3
 8003392:	3724      	adds	r7, #36	; 0x24
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	40021000 	.word	0x40021000
 80033a0:	080094ec 	.word	0x080094ec
 80033a4:	00f42400 	.word	0x00f42400
 80033a8:	007a1200 	.word	0x007a1200

080033ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033b0:	4b03      	ldr	r3, [pc, #12]	; (80033c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033b2:	681b      	ldr	r3, [r3, #0]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	2000000c 	.word	0x2000000c

080033c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80033c8:	f7ff fff0 	bl	80033ac <HAL_RCC_GetHCLKFreq>
 80033cc:	4601      	mov	r1, r0
 80033ce:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	0a1b      	lsrs	r3, r3, #8
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	4a04      	ldr	r2, [pc, #16]	; (80033ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80033da:	5cd3      	ldrb	r3, [r2, r3]
 80033dc:	f003 031f 	and.w	r3, r3, #31
 80033e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40021000 	.word	0x40021000
 80033ec:	080094e4 	.word	0x080094e4

080033f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80033f4:	f7ff ffda 	bl	80033ac <HAL_RCC_GetHCLKFreq>
 80033f8:	4601      	mov	r1, r0
 80033fa:	4b06      	ldr	r3, [pc, #24]	; (8003414 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	0adb      	lsrs	r3, r3, #11
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	4a04      	ldr	r2, [pc, #16]	; (8003418 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003406:	5cd3      	ldrb	r3, [r2, r3]
 8003408:	f003 031f 	and.w	r3, r3, #31
 800340c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003410:	4618      	mov	r0, r3
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40021000 	.word	0x40021000
 8003418:	080094e4 	.word	0x080094e4

0800341c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003424:	2300      	movs	r3, #0
 8003426:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003428:	4b2a      	ldr	r3, [pc, #168]	; (80034d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800342a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003434:	f7ff fa3a 	bl	80028ac <HAL_PWREx_GetVoltageRange>
 8003438:	6178      	str	r0, [r7, #20]
 800343a:	e014      	b.n	8003466 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800343c:	4b25      	ldr	r3, [pc, #148]	; (80034d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800343e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003440:	4a24      	ldr	r2, [pc, #144]	; (80034d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003446:	6593      	str	r3, [r2, #88]	; 0x58
 8003448:	4b22      	ldr	r3, [pc, #136]	; (80034d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800344a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003454:	f7ff fa2a 	bl	80028ac <HAL_PWREx_GetVoltageRange>
 8003458:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800345a:	4b1e      	ldr	r3, [pc, #120]	; (80034d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800345c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345e:	4a1d      	ldr	r2, [pc, #116]	; (80034d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003460:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003464:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800346c:	d10b      	bne.n	8003486 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b80      	cmp	r3, #128	; 0x80
 8003472:	d919      	bls.n	80034a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2ba0      	cmp	r3, #160	; 0xa0
 8003478:	d902      	bls.n	8003480 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800347a:	2302      	movs	r3, #2
 800347c:	613b      	str	r3, [r7, #16]
 800347e:	e013      	b.n	80034a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003480:	2301      	movs	r3, #1
 8003482:	613b      	str	r3, [r7, #16]
 8003484:	e010      	b.n	80034a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b80      	cmp	r3, #128	; 0x80
 800348a:	d902      	bls.n	8003492 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800348c:	2303      	movs	r3, #3
 800348e:	613b      	str	r3, [r7, #16]
 8003490:	e00a      	b.n	80034a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b80      	cmp	r3, #128	; 0x80
 8003496:	d102      	bne.n	800349e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003498:	2302      	movs	r3, #2
 800349a:	613b      	str	r3, [r7, #16]
 800349c:	e004      	b.n	80034a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b70      	cmp	r3, #112	; 0x70
 80034a2:	d101      	bne.n	80034a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034a4:	2301      	movs	r3, #1
 80034a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80034a8:	4b0b      	ldr	r3, [pc, #44]	; (80034d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f023 0207 	bic.w	r2, r3, #7
 80034b0:	4909      	ldr	r1, [pc, #36]	; (80034d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80034b8:	4b07      	ldr	r3, [pc, #28]	; (80034d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d001      	beq.n	80034ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e000      	b.n	80034cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40021000 	.word	0x40021000
 80034d8:	40022000 	.word	0x40022000

080034dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034e4:	2300      	movs	r3, #0
 80034e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034e8:	2300      	movs	r3, #0
 80034ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d03f      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003500:	d01c      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003502:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003506:	d802      	bhi.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00e      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800350c:	e01f      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800350e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003512:	d003      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003514:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003518:	d01c      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800351a:	e018      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800351c:	4b85      	ldr	r3, [pc, #532]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	4a84      	ldr	r2, [pc, #528]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003526:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003528:	e015      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	3304      	adds	r3, #4
 800352e:	2100      	movs	r1, #0
 8003530:	4618      	mov	r0, r3
 8003532:	f000 fab9 	bl	8003aa8 <RCCEx_PLLSAI1_Config>
 8003536:	4603      	mov	r3, r0
 8003538:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800353a:	e00c      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3320      	adds	r3, #32
 8003540:	2100      	movs	r1, #0
 8003542:	4618      	mov	r0, r3
 8003544:	f000 fba0 	bl	8003c88 <RCCEx_PLLSAI2_Config>
 8003548:	4603      	mov	r3, r0
 800354a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800354c:	e003      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	74fb      	strb	r3, [r7, #19]
      break;
 8003552:	e000      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003554:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003556:	7cfb      	ldrb	r3, [r7, #19]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10b      	bne.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800355c:	4b75      	ldr	r3, [pc, #468]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800355e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003562:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800356a:	4972      	ldr	r1, [pc, #456]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800356c:	4313      	orrs	r3, r2
 800356e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003572:	e001      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003574:	7cfb      	ldrb	r3, [r7, #19]
 8003576:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d03f      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003588:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800358c:	d01c      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800358e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003592:	d802      	bhi.n	800359a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00e      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003598:	e01f      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800359a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800359e:	d003      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80035a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035a4:	d01c      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80035a6:	e018      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035a8:	4b62      	ldr	r3, [pc, #392]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	4a61      	ldr	r2, [pc, #388]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035b4:	e015      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3304      	adds	r3, #4
 80035ba:	2100      	movs	r1, #0
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 fa73 	bl	8003aa8 <RCCEx_PLLSAI1_Config>
 80035c2:	4603      	mov	r3, r0
 80035c4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035c6:	e00c      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3320      	adds	r3, #32
 80035cc:	2100      	movs	r1, #0
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 fb5a 	bl	8003c88 <RCCEx_PLLSAI2_Config>
 80035d4:	4603      	mov	r3, r0
 80035d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035d8:	e003      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	74fb      	strb	r3, [r7, #19]
      break;
 80035de:	e000      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80035e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035e2:	7cfb      	ldrb	r3, [r7, #19]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10b      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035e8:	4b52      	ldr	r3, [pc, #328]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035f6:	494f      	ldr	r1, [pc, #316]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80035fe:	e001      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003600:	7cfb      	ldrb	r3, [r7, #19]
 8003602:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 80a0 	beq.w	8003752 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003612:	2300      	movs	r3, #0
 8003614:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003616:	4b47      	ldr	r3, [pc, #284]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003622:	2301      	movs	r3, #1
 8003624:	e000      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003626:	2300      	movs	r3, #0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00d      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800362c:	4b41      	ldr	r3, [pc, #260]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800362e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003630:	4a40      	ldr	r2, [pc, #256]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003636:	6593      	str	r3, [r2, #88]	; 0x58
 8003638:	4b3e      	ldr	r3, [pc, #248]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800363a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003640:	60bb      	str	r3, [r7, #8]
 8003642:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003644:	2301      	movs	r3, #1
 8003646:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003648:	4b3b      	ldr	r3, [pc, #236]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a3a      	ldr	r2, [pc, #232]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800364e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003652:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003654:	f7fd fd04 	bl	8001060 <HAL_GetTick>
 8003658:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800365a:	e009      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800365c:	f7fd fd00 	bl	8001060 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d902      	bls.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	74fb      	strb	r3, [r7, #19]
        break;
 800366e:	e005      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003670:	4b31      	ldr	r3, [pc, #196]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0ef      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 800367c:	7cfb      	ldrb	r3, [r7, #19]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d15c      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003682:	4b2c      	ldr	r3, [pc, #176]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003688:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800368c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d01f      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	429a      	cmp	r2, r3
 800369e:	d019      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036a0:	4b24      	ldr	r3, [pc, #144]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036ac:	4b21      	ldr	r3, [pc, #132]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b2:	4a20      	ldr	r2, [pc, #128]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036bc:	4b1d      	ldr	r3, [pc, #116]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c2:	4a1c      	ldr	r2, [pc, #112]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036cc:	4a19      	ldr	r2, [pc, #100]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d016      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036de:	f7fd fcbf 	bl	8001060 <HAL_GetTick>
 80036e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036e4:	e00b      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036e6:	f7fd fcbb 	bl	8001060 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d902      	bls.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	74fb      	strb	r3, [r7, #19]
            break;
 80036fc:	e006      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036fe:	4b0d      	ldr	r3, [pc, #52]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0ec      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 800370c:	7cfb      	ldrb	r3, [r7, #19]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10c      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003712:	4b08      	ldr	r3, [pc, #32]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003718:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003722:	4904      	ldr	r1, [pc, #16]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003724:	4313      	orrs	r3, r2
 8003726:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800372a:	e009      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800372c:	7cfb      	ldrb	r3, [r7, #19]
 800372e:	74bb      	strb	r3, [r7, #18]
 8003730:	e006      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003732:	bf00      	nop
 8003734:	40021000 	.word	0x40021000
 8003738:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800373c:	7cfb      	ldrb	r3, [r7, #19]
 800373e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003740:	7c7b      	ldrb	r3, [r7, #17]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d105      	bne.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003746:	4b9e      	ldr	r3, [pc, #632]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374a:	4a9d      	ldr	r2, [pc, #628]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800374c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003750:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00a      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800375e:	4b98      	ldr	r3, [pc, #608]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003764:	f023 0203 	bic.w	r2, r3, #3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376c:	4994      	ldr	r1, [pc, #592]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800376e:	4313      	orrs	r3, r2
 8003770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00a      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003780:	4b8f      	ldr	r3, [pc, #572]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003786:	f023 020c 	bic.w	r2, r3, #12
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800378e:	498c      	ldr	r1, [pc, #560]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003790:	4313      	orrs	r3, r2
 8003792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0304 	and.w	r3, r3, #4
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00a      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037a2:	4b87      	ldr	r3, [pc, #540]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b0:	4983      	ldr	r1, [pc, #524]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0308 	and.w	r3, r3, #8
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00a      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037c4:	4b7e      	ldr	r3, [pc, #504]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d2:	497b      	ldr	r1, [pc, #492]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0310 	and.w	r3, r3, #16
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00a      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037e6:	4b76      	ldr	r3, [pc, #472]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f4:	4972      	ldr	r1, [pc, #456]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0320 	and.w	r3, r3, #32
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00a      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003808:	4b6d      	ldr	r3, [pc, #436]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800380a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003816:	496a      	ldr	r1, [pc, #424]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003818:	4313      	orrs	r3, r2
 800381a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00a      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800382a:	4b65      	ldr	r3, [pc, #404]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800382c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003830:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003838:	4961      	ldr	r1, [pc, #388]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800383a:	4313      	orrs	r3, r2
 800383c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00a      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800384c:	4b5c      	ldr	r3, [pc, #368]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800384e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003852:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800385a:	4959      	ldr	r1, [pc, #356]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800385c:	4313      	orrs	r3, r2
 800385e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800386e:	4b54      	ldr	r3, [pc, #336]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003874:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800387c:	4950      	ldr	r1, [pc, #320]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00a      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003890:	4b4b      	ldr	r3, [pc, #300]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003896:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389e:	4948      	ldr	r1, [pc, #288]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038b2:	4b43      	ldr	r3, [pc, #268]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c0:	493f      	ldr	r1, [pc, #252]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d028      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038d4:	4b3a      	ldr	r3, [pc, #232]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038e2:	4937      	ldr	r1, [pc, #220]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038f2:	d106      	bne.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038f4:	4b32      	ldr	r3, [pc, #200]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	4a31      	ldr	r2, [pc, #196]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038fe:	60d3      	str	r3, [r2, #12]
 8003900:	e011      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003906:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800390a:	d10c      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3304      	adds	r3, #4
 8003910:	2101      	movs	r1, #1
 8003912:	4618      	mov	r0, r3
 8003914:	f000 f8c8 	bl	8003aa8 <RCCEx_PLLSAI1_Config>
 8003918:	4603      	mov	r3, r0
 800391a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800391c:	7cfb      	ldrb	r3, [r7, #19]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003922:	7cfb      	ldrb	r3, [r7, #19]
 8003924:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d028      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003932:	4b23      	ldr	r3, [pc, #140]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003938:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003940:	491f      	ldr	r1, [pc, #124]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003950:	d106      	bne.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003952:	4b1b      	ldr	r3, [pc, #108]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	4a1a      	ldr	r2, [pc, #104]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003958:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800395c:	60d3      	str	r3, [r2, #12]
 800395e:	e011      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003964:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003968:	d10c      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	3304      	adds	r3, #4
 800396e:	2101      	movs	r1, #1
 8003970:	4618      	mov	r0, r3
 8003972:	f000 f899 	bl	8003aa8 <RCCEx_PLLSAI1_Config>
 8003976:	4603      	mov	r3, r0
 8003978:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800397a:	7cfb      	ldrb	r3, [r7, #19]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003980:	7cfb      	ldrb	r3, [r7, #19]
 8003982:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d02b      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003990:	4b0b      	ldr	r3, [pc, #44]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003996:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800399e:	4908      	ldr	r1, [pc, #32]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039ae:	d109      	bne.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039b0:	4b03      	ldr	r3, [pc, #12]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	4a02      	ldr	r2, [pc, #8]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039ba:	60d3      	str	r3, [r2, #12]
 80039bc:	e014      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80039be:	bf00      	nop
 80039c0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039cc:	d10c      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	3304      	adds	r3, #4
 80039d2:	2101      	movs	r1, #1
 80039d4:	4618      	mov	r0, r3
 80039d6:	f000 f867 	bl	8003aa8 <RCCEx_PLLSAI1_Config>
 80039da:	4603      	mov	r3, r0
 80039dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039de:	7cfb      	ldrb	r3, [r7, #19]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80039e4:	7cfb      	ldrb	r3, [r7, #19]
 80039e6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d02f      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039f4:	4b2b      	ldr	r3, [pc, #172]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a02:	4928      	ldr	r1, [pc, #160]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a12:	d10d      	bne.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3304      	adds	r3, #4
 8003a18:	2102      	movs	r1, #2
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 f844 	bl	8003aa8 <RCCEx_PLLSAI1_Config>
 8003a20:	4603      	mov	r3, r0
 8003a22:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a24:	7cfb      	ldrb	r3, [r7, #19]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d014      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003a2a:	7cfb      	ldrb	r3, [r7, #19]
 8003a2c:	74bb      	strb	r3, [r7, #18]
 8003a2e:	e011      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a38:	d10c      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	3320      	adds	r3, #32
 8003a3e:	2102      	movs	r1, #2
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 f921 	bl	8003c88 <RCCEx_PLLSAI2_Config>
 8003a46:	4603      	mov	r3, r0
 8003a48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a4a:	7cfb      	ldrb	r3, [r7, #19]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003a50:	7cfb      	ldrb	r3, [r7, #19]
 8003a52:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00a      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a60:	4b10      	ldr	r3, [pc, #64]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a66:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a6e:	490d      	ldr	r1, [pc, #52]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00b      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a82:	4b08      	ldr	r3, [pc, #32]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a92:	4904      	ldr	r1, [pc, #16]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a9a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3718      	adds	r7, #24
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40021000 	.word	0x40021000

08003aa8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ab6:	4b73      	ldr	r3, [pc, #460]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d018      	beq.n	8003af4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003ac2:	4b70      	ldr	r3, [pc, #448]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	f003 0203 	and.w	r2, r3, #3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d10d      	bne.n	8003aee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
       ||
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d009      	beq.n	8003aee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003ada:	4b6a      	ldr	r3, [pc, #424]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	091b      	lsrs	r3, r3, #4
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	1c5a      	adds	r2, r3, #1
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
       ||
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d044      	beq.n	8003b78 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	73fb      	strb	r3, [r7, #15]
 8003af2:	e041      	b.n	8003b78 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d00c      	beq.n	8003b16 <RCCEx_PLLSAI1_Config+0x6e>
 8003afc:	2b03      	cmp	r3, #3
 8003afe:	d013      	beq.n	8003b28 <RCCEx_PLLSAI1_Config+0x80>
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d120      	bne.n	8003b46 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b04:	4b5f      	ldr	r3, [pc, #380]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d11d      	bne.n	8003b4c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b14:	e01a      	b.n	8003b4c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b16:	4b5b      	ldr	r3, [pc, #364]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d116      	bne.n	8003b50 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b26:	e013      	b.n	8003b50 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b28:	4b56      	ldr	r3, [pc, #344]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10f      	bne.n	8003b54 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b34:	4b53      	ldr	r3, [pc, #332]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d109      	bne.n	8003b54 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b44:	e006      	b.n	8003b54 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	73fb      	strb	r3, [r7, #15]
      break;
 8003b4a:	e004      	b.n	8003b56 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003b4c:	bf00      	nop
 8003b4e:	e002      	b.n	8003b56 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003b50:	bf00      	nop
 8003b52:	e000      	b.n	8003b56 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003b54:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10d      	bne.n	8003b78 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b5c:	4b49      	ldr	r3, [pc, #292]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6819      	ldr	r1, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	011b      	lsls	r3, r3, #4
 8003b70:	430b      	orrs	r3, r1
 8003b72:	4944      	ldr	r1, [pc, #272]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d17d      	bne.n	8003c7a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b7e:	4b41      	ldr	r3, [pc, #260]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a40      	ldr	r2, [pc, #256]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b8a:	f7fd fa69 	bl	8001060 <HAL_GetTick>
 8003b8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b90:	e009      	b.n	8003ba6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b92:	f7fd fa65 	bl	8001060 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d902      	bls.n	8003ba6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	73fb      	strb	r3, [r7, #15]
        break;
 8003ba4:	e005      	b.n	8003bb2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ba6:	4b37      	ldr	r3, [pc, #220]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1ef      	bne.n	8003b92 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003bb2:	7bfb      	ldrb	r3, [r7, #15]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d160      	bne.n	8003c7a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d111      	bne.n	8003be2 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bbe:	4b31      	ldr	r3, [pc, #196]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003bc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6892      	ldr	r2, [r2, #8]
 8003bce:	0211      	lsls	r1, r2, #8
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	68d2      	ldr	r2, [r2, #12]
 8003bd4:	0912      	lsrs	r2, r2, #4
 8003bd6:	0452      	lsls	r2, r2, #17
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	492a      	ldr	r1, [pc, #168]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	610b      	str	r3, [r1, #16]
 8003be0:	e027      	b.n	8003c32 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d112      	bne.n	8003c0e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003be8:	4b26      	ldr	r3, [pc, #152]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003bf0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6892      	ldr	r2, [r2, #8]
 8003bf8:	0211      	lsls	r1, r2, #8
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	6912      	ldr	r2, [r2, #16]
 8003bfe:	0852      	lsrs	r2, r2, #1
 8003c00:	3a01      	subs	r2, #1
 8003c02:	0552      	lsls	r2, r2, #21
 8003c04:	430a      	orrs	r2, r1
 8003c06:	491f      	ldr	r1, [pc, #124]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	610b      	str	r3, [r1, #16]
 8003c0c:	e011      	b.n	8003c32 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c0e:	4b1d      	ldr	r3, [pc, #116]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c16:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6892      	ldr	r2, [r2, #8]
 8003c1e:	0211      	lsls	r1, r2, #8
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	6952      	ldr	r2, [r2, #20]
 8003c24:	0852      	lsrs	r2, r2, #1
 8003c26:	3a01      	subs	r2, #1
 8003c28:	0652      	lsls	r2, r2, #25
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	4915      	ldr	r1, [pc, #84]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c32:	4b14      	ldr	r3, [pc, #80]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a13      	ldr	r2, [pc, #76]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c3c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c3e:	f7fd fa0f 	bl	8001060 <HAL_GetTick>
 8003c42:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c44:	e009      	b.n	8003c5a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c46:	f7fd fa0b 	bl	8001060 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d902      	bls.n	8003c5a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	73fb      	strb	r3, [r7, #15]
          break;
 8003c58:	e005      	b.n	8003c66 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c5a:	4b0a      	ldr	r3, [pc, #40]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0ef      	beq.n	8003c46 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003c66:	7bfb      	ldrb	r3, [r7, #15]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d106      	bne.n	8003c7a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c6c:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c6e:	691a      	ldr	r2, [r3, #16]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	4903      	ldr	r1, [pc, #12]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40021000 	.word	0x40021000

08003c88 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c92:	2300      	movs	r3, #0
 8003c94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c96:	4b68      	ldr	r3, [pc, #416]	; (8003e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	f003 0303 	and.w	r3, r3, #3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d018      	beq.n	8003cd4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003ca2:	4b65      	ldr	r3, [pc, #404]	; (8003e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	f003 0203 	and.w	r2, r3, #3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d10d      	bne.n	8003cce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
       ||
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d009      	beq.n	8003cce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003cba:	4b5f      	ldr	r3, [pc, #380]	; (8003e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	091b      	lsrs	r3, r3, #4
 8003cc0:	f003 0307 	and.w	r3, r3, #7
 8003cc4:	1c5a      	adds	r2, r3, #1
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
       ||
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d044      	beq.n	8003d58 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	73fb      	strb	r3, [r7, #15]
 8003cd2:	e041      	b.n	8003d58 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d00c      	beq.n	8003cf6 <RCCEx_PLLSAI2_Config+0x6e>
 8003cdc:	2b03      	cmp	r3, #3
 8003cde:	d013      	beq.n	8003d08 <RCCEx_PLLSAI2_Config+0x80>
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d120      	bne.n	8003d26 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ce4:	4b54      	ldr	r3, [pc, #336]	; (8003e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d11d      	bne.n	8003d2c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cf4:	e01a      	b.n	8003d2c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003cf6:	4b50      	ldr	r3, [pc, #320]	; (8003e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d116      	bne.n	8003d30 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d06:	e013      	b.n	8003d30 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d08:	4b4b      	ldr	r3, [pc, #300]	; (8003e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10f      	bne.n	8003d34 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d14:	4b48      	ldr	r3, [pc, #288]	; (8003e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d109      	bne.n	8003d34 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d24:	e006      	b.n	8003d34 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	73fb      	strb	r3, [r7, #15]
      break;
 8003d2a:	e004      	b.n	8003d36 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003d2c:	bf00      	nop
 8003d2e:	e002      	b.n	8003d36 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003d30:	bf00      	nop
 8003d32:	e000      	b.n	8003d36 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003d34:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d36:	7bfb      	ldrb	r3, [r7, #15]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10d      	bne.n	8003d58 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d3c:	4b3e      	ldr	r3, [pc, #248]	; (8003e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6819      	ldr	r1, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	011b      	lsls	r3, r3, #4
 8003d50:	430b      	orrs	r3, r1
 8003d52:	4939      	ldr	r1, [pc, #228]	; (8003e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d58:	7bfb      	ldrb	r3, [r7, #15]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d167      	bne.n	8003e2e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003d5e:	4b36      	ldr	r3, [pc, #216]	; (8003e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a35      	ldr	r2, [pc, #212]	; (8003e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d6a:	f7fd f979 	bl	8001060 <HAL_GetTick>
 8003d6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d70:	e009      	b.n	8003d86 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d72:	f7fd f975 	bl	8001060 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d902      	bls.n	8003d86 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	73fb      	strb	r3, [r7, #15]
        break;
 8003d84:	e005      	b.n	8003d92 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d86:	4b2c      	ldr	r3, [pc, #176]	; (8003e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1ef      	bne.n	8003d72 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003d92:	7bfb      	ldrb	r3, [r7, #15]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d14a      	bne.n	8003e2e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d111      	bne.n	8003dc2 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d9e:	4b26      	ldr	r3, [pc, #152]	; (8003e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003da6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	6892      	ldr	r2, [r2, #8]
 8003dae:	0211      	lsls	r1, r2, #8
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	68d2      	ldr	r2, [r2, #12]
 8003db4:	0912      	lsrs	r2, r2, #4
 8003db6:	0452      	lsls	r2, r2, #17
 8003db8:	430a      	orrs	r2, r1
 8003dba:	491f      	ldr	r1, [pc, #124]	; (8003e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	614b      	str	r3, [r1, #20]
 8003dc0:	e011      	b.n	8003de6 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003dc2:	4b1d      	ldr	r3, [pc, #116]	; (8003e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003dca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	6892      	ldr	r2, [r2, #8]
 8003dd2:	0211      	lsls	r1, r2, #8
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6912      	ldr	r2, [r2, #16]
 8003dd8:	0852      	lsrs	r2, r2, #1
 8003dda:	3a01      	subs	r2, #1
 8003ddc:	0652      	lsls	r2, r2, #25
 8003dde:	430a      	orrs	r2, r1
 8003de0:	4915      	ldr	r1, [pc, #84]	; (8003e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003de6:	4b14      	ldr	r3, [pc, #80]	; (8003e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a13      	ldr	r2, [pc, #76]	; (8003e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003df0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df2:	f7fd f935 	bl	8001060 <HAL_GetTick>
 8003df6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003df8:	e009      	b.n	8003e0e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003dfa:	f7fd f931 	bl	8001060 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d902      	bls.n	8003e0e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	73fb      	strb	r3, [r7, #15]
          break;
 8003e0c:	e005      	b.n	8003e1a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e0e:	4b0a      	ldr	r3, [pc, #40]	; (8003e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0ef      	beq.n	8003dfa <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003e1a:	7bfb      	ldrb	r3, [r7, #15]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d106      	bne.n	8003e2e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003e20:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e22:	695a      	ldr	r2, [r3, #20]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	4903      	ldr	r1, [pc, #12]	; (8003e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	40021000 	.word	0x40021000

08003e3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e040      	b.n	8003ed0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d106      	bne.n	8003e64 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 ffac 	bl	8004dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2224      	movs	r2, #36	; 0x24
 8003e68:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 0201 	bic.w	r2, r2, #1
 8003e78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f8c0 	bl	8004000 <UART_SetConfig>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d101      	bne.n	8003e8a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e022      	b.n	8003ed0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 fbfc 	bl	8004690 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ea6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689a      	ldr	r2, [r3, #8]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003eb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f042 0201 	orr.w	r2, r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 fc83 	bl	80047d4 <UART_CheckIdleState>
 8003ece:	4603      	mov	r3, r0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3708      	adds	r7, #8
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b08a      	sub	sp, #40	; 0x28
 8003edc:	af02      	add	r7, sp, #8
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	603b      	str	r3, [r7, #0]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eec:	2b20      	cmp	r3, #32
 8003eee:	f040 8081 	bne.w	8003ff4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d002      	beq.n	8003efe <HAL_UART_Transmit+0x26>
 8003ef8:	88fb      	ldrh	r3, [r7, #6]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e079      	b.n	8003ff6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d101      	bne.n	8003f10 <HAL_UART_Transmit+0x38>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e072      	b.n	8003ff6 <HAL_UART_Transmit+0x11e>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2221      	movs	r2, #33	; 0x21
 8003f22:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003f24:	f7fd f89c 	bl	8001060 <HAL_GetTick>
 8003f28:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	88fa      	ldrh	r2, [r7, #6]
 8003f2e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	88fa      	ldrh	r2, [r7, #6]
 8003f36:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f42:	d108      	bne.n	8003f56 <HAL_UART_Transmit+0x7e>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d104      	bne.n	8003f56 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	61bb      	str	r3, [r7, #24]
 8003f54:	e003      	b.n	8003f5e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f5e:	e02d      	b.n	8003fbc <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	2200      	movs	r2, #0
 8003f68:	2180      	movs	r1, #128	; 0x80
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 fc77 	bl	800485e <UART_WaitOnFlagUntilTimeout>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e03d      	b.n	8003ff6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10b      	bne.n	8003f98 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	881a      	ldrh	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f8c:	b292      	uxth	r2, r2
 8003f8e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	3302      	adds	r3, #2
 8003f94:	61bb      	str	r3, [r7, #24]
 8003f96:	e008      	b.n	8003faa <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	781a      	ldrb	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	b292      	uxth	r2, r2
 8003fa2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1cb      	bne.n	8003f60 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	2140      	movs	r1, #64	; 0x40
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 fc43 	bl	800485e <UART_WaitOnFlagUntilTimeout>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e009      	b.n	8003ff6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	e000      	b.n	8003ff6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003ff4:	2302      	movs	r3, #2
  }
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3720      	adds	r7, #32
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
	...

08004000 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004000:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004004:	b088      	sub	sp, #32
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800400a:	2300      	movs	r3, #0
 800400c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 800400e:	2300      	movs	r3, #0
 8004010:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004012:	2300      	movs	r3, #0
 8004014:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	431a      	orrs	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	4313      	orrs	r3, r2
 800402c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	4bac      	ldr	r3, [pc, #688]	; (80042e8 <UART_SetConfig+0x2e8>)
 8004036:	4013      	ands	r3, r2
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6812      	ldr	r2, [r2, #0]
 800403c:	69f9      	ldr	r1, [r7, #28]
 800403e:	430b      	orrs	r3, r1
 8004040:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68da      	ldr	r2, [r3, #12]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4aa2      	ldr	r2, [pc, #648]	; (80042ec <UART_SetConfig+0x2ec>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d004      	beq.n	8004072 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	69fa      	ldr	r2, [r7, #28]
 800406e:	4313      	orrs	r3, r2
 8004070:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	69fa      	ldr	r2, [r7, #28]
 8004082:	430a      	orrs	r2, r1
 8004084:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a99      	ldr	r2, [pc, #612]	; (80042f0 <UART_SetConfig+0x2f0>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d121      	bne.n	80040d4 <UART_SetConfig+0xd4>
 8004090:	4b98      	ldr	r3, [pc, #608]	; (80042f4 <UART_SetConfig+0x2f4>)
 8004092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004096:	f003 0303 	and.w	r3, r3, #3
 800409a:	2b03      	cmp	r3, #3
 800409c:	d816      	bhi.n	80040cc <UART_SetConfig+0xcc>
 800409e:	a201      	add	r2, pc, #4	; (adr r2, 80040a4 <UART_SetConfig+0xa4>)
 80040a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a4:	080040b5 	.word	0x080040b5
 80040a8:	080040c1 	.word	0x080040c1
 80040ac:	080040bb 	.word	0x080040bb
 80040b0:	080040c7 	.word	0x080040c7
 80040b4:	2301      	movs	r3, #1
 80040b6:	76fb      	strb	r3, [r7, #27]
 80040b8:	e0e8      	b.n	800428c <UART_SetConfig+0x28c>
 80040ba:	2302      	movs	r3, #2
 80040bc:	76fb      	strb	r3, [r7, #27]
 80040be:	e0e5      	b.n	800428c <UART_SetConfig+0x28c>
 80040c0:	2304      	movs	r3, #4
 80040c2:	76fb      	strb	r3, [r7, #27]
 80040c4:	e0e2      	b.n	800428c <UART_SetConfig+0x28c>
 80040c6:	2308      	movs	r3, #8
 80040c8:	76fb      	strb	r3, [r7, #27]
 80040ca:	e0df      	b.n	800428c <UART_SetConfig+0x28c>
 80040cc:	2310      	movs	r3, #16
 80040ce:	76fb      	strb	r3, [r7, #27]
 80040d0:	bf00      	nop
 80040d2:	e0db      	b.n	800428c <UART_SetConfig+0x28c>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a87      	ldr	r2, [pc, #540]	; (80042f8 <UART_SetConfig+0x2f8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d134      	bne.n	8004148 <UART_SetConfig+0x148>
 80040de:	4b85      	ldr	r3, [pc, #532]	; (80042f4 <UART_SetConfig+0x2f4>)
 80040e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e4:	f003 030c 	and.w	r3, r3, #12
 80040e8:	2b0c      	cmp	r3, #12
 80040ea:	d829      	bhi.n	8004140 <UART_SetConfig+0x140>
 80040ec:	a201      	add	r2, pc, #4	; (adr r2, 80040f4 <UART_SetConfig+0xf4>)
 80040ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f2:	bf00      	nop
 80040f4:	08004129 	.word	0x08004129
 80040f8:	08004141 	.word	0x08004141
 80040fc:	08004141 	.word	0x08004141
 8004100:	08004141 	.word	0x08004141
 8004104:	08004135 	.word	0x08004135
 8004108:	08004141 	.word	0x08004141
 800410c:	08004141 	.word	0x08004141
 8004110:	08004141 	.word	0x08004141
 8004114:	0800412f 	.word	0x0800412f
 8004118:	08004141 	.word	0x08004141
 800411c:	08004141 	.word	0x08004141
 8004120:	08004141 	.word	0x08004141
 8004124:	0800413b 	.word	0x0800413b
 8004128:	2300      	movs	r3, #0
 800412a:	76fb      	strb	r3, [r7, #27]
 800412c:	e0ae      	b.n	800428c <UART_SetConfig+0x28c>
 800412e:	2302      	movs	r3, #2
 8004130:	76fb      	strb	r3, [r7, #27]
 8004132:	e0ab      	b.n	800428c <UART_SetConfig+0x28c>
 8004134:	2304      	movs	r3, #4
 8004136:	76fb      	strb	r3, [r7, #27]
 8004138:	e0a8      	b.n	800428c <UART_SetConfig+0x28c>
 800413a:	2308      	movs	r3, #8
 800413c:	76fb      	strb	r3, [r7, #27]
 800413e:	e0a5      	b.n	800428c <UART_SetConfig+0x28c>
 8004140:	2310      	movs	r3, #16
 8004142:	76fb      	strb	r3, [r7, #27]
 8004144:	bf00      	nop
 8004146:	e0a1      	b.n	800428c <UART_SetConfig+0x28c>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a6b      	ldr	r2, [pc, #428]	; (80042fc <UART_SetConfig+0x2fc>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d120      	bne.n	8004194 <UART_SetConfig+0x194>
 8004152:	4b68      	ldr	r3, [pc, #416]	; (80042f4 <UART_SetConfig+0x2f4>)
 8004154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004158:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800415c:	2b10      	cmp	r3, #16
 800415e:	d00f      	beq.n	8004180 <UART_SetConfig+0x180>
 8004160:	2b10      	cmp	r3, #16
 8004162:	d802      	bhi.n	800416a <UART_SetConfig+0x16a>
 8004164:	2b00      	cmp	r3, #0
 8004166:	d005      	beq.n	8004174 <UART_SetConfig+0x174>
 8004168:	e010      	b.n	800418c <UART_SetConfig+0x18c>
 800416a:	2b20      	cmp	r3, #32
 800416c:	d005      	beq.n	800417a <UART_SetConfig+0x17a>
 800416e:	2b30      	cmp	r3, #48	; 0x30
 8004170:	d009      	beq.n	8004186 <UART_SetConfig+0x186>
 8004172:	e00b      	b.n	800418c <UART_SetConfig+0x18c>
 8004174:	2300      	movs	r3, #0
 8004176:	76fb      	strb	r3, [r7, #27]
 8004178:	e088      	b.n	800428c <UART_SetConfig+0x28c>
 800417a:	2302      	movs	r3, #2
 800417c:	76fb      	strb	r3, [r7, #27]
 800417e:	e085      	b.n	800428c <UART_SetConfig+0x28c>
 8004180:	2304      	movs	r3, #4
 8004182:	76fb      	strb	r3, [r7, #27]
 8004184:	e082      	b.n	800428c <UART_SetConfig+0x28c>
 8004186:	2308      	movs	r3, #8
 8004188:	76fb      	strb	r3, [r7, #27]
 800418a:	e07f      	b.n	800428c <UART_SetConfig+0x28c>
 800418c:	2310      	movs	r3, #16
 800418e:	76fb      	strb	r3, [r7, #27]
 8004190:	bf00      	nop
 8004192:	e07b      	b.n	800428c <UART_SetConfig+0x28c>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a59      	ldr	r2, [pc, #356]	; (8004300 <UART_SetConfig+0x300>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d120      	bne.n	80041e0 <UART_SetConfig+0x1e0>
 800419e:	4b55      	ldr	r3, [pc, #340]	; (80042f4 <UART_SetConfig+0x2f4>)
 80041a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80041a8:	2b40      	cmp	r3, #64	; 0x40
 80041aa:	d00f      	beq.n	80041cc <UART_SetConfig+0x1cc>
 80041ac:	2b40      	cmp	r3, #64	; 0x40
 80041ae:	d802      	bhi.n	80041b6 <UART_SetConfig+0x1b6>
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d005      	beq.n	80041c0 <UART_SetConfig+0x1c0>
 80041b4:	e010      	b.n	80041d8 <UART_SetConfig+0x1d8>
 80041b6:	2b80      	cmp	r3, #128	; 0x80
 80041b8:	d005      	beq.n	80041c6 <UART_SetConfig+0x1c6>
 80041ba:	2bc0      	cmp	r3, #192	; 0xc0
 80041bc:	d009      	beq.n	80041d2 <UART_SetConfig+0x1d2>
 80041be:	e00b      	b.n	80041d8 <UART_SetConfig+0x1d8>
 80041c0:	2300      	movs	r3, #0
 80041c2:	76fb      	strb	r3, [r7, #27]
 80041c4:	e062      	b.n	800428c <UART_SetConfig+0x28c>
 80041c6:	2302      	movs	r3, #2
 80041c8:	76fb      	strb	r3, [r7, #27]
 80041ca:	e05f      	b.n	800428c <UART_SetConfig+0x28c>
 80041cc:	2304      	movs	r3, #4
 80041ce:	76fb      	strb	r3, [r7, #27]
 80041d0:	e05c      	b.n	800428c <UART_SetConfig+0x28c>
 80041d2:	2308      	movs	r3, #8
 80041d4:	76fb      	strb	r3, [r7, #27]
 80041d6:	e059      	b.n	800428c <UART_SetConfig+0x28c>
 80041d8:	2310      	movs	r3, #16
 80041da:	76fb      	strb	r3, [r7, #27]
 80041dc:	bf00      	nop
 80041de:	e055      	b.n	800428c <UART_SetConfig+0x28c>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a47      	ldr	r2, [pc, #284]	; (8004304 <UART_SetConfig+0x304>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d124      	bne.n	8004234 <UART_SetConfig+0x234>
 80041ea:	4b42      	ldr	r3, [pc, #264]	; (80042f4 <UART_SetConfig+0x2f4>)
 80041ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041f8:	d012      	beq.n	8004220 <UART_SetConfig+0x220>
 80041fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041fe:	d802      	bhi.n	8004206 <UART_SetConfig+0x206>
 8004200:	2b00      	cmp	r3, #0
 8004202:	d007      	beq.n	8004214 <UART_SetConfig+0x214>
 8004204:	e012      	b.n	800422c <UART_SetConfig+0x22c>
 8004206:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800420a:	d006      	beq.n	800421a <UART_SetConfig+0x21a>
 800420c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004210:	d009      	beq.n	8004226 <UART_SetConfig+0x226>
 8004212:	e00b      	b.n	800422c <UART_SetConfig+0x22c>
 8004214:	2300      	movs	r3, #0
 8004216:	76fb      	strb	r3, [r7, #27]
 8004218:	e038      	b.n	800428c <UART_SetConfig+0x28c>
 800421a:	2302      	movs	r3, #2
 800421c:	76fb      	strb	r3, [r7, #27]
 800421e:	e035      	b.n	800428c <UART_SetConfig+0x28c>
 8004220:	2304      	movs	r3, #4
 8004222:	76fb      	strb	r3, [r7, #27]
 8004224:	e032      	b.n	800428c <UART_SetConfig+0x28c>
 8004226:	2308      	movs	r3, #8
 8004228:	76fb      	strb	r3, [r7, #27]
 800422a:	e02f      	b.n	800428c <UART_SetConfig+0x28c>
 800422c:	2310      	movs	r3, #16
 800422e:	76fb      	strb	r3, [r7, #27]
 8004230:	bf00      	nop
 8004232:	e02b      	b.n	800428c <UART_SetConfig+0x28c>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a2c      	ldr	r2, [pc, #176]	; (80042ec <UART_SetConfig+0x2ec>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d124      	bne.n	8004288 <UART_SetConfig+0x288>
 800423e:	4b2d      	ldr	r3, [pc, #180]	; (80042f4 <UART_SetConfig+0x2f4>)
 8004240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004244:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800424c:	d012      	beq.n	8004274 <UART_SetConfig+0x274>
 800424e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004252:	d802      	bhi.n	800425a <UART_SetConfig+0x25a>
 8004254:	2b00      	cmp	r3, #0
 8004256:	d007      	beq.n	8004268 <UART_SetConfig+0x268>
 8004258:	e012      	b.n	8004280 <UART_SetConfig+0x280>
 800425a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800425e:	d006      	beq.n	800426e <UART_SetConfig+0x26e>
 8004260:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004264:	d009      	beq.n	800427a <UART_SetConfig+0x27a>
 8004266:	e00b      	b.n	8004280 <UART_SetConfig+0x280>
 8004268:	2300      	movs	r3, #0
 800426a:	76fb      	strb	r3, [r7, #27]
 800426c:	e00e      	b.n	800428c <UART_SetConfig+0x28c>
 800426e:	2302      	movs	r3, #2
 8004270:	76fb      	strb	r3, [r7, #27]
 8004272:	e00b      	b.n	800428c <UART_SetConfig+0x28c>
 8004274:	2304      	movs	r3, #4
 8004276:	76fb      	strb	r3, [r7, #27]
 8004278:	e008      	b.n	800428c <UART_SetConfig+0x28c>
 800427a:	2308      	movs	r3, #8
 800427c:	76fb      	strb	r3, [r7, #27]
 800427e:	e005      	b.n	800428c <UART_SetConfig+0x28c>
 8004280:	2310      	movs	r3, #16
 8004282:	76fb      	strb	r3, [r7, #27]
 8004284:	bf00      	nop
 8004286:	e001      	b.n	800428c <UART_SetConfig+0x28c>
 8004288:	2310      	movs	r3, #16
 800428a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a16      	ldr	r2, [pc, #88]	; (80042ec <UART_SetConfig+0x2ec>)
 8004292:	4293      	cmp	r3, r2
 8004294:	f040 80fa 	bne.w	800448c <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004298:	7efb      	ldrb	r3, [r7, #27]
 800429a:	2b08      	cmp	r3, #8
 800429c:	d836      	bhi.n	800430c <UART_SetConfig+0x30c>
 800429e:	a201      	add	r2, pc, #4	; (adr r2, 80042a4 <UART_SetConfig+0x2a4>)
 80042a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a4:	080042c9 	.word	0x080042c9
 80042a8:	0800430d 	.word	0x0800430d
 80042ac:	080042d1 	.word	0x080042d1
 80042b0:	0800430d 	.word	0x0800430d
 80042b4:	080042d7 	.word	0x080042d7
 80042b8:	0800430d 	.word	0x0800430d
 80042bc:	0800430d 	.word	0x0800430d
 80042c0:	0800430d 	.word	0x0800430d
 80042c4:	080042df 	.word	0x080042df
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80042c8:	f7ff f87c 	bl	80033c4 <HAL_RCC_GetPCLK1Freq>
 80042cc:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80042ce:	e020      	b.n	8004312 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80042d0:	4b0d      	ldr	r3, [pc, #52]	; (8004308 <UART_SetConfig+0x308>)
 80042d2:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80042d4:	e01d      	b.n	8004312 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80042d6:	f7fe ffdf 	bl	8003298 <HAL_RCC_GetSysClockFreq>
 80042da:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80042dc:	e019      	b.n	8004312 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80042de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042e2:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80042e4:	e015      	b.n	8004312 <UART_SetConfig+0x312>
 80042e6:	bf00      	nop
 80042e8:	efff69f3 	.word	0xefff69f3
 80042ec:	40008000 	.word	0x40008000
 80042f0:	40013800 	.word	0x40013800
 80042f4:	40021000 	.word	0x40021000
 80042f8:	40004400 	.word	0x40004400
 80042fc:	40004800 	.word	0x40004800
 8004300:	40004c00 	.word	0x40004c00
 8004304:	40005000 	.word	0x40005000
 8004308:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	74fb      	strb	r3, [r7, #19]
        break;
 8004310:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 81ac 	beq.w	8004672 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	4613      	mov	r3, r2
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	4413      	add	r3, r2
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	429a      	cmp	r2, r3
 8004328:	d305      	bcc.n	8004336 <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	429a      	cmp	r2, r3
 8004334:	d902      	bls.n	800433c <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	74fb      	strb	r3, [r7, #19]
 800433a:	e19a      	b.n	8004672 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 800433c:	7efb      	ldrb	r3, [r7, #27]
 800433e:	2b08      	cmp	r3, #8
 8004340:	f200 8091 	bhi.w	8004466 <UART_SetConfig+0x466>
 8004344:	a201      	add	r2, pc, #4	; (adr r2, 800434c <UART_SetConfig+0x34c>)
 8004346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434a:	bf00      	nop
 800434c:	08004371 	.word	0x08004371
 8004350:	08004467 	.word	0x08004467
 8004354:	080043bd 	.word	0x080043bd
 8004358:	08004467 	.word	0x08004467
 800435c:	080043f1 	.word	0x080043f1
 8004360:	08004467 	.word	0x08004467
 8004364:	08004467 	.word	0x08004467
 8004368:	08004467 	.word	0x08004467
 800436c:	0800443d 	.word	0x0800443d
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004370:	f7ff f828 	bl	80033c4 <HAL_RCC_GetPCLK1Freq>
 8004374:	4603      	mov	r3, r0
 8004376:	4619      	mov	r1, r3
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	f04f 0300 	mov.w	r3, #0
 8004380:	f04f 0400 	mov.w	r4, #0
 8004384:	0214      	lsls	r4, r2, #8
 8004386:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800438a:	020b      	lsls	r3, r1, #8
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6852      	ldr	r2, [r2, #4]
 8004390:	0852      	lsrs	r2, r2, #1
 8004392:	4611      	mov	r1, r2
 8004394:	f04f 0200 	mov.w	r2, #0
 8004398:	eb13 0b01 	adds.w	fp, r3, r1
 800439c:	eb44 0c02 	adc.w	ip, r4, r2
 80043a0:	4658      	mov	r0, fp
 80043a2:	4661      	mov	r1, ip
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f04f 0400 	mov.w	r4, #0
 80043ac:	461a      	mov	r2, r3
 80043ae:	4623      	mov	r3, r4
 80043b0:	f7fc fc6a 	bl	8000c88 <__aeabi_uldivmod>
 80043b4:	4603      	mov	r3, r0
 80043b6:	460c      	mov	r4, r1
 80043b8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80043ba:	e057      	b.n	800446c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	085b      	lsrs	r3, r3, #1
 80043c2:	f04f 0400 	mov.w	r4, #0
 80043c6:	49b1      	ldr	r1, [pc, #708]	; (800468c <UART_SetConfig+0x68c>)
 80043c8:	f04f 0200 	mov.w	r2, #0
 80043cc:	eb13 0b01 	adds.w	fp, r3, r1
 80043d0:	eb44 0c02 	adc.w	ip, r4, r2
 80043d4:	4658      	mov	r0, fp
 80043d6:	4661      	mov	r1, ip
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f04f 0400 	mov.w	r4, #0
 80043e0:	461a      	mov	r2, r3
 80043e2:	4623      	mov	r3, r4
 80043e4:	f7fc fc50 	bl	8000c88 <__aeabi_uldivmod>
 80043e8:	4603      	mov	r3, r0
 80043ea:	460c      	mov	r4, r1
 80043ec:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80043ee:	e03d      	b.n	800446c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80043f0:	f7fe ff52 	bl	8003298 <HAL_RCC_GetSysClockFreq>
 80043f4:	4603      	mov	r3, r0
 80043f6:	4619      	mov	r1, r3
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	f04f 0300 	mov.w	r3, #0
 8004400:	f04f 0400 	mov.w	r4, #0
 8004404:	0214      	lsls	r4, r2, #8
 8004406:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800440a:	020b      	lsls	r3, r1, #8
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6852      	ldr	r2, [r2, #4]
 8004410:	0852      	lsrs	r2, r2, #1
 8004412:	4611      	mov	r1, r2
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	eb13 0b01 	adds.w	fp, r3, r1
 800441c:	eb44 0c02 	adc.w	ip, r4, r2
 8004420:	4658      	mov	r0, fp
 8004422:	4661      	mov	r1, ip
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f04f 0400 	mov.w	r4, #0
 800442c:	461a      	mov	r2, r3
 800442e:	4623      	mov	r3, r4
 8004430:	f7fc fc2a 	bl	8000c88 <__aeabi_uldivmod>
 8004434:	4603      	mov	r3, r0
 8004436:	460c      	mov	r4, r1
 8004438:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800443a:	e017      	b.n	800446c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	085b      	lsrs	r3, r3, #1
 8004442:	f04f 0400 	mov.w	r4, #0
 8004446:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800444a:	f144 0100 	adc.w	r1, r4, #0
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f04f 0400 	mov.w	r4, #0
 8004456:	461a      	mov	r2, r3
 8004458:	4623      	mov	r3, r4
 800445a:	f7fc fc15 	bl	8000c88 <__aeabi_uldivmod>
 800445e:	4603      	mov	r3, r0
 8004460:	460c      	mov	r4, r1
 8004462:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004464:	e002      	b.n	800446c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	74fb      	strb	r3, [r7, #19]
            break;
 800446a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004472:	d308      	bcc.n	8004486 <UART_SetConfig+0x486>
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800447a:	d204      	bcs.n	8004486 <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	60da      	str	r2, [r3, #12]
 8004484:	e0f5      	b.n	8004672 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	74fb      	strb	r3, [r7, #19]
 800448a:	e0f2      	b.n	8004672 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	69db      	ldr	r3, [r3, #28]
 8004490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004494:	d17f      	bne.n	8004596 <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8004496:	7efb      	ldrb	r3, [r7, #27]
 8004498:	2b08      	cmp	r3, #8
 800449a:	d85c      	bhi.n	8004556 <UART_SetConfig+0x556>
 800449c:	a201      	add	r2, pc, #4	; (adr r2, 80044a4 <UART_SetConfig+0x4a4>)
 800449e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a2:	bf00      	nop
 80044a4:	080044c9 	.word	0x080044c9
 80044a8:	080044e7 	.word	0x080044e7
 80044ac:	08004505 	.word	0x08004505
 80044b0:	08004557 	.word	0x08004557
 80044b4:	08004521 	.word	0x08004521
 80044b8:	08004557 	.word	0x08004557
 80044bc:	08004557 	.word	0x08004557
 80044c0:	08004557 	.word	0x08004557
 80044c4:	0800453f 	.word	0x0800453f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80044c8:	f7fe ff7c 	bl	80033c4 <HAL_RCC_GetPCLK1Freq>
 80044cc:	4603      	mov	r3, r0
 80044ce:	005a      	lsls	r2, r3, #1
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	085b      	lsrs	r3, r3, #1
 80044d6:	441a      	add	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80044e4:	e03a      	b.n	800455c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80044e6:	f7fe ff83 	bl	80033f0 <HAL_RCC_GetPCLK2Freq>
 80044ea:	4603      	mov	r3, r0
 80044ec:	005a      	lsls	r2, r3, #1
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	085b      	lsrs	r3, r3, #1
 80044f4:	441a      	add	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80044fe:	b29b      	uxth	r3, r3
 8004500:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004502:	e02b      	b.n	800455c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	085b      	lsrs	r3, r3, #1
 800450a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800450e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	6852      	ldr	r2, [r2, #4]
 8004516:	fbb3 f3f2 	udiv	r3, r3, r2
 800451a:	b29b      	uxth	r3, r3
 800451c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800451e:	e01d      	b.n	800455c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004520:	f7fe feba 	bl	8003298 <HAL_RCC_GetSysClockFreq>
 8004524:	4603      	mov	r3, r0
 8004526:	005a      	lsls	r2, r3, #1
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	085b      	lsrs	r3, r3, #1
 800452e:	441a      	add	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	fbb2 f3f3 	udiv	r3, r2, r3
 8004538:	b29b      	uxth	r3, r3
 800453a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800453c:	e00e      	b.n	800455c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	085b      	lsrs	r3, r3, #1
 8004544:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004550:	b29b      	uxth	r3, r3
 8004552:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004554:	e002      	b.n	800455c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	74fb      	strb	r3, [r7, #19]
        break;
 800455a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	2b0f      	cmp	r3, #15
 8004560:	d916      	bls.n	8004590 <UART_SetConfig+0x590>
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004568:	d212      	bcs.n	8004590 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	b29b      	uxth	r3, r3
 800456e:	f023 030f 	bic.w	r3, r3, #15
 8004572:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	085b      	lsrs	r3, r3, #1
 8004578:	b29b      	uxth	r3, r3
 800457a:	f003 0307 	and.w	r3, r3, #7
 800457e:	b29a      	uxth	r2, r3
 8004580:	897b      	ldrh	r3, [r7, #10]
 8004582:	4313      	orrs	r3, r2
 8004584:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	897a      	ldrh	r2, [r7, #10]
 800458c:	60da      	str	r2, [r3, #12]
 800458e:	e070      	b.n	8004672 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	74fb      	strb	r3, [r7, #19]
 8004594:	e06d      	b.n	8004672 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8004596:	7efb      	ldrb	r3, [r7, #27]
 8004598:	2b08      	cmp	r3, #8
 800459a:	d859      	bhi.n	8004650 <UART_SetConfig+0x650>
 800459c:	a201      	add	r2, pc, #4	; (adr r2, 80045a4 <UART_SetConfig+0x5a4>)
 800459e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a2:	bf00      	nop
 80045a4:	080045c9 	.word	0x080045c9
 80045a8:	080045e5 	.word	0x080045e5
 80045ac:	08004601 	.word	0x08004601
 80045b0:	08004651 	.word	0x08004651
 80045b4:	0800461d 	.word	0x0800461d
 80045b8:	08004651 	.word	0x08004651
 80045bc:	08004651 	.word	0x08004651
 80045c0:	08004651 	.word	0x08004651
 80045c4:	08004639 	.word	0x08004639
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80045c8:	f7fe fefc 	bl	80033c4 <HAL_RCC_GetPCLK1Freq>
 80045cc:	4602      	mov	r2, r0
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	085b      	lsrs	r3, r3, #1
 80045d4:	441a      	add	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	fbb2 f3f3 	udiv	r3, r2, r3
 80045de:	b29b      	uxth	r3, r3
 80045e0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80045e2:	e038      	b.n	8004656 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80045e4:	f7fe ff04 	bl	80033f0 <HAL_RCC_GetPCLK2Freq>
 80045e8:	4602      	mov	r2, r0
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	085b      	lsrs	r3, r3, #1
 80045f0:	441a      	add	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80045fe:	e02a      	b.n	8004656 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	085b      	lsrs	r3, r3, #1
 8004606:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800460a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6852      	ldr	r2, [r2, #4]
 8004612:	fbb3 f3f2 	udiv	r3, r3, r2
 8004616:	b29b      	uxth	r3, r3
 8004618:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800461a:	e01c      	b.n	8004656 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800461c:	f7fe fe3c 	bl	8003298 <HAL_RCC_GetSysClockFreq>
 8004620:	4602      	mov	r2, r0
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	085b      	lsrs	r3, r3, #1
 8004628:	441a      	add	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004632:	b29b      	uxth	r3, r3
 8004634:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004636:	e00e      	b.n	8004656 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	085b      	lsrs	r3, r3, #1
 800463e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	fbb2 f3f3 	udiv	r3, r2, r3
 800464a:	b29b      	uxth	r3, r3
 800464c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800464e:	e002      	b.n	8004656 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	74fb      	strb	r3, [r7, #19]
        break;
 8004654:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	2b0f      	cmp	r3, #15
 800465a:	d908      	bls.n	800466e <UART_SetConfig+0x66e>
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004662:	d204      	bcs.n	800466e <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	60da      	str	r2, [r3, #12]
 800466c:	e001      	b.n	8004672 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800467e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3720      	adds	r7, #32
 8004684:	46bd      	mov	sp, r7
 8004686:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800468a:	bf00      	nop
 800468c:	f4240000 	.word	0xf4240000

08004690 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00a      	beq.n	80046ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	f003 0304 	and.w	r3, r3, #4
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004702:	f003 0308 	and.w	r3, r3, #8
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	430a      	orrs	r2, r1
 800471e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	f003 0310 	and.w	r3, r3, #16
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00a      	beq.n	8004742 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	f003 0320 	and.w	r3, r3, #32
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00a      	beq.n	8004764 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476c:	2b00      	cmp	r3, #0
 800476e:	d01a      	beq.n	80047a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	430a      	orrs	r2, r1
 8004784:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800478e:	d10a      	bne.n	80047a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00a      	beq.n	80047c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	605a      	str	r2, [r3, #4]
  }
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af02      	add	r7, sp, #8
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80047e2:	f7fc fc3d 	bl	8001060 <HAL_GetTick>
 80047e6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0308 	and.w	r3, r3, #8
 80047f2:	2b08      	cmp	r3, #8
 80047f4:	d10e      	bne.n	8004814 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f82a 	bl	800485e <UART_WaitOnFlagUntilTimeout>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e020      	b.n	8004856 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0304 	and.w	r3, r3, #4
 800481e:	2b04      	cmp	r3, #4
 8004820:	d10e      	bne.n	8004840 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004822:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 f814 	bl	800485e <UART_WaitOnFlagUntilTimeout>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e00a      	b.n	8004856 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2220      	movs	r2, #32
 8004844:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2220      	movs	r2, #32
 800484a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b084      	sub	sp, #16
 8004862:	af00      	add	r7, sp, #0
 8004864:	60f8      	str	r0, [r7, #12]
 8004866:	60b9      	str	r1, [r7, #8]
 8004868:	603b      	str	r3, [r7, #0]
 800486a:	4613      	mov	r3, r2
 800486c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800486e:	e02a      	b.n	80048c6 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004876:	d026      	beq.n	80048c6 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004878:	f7fc fbf2 	bl	8001060 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	429a      	cmp	r2, r3
 8004886:	d302      	bcc.n	800488e <UART_WaitOnFlagUntilTimeout+0x30>
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d11b      	bne.n	80048c6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800489c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 0201 	bic.w	r2, r2, #1
 80048ac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2220      	movs	r2, #32
 80048b2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2220      	movs	r2, #32
 80048b8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e00f      	b.n	80048e6 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	69da      	ldr	r2, [r3, #28]
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	4013      	ands	r3, r2
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	bf0c      	ite	eq
 80048d6:	2301      	moveq	r3, #1
 80048d8:	2300      	movne	r3, #0
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	461a      	mov	r2, r3
 80048de:	79fb      	ldrb	r3, [r7, #7]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d0c5      	beq.n	8004870 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
	...

080048f0 <__io_putchar>:
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
int maxADC = 4031;
int __io_putchar(int ch)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	733b      	strb	r3, [r7, #12]
 HAL_UART_Transmit(&huart2, &*c, 1, 10);
 80048fe:	f107 010c 	add.w	r1, r7, #12
 8004902:	230a      	movs	r3, #10
 8004904:	2201      	movs	r2, #1
 8004906:	4804      	ldr	r0, [pc, #16]	; (8004918 <__io_putchar+0x28>)
 8004908:	f7ff fae6 	bl	8003ed8 <HAL_UART_Transmit>
 return ch;
 800490c:	687b      	ldr	r3, [r7, #4]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	20000270 	.word	0x20000270

0800491c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004922:	f7fc fb31 	bl	8000f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004926:	f000 f83b 	bl	80049a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800492a:	f000 f969 	bl	8004c00 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800492e:	f000 f937 	bl	8004ba0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8004932:	f000 f8bd 	bl	8004ab0 <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_ADC_Start(&hadc1);
 8004936:	4816      	ldr	r0, [pc, #88]	; (8004990 <main+0x74>)
 8004938:	f7fc feea 	bl	8001710 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 800493c:	2164      	movs	r1, #100	; 0x64
 800493e:	4814      	ldr	r0, [pc, #80]	; (8004990 <main+0x74>)
 8004940:	f7fc ffa0 	bl	8001884 <HAL_ADC_PollForConversion>
	  //wait for conversion process to finish before getting value
	  uint32_t adcValue;
	  adcValue = HAL_ADC_GetValue(&hadc1);
 8004944:	4812      	ldr	r0, [pc, #72]	; (8004990 <main+0x74>)
 8004946:	f7fd f86d 	bl	8001a24 <HAL_ADC_GetValue>
 800494a:	6078      	str	r0, [r7, #4]
	  int adcDigit = ((float) adcValue / (float) maxADC) * 4;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	ee07 3a90 	vmov	s15, r3
 8004952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004956:	4b0f      	ldr	r3, [pc, #60]	; (8004994 <main+0x78>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	ee07 3a90 	vmov	s15, r3
 800495e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004962:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004966:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800496a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800496e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004972:	ee17 3a90 	vmov	r3, s15
 8004976:	603b      	str	r3, [r7, #0]
	  printf("test");
 8004978:	4807      	ldr	r0, [pc, #28]	; (8004998 <main+0x7c>)
 800497a:	f001 f9f9 	bl	8005d70 <iprintf>
	  printf("%d", adcDigit);
 800497e:	6839      	ldr	r1, [r7, #0]
 8004980:	4806      	ldr	r0, [pc, #24]	; (800499c <main+0x80>)
 8004982:	f001 f9f5 	bl	8005d70 <iprintf>
	  /*char adcVal[4] = {0};
  	  sprintf(adcVal, "%u", adcValue);
  	  _write(0, (adcVal), 4);
  	  _write(0, "\n", 1);*/
	  HAL_Delay(100);
 8004986:	2064      	movs	r0, #100	; 0x64
 8004988:	f7fc fb76 	bl	8001078 <HAL_Delay>
  {
 800498c:	e7d3      	b.n	8004936 <main+0x1a>
 800498e:	bf00      	nop
 8004990:	2000020c 	.word	0x2000020c
 8004994:	20000008 	.word	0x20000008
 8004998:	080094c8 	.word	0x080094c8
 800499c:	080094d0 	.word	0x080094d0

080049a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b0b8      	sub	sp, #224	; 0xe0
 80049a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80049a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80049aa:	2244      	movs	r2, #68	; 0x44
 80049ac:	2100      	movs	r1, #0
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 fb98 	bl	80050e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80049b4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]
 80049bc:	605a      	str	r2, [r3, #4]
 80049be:	609a      	str	r2, [r3, #8]
 80049c0:	60da      	str	r2, [r3, #12]
 80049c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80049c4:	463b      	mov	r3, r7
 80049c6:	2288      	movs	r2, #136	; 0x88
 80049c8:	2100      	movs	r1, #0
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 fb8a 	bl	80050e4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80049d0:	2302      	movs	r3, #2
 80049d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80049d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80049de:	2310      	movs	r3, #16
 80049e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80049e4:	2302      	movs	r3, #2
 80049e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80049ea:	2302      	movs	r3, #2
 80049ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80049f0:	2301      	movs	r3, #1
 80049f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80049f6:	230a      	movs	r3, #10
 80049f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80049fc:	2307      	movs	r3, #7
 80049fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004a02:	2302      	movs	r3, #2
 8004a04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004a08:	2302      	movs	r3, #2
 8004a0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a0e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fd ffae 	bl	8002974 <HAL_RCC_OscConfig>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8004a1e:	f000 f963 	bl	8004ce8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a22:	230f      	movs	r3, #15
 8004a24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004a34:	2300      	movs	r3, #0
 8004a36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004a40:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004a44:	2104      	movs	r1, #4
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fe fb44 	bl	80030d4 <HAL_RCC_ClockConfig>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d001      	beq.n	8004a56 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8004a52:	f000 f949 	bl	8004ce8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8004a56:	f244 0302 	movw	r3, #16386	; 0x4002
 8004a5a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8004a60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004a64:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8004a66:	2302      	movs	r3, #2
 8004a68:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8004a6e:	2308      	movs	r3, #8
 8004a70:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8004a72:	2307      	movs	r3, #7
 8004a74:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8004a76:	2302      	movs	r3, #2
 8004a78:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8004a7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a82:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a84:	463b      	mov	r3, r7
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7fe fd28 	bl	80034dc <HAL_RCCEx_PeriphCLKConfig>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8004a92:	f000 f929 	bl	8004ce8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004a96:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004a9a:	f7fd ff15 	bl	80028c8 <HAL_PWREx_ControlVoltageScaling>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8004aa4:	f000 f920 	bl	8004ce8 <Error_Handler>
  }
}
 8004aa8:	bf00      	nop
 8004aaa:	37e0      	adds	r7, #224	; 0xe0
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b08a      	sub	sp, #40	; 0x28
 8004ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004ab6:	f107 031c 	add.w	r3, r7, #28
 8004aba:	2200      	movs	r2, #0
 8004abc:	601a      	str	r2, [r3, #0]
 8004abe:	605a      	str	r2, [r3, #4]
 8004ac0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004ac2:	1d3b      	adds	r3, r7, #4
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	605a      	str	r2, [r3, #4]
 8004aca:	609a      	str	r2, [r3, #8]
 8004acc:	60da      	str	r2, [r3, #12]
 8004ace:	611a      	str	r2, [r3, #16]
 8004ad0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8004ad2:	4b30      	ldr	r3, [pc, #192]	; (8004b94 <MX_ADC1_Init+0xe4>)
 8004ad4:	4a30      	ldr	r2, [pc, #192]	; (8004b98 <MX_ADC1_Init+0xe8>)
 8004ad6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8004ad8:	4b2e      	ldr	r3, [pc, #184]	; (8004b94 <MX_ADC1_Init+0xe4>)
 8004ada:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004ade:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004ae0:	4b2c      	ldr	r3, [pc, #176]	; (8004b94 <MX_ADC1_Init+0xe4>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004ae6:	4b2b      	ldr	r3, [pc, #172]	; (8004b94 <MX_ADC1_Init+0xe4>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004aec:	4b29      	ldr	r3, [pc, #164]	; (8004b94 <MX_ADC1_Init+0xe4>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004af2:	4b28      	ldr	r3, [pc, #160]	; (8004b94 <MX_ADC1_Init+0xe4>)
 8004af4:	2204      	movs	r2, #4
 8004af6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004af8:	4b26      	ldr	r3, [pc, #152]	; (8004b94 <MX_ADC1_Init+0xe4>)
 8004afa:	2200      	movs	r2, #0
 8004afc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004afe:	4b25      	ldr	r3, [pc, #148]	; (8004b94 <MX_ADC1_Init+0xe4>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 8004b04:	4b23      	ldr	r3, [pc, #140]	; (8004b94 <MX_ADC1_Init+0xe4>)
 8004b06:	2205      	movs	r2, #5
 8004b08:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004b0a:	4b22      	ldr	r3, [pc, #136]	; (8004b94 <MX_ADC1_Init+0xe4>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004b12:	4b20      	ldr	r3, [pc, #128]	; (8004b94 <MX_ADC1_Init+0xe4>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004b18:	4b1e      	ldr	r3, [pc, #120]	; (8004b94 <MX_ADC1_Init+0xe4>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004b1e:	4b1d      	ldr	r3, [pc, #116]	; (8004b94 <MX_ADC1_Init+0xe4>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004b26:	4b1b      	ldr	r3, [pc, #108]	; (8004b94 <MX_ADC1_Init+0xe4>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8004b2c:	4b19      	ldr	r3, [pc, #100]	; (8004b94 <MX_ADC1_Init+0xe4>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004b34:	4817      	ldr	r0, [pc, #92]	; (8004b94 <MX_ADC1_Init+0xe4>)
 8004b36:	f7fc fc97 	bl	8001468 <HAL_ADC_Init>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d001      	beq.n	8004b44 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8004b40:	f000 f8d2 	bl	8004ce8 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004b44:	2300      	movs	r3, #0
 8004b46:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004b48:	f107 031c 	add.w	r3, r7, #28
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	4811      	ldr	r0, [pc, #68]	; (8004b94 <MX_ADC1_Init+0xe4>)
 8004b50:	f7fd fb5a 	bl	8002208 <HAL_ADCEx_MultiModeConfigChannel>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8004b5a:	f000 f8c5 	bl	8004ce8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8004b5e:	4b0f      	ldr	r3, [pc, #60]	; (8004b9c <MX_ADC1_Init+0xec>)
 8004b60:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004b62:	2306      	movs	r3, #6
 8004b64:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8004b66:	2304      	movs	r3, #4
 8004b68:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004b6a:	237f      	movs	r3, #127	; 0x7f
 8004b6c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004b6e:	2304      	movs	r3, #4
 8004b70:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8004b72:	2300      	movs	r3, #0
 8004b74:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004b76:	1d3b      	adds	r3, r7, #4
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4806      	ldr	r0, [pc, #24]	; (8004b94 <MX_ADC1_Init+0xe4>)
 8004b7c:	f7fc ff60 	bl	8001a40 <HAL_ADC_ConfigChannel>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8004b86:	f000 f8af 	bl	8004ce8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004b8a:	bf00      	nop
 8004b8c:	3728      	adds	r7, #40	; 0x28
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	2000020c 	.word	0x2000020c
 8004b98:	50040000 	.word	0x50040000
 8004b9c:	14f00020 	.word	0x14f00020

08004ba0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004ba4:	4b14      	ldr	r3, [pc, #80]	; (8004bf8 <MX_USART2_UART_Init+0x58>)
 8004ba6:	4a15      	ldr	r2, [pc, #84]	; (8004bfc <MX_USART2_UART_Init+0x5c>)
 8004ba8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004baa:	4b13      	ldr	r3, [pc, #76]	; (8004bf8 <MX_USART2_UART_Init+0x58>)
 8004bac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004bb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004bb2:	4b11      	ldr	r3, [pc, #68]	; (8004bf8 <MX_USART2_UART_Init+0x58>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004bb8:	4b0f      	ldr	r3, [pc, #60]	; (8004bf8 <MX_USART2_UART_Init+0x58>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004bbe:	4b0e      	ldr	r3, [pc, #56]	; (8004bf8 <MX_USART2_UART_Init+0x58>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004bc4:	4b0c      	ldr	r3, [pc, #48]	; (8004bf8 <MX_USART2_UART_Init+0x58>)
 8004bc6:	220c      	movs	r2, #12
 8004bc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004bca:	4b0b      	ldr	r3, [pc, #44]	; (8004bf8 <MX_USART2_UART_Init+0x58>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004bd0:	4b09      	ldr	r3, [pc, #36]	; (8004bf8 <MX_USART2_UART_Init+0x58>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004bd6:	4b08      	ldr	r3, [pc, #32]	; (8004bf8 <MX_USART2_UART_Init+0x58>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004bdc:	4b06      	ldr	r3, [pc, #24]	; (8004bf8 <MX_USART2_UART_Init+0x58>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004be2:	4805      	ldr	r0, [pc, #20]	; (8004bf8 <MX_USART2_UART_Init+0x58>)
 8004be4:	f7ff f92a 	bl	8003e3c <HAL_UART_Init>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004bee:	f000 f87b 	bl	8004ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004bf2:	bf00      	nop
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	20000270 	.word	0x20000270
 8004bfc:	40004400 	.word	0x40004400

08004c00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b08a      	sub	sp, #40	; 0x28
 8004c04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c06:	f107 0314 	add.w	r3, r7, #20
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	605a      	str	r2, [r3, #4]
 8004c10:	609a      	str	r2, [r3, #8]
 8004c12:	60da      	str	r2, [r3, #12]
 8004c14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c16:	4b31      	ldr	r3, [pc, #196]	; (8004cdc <MX_GPIO_Init+0xdc>)
 8004c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c1a:	4a30      	ldr	r2, [pc, #192]	; (8004cdc <MX_GPIO_Init+0xdc>)
 8004c1c:	f043 0304 	orr.w	r3, r3, #4
 8004c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c22:	4b2e      	ldr	r3, [pc, #184]	; (8004cdc <MX_GPIO_Init+0xdc>)
 8004c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c26:	f003 0304 	and.w	r3, r3, #4
 8004c2a:	613b      	str	r3, [r7, #16]
 8004c2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004c2e:	4b2b      	ldr	r3, [pc, #172]	; (8004cdc <MX_GPIO_Init+0xdc>)
 8004c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c32:	4a2a      	ldr	r2, [pc, #168]	; (8004cdc <MX_GPIO_Init+0xdc>)
 8004c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c3a:	4b28      	ldr	r3, [pc, #160]	; (8004cdc <MX_GPIO_Init+0xdc>)
 8004c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c42:	60fb      	str	r3, [r7, #12]
 8004c44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c46:	4b25      	ldr	r3, [pc, #148]	; (8004cdc <MX_GPIO_Init+0xdc>)
 8004c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c4a:	4a24      	ldr	r2, [pc, #144]	; (8004cdc <MX_GPIO_Init+0xdc>)
 8004c4c:	f043 0301 	orr.w	r3, r3, #1
 8004c50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c52:	4b22      	ldr	r3, [pc, #136]	; (8004cdc <MX_GPIO_Init+0xdc>)
 8004c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	60bb      	str	r3, [r7, #8]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c5e:	4b1f      	ldr	r3, [pc, #124]	; (8004cdc <MX_GPIO_Init+0xdc>)
 8004c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c62:	4a1e      	ldr	r2, [pc, #120]	; (8004cdc <MX_GPIO_Init+0xdc>)
 8004c64:	f043 0302 	orr.w	r3, r3, #2
 8004c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c6a:	4b1c      	ldr	r3, [pc, #112]	; (8004cdc <MX_GPIO_Init+0xdc>)
 8004c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	607b      	str	r3, [r7, #4]
 8004c74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004c76:	2200      	movs	r2, #0
 8004c78:	2120      	movs	r1, #32
 8004c7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c7e:	f7fd fdfd 	bl	800287c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004c82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004c88:	4b15      	ldr	r3, [pc, #84]	; (8004ce0 <MX_GPIO_Init+0xe0>)
 8004c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004c90:	f107 0314 	add.w	r3, r7, #20
 8004c94:	4619      	mov	r1, r3
 8004c96:	4813      	ldr	r0, [pc, #76]	; (8004ce4 <MX_GPIO_Init+0xe4>)
 8004c98:	f7fd fc48 	bl	800252c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004ca0:	230b      	movs	r3, #11
 8004ca2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ca8:	f107 0314 	add.w	r3, r7, #20
 8004cac:	4619      	mov	r1, r3
 8004cae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cb2:	f7fd fc3b 	bl	800252c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8004cb6:	2320      	movs	r3, #32
 8004cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004cc6:	f107 0314 	add.w	r3, r7, #20
 8004cca:	4619      	mov	r1, r3
 8004ccc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cd0:	f7fd fc2c 	bl	800252c <HAL_GPIO_Init>

}
 8004cd4:	bf00      	nop
 8004cd6:	3728      	adds	r7, #40	; 0x28
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	40021000 	.word	0x40021000
 8004ce0:	10210000 	.word	0x10210000
 8004ce4:	48000800 	.word	0x48000800

08004ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004cec:	bf00      	nop
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
	...

08004cf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cfe:	4b0f      	ldr	r3, [pc, #60]	; (8004d3c <HAL_MspInit+0x44>)
 8004d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d02:	4a0e      	ldr	r2, [pc, #56]	; (8004d3c <HAL_MspInit+0x44>)
 8004d04:	f043 0301 	orr.w	r3, r3, #1
 8004d08:	6613      	str	r3, [r2, #96]	; 0x60
 8004d0a:	4b0c      	ldr	r3, [pc, #48]	; (8004d3c <HAL_MspInit+0x44>)
 8004d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	607b      	str	r3, [r7, #4]
 8004d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d16:	4b09      	ldr	r3, [pc, #36]	; (8004d3c <HAL_MspInit+0x44>)
 8004d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d1a:	4a08      	ldr	r2, [pc, #32]	; (8004d3c <HAL_MspInit+0x44>)
 8004d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d20:	6593      	str	r3, [r2, #88]	; 0x58
 8004d22:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <HAL_MspInit+0x44>)
 8004d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d2a:	603b      	str	r3, [r7, #0]
 8004d2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	40021000 	.word	0x40021000

08004d40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b08a      	sub	sp, #40	; 0x28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d48:	f107 0314 	add.w	r3, r7, #20
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	605a      	str	r2, [r3, #4]
 8004d52:	609a      	str	r2, [r3, #8]
 8004d54:	60da      	str	r2, [r3, #12]
 8004d56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a15      	ldr	r2, [pc, #84]	; (8004db4 <HAL_ADC_MspInit+0x74>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d124      	bne.n	8004dac <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004d62:	4b15      	ldr	r3, [pc, #84]	; (8004db8 <HAL_ADC_MspInit+0x78>)
 8004d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d66:	4a14      	ldr	r2, [pc, #80]	; (8004db8 <HAL_ADC_MspInit+0x78>)
 8004d68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004d6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d6e:	4b12      	ldr	r3, [pc, #72]	; (8004db8 <HAL_ADC_MspInit+0x78>)
 8004d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d76:	613b      	str	r3, [r7, #16]
 8004d78:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d7a:	4b0f      	ldr	r3, [pc, #60]	; (8004db8 <HAL_ADC_MspInit+0x78>)
 8004d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d7e:	4a0e      	ldr	r2, [pc, #56]	; (8004db8 <HAL_ADC_MspInit+0x78>)
 8004d80:	f043 0301 	orr.w	r3, r3, #1
 8004d84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d86:	4b0c      	ldr	r3, [pc, #48]	; (8004db8 <HAL_ADC_MspInit+0x78>)
 8004d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	60fb      	str	r3, [r7, #12]
 8004d90:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004d92:	2301      	movs	r3, #1
 8004d94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004d96:	230b      	movs	r3, #11
 8004d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d9e:	f107 0314 	add.w	r3, r7, #20
 8004da2:	4619      	mov	r1, r3
 8004da4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004da8:	f7fd fbc0 	bl	800252c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004dac:	bf00      	nop
 8004dae:	3728      	adds	r7, #40	; 0x28
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	50040000 	.word	0x50040000
 8004db8:	40021000 	.word	0x40021000

08004dbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b08a      	sub	sp, #40	; 0x28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dc4:	f107 0314 	add.w	r3, r7, #20
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	605a      	str	r2, [r3, #4]
 8004dce:	609a      	str	r2, [r3, #8]
 8004dd0:	60da      	str	r2, [r3, #12]
 8004dd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a17      	ldr	r2, [pc, #92]	; (8004e38 <HAL_UART_MspInit+0x7c>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d128      	bne.n	8004e30 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004dde:	4b17      	ldr	r3, [pc, #92]	; (8004e3c <HAL_UART_MspInit+0x80>)
 8004de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de2:	4a16      	ldr	r2, [pc, #88]	; (8004e3c <HAL_UART_MspInit+0x80>)
 8004de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004de8:	6593      	str	r3, [r2, #88]	; 0x58
 8004dea:	4b14      	ldr	r3, [pc, #80]	; (8004e3c <HAL_UART_MspInit+0x80>)
 8004dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df2:	613b      	str	r3, [r7, #16]
 8004df4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004df6:	4b11      	ldr	r3, [pc, #68]	; (8004e3c <HAL_UART_MspInit+0x80>)
 8004df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dfa:	4a10      	ldr	r2, [pc, #64]	; (8004e3c <HAL_UART_MspInit+0x80>)
 8004dfc:	f043 0301 	orr.w	r3, r3, #1
 8004e00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e02:	4b0e      	ldr	r3, [pc, #56]	; (8004e3c <HAL_UART_MspInit+0x80>)
 8004e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004e0e:	230c      	movs	r3, #12
 8004e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e12:	2302      	movs	r3, #2
 8004e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e16:	2300      	movs	r3, #0
 8004e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004e1e:	2307      	movs	r3, #7
 8004e20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e22:	f107 0314 	add.w	r3, r7, #20
 8004e26:	4619      	mov	r1, r3
 8004e28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e2c:	f7fd fb7e 	bl	800252c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004e30:	bf00      	nop
 8004e32:	3728      	adds	r7, #40	; 0x28
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	40004400 	.word	0x40004400
 8004e3c:	40021000 	.word	0x40021000

08004e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e40:	b480      	push	{r7}
 8004e42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004e44:	bf00      	nop
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e52:	e7fe      	b.n	8004e52 <HardFault_Handler+0x4>

08004e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e54:	b480      	push	{r7}
 8004e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e58:	e7fe      	b.n	8004e58 <MemManage_Handler+0x4>

08004e5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e5e:	e7fe      	b.n	8004e5e <BusFault_Handler+0x4>

08004e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e60:	b480      	push	{r7}
 8004e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e64:	e7fe      	b.n	8004e64 <UsageFault_Handler+0x4>

08004e66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004e66:	b480      	push	{r7}
 8004e68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004e6a:	bf00      	nop
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e74:	b480      	push	{r7}
 8004e76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e78:	bf00      	nop
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004e82:	b480      	push	{r7}
 8004e84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004e86:	bf00      	nop
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e94:	f7fc f8d2 	bl	800103c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e98:	bf00      	nop
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	617b      	str	r3, [r7, #20]
 8004eac:	e00a      	b.n	8004ec4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004eae:	f3af 8000 	nop.w
 8004eb2:	4601      	mov	r1, r0
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	1c5a      	adds	r2, r3, #1
 8004eb8:	60ba      	str	r2, [r7, #8]
 8004eba:	b2ca      	uxtb	r2, r1
 8004ebc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	617b      	str	r3, [r7, #20]
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	dbf0      	blt.n	8004eae <_read+0x12>
	}

return len;
 8004ecc:	687b      	ldr	r3, [r7, #4]
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3718      	adds	r7, #24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b086      	sub	sp, #24
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	60f8      	str	r0, [r7, #12]
 8004ede:	60b9      	str	r1, [r7, #8]
 8004ee0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	617b      	str	r3, [r7, #20]
 8004ee6:	e009      	b.n	8004efc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	1c5a      	adds	r2, r3, #1
 8004eec:	60ba      	str	r2, [r7, #8]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7ff fcfd 	bl	80048f0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	617b      	str	r3, [r7, #20]
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	dbf1      	blt.n	8004ee8 <_write+0x12>
	}
	return len;
 8004f04:	687b      	ldr	r3, [r7, #4]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3718      	adds	r7, #24
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <_close>:

int _close(int file)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
	return -1;
 8004f16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b083      	sub	sp, #12
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
 8004f2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004f36:	605a      	str	r2, [r3, #4]
	return 0;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <_isatty>:

int _isatty(int file)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b083      	sub	sp, #12
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
	return 1;
 8004f4e:	2301      	movs	r3, #1
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
	return 0;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
	...

08004f78 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004f80:	4b11      	ldr	r3, [pc, #68]	; (8004fc8 <_sbrk+0x50>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d102      	bne.n	8004f8e <_sbrk+0x16>
		heap_end = &end;
 8004f88:	4b0f      	ldr	r3, [pc, #60]	; (8004fc8 <_sbrk+0x50>)
 8004f8a:	4a10      	ldr	r2, [pc, #64]	; (8004fcc <_sbrk+0x54>)
 8004f8c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004f8e:	4b0e      	ldr	r3, [pc, #56]	; (8004fc8 <_sbrk+0x50>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004f94:	4b0c      	ldr	r3, [pc, #48]	; (8004fc8 <_sbrk+0x50>)
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	466a      	mov	r2, sp
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d907      	bls.n	8004fb2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004fa2:	f000 f875 	bl	8005090 <__errno>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	230c      	movs	r3, #12
 8004faa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004fac:	f04f 33ff 	mov.w	r3, #4294967295
 8004fb0:	e006      	b.n	8004fc0 <_sbrk+0x48>
	}

	heap_end += incr;
 8004fb2:	4b05      	ldr	r3, [pc, #20]	; (8004fc8 <_sbrk+0x50>)
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4413      	add	r3, r2
 8004fba:	4a03      	ldr	r2, [pc, #12]	; (8004fc8 <_sbrk+0x50>)
 8004fbc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	200001fc 	.word	0x200001fc
 8004fcc:	200002f8 	.word	0x200002f8

08004fd0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004fd4:	4b17      	ldr	r3, [pc, #92]	; (8005034 <SystemInit+0x64>)
 8004fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fda:	4a16      	ldr	r2, [pc, #88]	; (8005034 <SystemInit+0x64>)
 8004fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fe0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004fe4:	4b14      	ldr	r3, [pc, #80]	; (8005038 <SystemInit+0x68>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a13      	ldr	r2, [pc, #76]	; (8005038 <SystemInit+0x68>)
 8004fea:	f043 0301 	orr.w	r3, r3, #1
 8004fee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8004ff0:	4b11      	ldr	r3, [pc, #68]	; (8005038 <SystemInit+0x68>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8004ff6:	4b10      	ldr	r3, [pc, #64]	; (8005038 <SystemInit+0x68>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a0f      	ldr	r2, [pc, #60]	; (8005038 <SystemInit+0x68>)
 8004ffc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8005000:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005004:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8005006:	4b0c      	ldr	r3, [pc, #48]	; (8005038 <SystemInit+0x68>)
 8005008:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800500c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800500e:	4b0a      	ldr	r3, [pc, #40]	; (8005038 <SystemInit+0x68>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a09      	ldr	r2, [pc, #36]	; (8005038 <SystemInit+0x68>)
 8005014:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005018:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800501a:	4b07      	ldr	r3, [pc, #28]	; (8005038 <SystemInit+0x68>)
 800501c:	2200      	movs	r2, #0
 800501e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005020:	4b04      	ldr	r3, [pc, #16]	; (8005034 <SystemInit+0x64>)
 8005022:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005026:	609a      	str	r2, [r3, #8]
#endif
}
 8005028:	bf00      	nop
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	e000ed00 	.word	0xe000ed00
 8005038:	40021000 	.word	0x40021000

0800503c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800503c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005074 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005040:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005042:	e003      	b.n	800504c <LoopCopyDataInit>

08005044 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005044:	4b0c      	ldr	r3, [pc, #48]	; (8005078 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005046:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005048:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800504a:	3104      	adds	r1, #4

0800504c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800504c:	480b      	ldr	r0, [pc, #44]	; (800507c <LoopForever+0xa>)
	ldr	r3, =_edata
 800504e:	4b0c      	ldr	r3, [pc, #48]	; (8005080 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005050:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005052:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005054:	d3f6      	bcc.n	8005044 <CopyDataInit>
	ldr	r2, =_sbss
 8005056:	4a0b      	ldr	r2, [pc, #44]	; (8005084 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005058:	e002      	b.n	8005060 <LoopFillZerobss>

0800505a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800505a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800505c:	f842 3b04 	str.w	r3, [r2], #4

08005060 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005060:	4b09      	ldr	r3, [pc, #36]	; (8005088 <LoopForever+0x16>)
	cmp	r2, r3
 8005062:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005064:	d3f9      	bcc.n	800505a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005066:	f7ff ffb3 	bl	8004fd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800506a:	f000 f817 	bl	800509c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800506e:	f7ff fc55 	bl	800491c <main>

08005072 <LoopForever>:

LoopForever:
    b LoopForever
 8005072:	e7fe      	b.n	8005072 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005074:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8005078:	08009850 	.word	0x08009850
	ldr	r0, =_sdata
 800507c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005080:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 8005084:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8005088:	200002f4 	.word	0x200002f4

0800508c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800508c:	e7fe      	b.n	800508c <ADC1_2_IRQHandler>
	...

08005090 <__errno>:
 8005090:	4b01      	ldr	r3, [pc, #4]	; (8005098 <__errno+0x8>)
 8005092:	6818      	ldr	r0, [r3, #0]
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	20000010 	.word	0x20000010

0800509c <__libc_init_array>:
 800509c:	b570      	push	{r4, r5, r6, lr}
 800509e:	4e0d      	ldr	r6, [pc, #52]	; (80050d4 <__libc_init_array+0x38>)
 80050a0:	4c0d      	ldr	r4, [pc, #52]	; (80050d8 <__libc_init_array+0x3c>)
 80050a2:	1ba4      	subs	r4, r4, r6
 80050a4:	10a4      	asrs	r4, r4, #2
 80050a6:	2500      	movs	r5, #0
 80050a8:	42a5      	cmp	r5, r4
 80050aa:	d109      	bne.n	80050c0 <__libc_init_array+0x24>
 80050ac:	4e0b      	ldr	r6, [pc, #44]	; (80050dc <__libc_init_array+0x40>)
 80050ae:	4c0c      	ldr	r4, [pc, #48]	; (80050e0 <__libc_init_array+0x44>)
 80050b0:	f004 f9fc 	bl	80094ac <_init>
 80050b4:	1ba4      	subs	r4, r4, r6
 80050b6:	10a4      	asrs	r4, r4, #2
 80050b8:	2500      	movs	r5, #0
 80050ba:	42a5      	cmp	r5, r4
 80050bc:	d105      	bne.n	80050ca <__libc_init_array+0x2e>
 80050be:	bd70      	pop	{r4, r5, r6, pc}
 80050c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80050c4:	4798      	blx	r3
 80050c6:	3501      	adds	r5, #1
 80050c8:	e7ee      	b.n	80050a8 <__libc_init_array+0xc>
 80050ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80050ce:	4798      	blx	r3
 80050d0:	3501      	adds	r5, #1
 80050d2:	e7f2      	b.n	80050ba <__libc_init_array+0x1e>
 80050d4:	08009848 	.word	0x08009848
 80050d8:	08009848 	.word	0x08009848
 80050dc:	08009848 	.word	0x08009848
 80050e0:	0800984c 	.word	0x0800984c

080050e4 <memset>:
 80050e4:	4402      	add	r2, r0
 80050e6:	4603      	mov	r3, r0
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d100      	bne.n	80050ee <memset+0xa>
 80050ec:	4770      	bx	lr
 80050ee:	f803 1b01 	strb.w	r1, [r3], #1
 80050f2:	e7f9      	b.n	80050e8 <memset+0x4>

080050f4 <__cvt>:
 80050f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050f8:	ec55 4b10 	vmov	r4, r5, d0
 80050fc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80050fe:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005102:	2d00      	cmp	r5, #0
 8005104:	460e      	mov	r6, r1
 8005106:	4691      	mov	r9, r2
 8005108:	4619      	mov	r1, r3
 800510a:	bfb8      	it	lt
 800510c:	4622      	movlt	r2, r4
 800510e:	462b      	mov	r3, r5
 8005110:	f027 0720 	bic.w	r7, r7, #32
 8005114:	bfbb      	ittet	lt
 8005116:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800511a:	461d      	movlt	r5, r3
 800511c:	2300      	movge	r3, #0
 800511e:	232d      	movlt	r3, #45	; 0x2d
 8005120:	bfb8      	it	lt
 8005122:	4614      	movlt	r4, r2
 8005124:	2f46      	cmp	r7, #70	; 0x46
 8005126:	700b      	strb	r3, [r1, #0]
 8005128:	d004      	beq.n	8005134 <__cvt+0x40>
 800512a:	2f45      	cmp	r7, #69	; 0x45
 800512c:	d100      	bne.n	8005130 <__cvt+0x3c>
 800512e:	3601      	adds	r6, #1
 8005130:	2102      	movs	r1, #2
 8005132:	e000      	b.n	8005136 <__cvt+0x42>
 8005134:	2103      	movs	r1, #3
 8005136:	ab03      	add	r3, sp, #12
 8005138:	9301      	str	r3, [sp, #4]
 800513a:	ab02      	add	r3, sp, #8
 800513c:	9300      	str	r3, [sp, #0]
 800513e:	4632      	mov	r2, r6
 8005140:	4653      	mov	r3, sl
 8005142:	ec45 4b10 	vmov	d0, r4, r5
 8005146:	f001 fd8f 	bl	8006c68 <_dtoa_r>
 800514a:	2f47      	cmp	r7, #71	; 0x47
 800514c:	4680      	mov	r8, r0
 800514e:	d102      	bne.n	8005156 <__cvt+0x62>
 8005150:	f019 0f01 	tst.w	r9, #1
 8005154:	d026      	beq.n	80051a4 <__cvt+0xb0>
 8005156:	2f46      	cmp	r7, #70	; 0x46
 8005158:	eb08 0906 	add.w	r9, r8, r6
 800515c:	d111      	bne.n	8005182 <__cvt+0x8e>
 800515e:	f898 3000 	ldrb.w	r3, [r8]
 8005162:	2b30      	cmp	r3, #48	; 0x30
 8005164:	d10a      	bne.n	800517c <__cvt+0x88>
 8005166:	2200      	movs	r2, #0
 8005168:	2300      	movs	r3, #0
 800516a:	4620      	mov	r0, r4
 800516c:	4629      	mov	r1, r5
 800516e:	f7fb fcab 	bl	8000ac8 <__aeabi_dcmpeq>
 8005172:	b918      	cbnz	r0, 800517c <__cvt+0x88>
 8005174:	f1c6 0601 	rsb	r6, r6, #1
 8005178:	f8ca 6000 	str.w	r6, [sl]
 800517c:	f8da 3000 	ldr.w	r3, [sl]
 8005180:	4499      	add	r9, r3
 8005182:	2200      	movs	r2, #0
 8005184:	2300      	movs	r3, #0
 8005186:	4620      	mov	r0, r4
 8005188:	4629      	mov	r1, r5
 800518a:	f7fb fc9d 	bl	8000ac8 <__aeabi_dcmpeq>
 800518e:	b938      	cbnz	r0, 80051a0 <__cvt+0xac>
 8005190:	2230      	movs	r2, #48	; 0x30
 8005192:	9b03      	ldr	r3, [sp, #12]
 8005194:	454b      	cmp	r3, r9
 8005196:	d205      	bcs.n	80051a4 <__cvt+0xb0>
 8005198:	1c59      	adds	r1, r3, #1
 800519a:	9103      	str	r1, [sp, #12]
 800519c:	701a      	strb	r2, [r3, #0]
 800519e:	e7f8      	b.n	8005192 <__cvt+0x9e>
 80051a0:	f8cd 900c 	str.w	r9, [sp, #12]
 80051a4:	9b03      	ldr	r3, [sp, #12]
 80051a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80051a8:	eba3 0308 	sub.w	r3, r3, r8
 80051ac:	4640      	mov	r0, r8
 80051ae:	6013      	str	r3, [r2, #0]
 80051b0:	b004      	add	sp, #16
 80051b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080051b6 <__exponent>:
 80051b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051b8:	2900      	cmp	r1, #0
 80051ba:	4604      	mov	r4, r0
 80051bc:	bfba      	itte	lt
 80051be:	4249      	neglt	r1, r1
 80051c0:	232d      	movlt	r3, #45	; 0x2d
 80051c2:	232b      	movge	r3, #43	; 0x2b
 80051c4:	2909      	cmp	r1, #9
 80051c6:	f804 2b02 	strb.w	r2, [r4], #2
 80051ca:	7043      	strb	r3, [r0, #1]
 80051cc:	dd20      	ble.n	8005210 <__exponent+0x5a>
 80051ce:	f10d 0307 	add.w	r3, sp, #7
 80051d2:	461f      	mov	r7, r3
 80051d4:	260a      	movs	r6, #10
 80051d6:	fb91 f5f6 	sdiv	r5, r1, r6
 80051da:	fb06 1115 	mls	r1, r6, r5, r1
 80051de:	3130      	adds	r1, #48	; 0x30
 80051e0:	2d09      	cmp	r5, #9
 80051e2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80051e6:	f103 32ff 	add.w	r2, r3, #4294967295
 80051ea:	4629      	mov	r1, r5
 80051ec:	dc09      	bgt.n	8005202 <__exponent+0x4c>
 80051ee:	3130      	adds	r1, #48	; 0x30
 80051f0:	3b02      	subs	r3, #2
 80051f2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80051f6:	42bb      	cmp	r3, r7
 80051f8:	4622      	mov	r2, r4
 80051fa:	d304      	bcc.n	8005206 <__exponent+0x50>
 80051fc:	1a10      	subs	r0, r2, r0
 80051fe:	b003      	add	sp, #12
 8005200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005202:	4613      	mov	r3, r2
 8005204:	e7e7      	b.n	80051d6 <__exponent+0x20>
 8005206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800520a:	f804 2b01 	strb.w	r2, [r4], #1
 800520e:	e7f2      	b.n	80051f6 <__exponent+0x40>
 8005210:	2330      	movs	r3, #48	; 0x30
 8005212:	4419      	add	r1, r3
 8005214:	7083      	strb	r3, [r0, #2]
 8005216:	1d02      	adds	r2, r0, #4
 8005218:	70c1      	strb	r1, [r0, #3]
 800521a:	e7ef      	b.n	80051fc <__exponent+0x46>

0800521c <_printf_float>:
 800521c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005220:	b08d      	sub	sp, #52	; 0x34
 8005222:	460c      	mov	r4, r1
 8005224:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005228:	4616      	mov	r6, r2
 800522a:	461f      	mov	r7, r3
 800522c:	4605      	mov	r5, r0
 800522e:	f002 fec9 	bl	8007fc4 <_localeconv_r>
 8005232:	6803      	ldr	r3, [r0, #0]
 8005234:	9304      	str	r3, [sp, #16]
 8005236:	4618      	mov	r0, r3
 8005238:	f7fa ffca 	bl	80001d0 <strlen>
 800523c:	2300      	movs	r3, #0
 800523e:	930a      	str	r3, [sp, #40]	; 0x28
 8005240:	f8d8 3000 	ldr.w	r3, [r8]
 8005244:	9005      	str	r0, [sp, #20]
 8005246:	3307      	adds	r3, #7
 8005248:	f023 0307 	bic.w	r3, r3, #7
 800524c:	f103 0208 	add.w	r2, r3, #8
 8005250:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005254:	f8d4 b000 	ldr.w	fp, [r4]
 8005258:	f8c8 2000 	str.w	r2, [r8]
 800525c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005260:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005264:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005268:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800526c:	9307      	str	r3, [sp, #28]
 800526e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005272:	f04f 32ff 	mov.w	r2, #4294967295
 8005276:	4ba7      	ldr	r3, [pc, #668]	; (8005514 <_printf_float+0x2f8>)
 8005278:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800527c:	f7fb fc56 	bl	8000b2c <__aeabi_dcmpun>
 8005280:	bb70      	cbnz	r0, 80052e0 <_printf_float+0xc4>
 8005282:	f04f 32ff 	mov.w	r2, #4294967295
 8005286:	4ba3      	ldr	r3, [pc, #652]	; (8005514 <_printf_float+0x2f8>)
 8005288:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800528c:	f7fb fc30 	bl	8000af0 <__aeabi_dcmple>
 8005290:	bb30      	cbnz	r0, 80052e0 <_printf_float+0xc4>
 8005292:	2200      	movs	r2, #0
 8005294:	2300      	movs	r3, #0
 8005296:	4640      	mov	r0, r8
 8005298:	4649      	mov	r1, r9
 800529a:	f7fb fc1f 	bl	8000adc <__aeabi_dcmplt>
 800529e:	b110      	cbz	r0, 80052a6 <_printf_float+0x8a>
 80052a0:	232d      	movs	r3, #45	; 0x2d
 80052a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052a6:	4a9c      	ldr	r2, [pc, #624]	; (8005518 <_printf_float+0x2fc>)
 80052a8:	4b9c      	ldr	r3, [pc, #624]	; (800551c <_printf_float+0x300>)
 80052aa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80052ae:	bf8c      	ite	hi
 80052b0:	4690      	movhi	r8, r2
 80052b2:	4698      	movls	r8, r3
 80052b4:	2303      	movs	r3, #3
 80052b6:	f02b 0204 	bic.w	r2, fp, #4
 80052ba:	6123      	str	r3, [r4, #16]
 80052bc:	6022      	str	r2, [r4, #0]
 80052be:	f04f 0900 	mov.w	r9, #0
 80052c2:	9700      	str	r7, [sp, #0]
 80052c4:	4633      	mov	r3, r6
 80052c6:	aa0b      	add	r2, sp, #44	; 0x2c
 80052c8:	4621      	mov	r1, r4
 80052ca:	4628      	mov	r0, r5
 80052cc:	f000 f9e6 	bl	800569c <_printf_common>
 80052d0:	3001      	adds	r0, #1
 80052d2:	f040 808d 	bne.w	80053f0 <_printf_float+0x1d4>
 80052d6:	f04f 30ff 	mov.w	r0, #4294967295
 80052da:	b00d      	add	sp, #52	; 0x34
 80052dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052e0:	4642      	mov	r2, r8
 80052e2:	464b      	mov	r3, r9
 80052e4:	4640      	mov	r0, r8
 80052e6:	4649      	mov	r1, r9
 80052e8:	f7fb fc20 	bl	8000b2c <__aeabi_dcmpun>
 80052ec:	b110      	cbz	r0, 80052f4 <_printf_float+0xd8>
 80052ee:	4a8c      	ldr	r2, [pc, #560]	; (8005520 <_printf_float+0x304>)
 80052f0:	4b8c      	ldr	r3, [pc, #560]	; (8005524 <_printf_float+0x308>)
 80052f2:	e7da      	b.n	80052aa <_printf_float+0x8e>
 80052f4:	6861      	ldr	r1, [r4, #4]
 80052f6:	1c4b      	adds	r3, r1, #1
 80052f8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80052fc:	a80a      	add	r0, sp, #40	; 0x28
 80052fe:	d13e      	bne.n	800537e <_printf_float+0x162>
 8005300:	2306      	movs	r3, #6
 8005302:	6063      	str	r3, [r4, #4]
 8005304:	2300      	movs	r3, #0
 8005306:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800530a:	ab09      	add	r3, sp, #36	; 0x24
 800530c:	9300      	str	r3, [sp, #0]
 800530e:	ec49 8b10 	vmov	d0, r8, r9
 8005312:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005316:	6022      	str	r2, [r4, #0]
 8005318:	f8cd a004 	str.w	sl, [sp, #4]
 800531c:	6861      	ldr	r1, [r4, #4]
 800531e:	4628      	mov	r0, r5
 8005320:	f7ff fee8 	bl	80050f4 <__cvt>
 8005324:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005328:	2b47      	cmp	r3, #71	; 0x47
 800532a:	4680      	mov	r8, r0
 800532c:	d109      	bne.n	8005342 <_printf_float+0x126>
 800532e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005330:	1cd8      	adds	r0, r3, #3
 8005332:	db02      	blt.n	800533a <_printf_float+0x11e>
 8005334:	6862      	ldr	r2, [r4, #4]
 8005336:	4293      	cmp	r3, r2
 8005338:	dd47      	ble.n	80053ca <_printf_float+0x1ae>
 800533a:	f1aa 0a02 	sub.w	sl, sl, #2
 800533e:	fa5f fa8a 	uxtb.w	sl, sl
 8005342:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005346:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005348:	d824      	bhi.n	8005394 <_printf_float+0x178>
 800534a:	3901      	subs	r1, #1
 800534c:	4652      	mov	r2, sl
 800534e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005352:	9109      	str	r1, [sp, #36]	; 0x24
 8005354:	f7ff ff2f 	bl	80051b6 <__exponent>
 8005358:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800535a:	1813      	adds	r3, r2, r0
 800535c:	2a01      	cmp	r2, #1
 800535e:	4681      	mov	r9, r0
 8005360:	6123      	str	r3, [r4, #16]
 8005362:	dc02      	bgt.n	800536a <_printf_float+0x14e>
 8005364:	6822      	ldr	r2, [r4, #0]
 8005366:	07d1      	lsls	r1, r2, #31
 8005368:	d501      	bpl.n	800536e <_printf_float+0x152>
 800536a:	3301      	adds	r3, #1
 800536c:	6123      	str	r3, [r4, #16]
 800536e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005372:	2b00      	cmp	r3, #0
 8005374:	d0a5      	beq.n	80052c2 <_printf_float+0xa6>
 8005376:	232d      	movs	r3, #45	; 0x2d
 8005378:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800537c:	e7a1      	b.n	80052c2 <_printf_float+0xa6>
 800537e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005382:	f000 8177 	beq.w	8005674 <_printf_float+0x458>
 8005386:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800538a:	d1bb      	bne.n	8005304 <_printf_float+0xe8>
 800538c:	2900      	cmp	r1, #0
 800538e:	d1b9      	bne.n	8005304 <_printf_float+0xe8>
 8005390:	2301      	movs	r3, #1
 8005392:	e7b6      	b.n	8005302 <_printf_float+0xe6>
 8005394:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005398:	d119      	bne.n	80053ce <_printf_float+0x1b2>
 800539a:	2900      	cmp	r1, #0
 800539c:	6863      	ldr	r3, [r4, #4]
 800539e:	dd0c      	ble.n	80053ba <_printf_float+0x19e>
 80053a0:	6121      	str	r1, [r4, #16]
 80053a2:	b913      	cbnz	r3, 80053aa <_printf_float+0x18e>
 80053a4:	6822      	ldr	r2, [r4, #0]
 80053a6:	07d2      	lsls	r2, r2, #31
 80053a8:	d502      	bpl.n	80053b0 <_printf_float+0x194>
 80053aa:	3301      	adds	r3, #1
 80053ac:	440b      	add	r3, r1
 80053ae:	6123      	str	r3, [r4, #16]
 80053b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053b2:	65a3      	str	r3, [r4, #88]	; 0x58
 80053b4:	f04f 0900 	mov.w	r9, #0
 80053b8:	e7d9      	b.n	800536e <_printf_float+0x152>
 80053ba:	b913      	cbnz	r3, 80053c2 <_printf_float+0x1a6>
 80053bc:	6822      	ldr	r2, [r4, #0]
 80053be:	07d0      	lsls	r0, r2, #31
 80053c0:	d501      	bpl.n	80053c6 <_printf_float+0x1aa>
 80053c2:	3302      	adds	r3, #2
 80053c4:	e7f3      	b.n	80053ae <_printf_float+0x192>
 80053c6:	2301      	movs	r3, #1
 80053c8:	e7f1      	b.n	80053ae <_printf_float+0x192>
 80053ca:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80053ce:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80053d2:	4293      	cmp	r3, r2
 80053d4:	db05      	blt.n	80053e2 <_printf_float+0x1c6>
 80053d6:	6822      	ldr	r2, [r4, #0]
 80053d8:	6123      	str	r3, [r4, #16]
 80053da:	07d1      	lsls	r1, r2, #31
 80053dc:	d5e8      	bpl.n	80053b0 <_printf_float+0x194>
 80053de:	3301      	adds	r3, #1
 80053e0:	e7e5      	b.n	80053ae <_printf_float+0x192>
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	bfd4      	ite	le
 80053e6:	f1c3 0302 	rsble	r3, r3, #2
 80053ea:	2301      	movgt	r3, #1
 80053ec:	4413      	add	r3, r2
 80053ee:	e7de      	b.n	80053ae <_printf_float+0x192>
 80053f0:	6823      	ldr	r3, [r4, #0]
 80053f2:	055a      	lsls	r2, r3, #21
 80053f4:	d407      	bmi.n	8005406 <_printf_float+0x1ea>
 80053f6:	6923      	ldr	r3, [r4, #16]
 80053f8:	4642      	mov	r2, r8
 80053fa:	4631      	mov	r1, r6
 80053fc:	4628      	mov	r0, r5
 80053fe:	47b8      	blx	r7
 8005400:	3001      	adds	r0, #1
 8005402:	d12b      	bne.n	800545c <_printf_float+0x240>
 8005404:	e767      	b.n	80052d6 <_printf_float+0xba>
 8005406:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800540a:	f240 80dc 	bls.w	80055c6 <_printf_float+0x3aa>
 800540e:	2200      	movs	r2, #0
 8005410:	2300      	movs	r3, #0
 8005412:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005416:	f7fb fb57 	bl	8000ac8 <__aeabi_dcmpeq>
 800541a:	2800      	cmp	r0, #0
 800541c:	d033      	beq.n	8005486 <_printf_float+0x26a>
 800541e:	2301      	movs	r3, #1
 8005420:	4a41      	ldr	r2, [pc, #260]	; (8005528 <_printf_float+0x30c>)
 8005422:	4631      	mov	r1, r6
 8005424:	4628      	mov	r0, r5
 8005426:	47b8      	blx	r7
 8005428:	3001      	adds	r0, #1
 800542a:	f43f af54 	beq.w	80052d6 <_printf_float+0xba>
 800542e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005432:	429a      	cmp	r2, r3
 8005434:	db02      	blt.n	800543c <_printf_float+0x220>
 8005436:	6823      	ldr	r3, [r4, #0]
 8005438:	07d8      	lsls	r0, r3, #31
 800543a:	d50f      	bpl.n	800545c <_printf_float+0x240>
 800543c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005440:	4631      	mov	r1, r6
 8005442:	4628      	mov	r0, r5
 8005444:	47b8      	blx	r7
 8005446:	3001      	adds	r0, #1
 8005448:	f43f af45 	beq.w	80052d6 <_printf_float+0xba>
 800544c:	f04f 0800 	mov.w	r8, #0
 8005450:	f104 091a 	add.w	r9, r4, #26
 8005454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005456:	3b01      	subs	r3, #1
 8005458:	4543      	cmp	r3, r8
 800545a:	dc09      	bgt.n	8005470 <_printf_float+0x254>
 800545c:	6823      	ldr	r3, [r4, #0]
 800545e:	079b      	lsls	r3, r3, #30
 8005460:	f100 8103 	bmi.w	800566a <_printf_float+0x44e>
 8005464:	68e0      	ldr	r0, [r4, #12]
 8005466:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005468:	4298      	cmp	r0, r3
 800546a:	bfb8      	it	lt
 800546c:	4618      	movlt	r0, r3
 800546e:	e734      	b.n	80052da <_printf_float+0xbe>
 8005470:	2301      	movs	r3, #1
 8005472:	464a      	mov	r2, r9
 8005474:	4631      	mov	r1, r6
 8005476:	4628      	mov	r0, r5
 8005478:	47b8      	blx	r7
 800547a:	3001      	adds	r0, #1
 800547c:	f43f af2b 	beq.w	80052d6 <_printf_float+0xba>
 8005480:	f108 0801 	add.w	r8, r8, #1
 8005484:	e7e6      	b.n	8005454 <_printf_float+0x238>
 8005486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005488:	2b00      	cmp	r3, #0
 800548a:	dc2b      	bgt.n	80054e4 <_printf_float+0x2c8>
 800548c:	2301      	movs	r3, #1
 800548e:	4a26      	ldr	r2, [pc, #152]	; (8005528 <_printf_float+0x30c>)
 8005490:	4631      	mov	r1, r6
 8005492:	4628      	mov	r0, r5
 8005494:	47b8      	blx	r7
 8005496:	3001      	adds	r0, #1
 8005498:	f43f af1d 	beq.w	80052d6 <_printf_float+0xba>
 800549c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800549e:	b923      	cbnz	r3, 80054aa <_printf_float+0x28e>
 80054a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054a2:	b913      	cbnz	r3, 80054aa <_printf_float+0x28e>
 80054a4:	6823      	ldr	r3, [r4, #0]
 80054a6:	07d9      	lsls	r1, r3, #31
 80054a8:	d5d8      	bpl.n	800545c <_printf_float+0x240>
 80054aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054ae:	4631      	mov	r1, r6
 80054b0:	4628      	mov	r0, r5
 80054b2:	47b8      	blx	r7
 80054b4:	3001      	adds	r0, #1
 80054b6:	f43f af0e 	beq.w	80052d6 <_printf_float+0xba>
 80054ba:	f04f 0900 	mov.w	r9, #0
 80054be:	f104 0a1a 	add.w	sl, r4, #26
 80054c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054c4:	425b      	negs	r3, r3
 80054c6:	454b      	cmp	r3, r9
 80054c8:	dc01      	bgt.n	80054ce <_printf_float+0x2b2>
 80054ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054cc:	e794      	b.n	80053f8 <_printf_float+0x1dc>
 80054ce:	2301      	movs	r3, #1
 80054d0:	4652      	mov	r2, sl
 80054d2:	4631      	mov	r1, r6
 80054d4:	4628      	mov	r0, r5
 80054d6:	47b8      	blx	r7
 80054d8:	3001      	adds	r0, #1
 80054da:	f43f aefc 	beq.w	80052d6 <_printf_float+0xba>
 80054de:	f109 0901 	add.w	r9, r9, #1
 80054e2:	e7ee      	b.n	80054c2 <_printf_float+0x2a6>
 80054e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80054e8:	429a      	cmp	r2, r3
 80054ea:	bfa8      	it	ge
 80054ec:	461a      	movge	r2, r3
 80054ee:	2a00      	cmp	r2, #0
 80054f0:	4691      	mov	r9, r2
 80054f2:	dd07      	ble.n	8005504 <_printf_float+0x2e8>
 80054f4:	4613      	mov	r3, r2
 80054f6:	4631      	mov	r1, r6
 80054f8:	4642      	mov	r2, r8
 80054fa:	4628      	mov	r0, r5
 80054fc:	47b8      	blx	r7
 80054fe:	3001      	adds	r0, #1
 8005500:	f43f aee9 	beq.w	80052d6 <_printf_float+0xba>
 8005504:	f104 031a 	add.w	r3, r4, #26
 8005508:	f04f 0b00 	mov.w	fp, #0
 800550c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005510:	9306      	str	r3, [sp, #24]
 8005512:	e015      	b.n	8005540 <_printf_float+0x324>
 8005514:	7fefffff 	.word	0x7fefffff
 8005518:	08009524 	.word	0x08009524
 800551c:	08009520 	.word	0x08009520
 8005520:	0800952c 	.word	0x0800952c
 8005524:	08009528 	.word	0x08009528
 8005528:	08009530 	.word	0x08009530
 800552c:	2301      	movs	r3, #1
 800552e:	9a06      	ldr	r2, [sp, #24]
 8005530:	4631      	mov	r1, r6
 8005532:	4628      	mov	r0, r5
 8005534:	47b8      	blx	r7
 8005536:	3001      	adds	r0, #1
 8005538:	f43f aecd 	beq.w	80052d6 <_printf_float+0xba>
 800553c:	f10b 0b01 	add.w	fp, fp, #1
 8005540:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005544:	ebaa 0309 	sub.w	r3, sl, r9
 8005548:	455b      	cmp	r3, fp
 800554a:	dcef      	bgt.n	800552c <_printf_float+0x310>
 800554c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005550:	429a      	cmp	r2, r3
 8005552:	44d0      	add	r8, sl
 8005554:	db15      	blt.n	8005582 <_printf_float+0x366>
 8005556:	6823      	ldr	r3, [r4, #0]
 8005558:	07da      	lsls	r2, r3, #31
 800555a:	d412      	bmi.n	8005582 <_printf_float+0x366>
 800555c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800555e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005560:	eba3 020a 	sub.w	r2, r3, sl
 8005564:	eba3 0a01 	sub.w	sl, r3, r1
 8005568:	4592      	cmp	sl, r2
 800556a:	bfa8      	it	ge
 800556c:	4692      	movge	sl, r2
 800556e:	f1ba 0f00 	cmp.w	sl, #0
 8005572:	dc0e      	bgt.n	8005592 <_printf_float+0x376>
 8005574:	f04f 0800 	mov.w	r8, #0
 8005578:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800557c:	f104 091a 	add.w	r9, r4, #26
 8005580:	e019      	b.n	80055b6 <_printf_float+0x39a>
 8005582:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005586:	4631      	mov	r1, r6
 8005588:	4628      	mov	r0, r5
 800558a:	47b8      	blx	r7
 800558c:	3001      	adds	r0, #1
 800558e:	d1e5      	bne.n	800555c <_printf_float+0x340>
 8005590:	e6a1      	b.n	80052d6 <_printf_float+0xba>
 8005592:	4653      	mov	r3, sl
 8005594:	4642      	mov	r2, r8
 8005596:	4631      	mov	r1, r6
 8005598:	4628      	mov	r0, r5
 800559a:	47b8      	blx	r7
 800559c:	3001      	adds	r0, #1
 800559e:	d1e9      	bne.n	8005574 <_printf_float+0x358>
 80055a0:	e699      	b.n	80052d6 <_printf_float+0xba>
 80055a2:	2301      	movs	r3, #1
 80055a4:	464a      	mov	r2, r9
 80055a6:	4631      	mov	r1, r6
 80055a8:	4628      	mov	r0, r5
 80055aa:	47b8      	blx	r7
 80055ac:	3001      	adds	r0, #1
 80055ae:	f43f ae92 	beq.w	80052d6 <_printf_float+0xba>
 80055b2:	f108 0801 	add.w	r8, r8, #1
 80055b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055ba:	1a9b      	subs	r3, r3, r2
 80055bc:	eba3 030a 	sub.w	r3, r3, sl
 80055c0:	4543      	cmp	r3, r8
 80055c2:	dcee      	bgt.n	80055a2 <_printf_float+0x386>
 80055c4:	e74a      	b.n	800545c <_printf_float+0x240>
 80055c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055c8:	2a01      	cmp	r2, #1
 80055ca:	dc01      	bgt.n	80055d0 <_printf_float+0x3b4>
 80055cc:	07db      	lsls	r3, r3, #31
 80055ce:	d53a      	bpl.n	8005646 <_printf_float+0x42a>
 80055d0:	2301      	movs	r3, #1
 80055d2:	4642      	mov	r2, r8
 80055d4:	4631      	mov	r1, r6
 80055d6:	4628      	mov	r0, r5
 80055d8:	47b8      	blx	r7
 80055da:	3001      	adds	r0, #1
 80055dc:	f43f ae7b 	beq.w	80052d6 <_printf_float+0xba>
 80055e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055e4:	4631      	mov	r1, r6
 80055e6:	4628      	mov	r0, r5
 80055e8:	47b8      	blx	r7
 80055ea:	3001      	adds	r0, #1
 80055ec:	f108 0801 	add.w	r8, r8, #1
 80055f0:	f43f ae71 	beq.w	80052d6 <_printf_float+0xba>
 80055f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055f6:	2200      	movs	r2, #0
 80055f8:	f103 3aff 	add.w	sl, r3, #4294967295
 80055fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005600:	2300      	movs	r3, #0
 8005602:	f7fb fa61 	bl	8000ac8 <__aeabi_dcmpeq>
 8005606:	b9c8      	cbnz	r0, 800563c <_printf_float+0x420>
 8005608:	4653      	mov	r3, sl
 800560a:	4642      	mov	r2, r8
 800560c:	4631      	mov	r1, r6
 800560e:	4628      	mov	r0, r5
 8005610:	47b8      	blx	r7
 8005612:	3001      	adds	r0, #1
 8005614:	d10e      	bne.n	8005634 <_printf_float+0x418>
 8005616:	e65e      	b.n	80052d6 <_printf_float+0xba>
 8005618:	2301      	movs	r3, #1
 800561a:	4652      	mov	r2, sl
 800561c:	4631      	mov	r1, r6
 800561e:	4628      	mov	r0, r5
 8005620:	47b8      	blx	r7
 8005622:	3001      	adds	r0, #1
 8005624:	f43f ae57 	beq.w	80052d6 <_printf_float+0xba>
 8005628:	f108 0801 	add.w	r8, r8, #1
 800562c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800562e:	3b01      	subs	r3, #1
 8005630:	4543      	cmp	r3, r8
 8005632:	dcf1      	bgt.n	8005618 <_printf_float+0x3fc>
 8005634:	464b      	mov	r3, r9
 8005636:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800563a:	e6de      	b.n	80053fa <_printf_float+0x1de>
 800563c:	f04f 0800 	mov.w	r8, #0
 8005640:	f104 0a1a 	add.w	sl, r4, #26
 8005644:	e7f2      	b.n	800562c <_printf_float+0x410>
 8005646:	2301      	movs	r3, #1
 8005648:	e7df      	b.n	800560a <_printf_float+0x3ee>
 800564a:	2301      	movs	r3, #1
 800564c:	464a      	mov	r2, r9
 800564e:	4631      	mov	r1, r6
 8005650:	4628      	mov	r0, r5
 8005652:	47b8      	blx	r7
 8005654:	3001      	adds	r0, #1
 8005656:	f43f ae3e 	beq.w	80052d6 <_printf_float+0xba>
 800565a:	f108 0801 	add.w	r8, r8, #1
 800565e:	68e3      	ldr	r3, [r4, #12]
 8005660:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005662:	1a9b      	subs	r3, r3, r2
 8005664:	4543      	cmp	r3, r8
 8005666:	dcf0      	bgt.n	800564a <_printf_float+0x42e>
 8005668:	e6fc      	b.n	8005464 <_printf_float+0x248>
 800566a:	f04f 0800 	mov.w	r8, #0
 800566e:	f104 0919 	add.w	r9, r4, #25
 8005672:	e7f4      	b.n	800565e <_printf_float+0x442>
 8005674:	2900      	cmp	r1, #0
 8005676:	f43f ae8b 	beq.w	8005390 <_printf_float+0x174>
 800567a:	2300      	movs	r3, #0
 800567c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005680:	ab09      	add	r3, sp, #36	; 0x24
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	ec49 8b10 	vmov	d0, r8, r9
 8005688:	6022      	str	r2, [r4, #0]
 800568a:	f8cd a004 	str.w	sl, [sp, #4]
 800568e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005692:	4628      	mov	r0, r5
 8005694:	f7ff fd2e 	bl	80050f4 <__cvt>
 8005698:	4680      	mov	r8, r0
 800569a:	e648      	b.n	800532e <_printf_float+0x112>

0800569c <_printf_common>:
 800569c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056a0:	4691      	mov	r9, r2
 80056a2:	461f      	mov	r7, r3
 80056a4:	688a      	ldr	r2, [r1, #8]
 80056a6:	690b      	ldr	r3, [r1, #16]
 80056a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056ac:	4293      	cmp	r3, r2
 80056ae:	bfb8      	it	lt
 80056b0:	4613      	movlt	r3, r2
 80056b2:	f8c9 3000 	str.w	r3, [r9]
 80056b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056ba:	4606      	mov	r6, r0
 80056bc:	460c      	mov	r4, r1
 80056be:	b112      	cbz	r2, 80056c6 <_printf_common+0x2a>
 80056c0:	3301      	adds	r3, #1
 80056c2:	f8c9 3000 	str.w	r3, [r9]
 80056c6:	6823      	ldr	r3, [r4, #0]
 80056c8:	0699      	lsls	r1, r3, #26
 80056ca:	bf42      	ittt	mi
 80056cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80056d0:	3302      	addmi	r3, #2
 80056d2:	f8c9 3000 	strmi.w	r3, [r9]
 80056d6:	6825      	ldr	r5, [r4, #0]
 80056d8:	f015 0506 	ands.w	r5, r5, #6
 80056dc:	d107      	bne.n	80056ee <_printf_common+0x52>
 80056de:	f104 0a19 	add.w	sl, r4, #25
 80056e2:	68e3      	ldr	r3, [r4, #12]
 80056e4:	f8d9 2000 	ldr.w	r2, [r9]
 80056e8:	1a9b      	subs	r3, r3, r2
 80056ea:	42ab      	cmp	r3, r5
 80056ec:	dc28      	bgt.n	8005740 <_printf_common+0xa4>
 80056ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80056f2:	6822      	ldr	r2, [r4, #0]
 80056f4:	3300      	adds	r3, #0
 80056f6:	bf18      	it	ne
 80056f8:	2301      	movne	r3, #1
 80056fa:	0692      	lsls	r2, r2, #26
 80056fc:	d42d      	bmi.n	800575a <_printf_common+0xbe>
 80056fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005702:	4639      	mov	r1, r7
 8005704:	4630      	mov	r0, r6
 8005706:	47c0      	blx	r8
 8005708:	3001      	adds	r0, #1
 800570a:	d020      	beq.n	800574e <_printf_common+0xb2>
 800570c:	6823      	ldr	r3, [r4, #0]
 800570e:	68e5      	ldr	r5, [r4, #12]
 8005710:	f8d9 2000 	ldr.w	r2, [r9]
 8005714:	f003 0306 	and.w	r3, r3, #6
 8005718:	2b04      	cmp	r3, #4
 800571a:	bf08      	it	eq
 800571c:	1aad      	subeq	r5, r5, r2
 800571e:	68a3      	ldr	r3, [r4, #8]
 8005720:	6922      	ldr	r2, [r4, #16]
 8005722:	bf0c      	ite	eq
 8005724:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005728:	2500      	movne	r5, #0
 800572a:	4293      	cmp	r3, r2
 800572c:	bfc4      	itt	gt
 800572e:	1a9b      	subgt	r3, r3, r2
 8005730:	18ed      	addgt	r5, r5, r3
 8005732:	f04f 0900 	mov.w	r9, #0
 8005736:	341a      	adds	r4, #26
 8005738:	454d      	cmp	r5, r9
 800573a:	d11a      	bne.n	8005772 <_printf_common+0xd6>
 800573c:	2000      	movs	r0, #0
 800573e:	e008      	b.n	8005752 <_printf_common+0xb6>
 8005740:	2301      	movs	r3, #1
 8005742:	4652      	mov	r2, sl
 8005744:	4639      	mov	r1, r7
 8005746:	4630      	mov	r0, r6
 8005748:	47c0      	blx	r8
 800574a:	3001      	adds	r0, #1
 800574c:	d103      	bne.n	8005756 <_printf_common+0xba>
 800574e:	f04f 30ff 	mov.w	r0, #4294967295
 8005752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005756:	3501      	adds	r5, #1
 8005758:	e7c3      	b.n	80056e2 <_printf_common+0x46>
 800575a:	18e1      	adds	r1, r4, r3
 800575c:	1c5a      	adds	r2, r3, #1
 800575e:	2030      	movs	r0, #48	; 0x30
 8005760:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005764:	4422      	add	r2, r4
 8005766:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800576a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800576e:	3302      	adds	r3, #2
 8005770:	e7c5      	b.n	80056fe <_printf_common+0x62>
 8005772:	2301      	movs	r3, #1
 8005774:	4622      	mov	r2, r4
 8005776:	4639      	mov	r1, r7
 8005778:	4630      	mov	r0, r6
 800577a:	47c0      	blx	r8
 800577c:	3001      	adds	r0, #1
 800577e:	d0e6      	beq.n	800574e <_printf_common+0xb2>
 8005780:	f109 0901 	add.w	r9, r9, #1
 8005784:	e7d8      	b.n	8005738 <_printf_common+0x9c>
	...

08005788 <_printf_i>:
 8005788:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800578c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005790:	460c      	mov	r4, r1
 8005792:	7e09      	ldrb	r1, [r1, #24]
 8005794:	b085      	sub	sp, #20
 8005796:	296e      	cmp	r1, #110	; 0x6e
 8005798:	4617      	mov	r7, r2
 800579a:	4606      	mov	r6, r0
 800579c:	4698      	mov	r8, r3
 800579e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80057a0:	f000 80b3 	beq.w	800590a <_printf_i+0x182>
 80057a4:	d822      	bhi.n	80057ec <_printf_i+0x64>
 80057a6:	2963      	cmp	r1, #99	; 0x63
 80057a8:	d036      	beq.n	8005818 <_printf_i+0x90>
 80057aa:	d80a      	bhi.n	80057c2 <_printf_i+0x3a>
 80057ac:	2900      	cmp	r1, #0
 80057ae:	f000 80b9 	beq.w	8005924 <_printf_i+0x19c>
 80057b2:	2958      	cmp	r1, #88	; 0x58
 80057b4:	f000 8083 	beq.w	80058be <_printf_i+0x136>
 80057b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80057c0:	e032      	b.n	8005828 <_printf_i+0xa0>
 80057c2:	2964      	cmp	r1, #100	; 0x64
 80057c4:	d001      	beq.n	80057ca <_printf_i+0x42>
 80057c6:	2969      	cmp	r1, #105	; 0x69
 80057c8:	d1f6      	bne.n	80057b8 <_printf_i+0x30>
 80057ca:	6820      	ldr	r0, [r4, #0]
 80057cc:	6813      	ldr	r3, [r2, #0]
 80057ce:	0605      	lsls	r5, r0, #24
 80057d0:	f103 0104 	add.w	r1, r3, #4
 80057d4:	d52a      	bpl.n	800582c <_printf_i+0xa4>
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6011      	str	r1, [r2, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	da03      	bge.n	80057e6 <_printf_i+0x5e>
 80057de:	222d      	movs	r2, #45	; 0x2d
 80057e0:	425b      	negs	r3, r3
 80057e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80057e6:	486f      	ldr	r0, [pc, #444]	; (80059a4 <_printf_i+0x21c>)
 80057e8:	220a      	movs	r2, #10
 80057ea:	e039      	b.n	8005860 <_printf_i+0xd8>
 80057ec:	2973      	cmp	r1, #115	; 0x73
 80057ee:	f000 809d 	beq.w	800592c <_printf_i+0x1a4>
 80057f2:	d808      	bhi.n	8005806 <_printf_i+0x7e>
 80057f4:	296f      	cmp	r1, #111	; 0x6f
 80057f6:	d020      	beq.n	800583a <_printf_i+0xb2>
 80057f8:	2970      	cmp	r1, #112	; 0x70
 80057fa:	d1dd      	bne.n	80057b8 <_printf_i+0x30>
 80057fc:	6823      	ldr	r3, [r4, #0]
 80057fe:	f043 0320 	orr.w	r3, r3, #32
 8005802:	6023      	str	r3, [r4, #0]
 8005804:	e003      	b.n	800580e <_printf_i+0x86>
 8005806:	2975      	cmp	r1, #117	; 0x75
 8005808:	d017      	beq.n	800583a <_printf_i+0xb2>
 800580a:	2978      	cmp	r1, #120	; 0x78
 800580c:	d1d4      	bne.n	80057b8 <_printf_i+0x30>
 800580e:	2378      	movs	r3, #120	; 0x78
 8005810:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005814:	4864      	ldr	r0, [pc, #400]	; (80059a8 <_printf_i+0x220>)
 8005816:	e055      	b.n	80058c4 <_printf_i+0x13c>
 8005818:	6813      	ldr	r3, [r2, #0]
 800581a:	1d19      	adds	r1, r3, #4
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6011      	str	r1, [r2, #0]
 8005820:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005824:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005828:	2301      	movs	r3, #1
 800582a:	e08c      	b.n	8005946 <_printf_i+0x1be>
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	6011      	str	r1, [r2, #0]
 8005830:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005834:	bf18      	it	ne
 8005836:	b21b      	sxthne	r3, r3
 8005838:	e7cf      	b.n	80057da <_printf_i+0x52>
 800583a:	6813      	ldr	r3, [r2, #0]
 800583c:	6825      	ldr	r5, [r4, #0]
 800583e:	1d18      	adds	r0, r3, #4
 8005840:	6010      	str	r0, [r2, #0]
 8005842:	0628      	lsls	r0, r5, #24
 8005844:	d501      	bpl.n	800584a <_printf_i+0xc2>
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	e002      	b.n	8005850 <_printf_i+0xc8>
 800584a:	0668      	lsls	r0, r5, #25
 800584c:	d5fb      	bpl.n	8005846 <_printf_i+0xbe>
 800584e:	881b      	ldrh	r3, [r3, #0]
 8005850:	4854      	ldr	r0, [pc, #336]	; (80059a4 <_printf_i+0x21c>)
 8005852:	296f      	cmp	r1, #111	; 0x6f
 8005854:	bf14      	ite	ne
 8005856:	220a      	movne	r2, #10
 8005858:	2208      	moveq	r2, #8
 800585a:	2100      	movs	r1, #0
 800585c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005860:	6865      	ldr	r5, [r4, #4]
 8005862:	60a5      	str	r5, [r4, #8]
 8005864:	2d00      	cmp	r5, #0
 8005866:	f2c0 8095 	blt.w	8005994 <_printf_i+0x20c>
 800586a:	6821      	ldr	r1, [r4, #0]
 800586c:	f021 0104 	bic.w	r1, r1, #4
 8005870:	6021      	str	r1, [r4, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d13d      	bne.n	80058f2 <_printf_i+0x16a>
 8005876:	2d00      	cmp	r5, #0
 8005878:	f040 808e 	bne.w	8005998 <_printf_i+0x210>
 800587c:	4665      	mov	r5, ip
 800587e:	2a08      	cmp	r2, #8
 8005880:	d10b      	bne.n	800589a <_printf_i+0x112>
 8005882:	6823      	ldr	r3, [r4, #0]
 8005884:	07db      	lsls	r3, r3, #31
 8005886:	d508      	bpl.n	800589a <_printf_i+0x112>
 8005888:	6923      	ldr	r3, [r4, #16]
 800588a:	6862      	ldr	r2, [r4, #4]
 800588c:	429a      	cmp	r2, r3
 800588e:	bfde      	ittt	le
 8005890:	2330      	movle	r3, #48	; 0x30
 8005892:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005896:	f105 35ff 	addle.w	r5, r5, #4294967295
 800589a:	ebac 0305 	sub.w	r3, ip, r5
 800589e:	6123      	str	r3, [r4, #16]
 80058a0:	f8cd 8000 	str.w	r8, [sp]
 80058a4:	463b      	mov	r3, r7
 80058a6:	aa03      	add	r2, sp, #12
 80058a8:	4621      	mov	r1, r4
 80058aa:	4630      	mov	r0, r6
 80058ac:	f7ff fef6 	bl	800569c <_printf_common>
 80058b0:	3001      	adds	r0, #1
 80058b2:	d14d      	bne.n	8005950 <_printf_i+0x1c8>
 80058b4:	f04f 30ff 	mov.w	r0, #4294967295
 80058b8:	b005      	add	sp, #20
 80058ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80058be:	4839      	ldr	r0, [pc, #228]	; (80059a4 <_printf_i+0x21c>)
 80058c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80058c4:	6813      	ldr	r3, [r2, #0]
 80058c6:	6821      	ldr	r1, [r4, #0]
 80058c8:	1d1d      	adds	r5, r3, #4
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6015      	str	r5, [r2, #0]
 80058ce:	060a      	lsls	r2, r1, #24
 80058d0:	d50b      	bpl.n	80058ea <_printf_i+0x162>
 80058d2:	07ca      	lsls	r2, r1, #31
 80058d4:	bf44      	itt	mi
 80058d6:	f041 0120 	orrmi.w	r1, r1, #32
 80058da:	6021      	strmi	r1, [r4, #0]
 80058dc:	b91b      	cbnz	r3, 80058e6 <_printf_i+0x15e>
 80058de:	6822      	ldr	r2, [r4, #0]
 80058e0:	f022 0220 	bic.w	r2, r2, #32
 80058e4:	6022      	str	r2, [r4, #0]
 80058e6:	2210      	movs	r2, #16
 80058e8:	e7b7      	b.n	800585a <_printf_i+0xd2>
 80058ea:	064d      	lsls	r5, r1, #25
 80058ec:	bf48      	it	mi
 80058ee:	b29b      	uxthmi	r3, r3
 80058f0:	e7ef      	b.n	80058d2 <_printf_i+0x14a>
 80058f2:	4665      	mov	r5, ip
 80058f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80058f8:	fb02 3311 	mls	r3, r2, r1, r3
 80058fc:	5cc3      	ldrb	r3, [r0, r3]
 80058fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005902:	460b      	mov	r3, r1
 8005904:	2900      	cmp	r1, #0
 8005906:	d1f5      	bne.n	80058f4 <_printf_i+0x16c>
 8005908:	e7b9      	b.n	800587e <_printf_i+0xf6>
 800590a:	6813      	ldr	r3, [r2, #0]
 800590c:	6825      	ldr	r5, [r4, #0]
 800590e:	6961      	ldr	r1, [r4, #20]
 8005910:	1d18      	adds	r0, r3, #4
 8005912:	6010      	str	r0, [r2, #0]
 8005914:	0628      	lsls	r0, r5, #24
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	d501      	bpl.n	800591e <_printf_i+0x196>
 800591a:	6019      	str	r1, [r3, #0]
 800591c:	e002      	b.n	8005924 <_printf_i+0x19c>
 800591e:	066a      	lsls	r2, r5, #25
 8005920:	d5fb      	bpl.n	800591a <_printf_i+0x192>
 8005922:	8019      	strh	r1, [r3, #0]
 8005924:	2300      	movs	r3, #0
 8005926:	6123      	str	r3, [r4, #16]
 8005928:	4665      	mov	r5, ip
 800592a:	e7b9      	b.n	80058a0 <_printf_i+0x118>
 800592c:	6813      	ldr	r3, [r2, #0]
 800592e:	1d19      	adds	r1, r3, #4
 8005930:	6011      	str	r1, [r2, #0]
 8005932:	681d      	ldr	r5, [r3, #0]
 8005934:	6862      	ldr	r2, [r4, #4]
 8005936:	2100      	movs	r1, #0
 8005938:	4628      	mov	r0, r5
 800593a:	f7fa fc51 	bl	80001e0 <memchr>
 800593e:	b108      	cbz	r0, 8005944 <_printf_i+0x1bc>
 8005940:	1b40      	subs	r0, r0, r5
 8005942:	6060      	str	r0, [r4, #4]
 8005944:	6863      	ldr	r3, [r4, #4]
 8005946:	6123      	str	r3, [r4, #16]
 8005948:	2300      	movs	r3, #0
 800594a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800594e:	e7a7      	b.n	80058a0 <_printf_i+0x118>
 8005950:	6923      	ldr	r3, [r4, #16]
 8005952:	462a      	mov	r2, r5
 8005954:	4639      	mov	r1, r7
 8005956:	4630      	mov	r0, r6
 8005958:	47c0      	blx	r8
 800595a:	3001      	adds	r0, #1
 800595c:	d0aa      	beq.n	80058b4 <_printf_i+0x12c>
 800595e:	6823      	ldr	r3, [r4, #0]
 8005960:	079b      	lsls	r3, r3, #30
 8005962:	d413      	bmi.n	800598c <_printf_i+0x204>
 8005964:	68e0      	ldr	r0, [r4, #12]
 8005966:	9b03      	ldr	r3, [sp, #12]
 8005968:	4298      	cmp	r0, r3
 800596a:	bfb8      	it	lt
 800596c:	4618      	movlt	r0, r3
 800596e:	e7a3      	b.n	80058b8 <_printf_i+0x130>
 8005970:	2301      	movs	r3, #1
 8005972:	464a      	mov	r2, r9
 8005974:	4639      	mov	r1, r7
 8005976:	4630      	mov	r0, r6
 8005978:	47c0      	blx	r8
 800597a:	3001      	adds	r0, #1
 800597c:	d09a      	beq.n	80058b4 <_printf_i+0x12c>
 800597e:	3501      	adds	r5, #1
 8005980:	68e3      	ldr	r3, [r4, #12]
 8005982:	9a03      	ldr	r2, [sp, #12]
 8005984:	1a9b      	subs	r3, r3, r2
 8005986:	42ab      	cmp	r3, r5
 8005988:	dcf2      	bgt.n	8005970 <_printf_i+0x1e8>
 800598a:	e7eb      	b.n	8005964 <_printf_i+0x1dc>
 800598c:	2500      	movs	r5, #0
 800598e:	f104 0919 	add.w	r9, r4, #25
 8005992:	e7f5      	b.n	8005980 <_printf_i+0x1f8>
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1ac      	bne.n	80058f2 <_printf_i+0x16a>
 8005998:	7803      	ldrb	r3, [r0, #0]
 800599a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800599e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059a2:	e76c      	b.n	800587e <_printf_i+0xf6>
 80059a4:	08009532 	.word	0x08009532
 80059a8:	08009543 	.word	0x08009543

080059ac <_scanf_float>:
 80059ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059b0:	469a      	mov	sl, r3
 80059b2:	688b      	ldr	r3, [r1, #8]
 80059b4:	4616      	mov	r6, r2
 80059b6:	1e5a      	subs	r2, r3, #1
 80059b8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80059bc:	b087      	sub	sp, #28
 80059be:	bf83      	ittte	hi
 80059c0:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80059c4:	189b      	addhi	r3, r3, r2
 80059c6:	9301      	strhi	r3, [sp, #4]
 80059c8:	2300      	movls	r3, #0
 80059ca:	bf86      	itte	hi
 80059cc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80059d0:	608b      	strhi	r3, [r1, #8]
 80059d2:	9301      	strls	r3, [sp, #4]
 80059d4:	680b      	ldr	r3, [r1, #0]
 80059d6:	4688      	mov	r8, r1
 80059d8:	f04f 0b00 	mov.w	fp, #0
 80059dc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80059e0:	f848 3b1c 	str.w	r3, [r8], #28
 80059e4:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80059e8:	4607      	mov	r7, r0
 80059ea:	460c      	mov	r4, r1
 80059ec:	4645      	mov	r5, r8
 80059ee:	465a      	mov	r2, fp
 80059f0:	46d9      	mov	r9, fp
 80059f2:	f8cd b008 	str.w	fp, [sp, #8]
 80059f6:	68a1      	ldr	r1, [r4, #8]
 80059f8:	b181      	cbz	r1, 8005a1c <_scanf_float+0x70>
 80059fa:	6833      	ldr	r3, [r6, #0]
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	2b49      	cmp	r3, #73	; 0x49
 8005a00:	d071      	beq.n	8005ae6 <_scanf_float+0x13a>
 8005a02:	d84d      	bhi.n	8005aa0 <_scanf_float+0xf4>
 8005a04:	2b39      	cmp	r3, #57	; 0x39
 8005a06:	d840      	bhi.n	8005a8a <_scanf_float+0xde>
 8005a08:	2b31      	cmp	r3, #49	; 0x31
 8005a0a:	f080 8088 	bcs.w	8005b1e <_scanf_float+0x172>
 8005a0e:	2b2d      	cmp	r3, #45	; 0x2d
 8005a10:	f000 8090 	beq.w	8005b34 <_scanf_float+0x188>
 8005a14:	d815      	bhi.n	8005a42 <_scanf_float+0x96>
 8005a16:	2b2b      	cmp	r3, #43	; 0x2b
 8005a18:	f000 808c 	beq.w	8005b34 <_scanf_float+0x188>
 8005a1c:	f1b9 0f00 	cmp.w	r9, #0
 8005a20:	d003      	beq.n	8005a2a <_scanf_float+0x7e>
 8005a22:	6823      	ldr	r3, [r4, #0]
 8005a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a28:	6023      	str	r3, [r4, #0]
 8005a2a:	3a01      	subs	r2, #1
 8005a2c:	2a01      	cmp	r2, #1
 8005a2e:	f200 80ea 	bhi.w	8005c06 <_scanf_float+0x25a>
 8005a32:	4545      	cmp	r5, r8
 8005a34:	f200 80dc 	bhi.w	8005bf0 <_scanf_float+0x244>
 8005a38:	2601      	movs	r6, #1
 8005a3a:	4630      	mov	r0, r6
 8005a3c:	b007      	add	sp, #28
 8005a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a42:	2b2e      	cmp	r3, #46	; 0x2e
 8005a44:	f000 809f 	beq.w	8005b86 <_scanf_float+0x1da>
 8005a48:	2b30      	cmp	r3, #48	; 0x30
 8005a4a:	d1e7      	bne.n	8005a1c <_scanf_float+0x70>
 8005a4c:	6820      	ldr	r0, [r4, #0]
 8005a4e:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005a52:	d064      	beq.n	8005b1e <_scanf_float+0x172>
 8005a54:	9b01      	ldr	r3, [sp, #4]
 8005a56:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8005a5a:	6020      	str	r0, [r4, #0]
 8005a5c:	f109 0901 	add.w	r9, r9, #1
 8005a60:	b11b      	cbz	r3, 8005a6a <_scanf_float+0xbe>
 8005a62:	3b01      	subs	r3, #1
 8005a64:	3101      	adds	r1, #1
 8005a66:	9301      	str	r3, [sp, #4]
 8005a68:	60a1      	str	r1, [r4, #8]
 8005a6a:	68a3      	ldr	r3, [r4, #8]
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	60a3      	str	r3, [r4, #8]
 8005a70:	6923      	ldr	r3, [r4, #16]
 8005a72:	3301      	adds	r3, #1
 8005a74:	6123      	str	r3, [r4, #16]
 8005a76:	6873      	ldr	r3, [r6, #4]
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	6073      	str	r3, [r6, #4]
 8005a7e:	f340 80ac 	ble.w	8005bda <_scanf_float+0x22e>
 8005a82:	6833      	ldr	r3, [r6, #0]
 8005a84:	3301      	adds	r3, #1
 8005a86:	6033      	str	r3, [r6, #0]
 8005a88:	e7b5      	b.n	80059f6 <_scanf_float+0x4a>
 8005a8a:	2b45      	cmp	r3, #69	; 0x45
 8005a8c:	f000 8085 	beq.w	8005b9a <_scanf_float+0x1ee>
 8005a90:	2b46      	cmp	r3, #70	; 0x46
 8005a92:	d06a      	beq.n	8005b6a <_scanf_float+0x1be>
 8005a94:	2b41      	cmp	r3, #65	; 0x41
 8005a96:	d1c1      	bne.n	8005a1c <_scanf_float+0x70>
 8005a98:	2a01      	cmp	r2, #1
 8005a9a:	d1bf      	bne.n	8005a1c <_scanf_float+0x70>
 8005a9c:	2202      	movs	r2, #2
 8005a9e:	e046      	b.n	8005b2e <_scanf_float+0x182>
 8005aa0:	2b65      	cmp	r3, #101	; 0x65
 8005aa2:	d07a      	beq.n	8005b9a <_scanf_float+0x1ee>
 8005aa4:	d818      	bhi.n	8005ad8 <_scanf_float+0x12c>
 8005aa6:	2b54      	cmp	r3, #84	; 0x54
 8005aa8:	d066      	beq.n	8005b78 <_scanf_float+0x1cc>
 8005aaa:	d811      	bhi.n	8005ad0 <_scanf_float+0x124>
 8005aac:	2b4e      	cmp	r3, #78	; 0x4e
 8005aae:	d1b5      	bne.n	8005a1c <_scanf_float+0x70>
 8005ab0:	2a00      	cmp	r2, #0
 8005ab2:	d146      	bne.n	8005b42 <_scanf_float+0x196>
 8005ab4:	f1b9 0f00 	cmp.w	r9, #0
 8005ab8:	d145      	bne.n	8005b46 <_scanf_float+0x19a>
 8005aba:	6821      	ldr	r1, [r4, #0]
 8005abc:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8005ac0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8005ac4:	d13f      	bne.n	8005b46 <_scanf_float+0x19a>
 8005ac6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005aca:	6021      	str	r1, [r4, #0]
 8005acc:	2201      	movs	r2, #1
 8005ace:	e02e      	b.n	8005b2e <_scanf_float+0x182>
 8005ad0:	2b59      	cmp	r3, #89	; 0x59
 8005ad2:	d01e      	beq.n	8005b12 <_scanf_float+0x166>
 8005ad4:	2b61      	cmp	r3, #97	; 0x61
 8005ad6:	e7de      	b.n	8005a96 <_scanf_float+0xea>
 8005ad8:	2b6e      	cmp	r3, #110	; 0x6e
 8005ada:	d0e9      	beq.n	8005ab0 <_scanf_float+0x104>
 8005adc:	d815      	bhi.n	8005b0a <_scanf_float+0x15e>
 8005ade:	2b66      	cmp	r3, #102	; 0x66
 8005ae0:	d043      	beq.n	8005b6a <_scanf_float+0x1be>
 8005ae2:	2b69      	cmp	r3, #105	; 0x69
 8005ae4:	d19a      	bne.n	8005a1c <_scanf_float+0x70>
 8005ae6:	f1bb 0f00 	cmp.w	fp, #0
 8005aea:	d138      	bne.n	8005b5e <_scanf_float+0x1b2>
 8005aec:	f1b9 0f00 	cmp.w	r9, #0
 8005af0:	d197      	bne.n	8005a22 <_scanf_float+0x76>
 8005af2:	6821      	ldr	r1, [r4, #0]
 8005af4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8005af8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8005afc:	d195      	bne.n	8005a2a <_scanf_float+0x7e>
 8005afe:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005b02:	6021      	str	r1, [r4, #0]
 8005b04:	f04f 0b01 	mov.w	fp, #1
 8005b08:	e011      	b.n	8005b2e <_scanf_float+0x182>
 8005b0a:	2b74      	cmp	r3, #116	; 0x74
 8005b0c:	d034      	beq.n	8005b78 <_scanf_float+0x1cc>
 8005b0e:	2b79      	cmp	r3, #121	; 0x79
 8005b10:	d184      	bne.n	8005a1c <_scanf_float+0x70>
 8005b12:	f1bb 0f07 	cmp.w	fp, #7
 8005b16:	d181      	bne.n	8005a1c <_scanf_float+0x70>
 8005b18:	f04f 0b08 	mov.w	fp, #8
 8005b1c:	e007      	b.n	8005b2e <_scanf_float+0x182>
 8005b1e:	eb12 0f0b 	cmn.w	r2, fp
 8005b22:	f47f af7b 	bne.w	8005a1c <_scanf_float+0x70>
 8005b26:	6821      	ldr	r1, [r4, #0]
 8005b28:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8005b2c:	6021      	str	r1, [r4, #0]
 8005b2e:	702b      	strb	r3, [r5, #0]
 8005b30:	3501      	adds	r5, #1
 8005b32:	e79a      	b.n	8005a6a <_scanf_float+0xbe>
 8005b34:	6821      	ldr	r1, [r4, #0]
 8005b36:	0608      	lsls	r0, r1, #24
 8005b38:	f57f af70 	bpl.w	8005a1c <_scanf_float+0x70>
 8005b3c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005b40:	e7f4      	b.n	8005b2c <_scanf_float+0x180>
 8005b42:	2a02      	cmp	r2, #2
 8005b44:	d047      	beq.n	8005bd6 <_scanf_float+0x22a>
 8005b46:	f1bb 0f01 	cmp.w	fp, #1
 8005b4a:	d003      	beq.n	8005b54 <_scanf_float+0x1a8>
 8005b4c:	f1bb 0f04 	cmp.w	fp, #4
 8005b50:	f47f af64 	bne.w	8005a1c <_scanf_float+0x70>
 8005b54:	f10b 0b01 	add.w	fp, fp, #1
 8005b58:	fa5f fb8b 	uxtb.w	fp, fp
 8005b5c:	e7e7      	b.n	8005b2e <_scanf_float+0x182>
 8005b5e:	f1bb 0f03 	cmp.w	fp, #3
 8005b62:	d0f7      	beq.n	8005b54 <_scanf_float+0x1a8>
 8005b64:	f1bb 0f05 	cmp.w	fp, #5
 8005b68:	e7f2      	b.n	8005b50 <_scanf_float+0x1a4>
 8005b6a:	f1bb 0f02 	cmp.w	fp, #2
 8005b6e:	f47f af55 	bne.w	8005a1c <_scanf_float+0x70>
 8005b72:	f04f 0b03 	mov.w	fp, #3
 8005b76:	e7da      	b.n	8005b2e <_scanf_float+0x182>
 8005b78:	f1bb 0f06 	cmp.w	fp, #6
 8005b7c:	f47f af4e 	bne.w	8005a1c <_scanf_float+0x70>
 8005b80:	f04f 0b07 	mov.w	fp, #7
 8005b84:	e7d3      	b.n	8005b2e <_scanf_float+0x182>
 8005b86:	6821      	ldr	r1, [r4, #0]
 8005b88:	0588      	lsls	r0, r1, #22
 8005b8a:	f57f af47 	bpl.w	8005a1c <_scanf_float+0x70>
 8005b8e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8005b92:	6021      	str	r1, [r4, #0]
 8005b94:	f8cd 9008 	str.w	r9, [sp, #8]
 8005b98:	e7c9      	b.n	8005b2e <_scanf_float+0x182>
 8005b9a:	6821      	ldr	r1, [r4, #0]
 8005b9c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8005ba0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8005ba4:	d006      	beq.n	8005bb4 <_scanf_float+0x208>
 8005ba6:	0548      	lsls	r0, r1, #21
 8005ba8:	f57f af38 	bpl.w	8005a1c <_scanf_float+0x70>
 8005bac:	f1b9 0f00 	cmp.w	r9, #0
 8005bb0:	f43f af3b 	beq.w	8005a2a <_scanf_float+0x7e>
 8005bb4:	0588      	lsls	r0, r1, #22
 8005bb6:	bf58      	it	pl
 8005bb8:	9802      	ldrpl	r0, [sp, #8]
 8005bba:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005bbe:	bf58      	it	pl
 8005bc0:	eba9 0000 	subpl.w	r0, r9, r0
 8005bc4:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8005bc8:	bf58      	it	pl
 8005bca:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8005bce:	6021      	str	r1, [r4, #0]
 8005bd0:	f04f 0900 	mov.w	r9, #0
 8005bd4:	e7ab      	b.n	8005b2e <_scanf_float+0x182>
 8005bd6:	2203      	movs	r2, #3
 8005bd8:	e7a9      	b.n	8005b2e <_scanf_float+0x182>
 8005bda:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005bde:	9205      	str	r2, [sp, #20]
 8005be0:	4631      	mov	r1, r6
 8005be2:	4638      	mov	r0, r7
 8005be4:	4798      	blx	r3
 8005be6:	9a05      	ldr	r2, [sp, #20]
 8005be8:	2800      	cmp	r0, #0
 8005bea:	f43f af04 	beq.w	80059f6 <_scanf_float+0x4a>
 8005bee:	e715      	b.n	8005a1c <_scanf_float+0x70>
 8005bf0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005bf4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005bf8:	4632      	mov	r2, r6
 8005bfa:	4638      	mov	r0, r7
 8005bfc:	4798      	blx	r3
 8005bfe:	6923      	ldr	r3, [r4, #16]
 8005c00:	3b01      	subs	r3, #1
 8005c02:	6123      	str	r3, [r4, #16]
 8005c04:	e715      	b.n	8005a32 <_scanf_float+0x86>
 8005c06:	f10b 33ff 	add.w	r3, fp, #4294967295
 8005c0a:	2b06      	cmp	r3, #6
 8005c0c:	d80a      	bhi.n	8005c24 <_scanf_float+0x278>
 8005c0e:	f1bb 0f02 	cmp.w	fp, #2
 8005c12:	d968      	bls.n	8005ce6 <_scanf_float+0x33a>
 8005c14:	f1ab 0b03 	sub.w	fp, fp, #3
 8005c18:	fa5f fb8b 	uxtb.w	fp, fp
 8005c1c:	eba5 0b0b 	sub.w	fp, r5, fp
 8005c20:	455d      	cmp	r5, fp
 8005c22:	d14b      	bne.n	8005cbc <_scanf_float+0x310>
 8005c24:	6823      	ldr	r3, [r4, #0]
 8005c26:	05da      	lsls	r2, r3, #23
 8005c28:	d51f      	bpl.n	8005c6a <_scanf_float+0x2be>
 8005c2a:	055b      	lsls	r3, r3, #21
 8005c2c:	d468      	bmi.n	8005d00 <_scanf_float+0x354>
 8005c2e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005c32:	6923      	ldr	r3, [r4, #16]
 8005c34:	2965      	cmp	r1, #101	; 0x65
 8005c36:	f103 33ff 	add.w	r3, r3, #4294967295
 8005c3a:	f105 3bff 	add.w	fp, r5, #4294967295
 8005c3e:	6123      	str	r3, [r4, #16]
 8005c40:	d00d      	beq.n	8005c5e <_scanf_float+0x2b2>
 8005c42:	2945      	cmp	r1, #69	; 0x45
 8005c44:	d00b      	beq.n	8005c5e <_scanf_float+0x2b2>
 8005c46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c4a:	4632      	mov	r2, r6
 8005c4c:	4638      	mov	r0, r7
 8005c4e:	4798      	blx	r3
 8005c50:	6923      	ldr	r3, [r4, #16]
 8005c52:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8005c56:	3b01      	subs	r3, #1
 8005c58:	f1a5 0b02 	sub.w	fp, r5, #2
 8005c5c:	6123      	str	r3, [r4, #16]
 8005c5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c62:	4632      	mov	r2, r6
 8005c64:	4638      	mov	r0, r7
 8005c66:	4798      	blx	r3
 8005c68:	465d      	mov	r5, fp
 8005c6a:	6826      	ldr	r6, [r4, #0]
 8005c6c:	f016 0610 	ands.w	r6, r6, #16
 8005c70:	d17a      	bne.n	8005d68 <_scanf_float+0x3bc>
 8005c72:	702e      	strb	r6, [r5, #0]
 8005c74:	6823      	ldr	r3, [r4, #0]
 8005c76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c7e:	d142      	bne.n	8005d06 <_scanf_float+0x35a>
 8005c80:	9b02      	ldr	r3, [sp, #8]
 8005c82:	eba9 0303 	sub.w	r3, r9, r3
 8005c86:	425a      	negs	r2, r3
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d149      	bne.n	8005d20 <_scanf_float+0x374>
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	4641      	mov	r1, r8
 8005c90:	4638      	mov	r0, r7
 8005c92:	f000 febd 	bl	8006a10 <_strtod_r>
 8005c96:	6825      	ldr	r5, [r4, #0]
 8005c98:	f8da 3000 	ldr.w	r3, [sl]
 8005c9c:	f015 0f02 	tst.w	r5, #2
 8005ca0:	f103 0204 	add.w	r2, r3, #4
 8005ca4:	ec59 8b10 	vmov	r8, r9, d0
 8005ca8:	f8ca 2000 	str.w	r2, [sl]
 8005cac:	d043      	beq.n	8005d36 <_scanf_float+0x38a>
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	e9c3 8900 	strd	r8, r9, [r3]
 8005cb4:	68e3      	ldr	r3, [r4, #12]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	60e3      	str	r3, [r4, #12]
 8005cba:	e6be      	b.n	8005a3a <_scanf_float+0x8e>
 8005cbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005cc0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005cc4:	4632      	mov	r2, r6
 8005cc6:	4638      	mov	r0, r7
 8005cc8:	4798      	blx	r3
 8005cca:	6923      	ldr	r3, [r4, #16]
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	6123      	str	r3, [r4, #16]
 8005cd0:	e7a6      	b.n	8005c20 <_scanf_float+0x274>
 8005cd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005cd6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005cda:	4632      	mov	r2, r6
 8005cdc:	4638      	mov	r0, r7
 8005cde:	4798      	blx	r3
 8005ce0:	6923      	ldr	r3, [r4, #16]
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	6123      	str	r3, [r4, #16]
 8005ce6:	4545      	cmp	r5, r8
 8005ce8:	d8f3      	bhi.n	8005cd2 <_scanf_float+0x326>
 8005cea:	e6a5      	b.n	8005a38 <_scanf_float+0x8c>
 8005cec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005cf0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005cf4:	4632      	mov	r2, r6
 8005cf6:	4638      	mov	r0, r7
 8005cf8:	4798      	blx	r3
 8005cfa:	6923      	ldr	r3, [r4, #16]
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	6123      	str	r3, [r4, #16]
 8005d00:	4545      	cmp	r5, r8
 8005d02:	d8f3      	bhi.n	8005cec <_scanf_float+0x340>
 8005d04:	e698      	b.n	8005a38 <_scanf_float+0x8c>
 8005d06:	9b03      	ldr	r3, [sp, #12]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d0bf      	beq.n	8005c8c <_scanf_float+0x2e0>
 8005d0c:	9904      	ldr	r1, [sp, #16]
 8005d0e:	230a      	movs	r3, #10
 8005d10:	4632      	mov	r2, r6
 8005d12:	3101      	adds	r1, #1
 8005d14:	4638      	mov	r0, r7
 8005d16:	f000 ff07 	bl	8006b28 <_strtol_r>
 8005d1a:	9b03      	ldr	r3, [sp, #12]
 8005d1c:	9d04      	ldr	r5, [sp, #16]
 8005d1e:	1ac2      	subs	r2, r0, r3
 8005d20:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005d24:	429d      	cmp	r5, r3
 8005d26:	bf28      	it	cs
 8005d28:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8005d2c:	490f      	ldr	r1, [pc, #60]	; (8005d6c <_scanf_float+0x3c0>)
 8005d2e:	4628      	mov	r0, r5
 8005d30:	f000 f83c 	bl	8005dac <siprintf>
 8005d34:	e7aa      	b.n	8005c8c <_scanf_float+0x2e0>
 8005d36:	f015 0504 	ands.w	r5, r5, #4
 8005d3a:	d1b8      	bne.n	8005cae <_scanf_float+0x302>
 8005d3c:	681f      	ldr	r7, [r3, #0]
 8005d3e:	ee10 2a10 	vmov	r2, s0
 8005d42:	464b      	mov	r3, r9
 8005d44:	ee10 0a10 	vmov	r0, s0
 8005d48:	4649      	mov	r1, r9
 8005d4a:	f7fa feef 	bl	8000b2c <__aeabi_dcmpun>
 8005d4e:	b128      	cbz	r0, 8005d5c <_scanf_float+0x3b0>
 8005d50:	4628      	mov	r0, r5
 8005d52:	f000 f825 	bl	8005da0 <nanf>
 8005d56:	ed87 0a00 	vstr	s0, [r7]
 8005d5a:	e7ab      	b.n	8005cb4 <_scanf_float+0x308>
 8005d5c:	4640      	mov	r0, r8
 8005d5e:	4649      	mov	r1, r9
 8005d60:	f7fa ff42 	bl	8000be8 <__aeabi_d2f>
 8005d64:	6038      	str	r0, [r7, #0]
 8005d66:	e7a5      	b.n	8005cb4 <_scanf_float+0x308>
 8005d68:	2600      	movs	r6, #0
 8005d6a:	e666      	b.n	8005a3a <_scanf_float+0x8e>
 8005d6c:	08009554 	.word	0x08009554

08005d70 <iprintf>:
 8005d70:	b40f      	push	{r0, r1, r2, r3}
 8005d72:	4b0a      	ldr	r3, [pc, #40]	; (8005d9c <iprintf+0x2c>)
 8005d74:	b513      	push	{r0, r1, r4, lr}
 8005d76:	681c      	ldr	r4, [r3, #0]
 8005d78:	b124      	cbz	r4, 8005d84 <iprintf+0x14>
 8005d7a:	69a3      	ldr	r3, [r4, #24]
 8005d7c:	b913      	cbnz	r3, 8005d84 <iprintf+0x14>
 8005d7e:	4620      	mov	r0, r4
 8005d80:	f001 fd6a 	bl	8007858 <__sinit>
 8005d84:	ab05      	add	r3, sp, #20
 8005d86:	9a04      	ldr	r2, [sp, #16]
 8005d88:	68a1      	ldr	r1, [r4, #8]
 8005d8a:	9301      	str	r3, [sp, #4]
 8005d8c:	4620      	mov	r0, r4
 8005d8e:	f002 ff7d 	bl	8008c8c <_vfiprintf_r>
 8005d92:	b002      	add	sp, #8
 8005d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d98:	b004      	add	sp, #16
 8005d9a:	4770      	bx	lr
 8005d9c:	20000010 	.word	0x20000010

08005da0 <nanf>:
 8005da0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005da8 <nanf+0x8>
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	7fc00000 	.word	0x7fc00000

08005dac <siprintf>:
 8005dac:	b40e      	push	{r1, r2, r3}
 8005dae:	b500      	push	{lr}
 8005db0:	b09c      	sub	sp, #112	; 0x70
 8005db2:	ab1d      	add	r3, sp, #116	; 0x74
 8005db4:	9002      	str	r0, [sp, #8]
 8005db6:	9006      	str	r0, [sp, #24]
 8005db8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005dbc:	4809      	ldr	r0, [pc, #36]	; (8005de4 <siprintf+0x38>)
 8005dbe:	9107      	str	r1, [sp, #28]
 8005dc0:	9104      	str	r1, [sp, #16]
 8005dc2:	4909      	ldr	r1, [pc, #36]	; (8005de8 <siprintf+0x3c>)
 8005dc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dc8:	9105      	str	r1, [sp, #20]
 8005dca:	6800      	ldr	r0, [r0, #0]
 8005dcc:	9301      	str	r3, [sp, #4]
 8005dce:	a902      	add	r1, sp, #8
 8005dd0:	f002 fe3a 	bl	8008a48 <_svfiprintf_r>
 8005dd4:	9b02      	ldr	r3, [sp, #8]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	701a      	strb	r2, [r3, #0]
 8005dda:	b01c      	add	sp, #112	; 0x70
 8005ddc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005de0:	b003      	add	sp, #12
 8005de2:	4770      	bx	lr
 8005de4:	20000010 	.word	0x20000010
 8005de8:	ffff0208 	.word	0xffff0208

08005dec <sulp>:
 8005dec:	b570      	push	{r4, r5, r6, lr}
 8005dee:	4604      	mov	r4, r0
 8005df0:	460d      	mov	r5, r1
 8005df2:	ec45 4b10 	vmov	d0, r4, r5
 8005df6:	4616      	mov	r6, r2
 8005df8:	f002 fbe2 	bl	80085c0 <__ulp>
 8005dfc:	ec51 0b10 	vmov	r0, r1, d0
 8005e00:	b17e      	cbz	r6, 8005e22 <sulp+0x36>
 8005e02:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005e06:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	dd09      	ble.n	8005e22 <sulp+0x36>
 8005e0e:	051b      	lsls	r3, r3, #20
 8005e10:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005e14:	2400      	movs	r4, #0
 8005e16:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005e1a:	4622      	mov	r2, r4
 8005e1c:	462b      	mov	r3, r5
 8005e1e:	f7fa fbeb 	bl	80005f8 <__aeabi_dmul>
 8005e22:	bd70      	pop	{r4, r5, r6, pc}
 8005e24:	0000      	movs	r0, r0
	...

08005e28 <_strtod_l>:
 8005e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e2c:	461f      	mov	r7, r3
 8005e2e:	b0a1      	sub	sp, #132	; 0x84
 8005e30:	2300      	movs	r3, #0
 8005e32:	4681      	mov	r9, r0
 8005e34:	4638      	mov	r0, r7
 8005e36:	460e      	mov	r6, r1
 8005e38:	9217      	str	r2, [sp, #92]	; 0x5c
 8005e3a:	931c      	str	r3, [sp, #112]	; 0x70
 8005e3c:	f002 f8bf 	bl	8007fbe <__localeconv_l>
 8005e40:	4680      	mov	r8, r0
 8005e42:	6800      	ldr	r0, [r0, #0]
 8005e44:	f7fa f9c4 	bl	80001d0 <strlen>
 8005e48:	f04f 0a00 	mov.w	sl, #0
 8005e4c:	4604      	mov	r4, r0
 8005e4e:	f04f 0b00 	mov.w	fp, #0
 8005e52:	961b      	str	r6, [sp, #108]	; 0x6c
 8005e54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e56:	781a      	ldrb	r2, [r3, #0]
 8005e58:	2a0d      	cmp	r2, #13
 8005e5a:	d832      	bhi.n	8005ec2 <_strtod_l+0x9a>
 8005e5c:	2a09      	cmp	r2, #9
 8005e5e:	d236      	bcs.n	8005ece <_strtod_l+0xa6>
 8005e60:	2a00      	cmp	r2, #0
 8005e62:	d03e      	beq.n	8005ee2 <_strtod_l+0xba>
 8005e64:	2300      	movs	r3, #0
 8005e66:	930d      	str	r3, [sp, #52]	; 0x34
 8005e68:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005e6a:	782b      	ldrb	r3, [r5, #0]
 8005e6c:	2b30      	cmp	r3, #48	; 0x30
 8005e6e:	f040 80ac 	bne.w	8005fca <_strtod_l+0x1a2>
 8005e72:	786b      	ldrb	r3, [r5, #1]
 8005e74:	2b58      	cmp	r3, #88	; 0x58
 8005e76:	d001      	beq.n	8005e7c <_strtod_l+0x54>
 8005e78:	2b78      	cmp	r3, #120	; 0x78
 8005e7a:	d167      	bne.n	8005f4c <_strtod_l+0x124>
 8005e7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e7e:	9301      	str	r3, [sp, #4]
 8005e80:	ab1c      	add	r3, sp, #112	; 0x70
 8005e82:	9300      	str	r3, [sp, #0]
 8005e84:	9702      	str	r7, [sp, #8]
 8005e86:	ab1d      	add	r3, sp, #116	; 0x74
 8005e88:	4a88      	ldr	r2, [pc, #544]	; (80060ac <_strtod_l+0x284>)
 8005e8a:	a91b      	add	r1, sp, #108	; 0x6c
 8005e8c:	4648      	mov	r0, r9
 8005e8e:	f001 fdbc 	bl	8007a0a <__gethex>
 8005e92:	f010 0407 	ands.w	r4, r0, #7
 8005e96:	4606      	mov	r6, r0
 8005e98:	d005      	beq.n	8005ea6 <_strtod_l+0x7e>
 8005e9a:	2c06      	cmp	r4, #6
 8005e9c:	d12b      	bne.n	8005ef6 <_strtod_l+0xce>
 8005e9e:	3501      	adds	r5, #1
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	951b      	str	r5, [sp, #108]	; 0x6c
 8005ea4:	930d      	str	r3, [sp, #52]	; 0x34
 8005ea6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f040 859a 	bne.w	80069e2 <_strtod_l+0xbba>
 8005eae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005eb0:	b1e3      	cbz	r3, 8005eec <_strtod_l+0xc4>
 8005eb2:	4652      	mov	r2, sl
 8005eb4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005eb8:	ec43 2b10 	vmov	d0, r2, r3
 8005ebc:	b021      	add	sp, #132	; 0x84
 8005ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ec2:	2a2b      	cmp	r2, #43	; 0x2b
 8005ec4:	d015      	beq.n	8005ef2 <_strtod_l+0xca>
 8005ec6:	2a2d      	cmp	r2, #45	; 0x2d
 8005ec8:	d004      	beq.n	8005ed4 <_strtod_l+0xac>
 8005eca:	2a20      	cmp	r2, #32
 8005ecc:	d1ca      	bne.n	8005e64 <_strtod_l+0x3c>
 8005ece:	3301      	adds	r3, #1
 8005ed0:	931b      	str	r3, [sp, #108]	; 0x6c
 8005ed2:	e7bf      	b.n	8005e54 <_strtod_l+0x2c>
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	920d      	str	r2, [sp, #52]	; 0x34
 8005ed8:	1c5a      	adds	r2, r3, #1
 8005eda:	921b      	str	r2, [sp, #108]	; 0x6c
 8005edc:	785b      	ldrb	r3, [r3, #1]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1c2      	bne.n	8005e68 <_strtod_l+0x40>
 8005ee2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ee4:	961b      	str	r6, [sp, #108]	; 0x6c
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f040 8579 	bne.w	80069de <_strtod_l+0xbb6>
 8005eec:	4652      	mov	r2, sl
 8005eee:	465b      	mov	r3, fp
 8005ef0:	e7e2      	b.n	8005eb8 <_strtod_l+0x90>
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	e7ef      	b.n	8005ed6 <_strtod_l+0xae>
 8005ef6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005ef8:	b13a      	cbz	r2, 8005f0a <_strtod_l+0xe2>
 8005efa:	2135      	movs	r1, #53	; 0x35
 8005efc:	a81e      	add	r0, sp, #120	; 0x78
 8005efe:	f002 fc57 	bl	80087b0 <__copybits>
 8005f02:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005f04:	4648      	mov	r0, r9
 8005f06:	f002 f8c4 	bl	8008092 <_Bfree>
 8005f0a:	3c01      	subs	r4, #1
 8005f0c:	2c04      	cmp	r4, #4
 8005f0e:	d806      	bhi.n	8005f1e <_strtod_l+0xf6>
 8005f10:	e8df f004 	tbb	[pc, r4]
 8005f14:	1714030a 	.word	0x1714030a
 8005f18:	0a          	.byte	0x0a
 8005f19:	00          	.byte	0x00
 8005f1a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8005f1e:	0730      	lsls	r0, r6, #28
 8005f20:	d5c1      	bpl.n	8005ea6 <_strtod_l+0x7e>
 8005f22:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005f26:	e7be      	b.n	8005ea6 <_strtod_l+0x7e>
 8005f28:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8005f2c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005f2e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005f32:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005f36:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005f3a:	e7f0      	b.n	8005f1e <_strtod_l+0xf6>
 8005f3c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80060b0 <_strtod_l+0x288>
 8005f40:	e7ed      	b.n	8005f1e <_strtod_l+0xf6>
 8005f42:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005f46:	f04f 3aff 	mov.w	sl, #4294967295
 8005f4a:	e7e8      	b.n	8005f1e <_strtod_l+0xf6>
 8005f4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005f4e:	1c5a      	adds	r2, r3, #1
 8005f50:	921b      	str	r2, [sp, #108]	; 0x6c
 8005f52:	785b      	ldrb	r3, [r3, #1]
 8005f54:	2b30      	cmp	r3, #48	; 0x30
 8005f56:	d0f9      	beq.n	8005f4c <_strtod_l+0x124>
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d0a4      	beq.n	8005ea6 <_strtod_l+0x7e>
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	2500      	movs	r5, #0
 8005f60:	9306      	str	r3, [sp, #24]
 8005f62:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005f64:	9308      	str	r3, [sp, #32]
 8005f66:	9507      	str	r5, [sp, #28]
 8005f68:	9505      	str	r5, [sp, #20]
 8005f6a:	220a      	movs	r2, #10
 8005f6c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005f6e:	7807      	ldrb	r7, [r0, #0]
 8005f70:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8005f74:	b2d9      	uxtb	r1, r3
 8005f76:	2909      	cmp	r1, #9
 8005f78:	d929      	bls.n	8005fce <_strtod_l+0x1a6>
 8005f7a:	4622      	mov	r2, r4
 8005f7c:	f8d8 1000 	ldr.w	r1, [r8]
 8005f80:	f002 ffed 	bl	8008f5e <strncmp>
 8005f84:	2800      	cmp	r0, #0
 8005f86:	d031      	beq.n	8005fec <_strtod_l+0x1c4>
 8005f88:	2000      	movs	r0, #0
 8005f8a:	9c05      	ldr	r4, [sp, #20]
 8005f8c:	9004      	str	r0, [sp, #16]
 8005f8e:	463b      	mov	r3, r7
 8005f90:	4602      	mov	r2, r0
 8005f92:	2b65      	cmp	r3, #101	; 0x65
 8005f94:	d001      	beq.n	8005f9a <_strtod_l+0x172>
 8005f96:	2b45      	cmp	r3, #69	; 0x45
 8005f98:	d114      	bne.n	8005fc4 <_strtod_l+0x19c>
 8005f9a:	b924      	cbnz	r4, 8005fa6 <_strtod_l+0x17e>
 8005f9c:	b910      	cbnz	r0, 8005fa4 <_strtod_l+0x17c>
 8005f9e:	9b06      	ldr	r3, [sp, #24]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d09e      	beq.n	8005ee2 <_strtod_l+0xba>
 8005fa4:	2400      	movs	r4, #0
 8005fa6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005fa8:	1c73      	adds	r3, r6, #1
 8005faa:	931b      	str	r3, [sp, #108]	; 0x6c
 8005fac:	7873      	ldrb	r3, [r6, #1]
 8005fae:	2b2b      	cmp	r3, #43	; 0x2b
 8005fb0:	d078      	beq.n	80060a4 <_strtod_l+0x27c>
 8005fb2:	2b2d      	cmp	r3, #45	; 0x2d
 8005fb4:	d070      	beq.n	8006098 <_strtod_l+0x270>
 8005fb6:	f04f 0c00 	mov.w	ip, #0
 8005fba:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8005fbe:	2f09      	cmp	r7, #9
 8005fc0:	d97c      	bls.n	80060bc <_strtod_l+0x294>
 8005fc2:	961b      	str	r6, [sp, #108]	; 0x6c
 8005fc4:	f04f 0e00 	mov.w	lr, #0
 8005fc8:	e09a      	b.n	8006100 <_strtod_l+0x2d8>
 8005fca:	2300      	movs	r3, #0
 8005fcc:	e7c7      	b.n	8005f5e <_strtod_l+0x136>
 8005fce:	9905      	ldr	r1, [sp, #20]
 8005fd0:	2908      	cmp	r1, #8
 8005fd2:	bfdd      	ittte	le
 8005fd4:	9907      	ldrle	r1, [sp, #28]
 8005fd6:	fb02 3301 	mlale	r3, r2, r1, r3
 8005fda:	9307      	strle	r3, [sp, #28]
 8005fdc:	fb02 3505 	mlagt	r5, r2, r5, r3
 8005fe0:	9b05      	ldr	r3, [sp, #20]
 8005fe2:	3001      	adds	r0, #1
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	9305      	str	r3, [sp, #20]
 8005fe8:	901b      	str	r0, [sp, #108]	; 0x6c
 8005fea:	e7bf      	b.n	8005f6c <_strtod_l+0x144>
 8005fec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005fee:	191a      	adds	r2, r3, r4
 8005ff0:	921b      	str	r2, [sp, #108]	; 0x6c
 8005ff2:	9a05      	ldr	r2, [sp, #20]
 8005ff4:	5d1b      	ldrb	r3, [r3, r4]
 8005ff6:	2a00      	cmp	r2, #0
 8005ff8:	d037      	beq.n	800606a <_strtod_l+0x242>
 8005ffa:	9c05      	ldr	r4, [sp, #20]
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006002:	2909      	cmp	r1, #9
 8006004:	d913      	bls.n	800602e <_strtod_l+0x206>
 8006006:	2101      	movs	r1, #1
 8006008:	9104      	str	r1, [sp, #16]
 800600a:	e7c2      	b.n	8005f92 <_strtod_l+0x16a>
 800600c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800600e:	1c5a      	adds	r2, r3, #1
 8006010:	921b      	str	r2, [sp, #108]	; 0x6c
 8006012:	785b      	ldrb	r3, [r3, #1]
 8006014:	3001      	adds	r0, #1
 8006016:	2b30      	cmp	r3, #48	; 0x30
 8006018:	d0f8      	beq.n	800600c <_strtod_l+0x1e4>
 800601a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800601e:	2a08      	cmp	r2, #8
 8006020:	f200 84e4 	bhi.w	80069ec <_strtod_l+0xbc4>
 8006024:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006026:	9208      	str	r2, [sp, #32]
 8006028:	4602      	mov	r2, r0
 800602a:	2000      	movs	r0, #0
 800602c:	4604      	mov	r4, r0
 800602e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8006032:	f100 0101 	add.w	r1, r0, #1
 8006036:	d012      	beq.n	800605e <_strtod_l+0x236>
 8006038:	440a      	add	r2, r1
 800603a:	eb00 0c04 	add.w	ip, r0, r4
 800603e:	4621      	mov	r1, r4
 8006040:	270a      	movs	r7, #10
 8006042:	458c      	cmp	ip, r1
 8006044:	d113      	bne.n	800606e <_strtod_l+0x246>
 8006046:	1821      	adds	r1, r4, r0
 8006048:	2908      	cmp	r1, #8
 800604a:	f104 0401 	add.w	r4, r4, #1
 800604e:	4404      	add	r4, r0
 8006050:	dc19      	bgt.n	8006086 <_strtod_l+0x25e>
 8006052:	9b07      	ldr	r3, [sp, #28]
 8006054:	210a      	movs	r1, #10
 8006056:	fb01 e303 	mla	r3, r1, r3, lr
 800605a:	9307      	str	r3, [sp, #28]
 800605c:	2100      	movs	r1, #0
 800605e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006060:	1c58      	adds	r0, r3, #1
 8006062:	901b      	str	r0, [sp, #108]	; 0x6c
 8006064:	785b      	ldrb	r3, [r3, #1]
 8006066:	4608      	mov	r0, r1
 8006068:	e7c9      	b.n	8005ffe <_strtod_l+0x1d6>
 800606a:	9805      	ldr	r0, [sp, #20]
 800606c:	e7d3      	b.n	8006016 <_strtod_l+0x1ee>
 800606e:	2908      	cmp	r1, #8
 8006070:	f101 0101 	add.w	r1, r1, #1
 8006074:	dc03      	bgt.n	800607e <_strtod_l+0x256>
 8006076:	9b07      	ldr	r3, [sp, #28]
 8006078:	437b      	muls	r3, r7
 800607a:	9307      	str	r3, [sp, #28]
 800607c:	e7e1      	b.n	8006042 <_strtod_l+0x21a>
 800607e:	2910      	cmp	r1, #16
 8006080:	bfd8      	it	le
 8006082:	437d      	mulle	r5, r7
 8006084:	e7dd      	b.n	8006042 <_strtod_l+0x21a>
 8006086:	2c10      	cmp	r4, #16
 8006088:	bfdc      	itt	le
 800608a:	210a      	movle	r1, #10
 800608c:	fb01 e505 	mlale	r5, r1, r5, lr
 8006090:	e7e4      	b.n	800605c <_strtod_l+0x234>
 8006092:	2301      	movs	r3, #1
 8006094:	9304      	str	r3, [sp, #16]
 8006096:	e781      	b.n	8005f9c <_strtod_l+0x174>
 8006098:	f04f 0c01 	mov.w	ip, #1
 800609c:	1cb3      	adds	r3, r6, #2
 800609e:	931b      	str	r3, [sp, #108]	; 0x6c
 80060a0:	78b3      	ldrb	r3, [r6, #2]
 80060a2:	e78a      	b.n	8005fba <_strtod_l+0x192>
 80060a4:	f04f 0c00 	mov.w	ip, #0
 80060a8:	e7f8      	b.n	800609c <_strtod_l+0x274>
 80060aa:	bf00      	nop
 80060ac:	0800955c 	.word	0x0800955c
 80060b0:	7ff00000 	.word	0x7ff00000
 80060b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80060b6:	1c5f      	adds	r7, r3, #1
 80060b8:	971b      	str	r7, [sp, #108]	; 0x6c
 80060ba:	785b      	ldrb	r3, [r3, #1]
 80060bc:	2b30      	cmp	r3, #48	; 0x30
 80060be:	d0f9      	beq.n	80060b4 <_strtod_l+0x28c>
 80060c0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80060c4:	2f08      	cmp	r7, #8
 80060c6:	f63f af7d 	bhi.w	8005fc4 <_strtod_l+0x19c>
 80060ca:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80060ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80060d0:	930a      	str	r3, [sp, #40]	; 0x28
 80060d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80060d4:	1c5f      	adds	r7, r3, #1
 80060d6:	971b      	str	r7, [sp, #108]	; 0x6c
 80060d8:	785b      	ldrb	r3, [r3, #1]
 80060da:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80060de:	f1b8 0f09 	cmp.w	r8, #9
 80060e2:	d937      	bls.n	8006154 <_strtod_l+0x32c>
 80060e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80060e6:	1a7f      	subs	r7, r7, r1
 80060e8:	2f08      	cmp	r7, #8
 80060ea:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80060ee:	dc37      	bgt.n	8006160 <_strtod_l+0x338>
 80060f0:	45be      	cmp	lr, r7
 80060f2:	bfa8      	it	ge
 80060f4:	46be      	movge	lr, r7
 80060f6:	f1bc 0f00 	cmp.w	ip, #0
 80060fa:	d001      	beq.n	8006100 <_strtod_l+0x2d8>
 80060fc:	f1ce 0e00 	rsb	lr, lr, #0
 8006100:	2c00      	cmp	r4, #0
 8006102:	d151      	bne.n	80061a8 <_strtod_l+0x380>
 8006104:	2800      	cmp	r0, #0
 8006106:	f47f aece 	bne.w	8005ea6 <_strtod_l+0x7e>
 800610a:	9a06      	ldr	r2, [sp, #24]
 800610c:	2a00      	cmp	r2, #0
 800610e:	f47f aeca 	bne.w	8005ea6 <_strtod_l+0x7e>
 8006112:	9a04      	ldr	r2, [sp, #16]
 8006114:	2a00      	cmp	r2, #0
 8006116:	f47f aee4 	bne.w	8005ee2 <_strtod_l+0xba>
 800611a:	2b4e      	cmp	r3, #78	; 0x4e
 800611c:	d027      	beq.n	800616e <_strtod_l+0x346>
 800611e:	dc21      	bgt.n	8006164 <_strtod_l+0x33c>
 8006120:	2b49      	cmp	r3, #73	; 0x49
 8006122:	f47f aede 	bne.w	8005ee2 <_strtod_l+0xba>
 8006126:	49a0      	ldr	r1, [pc, #640]	; (80063a8 <_strtod_l+0x580>)
 8006128:	a81b      	add	r0, sp, #108	; 0x6c
 800612a:	f001 fea1 	bl	8007e70 <__match>
 800612e:	2800      	cmp	r0, #0
 8006130:	f43f aed7 	beq.w	8005ee2 <_strtod_l+0xba>
 8006134:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006136:	499d      	ldr	r1, [pc, #628]	; (80063ac <_strtod_l+0x584>)
 8006138:	3b01      	subs	r3, #1
 800613a:	a81b      	add	r0, sp, #108	; 0x6c
 800613c:	931b      	str	r3, [sp, #108]	; 0x6c
 800613e:	f001 fe97 	bl	8007e70 <__match>
 8006142:	b910      	cbnz	r0, 800614a <_strtod_l+0x322>
 8006144:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006146:	3301      	adds	r3, #1
 8006148:	931b      	str	r3, [sp, #108]	; 0x6c
 800614a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80063c0 <_strtod_l+0x598>
 800614e:	f04f 0a00 	mov.w	sl, #0
 8006152:	e6a8      	b.n	8005ea6 <_strtod_l+0x7e>
 8006154:	210a      	movs	r1, #10
 8006156:	fb01 3e0e 	mla	lr, r1, lr, r3
 800615a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800615e:	e7b8      	b.n	80060d2 <_strtod_l+0x2aa>
 8006160:	46be      	mov	lr, r7
 8006162:	e7c8      	b.n	80060f6 <_strtod_l+0x2ce>
 8006164:	2b69      	cmp	r3, #105	; 0x69
 8006166:	d0de      	beq.n	8006126 <_strtod_l+0x2fe>
 8006168:	2b6e      	cmp	r3, #110	; 0x6e
 800616a:	f47f aeba 	bne.w	8005ee2 <_strtod_l+0xba>
 800616e:	4990      	ldr	r1, [pc, #576]	; (80063b0 <_strtod_l+0x588>)
 8006170:	a81b      	add	r0, sp, #108	; 0x6c
 8006172:	f001 fe7d 	bl	8007e70 <__match>
 8006176:	2800      	cmp	r0, #0
 8006178:	f43f aeb3 	beq.w	8005ee2 <_strtod_l+0xba>
 800617c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	2b28      	cmp	r3, #40	; 0x28
 8006182:	d10e      	bne.n	80061a2 <_strtod_l+0x37a>
 8006184:	aa1e      	add	r2, sp, #120	; 0x78
 8006186:	498b      	ldr	r1, [pc, #556]	; (80063b4 <_strtod_l+0x58c>)
 8006188:	a81b      	add	r0, sp, #108	; 0x6c
 800618a:	f001 fe85 	bl	8007e98 <__hexnan>
 800618e:	2805      	cmp	r0, #5
 8006190:	d107      	bne.n	80061a2 <_strtod_l+0x37a>
 8006192:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006194:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8006198:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800619c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80061a0:	e681      	b.n	8005ea6 <_strtod_l+0x7e>
 80061a2:	f8df b224 	ldr.w	fp, [pc, #548]	; 80063c8 <_strtod_l+0x5a0>
 80061a6:	e7d2      	b.n	800614e <_strtod_l+0x326>
 80061a8:	ebae 0302 	sub.w	r3, lr, r2
 80061ac:	9306      	str	r3, [sp, #24]
 80061ae:	9b05      	ldr	r3, [sp, #20]
 80061b0:	9807      	ldr	r0, [sp, #28]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	bf08      	it	eq
 80061b6:	4623      	moveq	r3, r4
 80061b8:	2c10      	cmp	r4, #16
 80061ba:	9305      	str	r3, [sp, #20]
 80061bc:	46a0      	mov	r8, r4
 80061be:	bfa8      	it	ge
 80061c0:	f04f 0810 	movge.w	r8, #16
 80061c4:	f7fa f99e 	bl	8000504 <__aeabi_ui2d>
 80061c8:	2c09      	cmp	r4, #9
 80061ca:	4682      	mov	sl, r0
 80061cc:	468b      	mov	fp, r1
 80061ce:	dc13      	bgt.n	80061f8 <_strtod_l+0x3d0>
 80061d0:	9b06      	ldr	r3, [sp, #24]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f43f ae67 	beq.w	8005ea6 <_strtod_l+0x7e>
 80061d8:	9b06      	ldr	r3, [sp, #24]
 80061da:	dd7a      	ble.n	80062d2 <_strtod_l+0x4aa>
 80061dc:	2b16      	cmp	r3, #22
 80061de:	dc61      	bgt.n	80062a4 <_strtod_l+0x47c>
 80061e0:	4a75      	ldr	r2, [pc, #468]	; (80063b8 <_strtod_l+0x590>)
 80061e2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80061e6:	e9de 0100 	ldrd	r0, r1, [lr]
 80061ea:	4652      	mov	r2, sl
 80061ec:	465b      	mov	r3, fp
 80061ee:	f7fa fa03 	bl	80005f8 <__aeabi_dmul>
 80061f2:	4682      	mov	sl, r0
 80061f4:	468b      	mov	fp, r1
 80061f6:	e656      	b.n	8005ea6 <_strtod_l+0x7e>
 80061f8:	4b6f      	ldr	r3, [pc, #444]	; (80063b8 <_strtod_l+0x590>)
 80061fa:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80061fe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006202:	f7fa f9f9 	bl	80005f8 <__aeabi_dmul>
 8006206:	4606      	mov	r6, r0
 8006208:	4628      	mov	r0, r5
 800620a:	460f      	mov	r7, r1
 800620c:	f7fa f97a 	bl	8000504 <__aeabi_ui2d>
 8006210:	4602      	mov	r2, r0
 8006212:	460b      	mov	r3, r1
 8006214:	4630      	mov	r0, r6
 8006216:	4639      	mov	r1, r7
 8006218:	f7fa f838 	bl	800028c <__adddf3>
 800621c:	2c0f      	cmp	r4, #15
 800621e:	4682      	mov	sl, r0
 8006220:	468b      	mov	fp, r1
 8006222:	ddd5      	ble.n	80061d0 <_strtod_l+0x3a8>
 8006224:	9b06      	ldr	r3, [sp, #24]
 8006226:	eba4 0808 	sub.w	r8, r4, r8
 800622a:	4498      	add	r8, r3
 800622c:	f1b8 0f00 	cmp.w	r8, #0
 8006230:	f340 8096 	ble.w	8006360 <_strtod_l+0x538>
 8006234:	f018 030f 	ands.w	r3, r8, #15
 8006238:	d00a      	beq.n	8006250 <_strtod_l+0x428>
 800623a:	495f      	ldr	r1, [pc, #380]	; (80063b8 <_strtod_l+0x590>)
 800623c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006240:	4652      	mov	r2, sl
 8006242:	465b      	mov	r3, fp
 8006244:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006248:	f7fa f9d6 	bl	80005f8 <__aeabi_dmul>
 800624c:	4682      	mov	sl, r0
 800624e:	468b      	mov	fp, r1
 8006250:	f038 080f 	bics.w	r8, r8, #15
 8006254:	d073      	beq.n	800633e <_strtod_l+0x516>
 8006256:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800625a:	dd47      	ble.n	80062ec <_strtod_l+0x4c4>
 800625c:	2400      	movs	r4, #0
 800625e:	46a0      	mov	r8, r4
 8006260:	9407      	str	r4, [sp, #28]
 8006262:	9405      	str	r4, [sp, #20]
 8006264:	2322      	movs	r3, #34	; 0x22
 8006266:	f8df b158 	ldr.w	fp, [pc, #344]	; 80063c0 <_strtod_l+0x598>
 800626a:	f8c9 3000 	str.w	r3, [r9]
 800626e:	f04f 0a00 	mov.w	sl, #0
 8006272:	9b07      	ldr	r3, [sp, #28]
 8006274:	2b00      	cmp	r3, #0
 8006276:	f43f ae16 	beq.w	8005ea6 <_strtod_l+0x7e>
 800627a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800627c:	4648      	mov	r0, r9
 800627e:	f001 ff08 	bl	8008092 <_Bfree>
 8006282:	9905      	ldr	r1, [sp, #20]
 8006284:	4648      	mov	r0, r9
 8006286:	f001 ff04 	bl	8008092 <_Bfree>
 800628a:	4641      	mov	r1, r8
 800628c:	4648      	mov	r0, r9
 800628e:	f001 ff00 	bl	8008092 <_Bfree>
 8006292:	9907      	ldr	r1, [sp, #28]
 8006294:	4648      	mov	r0, r9
 8006296:	f001 fefc 	bl	8008092 <_Bfree>
 800629a:	4621      	mov	r1, r4
 800629c:	4648      	mov	r0, r9
 800629e:	f001 fef8 	bl	8008092 <_Bfree>
 80062a2:	e600      	b.n	8005ea6 <_strtod_l+0x7e>
 80062a4:	9a06      	ldr	r2, [sp, #24]
 80062a6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80062aa:	4293      	cmp	r3, r2
 80062ac:	dbba      	blt.n	8006224 <_strtod_l+0x3fc>
 80062ae:	4d42      	ldr	r5, [pc, #264]	; (80063b8 <_strtod_l+0x590>)
 80062b0:	f1c4 040f 	rsb	r4, r4, #15
 80062b4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80062b8:	4652      	mov	r2, sl
 80062ba:	465b      	mov	r3, fp
 80062bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062c0:	f7fa f99a 	bl	80005f8 <__aeabi_dmul>
 80062c4:	9b06      	ldr	r3, [sp, #24]
 80062c6:	1b1c      	subs	r4, r3, r4
 80062c8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80062cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80062d0:	e78d      	b.n	80061ee <_strtod_l+0x3c6>
 80062d2:	f113 0f16 	cmn.w	r3, #22
 80062d6:	dba5      	blt.n	8006224 <_strtod_l+0x3fc>
 80062d8:	4a37      	ldr	r2, [pc, #220]	; (80063b8 <_strtod_l+0x590>)
 80062da:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80062de:	e9d2 2300 	ldrd	r2, r3, [r2]
 80062e2:	4650      	mov	r0, sl
 80062e4:	4659      	mov	r1, fp
 80062e6:	f7fa fab1 	bl	800084c <__aeabi_ddiv>
 80062ea:	e782      	b.n	80061f2 <_strtod_l+0x3ca>
 80062ec:	2300      	movs	r3, #0
 80062ee:	4e33      	ldr	r6, [pc, #204]	; (80063bc <_strtod_l+0x594>)
 80062f0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80062f4:	4650      	mov	r0, sl
 80062f6:	4659      	mov	r1, fp
 80062f8:	461d      	mov	r5, r3
 80062fa:	f1b8 0f01 	cmp.w	r8, #1
 80062fe:	dc21      	bgt.n	8006344 <_strtod_l+0x51c>
 8006300:	b10b      	cbz	r3, 8006306 <_strtod_l+0x4de>
 8006302:	4682      	mov	sl, r0
 8006304:	468b      	mov	fp, r1
 8006306:	4b2d      	ldr	r3, [pc, #180]	; (80063bc <_strtod_l+0x594>)
 8006308:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800630c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006310:	4652      	mov	r2, sl
 8006312:	465b      	mov	r3, fp
 8006314:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006318:	f7fa f96e 	bl	80005f8 <__aeabi_dmul>
 800631c:	4b28      	ldr	r3, [pc, #160]	; (80063c0 <_strtod_l+0x598>)
 800631e:	460a      	mov	r2, r1
 8006320:	400b      	ands	r3, r1
 8006322:	4928      	ldr	r1, [pc, #160]	; (80063c4 <_strtod_l+0x59c>)
 8006324:	428b      	cmp	r3, r1
 8006326:	4682      	mov	sl, r0
 8006328:	d898      	bhi.n	800625c <_strtod_l+0x434>
 800632a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800632e:	428b      	cmp	r3, r1
 8006330:	bf86      	itte	hi
 8006332:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80063cc <_strtod_l+0x5a4>
 8006336:	f04f 3aff 	movhi.w	sl, #4294967295
 800633a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800633e:	2300      	movs	r3, #0
 8006340:	9304      	str	r3, [sp, #16]
 8006342:	e077      	b.n	8006434 <_strtod_l+0x60c>
 8006344:	f018 0f01 	tst.w	r8, #1
 8006348:	d006      	beq.n	8006358 <_strtod_l+0x530>
 800634a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800634e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006352:	f7fa f951 	bl	80005f8 <__aeabi_dmul>
 8006356:	2301      	movs	r3, #1
 8006358:	3501      	adds	r5, #1
 800635a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800635e:	e7cc      	b.n	80062fa <_strtod_l+0x4d2>
 8006360:	d0ed      	beq.n	800633e <_strtod_l+0x516>
 8006362:	f1c8 0800 	rsb	r8, r8, #0
 8006366:	f018 020f 	ands.w	r2, r8, #15
 800636a:	d00a      	beq.n	8006382 <_strtod_l+0x55a>
 800636c:	4b12      	ldr	r3, [pc, #72]	; (80063b8 <_strtod_l+0x590>)
 800636e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006372:	4650      	mov	r0, sl
 8006374:	4659      	mov	r1, fp
 8006376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637a:	f7fa fa67 	bl	800084c <__aeabi_ddiv>
 800637e:	4682      	mov	sl, r0
 8006380:	468b      	mov	fp, r1
 8006382:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006386:	d0da      	beq.n	800633e <_strtod_l+0x516>
 8006388:	f1b8 0f1f 	cmp.w	r8, #31
 800638c:	dd20      	ble.n	80063d0 <_strtod_l+0x5a8>
 800638e:	2400      	movs	r4, #0
 8006390:	46a0      	mov	r8, r4
 8006392:	9407      	str	r4, [sp, #28]
 8006394:	9405      	str	r4, [sp, #20]
 8006396:	2322      	movs	r3, #34	; 0x22
 8006398:	f04f 0a00 	mov.w	sl, #0
 800639c:	f04f 0b00 	mov.w	fp, #0
 80063a0:	f8c9 3000 	str.w	r3, [r9]
 80063a4:	e765      	b.n	8006272 <_strtod_l+0x44a>
 80063a6:	bf00      	nop
 80063a8:	08009525 	.word	0x08009525
 80063ac:	080095b3 	.word	0x080095b3
 80063b0:	0800952d 	.word	0x0800952d
 80063b4:	08009570 	.word	0x08009570
 80063b8:	08009658 	.word	0x08009658
 80063bc:	08009630 	.word	0x08009630
 80063c0:	7ff00000 	.word	0x7ff00000
 80063c4:	7ca00000 	.word	0x7ca00000
 80063c8:	fff80000 	.word	0xfff80000
 80063cc:	7fefffff 	.word	0x7fefffff
 80063d0:	f018 0310 	ands.w	r3, r8, #16
 80063d4:	bf18      	it	ne
 80063d6:	236a      	movne	r3, #106	; 0x6a
 80063d8:	4da0      	ldr	r5, [pc, #640]	; (800665c <_strtod_l+0x834>)
 80063da:	9304      	str	r3, [sp, #16]
 80063dc:	4650      	mov	r0, sl
 80063de:	4659      	mov	r1, fp
 80063e0:	2300      	movs	r3, #0
 80063e2:	f1b8 0f00 	cmp.w	r8, #0
 80063e6:	f300 810a 	bgt.w	80065fe <_strtod_l+0x7d6>
 80063ea:	b10b      	cbz	r3, 80063f0 <_strtod_l+0x5c8>
 80063ec:	4682      	mov	sl, r0
 80063ee:	468b      	mov	fp, r1
 80063f0:	9b04      	ldr	r3, [sp, #16]
 80063f2:	b1bb      	cbz	r3, 8006424 <_strtod_l+0x5fc>
 80063f4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80063f8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	4659      	mov	r1, fp
 8006400:	dd10      	ble.n	8006424 <_strtod_l+0x5fc>
 8006402:	2b1f      	cmp	r3, #31
 8006404:	f340 8107 	ble.w	8006616 <_strtod_l+0x7ee>
 8006408:	2b34      	cmp	r3, #52	; 0x34
 800640a:	bfde      	ittt	le
 800640c:	3b20      	suble	r3, #32
 800640e:	f04f 32ff 	movle.w	r2, #4294967295
 8006412:	fa02 f303 	lslle.w	r3, r2, r3
 8006416:	f04f 0a00 	mov.w	sl, #0
 800641a:	bfcc      	ite	gt
 800641c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006420:	ea03 0b01 	andle.w	fp, r3, r1
 8006424:	2200      	movs	r2, #0
 8006426:	2300      	movs	r3, #0
 8006428:	4650      	mov	r0, sl
 800642a:	4659      	mov	r1, fp
 800642c:	f7fa fb4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006430:	2800      	cmp	r0, #0
 8006432:	d1ac      	bne.n	800638e <_strtod_l+0x566>
 8006434:	9b07      	ldr	r3, [sp, #28]
 8006436:	9300      	str	r3, [sp, #0]
 8006438:	9a05      	ldr	r2, [sp, #20]
 800643a:	9908      	ldr	r1, [sp, #32]
 800643c:	4623      	mov	r3, r4
 800643e:	4648      	mov	r0, r9
 8006440:	f001 fe79 	bl	8008136 <__s2b>
 8006444:	9007      	str	r0, [sp, #28]
 8006446:	2800      	cmp	r0, #0
 8006448:	f43f af08 	beq.w	800625c <_strtod_l+0x434>
 800644c:	9a06      	ldr	r2, [sp, #24]
 800644e:	9b06      	ldr	r3, [sp, #24]
 8006450:	2a00      	cmp	r2, #0
 8006452:	f1c3 0300 	rsb	r3, r3, #0
 8006456:	bfa8      	it	ge
 8006458:	2300      	movge	r3, #0
 800645a:	930e      	str	r3, [sp, #56]	; 0x38
 800645c:	2400      	movs	r4, #0
 800645e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006462:	9316      	str	r3, [sp, #88]	; 0x58
 8006464:	46a0      	mov	r8, r4
 8006466:	9b07      	ldr	r3, [sp, #28]
 8006468:	4648      	mov	r0, r9
 800646a:	6859      	ldr	r1, [r3, #4]
 800646c:	f001 fddd 	bl	800802a <_Balloc>
 8006470:	9005      	str	r0, [sp, #20]
 8006472:	2800      	cmp	r0, #0
 8006474:	f43f aef6 	beq.w	8006264 <_strtod_l+0x43c>
 8006478:	9b07      	ldr	r3, [sp, #28]
 800647a:	691a      	ldr	r2, [r3, #16]
 800647c:	3202      	adds	r2, #2
 800647e:	f103 010c 	add.w	r1, r3, #12
 8006482:	0092      	lsls	r2, r2, #2
 8006484:	300c      	adds	r0, #12
 8006486:	f001 fdc5 	bl	8008014 <memcpy>
 800648a:	aa1e      	add	r2, sp, #120	; 0x78
 800648c:	a91d      	add	r1, sp, #116	; 0x74
 800648e:	ec4b ab10 	vmov	d0, sl, fp
 8006492:	4648      	mov	r0, r9
 8006494:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006498:	f002 f908 	bl	80086ac <__d2b>
 800649c:	901c      	str	r0, [sp, #112]	; 0x70
 800649e:	2800      	cmp	r0, #0
 80064a0:	f43f aee0 	beq.w	8006264 <_strtod_l+0x43c>
 80064a4:	2101      	movs	r1, #1
 80064a6:	4648      	mov	r0, r9
 80064a8:	f001 fed1 	bl	800824e <__i2b>
 80064ac:	4680      	mov	r8, r0
 80064ae:	2800      	cmp	r0, #0
 80064b0:	f43f aed8 	beq.w	8006264 <_strtod_l+0x43c>
 80064b4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80064b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80064b8:	2e00      	cmp	r6, #0
 80064ba:	bfab      	itete	ge
 80064bc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80064be:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80064c0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80064c2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80064c4:	bfac      	ite	ge
 80064c6:	18f7      	addge	r7, r6, r3
 80064c8:	1b9d      	sublt	r5, r3, r6
 80064ca:	9b04      	ldr	r3, [sp, #16]
 80064cc:	1af6      	subs	r6, r6, r3
 80064ce:	4416      	add	r6, r2
 80064d0:	4b63      	ldr	r3, [pc, #396]	; (8006660 <_strtod_l+0x838>)
 80064d2:	3e01      	subs	r6, #1
 80064d4:	429e      	cmp	r6, r3
 80064d6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80064da:	f280 80af 	bge.w	800663c <_strtod_l+0x814>
 80064de:	1b9b      	subs	r3, r3, r6
 80064e0:	2b1f      	cmp	r3, #31
 80064e2:	eba2 0203 	sub.w	r2, r2, r3
 80064e6:	f04f 0101 	mov.w	r1, #1
 80064ea:	f300 809b 	bgt.w	8006624 <_strtod_l+0x7fc>
 80064ee:	fa01 f303 	lsl.w	r3, r1, r3
 80064f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80064f4:	2300      	movs	r3, #0
 80064f6:	930a      	str	r3, [sp, #40]	; 0x28
 80064f8:	18be      	adds	r6, r7, r2
 80064fa:	9b04      	ldr	r3, [sp, #16]
 80064fc:	42b7      	cmp	r7, r6
 80064fe:	4415      	add	r5, r2
 8006500:	441d      	add	r5, r3
 8006502:	463b      	mov	r3, r7
 8006504:	bfa8      	it	ge
 8006506:	4633      	movge	r3, r6
 8006508:	42ab      	cmp	r3, r5
 800650a:	bfa8      	it	ge
 800650c:	462b      	movge	r3, r5
 800650e:	2b00      	cmp	r3, #0
 8006510:	bfc2      	ittt	gt
 8006512:	1af6      	subgt	r6, r6, r3
 8006514:	1aed      	subgt	r5, r5, r3
 8006516:	1aff      	subgt	r7, r7, r3
 8006518:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800651a:	b1bb      	cbz	r3, 800654c <_strtod_l+0x724>
 800651c:	4641      	mov	r1, r8
 800651e:	461a      	mov	r2, r3
 8006520:	4648      	mov	r0, r9
 8006522:	f001 ff33 	bl	800838c <__pow5mult>
 8006526:	4680      	mov	r8, r0
 8006528:	2800      	cmp	r0, #0
 800652a:	f43f ae9b 	beq.w	8006264 <_strtod_l+0x43c>
 800652e:	4601      	mov	r1, r0
 8006530:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006532:	4648      	mov	r0, r9
 8006534:	f001 fe94 	bl	8008260 <__multiply>
 8006538:	900c      	str	r0, [sp, #48]	; 0x30
 800653a:	2800      	cmp	r0, #0
 800653c:	f43f ae92 	beq.w	8006264 <_strtod_l+0x43c>
 8006540:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006542:	4648      	mov	r0, r9
 8006544:	f001 fda5 	bl	8008092 <_Bfree>
 8006548:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800654a:	931c      	str	r3, [sp, #112]	; 0x70
 800654c:	2e00      	cmp	r6, #0
 800654e:	dc7a      	bgt.n	8006646 <_strtod_l+0x81e>
 8006550:	9b06      	ldr	r3, [sp, #24]
 8006552:	2b00      	cmp	r3, #0
 8006554:	dd08      	ble.n	8006568 <_strtod_l+0x740>
 8006556:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006558:	9905      	ldr	r1, [sp, #20]
 800655a:	4648      	mov	r0, r9
 800655c:	f001 ff16 	bl	800838c <__pow5mult>
 8006560:	9005      	str	r0, [sp, #20]
 8006562:	2800      	cmp	r0, #0
 8006564:	f43f ae7e 	beq.w	8006264 <_strtod_l+0x43c>
 8006568:	2d00      	cmp	r5, #0
 800656a:	dd08      	ble.n	800657e <_strtod_l+0x756>
 800656c:	462a      	mov	r2, r5
 800656e:	9905      	ldr	r1, [sp, #20]
 8006570:	4648      	mov	r0, r9
 8006572:	f001 ff59 	bl	8008428 <__lshift>
 8006576:	9005      	str	r0, [sp, #20]
 8006578:	2800      	cmp	r0, #0
 800657a:	f43f ae73 	beq.w	8006264 <_strtod_l+0x43c>
 800657e:	2f00      	cmp	r7, #0
 8006580:	dd08      	ble.n	8006594 <_strtod_l+0x76c>
 8006582:	4641      	mov	r1, r8
 8006584:	463a      	mov	r2, r7
 8006586:	4648      	mov	r0, r9
 8006588:	f001 ff4e 	bl	8008428 <__lshift>
 800658c:	4680      	mov	r8, r0
 800658e:	2800      	cmp	r0, #0
 8006590:	f43f ae68 	beq.w	8006264 <_strtod_l+0x43c>
 8006594:	9a05      	ldr	r2, [sp, #20]
 8006596:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006598:	4648      	mov	r0, r9
 800659a:	f001 ffb3 	bl	8008504 <__mdiff>
 800659e:	4604      	mov	r4, r0
 80065a0:	2800      	cmp	r0, #0
 80065a2:	f43f ae5f 	beq.w	8006264 <_strtod_l+0x43c>
 80065a6:	68c3      	ldr	r3, [r0, #12]
 80065a8:	930c      	str	r3, [sp, #48]	; 0x30
 80065aa:	2300      	movs	r3, #0
 80065ac:	60c3      	str	r3, [r0, #12]
 80065ae:	4641      	mov	r1, r8
 80065b0:	f001 ff8e 	bl	80084d0 <__mcmp>
 80065b4:	2800      	cmp	r0, #0
 80065b6:	da55      	bge.n	8006664 <_strtod_l+0x83c>
 80065b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065ba:	b9e3      	cbnz	r3, 80065f6 <_strtod_l+0x7ce>
 80065bc:	f1ba 0f00 	cmp.w	sl, #0
 80065c0:	d119      	bne.n	80065f6 <_strtod_l+0x7ce>
 80065c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80065c6:	b9b3      	cbnz	r3, 80065f6 <_strtod_l+0x7ce>
 80065c8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80065cc:	0d1b      	lsrs	r3, r3, #20
 80065ce:	051b      	lsls	r3, r3, #20
 80065d0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80065d4:	d90f      	bls.n	80065f6 <_strtod_l+0x7ce>
 80065d6:	6963      	ldr	r3, [r4, #20]
 80065d8:	b913      	cbnz	r3, 80065e0 <_strtod_l+0x7b8>
 80065da:	6923      	ldr	r3, [r4, #16]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	dd0a      	ble.n	80065f6 <_strtod_l+0x7ce>
 80065e0:	4621      	mov	r1, r4
 80065e2:	2201      	movs	r2, #1
 80065e4:	4648      	mov	r0, r9
 80065e6:	f001 ff1f 	bl	8008428 <__lshift>
 80065ea:	4641      	mov	r1, r8
 80065ec:	4604      	mov	r4, r0
 80065ee:	f001 ff6f 	bl	80084d0 <__mcmp>
 80065f2:	2800      	cmp	r0, #0
 80065f4:	dc67      	bgt.n	80066c6 <_strtod_l+0x89e>
 80065f6:	9b04      	ldr	r3, [sp, #16]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d171      	bne.n	80066e0 <_strtod_l+0x8b8>
 80065fc:	e63d      	b.n	800627a <_strtod_l+0x452>
 80065fe:	f018 0f01 	tst.w	r8, #1
 8006602:	d004      	beq.n	800660e <_strtod_l+0x7e6>
 8006604:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006608:	f7f9 fff6 	bl	80005f8 <__aeabi_dmul>
 800660c:	2301      	movs	r3, #1
 800660e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006612:	3508      	adds	r5, #8
 8006614:	e6e5      	b.n	80063e2 <_strtod_l+0x5ba>
 8006616:	f04f 32ff 	mov.w	r2, #4294967295
 800661a:	fa02 f303 	lsl.w	r3, r2, r3
 800661e:	ea03 0a0a 	and.w	sl, r3, sl
 8006622:	e6ff      	b.n	8006424 <_strtod_l+0x5fc>
 8006624:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8006628:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800662c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8006630:	36e2      	adds	r6, #226	; 0xe2
 8006632:	fa01 f306 	lsl.w	r3, r1, r6
 8006636:	930a      	str	r3, [sp, #40]	; 0x28
 8006638:	910f      	str	r1, [sp, #60]	; 0x3c
 800663a:	e75d      	b.n	80064f8 <_strtod_l+0x6d0>
 800663c:	2300      	movs	r3, #0
 800663e:	930a      	str	r3, [sp, #40]	; 0x28
 8006640:	2301      	movs	r3, #1
 8006642:	930f      	str	r3, [sp, #60]	; 0x3c
 8006644:	e758      	b.n	80064f8 <_strtod_l+0x6d0>
 8006646:	4632      	mov	r2, r6
 8006648:	991c      	ldr	r1, [sp, #112]	; 0x70
 800664a:	4648      	mov	r0, r9
 800664c:	f001 feec 	bl	8008428 <__lshift>
 8006650:	901c      	str	r0, [sp, #112]	; 0x70
 8006652:	2800      	cmp	r0, #0
 8006654:	f47f af7c 	bne.w	8006550 <_strtod_l+0x728>
 8006658:	e604      	b.n	8006264 <_strtod_l+0x43c>
 800665a:	bf00      	nop
 800665c:	08009588 	.word	0x08009588
 8006660:	fffffc02 	.word	0xfffffc02
 8006664:	465d      	mov	r5, fp
 8006666:	f040 8086 	bne.w	8006776 <_strtod_l+0x94e>
 800666a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800666c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006670:	b32a      	cbz	r2, 80066be <_strtod_l+0x896>
 8006672:	4aaf      	ldr	r2, [pc, #700]	; (8006930 <_strtod_l+0xb08>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d153      	bne.n	8006720 <_strtod_l+0x8f8>
 8006678:	9b04      	ldr	r3, [sp, #16]
 800667a:	4650      	mov	r0, sl
 800667c:	b1d3      	cbz	r3, 80066b4 <_strtod_l+0x88c>
 800667e:	4aad      	ldr	r2, [pc, #692]	; (8006934 <_strtod_l+0xb0c>)
 8006680:	402a      	ands	r2, r5
 8006682:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006686:	f04f 31ff 	mov.w	r1, #4294967295
 800668a:	d816      	bhi.n	80066ba <_strtod_l+0x892>
 800668c:	0d12      	lsrs	r2, r2, #20
 800668e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006692:	fa01 f303 	lsl.w	r3, r1, r3
 8006696:	4298      	cmp	r0, r3
 8006698:	d142      	bne.n	8006720 <_strtod_l+0x8f8>
 800669a:	4ba7      	ldr	r3, [pc, #668]	; (8006938 <_strtod_l+0xb10>)
 800669c:	429d      	cmp	r5, r3
 800669e:	d102      	bne.n	80066a6 <_strtod_l+0x87e>
 80066a0:	3001      	adds	r0, #1
 80066a2:	f43f addf 	beq.w	8006264 <_strtod_l+0x43c>
 80066a6:	4ba3      	ldr	r3, [pc, #652]	; (8006934 <_strtod_l+0xb0c>)
 80066a8:	402b      	ands	r3, r5
 80066aa:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80066ae:	f04f 0a00 	mov.w	sl, #0
 80066b2:	e7a0      	b.n	80065f6 <_strtod_l+0x7ce>
 80066b4:	f04f 33ff 	mov.w	r3, #4294967295
 80066b8:	e7ed      	b.n	8006696 <_strtod_l+0x86e>
 80066ba:	460b      	mov	r3, r1
 80066bc:	e7eb      	b.n	8006696 <_strtod_l+0x86e>
 80066be:	bb7b      	cbnz	r3, 8006720 <_strtod_l+0x8f8>
 80066c0:	f1ba 0f00 	cmp.w	sl, #0
 80066c4:	d12c      	bne.n	8006720 <_strtod_l+0x8f8>
 80066c6:	9904      	ldr	r1, [sp, #16]
 80066c8:	4a9a      	ldr	r2, [pc, #616]	; (8006934 <_strtod_l+0xb0c>)
 80066ca:	465b      	mov	r3, fp
 80066cc:	b1f1      	cbz	r1, 800670c <_strtod_l+0x8e4>
 80066ce:	ea02 010b 	and.w	r1, r2, fp
 80066d2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80066d6:	dc19      	bgt.n	800670c <_strtod_l+0x8e4>
 80066d8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80066dc:	f77f ae5b 	ble.w	8006396 <_strtod_l+0x56e>
 80066e0:	4a96      	ldr	r2, [pc, #600]	; (800693c <_strtod_l+0xb14>)
 80066e2:	2300      	movs	r3, #0
 80066e4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80066e8:	4650      	mov	r0, sl
 80066ea:	4659      	mov	r1, fp
 80066ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80066f0:	f7f9 ff82 	bl	80005f8 <__aeabi_dmul>
 80066f4:	4682      	mov	sl, r0
 80066f6:	468b      	mov	fp, r1
 80066f8:	2900      	cmp	r1, #0
 80066fa:	f47f adbe 	bne.w	800627a <_strtod_l+0x452>
 80066fe:	2800      	cmp	r0, #0
 8006700:	f47f adbb 	bne.w	800627a <_strtod_l+0x452>
 8006704:	2322      	movs	r3, #34	; 0x22
 8006706:	f8c9 3000 	str.w	r3, [r9]
 800670a:	e5b6      	b.n	800627a <_strtod_l+0x452>
 800670c:	4013      	ands	r3, r2
 800670e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006712:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006716:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800671a:	f04f 3aff 	mov.w	sl, #4294967295
 800671e:	e76a      	b.n	80065f6 <_strtod_l+0x7ce>
 8006720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006722:	b193      	cbz	r3, 800674a <_strtod_l+0x922>
 8006724:	422b      	tst	r3, r5
 8006726:	f43f af66 	beq.w	80065f6 <_strtod_l+0x7ce>
 800672a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800672c:	9a04      	ldr	r2, [sp, #16]
 800672e:	4650      	mov	r0, sl
 8006730:	4659      	mov	r1, fp
 8006732:	b173      	cbz	r3, 8006752 <_strtod_l+0x92a>
 8006734:	f7ff fb5a 	bl	8005dec <sulp>
 8006738:	4602      	mov	r2, r0
 800673a:	460b      	mov	r3, r1
 800673c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006740:	f7f9 fda4 	bl	800028c <__adddf3>
 8006744:	4682      	mov	sl, r0
 8006746:	468b      	mov	fp, r1
 8006748:	e755      	b.n	80065f6 <_strtod_l+0x7ce>
 800674a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800674c:	ea13 0f0a 	tst.w	r3, sl
 8006750:	e7e9      	b.n	8006726 <_strtod_l+0x8fe>
 8006752:	f7ff fb4b 	bl	8005dec <sulp>
 8006756:	4602      	mov	r2, r0
 8006758:	460b      	mov	r3, r1
 800675a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800675e:	f7f9 fd93 	bl	8000288 <__aeabi_dsub>
 8006762:	2200      	movs	r2, #0
 8006764:	2300      	movs	r3, #0
 8006766:	4682      	mov	sl, r0
 8006768:	468b      	mov	fp, r1
 800676a:	f7fa f9ad 	bl	8000ac8 <__aeabi_dcmpeq>
 800676e:	2800      	cmp	r0, #0
 8006770:	f47f ae11 	bne.w	8006396 <_strtod_l+0x56e>
 8006774:	e73f      	b.n	80065f6 <_strtod_l+0x7ce>
 8006776:	4641      	mov	r1, r8
 8006778:	4620      	mov	r0, r4
 800677a:	f001 ffe6 	bl	800874a <__ratio>
 800677e:	ec57 6b10 	vmov	r6, r7, d0
 8006782:	2200      	movs	r2, #0
 8006784:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006788:	ee10 0a10 	vmov	r0, s0
 800678c:	4639      	mov	r1, r7
 800678e:	f7fa f9af 	bl	8000af0 <__aeabi_dcmple>
 8006792:	2800      	cmp	r0, #0
 8006794:	d077      	beq.n	8006886 <_strtod_l+0xa5e>
 8006796:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006798:	2b00      	cmp	r3, #0
 800679a:	d04a      	beq.n	8006832 <_strtod_l+0xa0a>
 800679c:	4b68      	ldr	r3, [pc, #416]	; (8006940 <_strtod_l+0xb18>)
 800679e:	2200      	movs	r2, #0
 80067a0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80067a4:	4f66      	ldr	r7, [pc, #408]	; (8006940 <_strtod_l+0xb18>)
 80067a6:	2600      	movs	r6, #0
 80067a8:	4b62      	ldr	r3, [pc, #392]	; (8006934 <_strtod_l+0xb0c>)
 80067aa:	402b      	ands	r3, r5
 80067ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80067ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80067b0:	4b64      	ldr	r3, [pc, #400]	; (8006944 <_strtod_l+0xb1c>)
 80067b2:	429a      	cmp	r2, r3
 80067b4:	f040 80ce 	bne.w	8006954 <_strtod_l+0xb2c>
 80067b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80067bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80067c0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80067c4:	ec4b ab10 	vmov	d0, sl, fp
 80067c8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80067cc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80067d0:	f001 fef6 	bl	80085c0 <__ulp>
 80067d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80067d8:	ec53 2b10 	vmov	r2, r3, d0
 80067dc:	f7f9 ff0c 	bl	80005f8 <__aeabi_dmul>
 80067e0:	4652      	mov	r2, sl
 80067e2:	465b      	mov	r3, fp
 80067e4:	f7f9 fd52 	bl	800028c <__adddf3>
 80067e8:	460b      	mov	r3, r1
 80067ea:	4952      	ldr	r1, [pc, #328]	; (8006934 <_strtod_l+0xb0c>)
 80067ec:	4a56      	ldr	r2, [pc, #344]	; (8006948 <_strtod_l+0xb20>)
 80067ee:	4019      	ands	r1, r3
 80067f0:	4291      	cmp	r1, r2
 80067f2:	4682      	mov	sl, r0
 80067f4:	d95b      	bls.n	80068ae <_strtod_l+0xa86>
 80067f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067f8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d103      	bne.n	8006808 <_strtod_l+0x9e0>
 8006800:	9b08      	ldr	r3, [sp, #32]
 8006802:	3301      	adds	r3, #1
 8006804:	f43f ad2e 	beq.w	8006264 <_strtod_l+0x43c>
 8006808:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8006938 <_strtod_l+0xb10>
 800680c:	f04f 3aff 	mov.w	sl, #4294967295
 8006810:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006812:	4648      	mov	r0, r9
 8006814:	f001 fc3d 	bl	8008092 <_Bfree>
 8006818:	9905      	ldr	r1, [sp, #20]
 800681a:	4648      	mov	r0, r9
 800681c:	f001 fc39 	bl	8008092 <_Bfree>
 8006820:	4641      	mov	r1, r8
 8006822:	4648      	mov	r0, r9
 8006824:	f001 fc35 	bl	8008092 <_Bfree>
 8006828:	4621      	mov	r1, r4
 800682a:	4648      	mov	r0, r9
 800682c:	f001 fc31 	bl	8008092 <_Bfree>
 8006830:	e619      	b.n	8006466 <_strtod_l+0x63e>
 8006832:	f1ba 0f00 	cmp.w	sl, #0
 8006836:	d11a      	bne.n	800686e <_strtod_l+0xa46>
 8006838:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800683c:	b9eb      	cbnz	r3, 800687a <_strtod_l+0xa52>
 800683e:	2200      	movs	r2, #0
 8006840:	4b3f      	ldr	r3, [pc, #252]	; (8006940 <_strtod_l+0xb18>)
 8006842:	4630      	mov	r0, r6
 8006844:	4639      	mov	r1, r7
 8006846:	f7fa f949 	bl	8000adc <__aeabi_dcmplt>
 800684a:	b9c8      	cbnz	r0, 8006880 <_strtod_l+0xa58>
 800684c:	4630      	mov	r0, r6
 800684e:	4639      	mov	r1, r7
 8006850:	2200      	movs	r2, #0
 8006852:	4b3e      	ldr	r3, [pc, #248]	; (800694c <_strtod_l+0xb24>)
 8006854:	f7f9 fed0 	bl	80005f8 <__aeabi_dmul>
 8006858:	4606      	mov	r6, r0
 800685a:	460f      	mov	r7, r1
 800685c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006860:	9618      	str	r6, [sp, #96]	; 0x60
 8006862:	9319      	str	r3, [sp, #100]	; 0x64
 8006864:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8006868:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800686c:	e79c      	b.n	80067a8 <_strtod_l+0x980>
 800686e:	f1ba 0f01 	cmp.w	sl, #1
 8006872:	d102      	bne.n	800687a <_strtod_l+0xa52>
 8006874:	2d00      	cmp	r5, #0
 8006876:	f43f ad8e 	beq.w	8006396 <_strtod_l+0x56e>
 800687a:	2200      	movs	r2, #0
 800687c:	4b34      	ldr	r3, [pc, #208]	; (8006950 <_strtod_l+0xb28>)
 800687e:	e78f      	b.n	80067a0 <_strtod_l+0x978>
 8006880:	2600      	movs	r6, #0
 8006882:	4f32      	ldr	r7, [pc, #200]	; (800694c <_strtod_l+0xb24>)
 8006884:	e7ea      	b.n	800685c <_strtod_l+0xa34>
 8006886:	4b31      	ldr	r3, [pc, #196]	; (800694c <_strtod_l+0xb24>)
 8006888:	4630      	mov	r0, r6
 800688a:	4639      	mov	r1, r7
 800688c:	2200      	movs	r2, #0
 800688e:	f7f9 feb3 	bl	80005f8 <__aeabi_dmul>
 8006892:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006894:	4606      	mov	r6, r0
 8006896:	460f      	mov	r7, r1
 8006898:	b933      	cbnz	r3, 80068a8 <_strtod_l+0xa80>
 800689a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800689e:	9010      	str	r0, [sp, #64]	; 0x40
 80068a0:	9311      	str	r3, [sp, #68]	; 0x44
 80068a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80068a6:	e7df      	b.n	8006868 <_strtod_l+0xa40>
 80068a8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80068ac:	e7f9      	b.n	80068a2 <_strtod_l+0xa7a>
 80068ae:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80068b2:	9b04      	ldr	r3, [sp, #16]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d1ab      	bne.n	8006810 <_strtod_l+0x9e8>
 80068b8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80068bc:	0d1b      	lsrs	r3, r3, #20
 80068be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80068c0:	051b      	lsls	r3, r3, #20
 80068c2:	429a      	cmp	r2, r3
 80068c4:	465d      	mov	r5, fp
 80068c6:	d1a3      	bne.n	8006810 <_strtod_l+0x9e8>
 80068c8:	4639      	mov	r1, r7
 80068ca:	4630      	mov	r0, r6
 80068cc:	f7fa f944 	bl	8000b58 <__aeabi_d2iz>
 80068d0:	f7f9 fe28 	bl	8000524 <__aeabi_i2d>
 80068d4:	460b      	mov	r3, r1
 80068d6:	4602      	mov	r2, r0
 80068d8:	4639      	mov	r1, r7
 80068da:	4630      	mov	r0, r6
 80068dc:	f7f9 fcd4 	bl	8000288 <__aeabi_dsub>
 80068e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068e2:	4606      	mov	r6, r0
 80068e4:	460f      	mov	r7, r1
 80068e6:	b933      	cbnz	r3, 80068f6 <_strtod_l+0xace>
 80068e8:	f1ba 0f00 	cmp.w	sl, #0
 80068ec:	d103      	bne.n	80068f6 <_strtod_l+0xace>
 80068ee:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80068f2:	2d00      	cmp	r5, #0
 80068f4:	d06d      	beq.n	80069d2 <_strtod_l+0xbaa>
 80068f6:	a30a      	add	r3, pc, #40	; (adr r3, 8006920 <_strtod_l+0xaf8>)
 80068f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fc:	4630      	mov	r0, r6
 80068fe:	4639      	mov	r1, r7
 8006900:	f7fa f8ec 	bl	8000adc <__aeabi_dcmplt>
 8006904:	2800      	cmp	r0, #0
 8006906:	f47f acb8 	bne.w	800627a <_strtod_l+0x452>
 800690a:	a307      	add	r3, pc, #28	; (adr r3, 8006928 <_strtod_l+0xb00>)
 800690c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006910:	4630      	mov	r0, r6
 8006912:	4639      	mov	r1, r7
 8006914:	f7fa f900 	bl	8000b18 <__aeabi_dcmpgt>
 8006918:	2800      	cmp	r0, #0
 800691a:	f43f af79 	beq.w	8006810 <_strtod_l+0x9e8>
 800691e:	e4ac      	b.n	800627a <_strtod_l+0x452>
 8006920:	94a03595 	.word	0x94a03595
 8006924:	3fdfffff 	.word	0x3fdfffff
 8006928:	35afe535 	.word	0x35afe535
 800692c:	3fe00000 	.word	0x3fe00000
 8006930:	000fffff 	.word	0x000fffff
 8006934:	7ff00000 	.word	0x7ff00000
 8006938:	7fefffff 	.word	0x7fefffff
 800693c:	39500000 	.word	0x39500000
 8006940:	3ff00000 	.word	0x3ff00000
 8006944:	7fe00000 	.word	0x7fe00000
 8006948:	7c9fffff 	.word	0x7c9fffff
 800694c:	3fe00000 	.word	0x3fe00000
 8006950:	bff00000 	.word	0xbff00000
 8006954:	9b04      	ldr	r3, [sp, #16]
 8006956:	b333      	cbz	r3, 80069a6 <_strtod_l+0xb7e>
 8006958:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800695a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800695e:	d822      	bhi.n	80069a6 <_strtod_l+0xb7e>
 8006960:	a327      	add	r3, pc, #156	; (adr r3, 8006a00 <_strtod_l+0xbd8>)
 8006962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006966:	4630      	mov	r0, r6
 8006968:	4639      	mov	r1, r7
 800696a:	f7fa f8c1 	bl	8000af0 <__aeabi_dcmple>
 800696e:	b1a0      	cbz	r0, 800699a <_strtod_l+0xb72>
 8006970:	4639      	mov	r1, r7
 8006972:	4630      	mov	r0, r6
 8006974:	f7fa f918 	bl	8000ba8 <__aeabi_d2uiz>
 8006978:	2800      	cmp	r0, #0
 800697a:	bf08      	it	eq
 800697c:	2001      	moveq	r0, #1
 800697e:	f7f9 fdc1 	bl	8000504 <__aeabi_ui2d>
 8006982:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006984:	4606      	mov	r6, r0
 8006986:	460f      	mov	r7, r1
 8006988:	bb03      	cbnz	r3, 80069cc <_strtod_l+0xba4>
 800698a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800698e:	9012      	str	r0, [sp, #72]	; 0x48
 8006990:	9313      	str	r3, [sp, #76]	; 0x4c
 8006992:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8006996:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800699a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800699c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800699e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80069a2:	1a9b      	subs	r3, r3, r2
 80069a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80069a6:	ed9d 0b08 	vldr	d0, [sp, #32]
 80069aa:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80069ae:	f001 fe07 	bl	80085c0 <__ulp>
 80069b2:	4650      	mov	r0, sl
 80069b4:	ec53 2b10 	vmov	r2, r3, d0
 80069b8:	4659      	mov	r1, fp
 80069ba:	f7f9 fe1d 	bl	80005f8 <__aeabi_dmul>
 80069be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80069c2:	f7f9 fc63 	bl	800028c <__adddf3>
 80069c6:	4682      	mov	sl, r0
 80069c8:	468b      	mov	fp, r1
 80069ca:	e772      	b.n	80068b2 <_strtod_l+0xa8a>
 80069cc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80069d0:	e7df      	b.n	8006992 <_strtod_l+0xb6a>
 80069d2:	a30d      	add	r3, pc, #52	; (adr r3, 8006a08 <_strtod_l+0xbe0>)
 80069d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d8:	f7fa f880 	bl	8000adc <__aeabi_dcmplt>
 80069dc:	e79c      	b.n	8006918 <_strtod_l+0xaf0>
 80069de:	2300      	movs	r3, #0
 80069e0:	930d      	str	r3, [sp, #52]	; 0x34
 80069e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80069e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80069e6:	6013      	str	r3, [r2, #0]
 80069e8:	f7ff ba61 	b.w	8005eae <_strtod_l+0x86>
 80069ec:	2b65      	cmp	r3, #101	; 0x65
 80069ee:	f04f 0200 	mov.w	r2, #0
 80069f2:	f43f ab4e 	beq.w	8006092 <_strtod_l+0x26a>
 80069f6:	2101      	movs	r1, #1
 80069f8:	4614      	mov	r4, r2
 80069fa:	9104      	str	r1, [sp, #16]
 80069fc:	f7ff bacb 	b.w	8005f96 <_strtod_l+0x16e>
 8006a00:	ffc00000 	.word	0xffc00000
 8006a04:	41dfffff 	.word	0x41dfffff
 8006a08:	94a03595 	.word	0x94a03595
 8006a0c:	3fcfffff 	.word	0x3fcfffff

08006a10 <_strtod_r>:
 8006a10:	4b05      	ldr	r3, [pc, #20]	; (8006a28 <_strtod_r+0x18>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	b410      	push	{r4}
 8006a16:	6a1b      	ldr	r3, [r3, #32]
 8006a18:	4c04      	ldr	r4, [pc, #16]	; (8006a2c <_strtod_r+0x1c>)
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	bf08      	it	eq
 8006a1e:	4623      	moveq	r3, r4
 8006a20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a24:	f7ff ba00 	b.w	8005e28 <_strtod_l>
 8006a28:	20000010 	.word	0x20000010
 8006a2c:	20000074 	.word	0x20000074

08006a30 <_strtol_l.isra.0>:
 8006a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a34:	4680      	mov	r8, r0
 8006a36:	4689      	mov	r9, r1
 8006a38:	4692      	mov	sl, r2
 8006a3a:	461e      	mov	r6, r3
 8006a3c:	460f      	mov	r7, r1
 8006a3e:	463d      	mov	r5, r7
 8006a40:	9808      	ldr	r0, [sp, #32]
 8006a42:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a46:	f001 fab7 	bl	8007fb8 <__locale_ctype_ptr_l>
 8006a4a:	4420      	add	r0, r4
 8006a4c:	7843      	ldrb	r3, [r0, #1]
 8006a4e:	f013 0308 	ands.w	r3, r3, #8
 8006a52:	d132      	bne.n	8006aba <_strtol_l.isra.0+0x8a>
 8006a54:	2c2d      	cmp	r4, #45	; 0x2d
 8006a56:	d132      	bne.n	8006abe <_strtol_l.isra.0+0x8e>
 8006a58:	787c      	ldrb	r4, [r7, #1]
 8006a5a:	1cbd      	adds	r5, r7, #2
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	2e00      	cmp	r6, #0
 8006a60:	d05d      	beq.n	8006b1e <_strtol_l.isra.0+0xee>
 8006a62:	2e10      	cmp	r6, #16
 8006a64:	d109      	bne.n	8006a7a <_strtol_l.isra.0+0x4a>
 8006a66:	2c30      	cmp	r4, #48	; 0x30
 8006a68:	d107      	bne.n	8006a7a <_strtol_l.isra.0+0x4a>
 8006a6a:	782b      	ldrb	r3, [r5, #0]
 8006a6c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006a70:	2b58      	cmp	r3, #88	; 0x58
 8006a72:	d14f      	bne.n	8006b14 <_strtol_l.isra.0+0xe4>
 8006a74:	786c      	ldrb	r4, [r5, #1]
 8006a76:	2610      	movs	r6, #16
 8006a78:	3502      	adds	r5, #2
 8006a7a:	2a00      	cmp	r2, #0
 8006a7c:	bf14      	ite	ne
 8006a7e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8006a82:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8006a86:	2700      	movs	r7, #0
 8006a88:	fbb1 fcf6 	udiv	ip, r1, r6
 8006a8c:	4638      	mov	r0, r7
 8006a8e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8006a92:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8006a96:	2b09      	cmp	r3, #9
 8006a98:	d817      	bhi.n	8006aca <_strtol_l.isra.0+0x9a>
 8006a9a:	461c      	mov	r4, r3
 8006a9c:	42a6      	cmp	r6, r4
 8006a9e:	dd23      	ble.n	8006ae8 <_strtol_l.isra.0+0xb8>
 8006aa0:	1c7b      	adds	r3, r7, #1
 8006aa2:	d007      	beq.n	8006ab4 <_strtol_l.isra.0+0x84>
 8006aa4:	4584      	cmp	ip, r0
 8006aa6:	d31c      	bcc.n	8006ae2 <_strtol_l.isra.0+0xb2>
 8006aa8:	d101      	bne.n	8006aae <_strtol_l.isra.0+0x7e>
 8006aaa:	45a6      	cmp	lr, r4
 8006aac:	db19      	blt.n	8006ae2 <_strtol_l.isra.0+0xb2>
 8006aae:	fb00 4006 	mla	r0, r0, r6, r4
 8006ab2:	2701      	movs	r7, #1
 8006ab4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ab8:	e7eb      	b.n	8006a92 <_strtol_l.isra.0+0x62>
 8006aba:	462f      	mov	r7, r5
 8006abc:	e7bf      	b.n	8006a3e <_strtol_l.isra.0+0xe>
 8006abe:	2c2b      	cmp	r4, #43	; 0x2b
 8006ac0:	bf04      	itt	eq
 8006ac2:	1cbd      	addeq	r5, r7, #2
 8006ac4:	787c      	ldrbeq	r4, [r7, #1]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	e7c9      	b.n	8006a5e <_strtol_l.isra.0+0x2e>
 8006aca:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006ace:	2b19      	cmp	r3, #25
 8006ad0:	d801      	bhi.n	8006ad6 <_strtol_l.isra.0+0xa6>
 8006ad2:	3c37      	subs	r4, #55	; 0x37
 8006ad4:	e7e2      	b.n	8006a9c <_strtol_l.isra.0+0x6c>
 8006ad6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006ada:	2b19      	cmp	r3, #25
 8006adc:	d804      	bhi.n	8006ae8 <_strtol_l.isra.0+0xb8>
 8006ade:	3c57      	subs	r4, #87	; 0x57
 8006ae0:	e7dc      	b.n	8006a9c <_strtol_l.isra.0+0x6c>
 8006ae2:	f04f 37ff 	mov.w	r7, #4294967295
 8006ae6:	e7e5      	b.n	8006ab4 <_strtol_l.isra.0+0x84>
 8006ae8:	1c7b      	adds	r3, r7, #1
 8006aea:	d108      	bne.n	8006afe <_strtol_l.isra.0+0xce>
 8006aec:	2322      	movs	r3, #34	; 0x22
 8006aee:	f8c8 3000 	str.w	r3, [r8]
 8006af2:	4608      	mov	r0, r1
 8006af4:	f1ba 0f00 	cmp.w	sl, #0
 8006af8:	d107      	bne.n	8006b0a <_strtol_l.isra.0+0xda>
 8006afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006afe:	b102      	cbz	r2, 8006b02 <_strtol_l.isra.0+0xd2>
 8006b00:	4240      	negs	r0, r0
 8006b02:	f1ba 0f00 	cmp.w	sl, #0
 8006b06:	d0f8      	beq.n	8006afa <_strtol_l.isra.0+0xca>
 8006b08:	b10f      	cbz	r7, 8006b0e <_strtol_l.isra.0+0xde>
 8006b0a:	f105 39ff 	add.w	r9, r5, #4294967295
 8006b0e:	f8ca 9000 	str.w	r9, [sl]
 8006b12:	e7f2      	b.n	8006afa <_strtol_l.isra.0+0xca>
 8006b14:	2430      	movs	r4, #48	; 0x30
 8006b16:	2e00      	cmp	r6, #0
 8006b18:	d1af      	bne.n	8006a7a <_strtol_l.isra.0+0x4a>
 8006b1a:	2608      	movs	r6, #8
 8006b1c:	e7ad      	b.n	8006a7a <_strtol_l.isra.0+0x4a>
 8006b1e:	2c30      	cmp	r4, #48	; 0x30
 8006b20:	d0a3      	beq.n	8006a6a <_strtol_l.isra.0+0x3a>
 8006b22:	260a      	movs	r6, #10
 8006b24:	e7a9      	b.n	8006a7a <_strtol_l.isra.0+0x4a>
	...

08006b28 <_strtol_r>:
 8006b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b2a:	4c06      	ldr	r4, [pc, #24]	; (8006b44 <_strtol_r+0x1c>)
 8006b2c:	4d06      	ldr	r5, [pc, #24]	; (8006b48 <_strtol_r+0x20>)
 8006b2e:	6824      	ldr	r4, [r4, #0]
 8006b30:	6a24      	ldr	r4, [r4, #32]
 8006b32:	2c00      	cmp	r4, #0
 8006b34:	bf08      	it	eq
 8006b36:	462c      	moveq	r4, r5
 8006b38:	9400      	str	r4, [sp, #0]
 8006b3a:	f7ff ff79 	bl	8006a30 <_strtol_l.isra.0>
 8006b3e:	b003      	add	sp, #12
 8006b40:	bd30      	pop	{r4, r5, pc}
 8006b42:	bf00      	nop
 8006b44:	20000010 	.word	0x20000010
 8006b48:	20000074 	.word	0x20000074

08006b4c <quorem>:
 8006b4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b50:	6903      	ldr	r3, [r0, #16]
 8006b52:	690c      	ldr	r4, [r1, #16]
 8006b54:	42a3      	cmp	r3, r4
 8006b56:	4680      	mov	r8, r0
 8006b58:	f2c0 8082 	blt.w	8006c60 <quorem+0x114>
 8006b5c:	3c01      	subs	r4, #1
 8006b5e:	f101 0714 	add.w	r7, r1, #20
 8006b62:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006b66:	f100 0614 	add.w	r6, r0, #20
 8006b6a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006b6e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006b72:	eb06 030c 	add.w	r3, r6, ip
 8006b76:	3501      	adds	r5, #1
 8006b78:	eb07 090c 	add.w	r9, r7, ip
 8006b7c:	9301      	str	r3, [sp, #4]
 8006b7e:	fbb0 f5f5 	udiv	r5, r0, r5
 8006b82:	b395      	cbz	r5, 8006bea <quorem+0x9e>
 8006b84:	f04f 0a00 	mov.w	sl, #0
 8006b88:	4638      	mov	r0, r7
 8006b8a:	46b6      	mov	lr, r6
 8006b8c:	46d3      	mov	fp, sl
 8006b8e:	f850 2b04 	ldr.w	r2, [r0], #4
 8006b92:	b293      	uxth	r3, r2
 8006b94:	fb05 a303 	mla	r3, r5, r3, sl
 8006b98:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	ebab 0303 	sub.w	r3, fp, r3
 8006ba2:	0c12      	lsrs	r2, r2, #16
 8006ba4:	f8de b000 	ldr.w	fp, [lr]
 8006ba8:	fb05 a202 	mla	r2, r5, r2, sl
 8006bac:	fa13 f38b 	uxtah	r3, r3, fp
 8006bb0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006bb4:	fa1f fb82 	uxth.w	fp, r2
 8006bb8:	f8de 2000 	ldr.w	r2, [lr]
 8006bbc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006bc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006bca:	4581      	cmp	r9, r0
 8006bcc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006bd0:	f84e 3b04 	str.w	r3, [lr], #4
 8006bd4:	d2db      	bcs.n	8006b8e <quorem+0x42>
 8006bd6:	f856 300c 	ldr.w	r3, [r6, ip]
 8006bda:	b933      	cbnz	r3, 8006bea <quorem+0x9e>
 8006bdc:	9b01      	ldr	r3, [sp, #4]
 8006bde:	3b04      	subs	r3, #4
 8006be0:	429e      	cmp	r6, r3
 8006be2:	461a      	mov	r2, r3
 8006be4:	d330      	bcc.n	8006c48 <quorem+0xfc>
 8006be6:	f8c8 4010 	str.w	r4, [r8, #16]
 8006bea:	4640      	mov	r0, r8
 8006bec:	f001 fc70 	bl	80084d0 <__mcmp>
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	db25      	blt.n	8006c40 <quorem+0xf4>
 8006bf4:	3501      	adds	r5, #1
 8006bf6:	4630      	mov	r0, r6
 8006bf8:	f04f 0c00 	mov.w	ip, #0
 8006bfc:	f857 2b04 	ldr.w	r2, [r7], #4
 8006c00:	f8d0 e000 	ldr.w	lr, [r0]
 8006c04:	b293      	uxth	r3, r2
 8006c06:	ebac 0303 	sub.w	r3, ip, r3
 8006c0a:	0c12      	lsrs	r2, r2, #16
 8006c0c:	fa13 f38e 	uxtah	r3, r3, lr
 8006c10:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006c14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c1e:	45b9      	cmp	r9, r7
 8006c20:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006c24:	f840 3b04 	str.w	r3, [r0], #4
 8006c28:	d2e8      	bcs.n	8006bfc <quorem+0xb0>
 8006c2a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006c2e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006c32:	b92a      	cbnz	r2, 8006c40 <quorem+0xf4>
 8006c34:	3b04      	subs	r3, #4
 8006c36:	429e      	cmp	r6, r3
 8006c38:	461a      	mov	r2, r3
 8006c3a:	d30b      	bcc.n	8006c54 <quorem+0x108>
 8006c3c:	f8c8 4010 	str.w	r4, [r8, #16]
 8006c40:	4628      	mov	r0, r5
 8006c42:	b003      	add	sp, #12
 8006c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c48:	6812      	ldr	r2, [r2, #0]
 8006c4a:	3b04      	subs	r3, #4
 8006c4c:	2a00      	cmp	r2, #0
 8006c4e:	d1ca      	bne.n	8006be6 <quorem+0x9a>
 8006c50:	3c01      	subs	r4, #1
 8006c52:	e7c5      	b.n	8006be0 <quorem+0x94>
 8006c54:	6812      	ldr	r2, [r2, #0]
 8006c56:	3b04      	subs	r3, #4
 8006c58:	2a00      	cmp	r2, #0
 8006c5a:	d1ef      	bne.n	8006c3c <quorem+0xf0>
 8006c5c:	3c01      	subs	r4, #1
 8006c5e:	e7ea      	b.n	8006c36 <quorem+0xea>
 8006c60:	2000      	movs	r0, #0
 8006c62:	e7ee      	b.n	8006c42 <quorem+0xf6>
 8006c64:	0000      	movs	r0, r0
	...

08006c68 <_dtoa_r>:
 8006c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c6c:	ec57 6b10 	vmov	r6, r7, d0
 8006c70:	b097      	sub	sp, #92	; 0x5c
 8006c72:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006c74:	9106      	str	r1, [sp, #24]
 8006c76:	4604      	mov	r4, r0
 8006c78:	920b      	str	r2, [sp, #44]	; 0x2c
 8006c7a:	9312      	str	r3, [sp, #72]	; 0x48
 8006c7c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006c80:	e9cd 6700 	strd	r6, r7, [sp]
 8006c84:	b93d      	cbnz	r5, 8006c96 <_dtoa_r+0x2e>
 8006c86:	2010      	movs	r0, #16
 8006c88:	f001 f9aa 	bl	8007fe0 <malloc>
 8006c8c:	6260      	str	r0, [r4, #36]	; 0x24
 8006c8e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006c92:	6005      	str	r5, [r0, #0]
 8006c94:	60c5      	str	r5, [r0, #12]
 8006c96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c98:	6819      	ldr	r1, [r3, #0]
 8006c9a:	b151      	cbz	r1, 8006cb2 <_dtoa_r+0x4a>
 8006c9c:	685a      	ldr	r2, [r3, #4]
 8006c9e:	604a      	str	r2, [r1, #4]
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	4093      	lsls	r3, r2
 8006ca4:	608b      	str	r3, [r1, #8]
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	f001 f9f3 	bl	8008092 <_Bfree>
 8006cac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cae:	2200      	movs	r2, #0
 8006cb0:	601a      	str	r2, [r3, #0]
 8006cb2:	1e3b      	subs	r3, r7, #0
 8006cb4:	bfbb      	ittet	lt
 8006cb6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006cba:	9301      	strlt	r3, [sp, #4]
 8006cbc:	2300      	movge	r3, #0
 8006cbe:	2201      	movlt	r2, #1
 8006cc0:	bfac      	ite	ge
 8006cc2:	f8c8 3000 	strge.w	r3, [r8]
 8006cc6:	f8c8 2000 	strlt.w	r2, [r8]
 8006cca:	4baf      	ldr	r3, [pc, #700]	; (8006f88 <_dtoa_r+0x320>)
 8006ccc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006cd0:	ea33 0308 	bics.w	r3, r3, r8
 8006cd4:	d114      	bne.n	8006d00 <_dtoa_r+0x98>
 8006cd6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006cd8:	f242 730f 	movw	r3, #9999	; 0x270f
 8006cdc:	6013      	str	r3, [r2, #0]
 8006cde:	9b00      	ldr	r3, [sp, #0]
 8006ce0:	b923      	cbnz	r3, 8006cec <_dtoa_r+0x84>
 8006ce2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	f000 8542 	beq.w	8007770 <_dtoa_r+0xb08>
 8006cec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cee:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8006f9c <_dtoa_r+0x334>
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f000 8544 	beq.w	8007780 <_dtoa_r+0xb18>
 8006cf8:	f10b 0303 	add.w	r3, fp, #3
 8006cfc:	f000 bd3e 	b.w	800777c <_dtoa_r+0xb14>
 8006d00:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006d04:	2200      	movs	r2, #0
 8006d06:	2300      	movs	r3, #0
 8006d08:	4630      	mov	r0, r6
 8006d0a:	4639      	mov	r1, r7
 8006d0c:	f7f9 fedc 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d10:	4681      	mov	r9, r0
 8006d12:	b168      	cbz	r0, 8006d30 <_dtoa_r+0xc8>
 8006d14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d16:	2301      	movs	r3, #1
 8006d18:	6013      	str	r3, [r2, #0]
 8006d1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f000 8524 	beq.w	800776a <_dtoa_r+0xb02>
 8006d22:	4b9a      	ldr	r3, [pc, #616]	; (8006f8c <_dtoa_r+0x324>)
 8006d24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006d26:	f103 3bff 	add.w	fp, r3, #4294967295
 8006d2a:	6013      	str	r3, [r2, #0]
 8006d2c:	f000 bd28 	b.w	8007780 <_dtoa_r+0xb18>
 8006d30:	aa14      	add	r2, sp, #80	; 0x50
 8006d32:	a915      	add	r1, sp, #84	; 0x54
 8006d34:	ec47 6b10 	vmov	d0, r6, r7
 8006d38:	4620      	mov	r0, r4
 8006d3a:	f001 fcb7 	bl	80086ac <__d2b>
 8006d3e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006d42:	9004      	str	r0, [sp, #16]
 8006d44:	2d00      	cmp	r5, #0
 8006d46:	d07c      	beq.n	8006e42 <_dtoa_r+0x1da>
 8006d48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006d4c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006d50:	46b2      	mov	sl, r6
 8006d52:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8006d56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006d5a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8006d5e:	2200      	movs	r2, #0
 8006d60:	4b8b      	ldr	r3, [pc, #556]	; (8006f90 <_dtoa_r+0x328>)
 8006d62:	4650      	mov	r0, sl
 8006d64:	4659      	mov	r1, fp
 8006d66:	f7f9 fa8f 	bl	8000288 <__aeabi_dsub>
 8006d6a:	a381      	add	r3, pc, #516	; (adr r3, 8006f70 <_dtoa_r+0x308>)
 8006d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d70:	f7f9 fc42 	bl	80005f8 <__aeabi_dmul>
 8006d74:	a380      	add	r3, pc, #512	; (adr r3, 8006f78 <_dtoa_r+0x310>)
 8006d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7a:	f7f9 fa87 	bl	800028c <__adddf3>
 8006d7e:	4606      	mov	r6, r0
 8006d80:	4628      	mov	r0, r5
 8006d82:	460f      	mov	r7, r1
 8006d84:	f7f9 fbce 	bl	8000524 <__aeabi_i2d>
 8006d88:	a37d      	add	r3, pc, #500	; (adr r3, 8006f80 <_dtoa_r+0x318>)
 8006d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8e:	f7f9 fc33 	bl	80005f8 <__aeabi_dmul>
 8006d92:	4602      	mov	r2, r0
 8006d94:	460b      	mov	r3, r1
 8006d96:	4630      	mov	r0, r6
 8006d98:	4639      	mov	r1, r7
 8006d9a:	f7f9 fa77 	bl	800028c <__adddf3>
 8006d9e:	4606      	mov	r6, r0
 8006da0:	460f      	mov	r7, r1
 8006da2:	f7f9 fed9 	bl	8000b58 <__aeabi_d2iz>
 8006da6:	2200      	movs	r2, #0
 8006da8:	4682      	mov	sl, r0
 8006daa:	2300      	movs	r3, #0
 8006dac:	4630      	mov	r0, r6
 8006dae:	4639      	mov	r1, r7
 8006db0:	f7f9 fe94 	bl	8000adc <__aeabi_dcmplt>
 8006db4:	b148      	cbz	r0, 8006dca <_dtoa_r+0x162>
 8006db6:	4650      	mov	r0, sl
 8006db8:	f7f9 fbb4 	bl	8000524 <__aeabi_i2d>
 8006dbc:	4632      	mov	r2, r6
 8006dbe:	463b      	mov	r3, r7
 8006dc0:	f7f9 fe82 	bl	8000ac8 <__aeabi_dcmpeq>
 8006dc4:	b908      	cbnz	r0, 8006dca <_dtoa_r+0x162>
 8006dc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006dca:	f1ba 0f16 	cmp.w	sl, #22
 8006dce:	d859      	bhi.n	8006e84 <_dtoa_r+0x21c>
 8006dd0:	4970      	ldr	r1, [pc, #448]	; (8006f94 <_dtoa_r+0x32c>)
 8006dd2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006dd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006dde:	f7f9 fe9b 	bl	8000b18 <__aeabi_dcmpgt>
 8006de2:	2800      	cmp	r0, #0
 8006de4:	d050      	beq.n	8006e88 <_dtoa_r+0x220>
 8006de6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006dea:	2300      	movs	r3, #0
 8006dec:	930f      	str	r3, [sp, #60]	; 0x3c
 8006dee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006df0:	1b5d      	subs	r5, r3, r5
 8006df2:	f1b5 0801 	subs.w	r8, r5, #1
 8006df6:	bf49      	itett	mi
 8006df8:	f1c5 0301 	rsbmi	r3, r5, #1
 8006dfc:	2300      	movpl	r3, #0
 8006dfe:	9305      	strmi	r3, [sp, #20]
 8006e00:	f04f 0800 	movmi.w	r8, #0
 8006e04:	bf58      	it	pl
 8006e06:	9305      	strpl	r3, [sp, #20]
 8006e08:	f1ba 0f00 	cmp.w	sl, #0
 8006e0c:	db3e      	blt.n	8006e8c <_dtoa_r+0x224>
 8006e0e:	2300      	movs	r3, #0
 8006e10:	44d0      	add	r8, sl
 8006e12:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006e16:	9307      	str	r3, [sp, #28]
 8006e18:	9b06      	ldr	r3, [sp, #24]
 8006e1a:	2b09      	cmp	r3, #9
 8006e1c:	f200 8090 	bhi.w	8006f40 <_dtoa_r+0x2d8>
 8006e20:	2b05      	cmp	r3, #5
 8006e22:	bfc4      	itt	gt
 8006e24:	3b04      	subgt	r3, #4
 8006e26:	9306      	strgt	r3, [sp, #24]
 8006e28:	9b06      	ldr	r3, [sp, #24]
 8006e2a:	f1a3 0302 	sub.w	r3, r3, #2
 8006e2e:	bfcc      	ite	gt
 8006e30:	2500      	movgt	r5, #0
 8006e32:	2501      	movle	r5, #1
 8006e34:	2b03      	cmp	r3, #3
 8006e36:	f200 808f 	bhi.w	8006f58 <_dtoa_r+0x2f0>
 8006e3a:	e8df f003 	tbb	[pc, r3]
 8006e3e:	7f7d      	.short	0x7f7d
 8006e40:	7131      	.short	0x7131
 8006e42:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8006e46:	441d      	add	r5, r3
 8006e48:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006e4c:	2820      	cmp	r0, #32
 8006e4e:	dd13      	ble.n	8006e78 <_dtoa_r+0x210>
 8006e50:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006e54:	9b00      	ldr	r3, [sp, #0]
 8006e56:	fa08 f800 	lsl.w	r8, r8, r0
 8006e5a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006e5e:	fa23 f000 	lsr.w	r0, r3, r0
 8006e62:	ea48 0000 	orr.w	r0, r8, r0
 8006e66:	f7f9 fb4d 	bl	8000504 <__aeabi_ui2d>
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	4682      	mov	sl, r0
 8006e6e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8006e72:	3d01      	subs	r5, #1
 8006e74:	9313      	str	r3, [sp, #76]	; 0x4c
 8006e76:	e772      	b.n	8006d5e <_dtoa_r+0xf6>
 8006e78:	9b00      	ldr	r3, [sp, #0]
 8006e7a:	f1c0 0020 	rsb	r0, r0, #32
 8006e7e:	fa03 f000 	lsl.w	r0, r3, r0
 8006e82:	e7f0      	b.n	8006e66 <_dtoa_r+0x1fe>
 8006e84:	2301      	movs	r3, #1
 8006e86:	e7b1      	b.n	8006dec <_dtoa_r+0x184>
 8006e88:	900f      	str	r0, [sp, #60]	; 0x3c
 8006e8a:	e7b0      	b.n	8006dee <_dtoa_r+0x186>
 8006e8c:	9b05      	ldr	r3, [sp, #20]
 8006e8e:	eba3 030a 	sub.w	r3, r3, sl
 8006e92:	9305      	str	r3, [sp, #20]
 8006e94:	f1ca 0300 	rsb	r3, sl, #0
 8006e98:	9307      	str	r3, [sp, #28]
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	930e      	str	r3, [sp, #56]	; 0x38
 8006e9e:	e7bb      	b.n	8006e18 <_dtoa_r+0x1b0>
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	930a      	str	r3, [sp, #40]	; 0x28
 8006ea4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	dd59      	ble.n	8006f5e <_dtoa_r+0x2f6>
 8006eaa:	9302      	str	r3, [sp, #8]
 8006eac:	4699      	mov	r9, r3
 8006eae:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	6072      	str	r2, [r6, #4]
 8006eb4:	2204      	movs	r2, #4
 8006eb6:	f102 0014 	add.w	r0, r2, #20
 8006eba:	4298      	cmp	r0, r3
 8006ebc:	6871      	ldr	r1, [r6, #4]
 8006ebe:	d953      	bls.n	8006f68 <_dtoa_r+0x300>
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	f001 f8b2 	bl	800802a <_Balloc>
 8006ec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ec8:	6030      	str	r0, [r6, #0]
 8006eca:	f1b9 0f0e 	cmp.w	r9, #14
 8006ece:	f8d3 b000 	ldr.w	fp, [r3]
 8006ed2:	f200 80e6 	bhi.w	80070a2 <_dtoa_r+0x43a>
 8006ed6:	2d00      	cmp	r5, #0
 8006ed8:	f000 80e3 	beq.w	80070a2 <_dtoa_r+0x43a>
 8006edc:	ed9d 7b00 	vldr	d7, [sp]
 8006ee0:	f1ba 0f00 	cmp.w	sl, #0
 8006ee4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006ee8:	dd74      	ble.n	8006fd4 <_dtoa_r+0x36c>
 8006eea:	4a2a      	ldr	r2, [pc, #168]	; (8006f94 <_dtoa_r+0x32c>)
 8006eec:	f00a 030f 	and.w	r3, sl, #15
 8006ef0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006ef4:	ed93 7b00 	vldr	d7, [r3]
 8006ef8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006efc:	06f0      	lsls	r0, r6, #27
 8006efe:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006f02:	d565      	bpl.n	8006fd0 <_dtoa_r+0x368>
 8006f04:	4b24      	ldr	r3, [pc, #144]	; (8006f98 <_dtoa_r+0x330>)
 8006f06:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f0a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f0e:	f7f9 fc9d 	bl	800084c <__aeabi_ddiv>
 8006f12:	e9cd 0100 	strd	r0, r1, [sp]
 8006f16:	f006 060f 	and.w	r6, r6, #15
 8006f1a:	2503      	movs	r5, #3
 8006f1c:	4f1e      	ldr	r7, [pc, #120]	; (8006f98 <_dtoa_r+0x330>)
 8006f1e:	e04c      	b.n	8006fba <_dtoa_r+0x352>
 8006f20:	2301      	movs	r3, #1
 8006f22:	930a      	str	r3, [sp, #40]	; 0x28
 8006f24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f26:	4453      	add	r3, sl
 8006f28:	f103 0901 	add.w	r9, r3, #1
 8006f2c:	9302      	str	r3, [sp, #8]
 8006f2e:	464b      	mov	r3, r9
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	bfb8      	it	lt
 8006f34:	2301      	movlt	r3, #1
 8006f36:	e7ba      	b.n	8006eae <_dtoa_r+0x246>
 8006f38:	2300      	movs	r3, #0
 8006f3a:	e7b2      	b.n	8006ea2 <_dtoa_r+0x23a>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	e7f0      	b.n	8006f22 <_dtoa_r+0x2ba>
 8006f40:	2501      	movs	r5, #1
 8006f42:	2300      	movs	r3, #0
 8006f44:	9306      	str	r3, [sp, #24]
 8006f46:	950a      	str	r5, [sp, #40]	; 0x28
 8006f48:	f04f 33ff 	mov.w	r3, #4294967295
 8006f4c:	9302      	str	r3, [sp, #8]
 8006f4e:	4699      	mov	r9, r3
 8006f50:	2200      	movs	r2, #0
 8006f52:	2312      	movs	r3, #18
 8006f54:	920b      	str	r2, [sp, #44]	; 0x2c
 8006f56:	e7aa      	b.n	8006eae <_dtoa_r+0x246>
 8006f58:	2301      	movs	r3, #1
 8006f5a:	930a      	str	r3, [sp, #40]	; 0x28
 8006f5c:	e7f4      	b.n	8006f48 <_dtoa_r+0x2e0>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	9302      	str	r3, [sp, #8]
 8006f62:	4699      	mov	r9, r3
 8006f64:	461a      	mov	r2, r3
 8006f66:	e7f5      	b.n	8006f54 <_dtoa_r+0x2ec>
 8006f68:	3101      	adds	r1, #1
 8006f6a:	6071      	str	r1, [r6, #4]
 8006f6c:	0052      	lsls	r2, r2, #1
 8006f6e:	e7a2      	b.n	8006eb6 <_dtoa_r+0x24e>
 8006f70:	636f4361 	.word	0x636f4361
 8006f74:	3fd287a7 	.word	0x3fd287a7
 8006f78:	8b60c8b3 	.word	0x8b60c8b3
 8006f7c:	3fc68a28 	.word	0x3fc68a28
 8006f80:	509f79fb 	.word	0x509f79fb
 8006f84:	3fd34413 	.word	0x3fd34413
 8006f88:	7ff00000 	.word	0x7ff00000
 8006f8c:	08009531 	.word	0x08009531
 8006f90:	3ff80000 	.word	0x3ff80000
 8006f94:	08009658 	.word	0x08009658
 8006f98:	08009630 	.word	0x08009630
 8006f9c:	080095b9 	.word	0x080095b9
 8006fa0:	07f1      	lsls	r1, r6, #31
 8006fa2:	d508      	bpl.n	8006fb6 <_dtoa_r+0x34e>
 8006fa4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006fa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fac:	f7f9 fb24 	bl	80005f8 <__aeabi_dmul>
 8006fb0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006fb4:	3501      	adds	r5, #1
 8006fb6:	1076      	asrs	r6, r6, #1
 8006fb8:	3708      	adds	r7, #8
 8006fba:	2e00      	cmp	r6, #0
 8006fbc:	d1f0      	bne.n	8006fa0 <_dtoa_r+0x338>
 8006fbe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006fc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fc6:	f7f9 fc41 	bl	800084c <__aeabi_ddiv>
 8006fca:	e9cd 0100 	strd	r0, r1, [sp]
 8006fce:	e01a      	b.n	8007006 <_dtoa_r+0x39e>
 8006fd0:	2502      	movs	r5, #2
 8006fd2:	e7a3      	b.n	8006f1c <_dtoa_r+0x2b4>
 8006fd4:	f000 80a0 	beq.w	8007118 <_dtoa_r+0x4b0>
 8006fd8:	f1ca 0600 	rsb	r6, sl, #0
 8006fdc:	4b9f      	ldr	r3, [pc, #636]	; (800725c <_dtoa_r+0x5f4>)
 8006fde:	4fa0      	ldr	r7, [pc, #640]	; (8007260 <_dtoa_r+0x5f8>)
 8006fe0:	f006 020f 	and.w	r2, r6, #15
 8006fe4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ff0:	f7f9 fb02 	bl	80005f8 <__aeabi_dmul>
 8006ff4:	e9cd 0100 	strd	r0, r1, [sp]
 8006ff8:	1136      	asrs	r6, r6, #4
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	2502      	movs	r5, #2
 8006ffe:	2e00      	cmp	r6, #0
 8007000:	d17f      	bne.n	8007102 <_dtoa_r+0x49a>
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1e1      	bne.n	8006fca <_dtoa_r+0x362>
 8007006:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007008:	2b00      	cmp	r3, #0
 800700a:	f000 8087 	beq.w	800711c <_dtoa_r+0x4b4>
 800700e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007012:	2200      	movs	r2, #0
 8007014:	4b93      	ldr	r3, [pc, #588]	; (8007264 <_dtoa_r+0x5fc>)
 8007016:	4630      	mov	r0, r6
 8007018:	4639      	mov	r1, r7
 800701a:	f7f9 fd5f 	bl	8000adc <__aeabi_dcmplt>
 800701e:	2800      	cmp	r0, #0
 8007020:	d07c      	beq.n	800711c <_dtoa_r+0x4b4>
 8007022:	f1b9 0f00 	cmp.w	r9, #0
 8007026:	d079      	beq.n	800711c <_dtoa_r+0x4b4>
 8007028:	9b02      	ldr	r3, [sp, #8]
 800702a:	2b00      	cmp	r3, #0
 800702c:	dd35      	ble.n	800709a <_dtoa_r+0x432>
 800702e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007032:	9308      	str	r3, [sp, #32]
 8007034:	4639      	mov	r1, r7
 8007036:	2200      	movs	r2, #0
 8007038:	4b8b      	ldr	r3, [pc, #556]	; (8007268 <_dtoa_r+0x600>)
 800703a:	4630      	mov	r0, r6
 800703c:	f7f9 fadc 	bl	80005f8 <__aeabi_dmul>
 8007040:	e9cd 0100 	strd	r0, r1, [sp]
 8007044:	9f02      	ldr	r7, [sp, #8]
 8007046:	3501      	adds	r5, #1
 8007048:	4628      	mov	r0, r5
 800704a:	f7f9 fa6b 	bl	8000524 <__aeabi_i2d>
 800704e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007052:	f7f9 fad1 	bl	80005f8 <__aeabi_dmul>
 8007056:	2200      	movs	r2, #0
 8007058:	4b84      	ldr	r3, [pc, #528]	; (800726c <_dtoa_r+0x604>)
 800705a:	f7f9 f917 	bl	800028c <__adddf3>
 800705e:	4605      	mov	r5, r0
 8007060:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007064:	2f00      	cmp	r7, #0
 8007066:	d15d      	bne.n	8007124 <_dtoa_r+0x4bc>
 8007068:	2200      	movs	r2, #0
 800706a:	4b81      	ldr	r3, [pc, #516]	; (8007270 <_dtoa_r+0x608>)
 800706c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007070:	f7f9 f90a 	bl	8000288 <__aeabi_dsub>
 8007074:	462a      	mov	r2, r5
 8007076:	4633      	mov	r3, r6
 8007078:	e9cd 0100 	strd	r0, r1, [sp]
 800707c:	f7f9 fd4c 	bl	8000b18 <__aeabi_dcmpgt>
 8007080:	2800      	cmp	r0, #0
 8007082:	f040 8288 	bne.w	8007596 <_dtoa_r+0x92e>
 8007086:	462a      	mov	r2, r5
 8007088:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800708c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007090:	f7f9 fd24 	bl	8000adc <__aeabi_dcmplt>
 8007094:	2800      	cmp	r0, #0
 8007096:	f040 827c 	bne.w	8007592 <_dtoa_r+0x92a>
 800709a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800709e:	e9cd 2300 	strd	r2, r3, [sp]
 80070a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f2c0 8150 	blt.w	800734a <_dtoa_r+0x6e2>
 80070aa:	f1ba 0f0e 	cmp.w	sl, #14
 80070ae:	f300 814c 	bgt.w	800734a <_dtoa_r+0x6e2>
 80070b2:	4b6a      	ldr	r3, [pc, #424]	; (800725c <_dtoa_r+0x5f4>)
 80070b4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80070b8:	ed93 7b00 	vldr	d7, [r3]
 80070bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070be:	2b00      	cmp	r3, #0
 80070c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80070c4:	f280 80d8 	bge.w	8007278 <_dtoa_r+0x610>
 80070c8:	f1b9 0f00 	cmp.w	r9, #0
 80070cc:	f300 80d4 	bgt.w	8007278 <_dtoa_r+0x610>
 80070d0:	f040 825e 	bne.w	8007590 <_dtoa_r+0x928>
 80070d4:	2200      	movs	r2, #0
 80070d6:	4b66      	ldr	r3, [pc, #408]	; (8007270 <_dtoa_r+0x608>)
 80070d8:	ec51 0b17 	vmov	r0, r1, d7
 80070dc:	f7f9 fa8c 	bl	80005f8 <__aeabi_dmul>
 80070e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070e4:	f7f9 fd0e 	bl	8000b04 <__aeabi_dcmpge>
 80070e8:	464f      	mov	r7, r9
 80070ea:	464e      	mov	r6, r9
 80070ec:	2800      	cmp	r0, #0
 80070ee:	f040 8234 	bne.w	800755a <_dtoa_r+0x8f2>
 80070f2:	2331      	movs	r3, #49	; 0x31
 80070f4:	f10b 0501 	add.w	r5, fp, #1
 80070f8:	f88b 3000 	strb.w	r3, [fp]
 80070fc:	f10a 0a01 	add.w	sl, sl, #1
 8007100:	e22f      	b.n	8007562 <_dtoa_r+0x8fa>
 8007102:	07f2      	lsls	r2, r6, #31
 8007104:	d505      	bpl.n	8007112 <_dtoa_r+0x4aa>
 8007106:	e9d7 2300 	ldrd	r2, r3, [r7]
 800710a:	f7f9 fa75 	bl	80005f8 <__aeabi_dmul>
 800710e:	3501      	adds	r5, #1
 8007110:	2301      	movs	r3, #1
 8007112:	1076      	asrs	r6, r6, #1
 8007114:	3708      	adds	r7, #8
 8007116:	e772      	b.n	8006ffe <_dtoa_r+0x396>
 8007118:	2502      	movs	r5, #2
 800711a:	e774      	b.n	8007006 <_dtoa_r+0x39e>
 800711c:	f8cd a020 	str.w	sl, [sp, #32]
 8007120:	464f      	mov	r7, r9
 8007122:	e791      	b.n	8007048 <_dtoa_r+0x3e0>
 8007124:	4b4d      	ldr	r3, [pc, #308]	; (800725c <_dtoa_r+0x5f4>)
 8007126:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800712a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800712e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007130:	2b00      	cmp	r3, #0
 8007132:	d047      	beq.n	80071c4 <_dtoa_r+0x55c>
 8007134:	4602      	mov	r2, r0
 8007136:	460b      	mov	r3, r1
 8007138:	2000      	movs	r0, #0
 800713a:	494e      	ldr	r1, [pc, #312]	; (8007274 <_dtoa_r+0x60c>)
 800713c:	f7f9 fb86 	bl	800084c <__aeabi_ddiv>
 8007140:	462a      	mov	r2, r5
 8007142:	4633      	mov	r3, r6
 8007144:	f7f9 f8a0 	bl	8000288 <__aeabi_dsub>
 8007148:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800714c:	465d      	mov	r5, fp
 800714e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007152:	f7f9 fd01 	bl	8000b58 <__aeabi_d2iz>
 8007156:	4606      	mov	r6, r0
 8007158:	f7f9 f9e4 	bl	8000524 <__aeabi_i2d>
 800715c:	4602      	mov	r2, r0
 800715e:	460b      	mov	r3, r1
 8007160:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007164:	f7f9 f890 	bl	8000288 <__aeabi_dsub>
 8007168:	3630      	adds	r6, #48	; 0x30
 800716a:	f805 6b01 	strb.w	r6, [r5], #1
 800716e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007172:	e9cd 0100 	strd	r0, r1, [sp]
 8007176:	f7f9 fcb1 	bl	8000adc <__aeabi_dcmplt>
 800717a:	2800      	cmp	r0, #0
 800717c:	d163      	bne.n	8007246 <_dtoa_r+0x5de>
 800717e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007182:	2000      	movs	r0, #0
 8007184:	4937      	ldr	r1, [pc, #220]	; (8007264 <_dtoa_r+0x5fc>)
 8007186:	f7f9 f87f 	bl	8000288 <__aeabi_dsub>
 800718a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800718e:	f7f9 fca5 	bl	8000adc <__aeabi_dcmplt>
 8007192:	2800      	cmp	r0, #0
 8007194:	f040 80b7 	bne.w	8007306 <_dtoa_r+0x69e>
 8007198:	eba5 030b 	sub.w	r3, r5, fp
 800719c:	429f      	cmp	r7, r3
 800719e:	f77f af7c 	ble.w	800709a <_dtoa_r+0x432>
 80071a2:	2200      	movs	r2, #0
 80071a4:	4b30      	ldr	r3, [pc, #192]	; (8007268 <_dtoa_r+0x600>)
 80071a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071aa:	f7f9 fa25 	bl	80005f8 <__aeabi_dmul>
 80071ae:	2200      	movs	r2, #0
 80071b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80071b4:	4b2c      	ldr	r3, [pc, #176]	; (8007268 <_dtoa_r+0x600>)
 80071b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071ba:	f7f9 fa1d 	bl	80005f8 <__aeabi_dmul>
 80071be:	e9cd 0100 	strd	r0, r1, [sp]
 80071c2:	e7c4      	b.n	800714e <_dtoa_r+0x4e6>
 80071c4:	462a      	mov	r2, r5
 80071c6:	4633      	mov	r3, r6
 80071c8:	f7f9 fa16 	bl	80005f8 <__aeabi_dmul>
 80071cc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80071d0:	eb0b 0507 	add.w	r5, fp, r7
 80071d4:	465e      	mov	r6, fp
 80071d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071da:	f7f9 fcbd 	bl	8000b58 <__aeabi_d2iz>
 80071de:	4607      	mov	r7, r0
 80071e0:	f7f9 f9a0 	bl	8000524 <__aeabi_i2d>
 80071e4:	3730      	adds	r7, #48	; 0x30
 80071e6:	4602      	mov	r2, r0
 80071e8:	460b      	mov	r3, r1
 80071ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071ee:	f7f9 f84b 	bl	8000288 <__aeabi_dsub>
 80071f2:	f806 7b01 	strb.w	r7, [r6], #1
 80071f6:	42ae      	cmp	r6, r5
 80071f8:	e9cd 0100 	strd	r0, r1, [sp]
 80071fc:	f04f 0200 	mov.w	r2, #0
 8007200:	d126      	bne.n	8007250 <_dtoa_r+0x5e8>
 8007202:	4b1c      	ldr	r3, [pc, #112]	; (8007274 <_dtoa_r+0x60c>)
 8007204:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007208:	f7f9 f840 	bl	800028c <__adddf3>
 800720c:	4602      	mov	r2, r0
 800720e:	460b      	mov	r3, r1
 8007210:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007214:	f7f9 fc80 	bl	8000b18 <__aeabi_dcmpgt>
 8007218:	2800      	cmp	r0, #0
 800721a:	d174      	bne.n	8007306 <_dtoa_r+0x69e>
 800721c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007220:	2000      	movs	r0, #0
 8007222:	4914      	ldr	r1, [pc, #80]	; (8007274 <_dtoa_r+0x60c>)
 8007224:	f7f9 f830 	bl	8000288 <__aeabi_dsub>
 8007228:	4602      	mov	r2, r0
 800722a:	460b      	mov	r3, r1
 800722c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007230:	f7f9 fc54 	bl	8000adc <__aeabi_dcmplt>
 8007234:	2800      	cmp	r0, #0
 8007236:	f43f af30 	beq.w	800709a <_dtoa_r+0x432>
 800723a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800723e:	2b30      	cmp	r3, #48	; 0x30
 8007240:	f105 32ff 	add.w	r2, r5, #4294967295
 8007244:	d002      	beq.n	800724c <_dtoa_r+0x5e4>
 8007246:	f8dd a020 	ldr.w	sl, [sp, #32]
 800724a:	e04a      	b.n	80072e2 <_dtoa_r+0x67a>
 800724c:	4615      	mov	r5, r2
 800724e:	e7f4      	b.n	800723a <_dtoa_r+0x5d2>
 8007250:	4b05      	ldr	r3, [pc, #20]	; (8007268 <_dtoa_r+0x600>)
 8007252:	f7f9 f9d1 	bl	80005f8 <__aeabi_dmul>
 8007256:	e9cd 0100 	strd	r0, r1, [sp]
 800725a:	e7bc      	b.n	80071d6 <_dtoa_r+0x56e>
 800725c:	08009658 	.word	0x08009658
 8007260:	08009630 	.word	0x08009630
 8007264:	3ff00000 	.word	0x3ff00000
 8007268:	40240000 	.word	0x40240000
 800726c:	401c0000 	.word	0x401c0000
 8007270:	40140000 	.word	0x40140000
 8007274:	3fe00000 	.word	0x3fe00000
 8007278:	e9dd 6700 	ldrd	r6, r7, [sp]
 800727c:	465d      	mov	r5, fp
 800727e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007282:	4630      	mov	r0, r6
 8007284:	4639      	mov	r1, r7
 8007286:	f7f9 fae1 	bl	800084c <__aeabi_ddiv>
 800728a:	f7f9 fc65 	bl	8000b58 <__aeabi_d2iz>
 800728e:	4680      	mov	r8, r0
 8007290:	f7f9 f948 	bl	8000524 <__aeabi_i2d>
 8007294:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007298:	f7f9 f9ae 	bl	80005f8 <__aeabi_dmul>
 800729c:	4602      	mov	r2, r0
 800729e:	460b      	mov	r3, r1
 80072a0:	4630      	mov	r0, r6
 80072a2:	4639      	mov	r1, r7
 80072a4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80072a8:	f7f8 ffee 	bl	8000288 <__aeabi_dsub>
 80072ac:	f805 6b01 	strb.w	r6, [r5], #1
 80072b0:	eba5 060b 	sub.w	r6, r5, fp
 80072b4:	45b1      	cmp	r9, r6
 80072b6:	4602      	mov	r2, r0
 80072b8:	460b      	mov	r3, r1
 80072ba:	d139      	bne.n	8007330 <_dtoa_r+0x6c8>
 80072bc:	f7f8 ffe6 	bl	800028c <__adddf3>
 80072c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072c4:	4606      	mov	r6, r0
 80072c6:	460f      	mov	r7, r1
 80072c8:	f7f9 fc26 	bl	8000b18 <__aeabi_dcmpgt>
 80072cc:	b9c8      	cbnz	r0, 8007302 <_dtoa_r+0x69a>
 80072ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072d2:	4630      	mov	r0, r6
 80072d4:	4639      	mov	r1, r7
 80072d6:	f7f9 fbf7 	bl	8000ac8 <__aeabi_dcmpeq>
 80072da:	b110      	cbz	r0, 80072e2 <_dtoa_r+0x67a>
 80072dc:	f018 0f01 	tst.w	r8, #1
 80072e0:	d10f      	bne.n	8007302 <_dtoa_r+0x69a>
 80072e2:	9904      	ldr	r1, [sp, #16]
 80072e4:	4620      	mov	r0, r4
 80072e6:	f000 fed4 	bl	8008092 <_Bfree>
 80072ea:	2300      	movs	r3, #0
 80072ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80072ee:	702b      	strb	r3, [r5, #0]
 80072f0:	f10a 0301 	add.w	r3, sl, #1
 80072f4:	6013      	str	r3, [r2, #0]
 80072f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f000 8241 	beq.w	8007780 <_dtoa_r+0xb18>
 80072fe:	601d      	str	r5, [r3, #0]
 8007300:	e23e      	b.n	8007780 <_dtoa_r+0xb18>
 8007302:	f8cd a020 	str.w	sl, [sp, #32]
 8007306:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800730a:	2a39      	cmp	r2, #57	; 0x39
 800730c:	f105 33ff 	add.w	r3, r5, #4294967295
 8007310:	d108      	bne.n	8007324 <_dtoa_r+0x6bc>
 8007312:	459b      	cmp	fp, r3
 8007314:	d10a      	bne.n	800732c <_dtoa_r+0x6c4>
 8007316:	9b08      	ldr	r3, [sp, #32]
 8007318:	3301      	adds	r3, #1
 800731a:	9308      	str	r3, [sp, #32]
 800731c:	2330      	movs	r3, #48	; 0x30
 800731e:	f88b 3000 	strb.w	r3, [fp]
 8007322:	465b      	mov	r3, fp
 8007324:	781a      	ldrb	r2, [r3, #0]
 8007326:	3201      	adds	r2, #1
 8007328:	701a      	strb	r2, [r3, #0]
 800732a:	e78c      	b.n	8007246 <_dtoa_r+0x5de>
 800732c:	461d      	mov	r5, r3
 800732e:	e7ea      	b.n	8007306 <_dtoa_r+0x69e>
 8007330:	2200      	movs	r2, #0
 8007332:	4b9b      	ldr	r3, [pc, #620]	; (80075a0 <_dtoa_r+0x938>)
 8007334:	f7f9 f960 	bl	80005f8 <__aeabi_dmul>
 8007338:	2200      	movs	r2, #0
 800733a:	2300      	movs	r3, #0
 800733c:	4606      	mov	r6, r0
 800733e:	460f      	mov	r7, r1
 8007340:	f7f9 fbc2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007344:	2800      	cmp	r0, #0
 8007346:	d09a      	beq.n	800727e <_dtoa_r+0x616>
 8007348:	e7cb      	b.n	80072e2 <_dtoa_r+0x67a>
 800734a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800734c:	2a00      	cmp	r2, #0
 800734e:	f000 808b 	beq.w	8007468 <_dtoa_r+0x800>
 8007352:	9a06      	ldr	r2, [sp, #24]
 8007354:	2a01      	cmp	r2, #1
 8007356:	dc6e      	bgt.n	8007436 <_dtoa_r+0x7ce>
 8007358:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800735a:	2a00      	cmp	r2, #0
 800735c:	d067      	beq.n	800742e <_dtoa_r+0x7c6>
 800735e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007362:	9f07      	ldr	r7, [sp, #28]
 8007364:	9d05      	ldr	r5, [sp, #20]
 8007366:	9a05      	ldr	r2, [sp, #20]
 8007368:	2101      	movs	r1, #1
 800736a:	441a      	add	r2, r3
 800736c:	4620      	mov	r0, r4
 800736e:	9205      	str	r2, [sp, #20]
 8007370:	4498      	add	r8, r3
 8007372:	f000 ff6c 	bl	800824e <__i2b>
 8007376:	4606      	mov	r6, r0
 8007378:	2d00      	cmp	r5, #0
 800737a:	dd0c      	ble.n	8007396 <_dtoa_r+0x72e>
 800737c:	f1b8 0f00 	cmp.w	r8, #0
 8007380:	dd09      	ble.n	8007396 <_dtoa_r+0x72e>
 8007382:	4545      	cmp	r5, r8
 8007384:	9a05      	ldr	r2, [sp, #20]
 8007386:	462b      	mov	r3, r5
 8007388:	bfa8      	it	ge
 800738a:	4643      	movge	r3, r8
 800738c:	1ad2      	subs	r2, r2, r3
 800738e:	9205      	str	r2, [sp, #20]
 8007390:	1aed      	subs	r5, r5, r3
 8007392:	eba8 0803 	sub.w	r8, r8, r3
 8007396:	9b07      	ldr	r3, [sp, #28]
 8007398:	b1eb      	cbz	r3, 80073d6 <_dtoa_r+0x76e>
 800739a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800739c:	2b00      	cmp	r3, #0
 800739e:	d067      	beq.n	8007470 <_dtoa_r+0x808>
 80073a0:	b18f      	cbz	r7, 80073c6 <_dtoa_r+0x75e>
 80073a2:	4631      	mov	r1, r6
 80073a4:	463a      	mov	r2, r7
 80073a6:	4620      	mov	r0, r4
 80073a8:	f000 fff0 	bl	800838c <__pow5mult>
 80073ac:	9a04      	ldr	r2, [sp, #16]
 80073ae:	4601      	mov	r1, r0
 80073b0:	4606      	mov	r6, r0
 80073b2:	4620      	mov	r0, r4
 80073b4:	f000 ff54 	bl	8008260 <__multiply>
 80073b8:	9904      	ldr	r1, [sp, #16]
 80073ba:	9008      	str	r0, [sp, #32]
 80073bc:	4620      	mov	r0, r4
 80073be:	f000 fe68 	bl	8008092 <_Bfree>
 80073c2:	9b08      	ldr	r3, [sp, #32]
 80073c4:	9304      	str	r3, [sp, #16]
 80073c6:	9b07      	ldr	r3, [sp, #28]
 80073c8:	1bda      	subs	r2, r3, r7
 80073ca:	d004      	beq.n	80073d6 <_dtoa_r+0x76e>
 80073cc:	9904      	ldr	r1, [sp, #16]
 80073ce:	4620      	mov	r0, r4
 80073d0:	f000 ffdc 	bl	800838c <__pow5mult>
 80073d4:	9004      	str	r0, [sp, #16]
 80073d6:	2101      	movs	r1, #1
 80073d8:	4620      	mov	r0, r4
 80073da:	f000 ff38 	bl	800824e <__i2b>
 80073de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073e0:	4607      	mov	r7, r0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	f000 81d0 	beq.w	8007788 <_dtoa_r+0xb20>
 80073e8:	461a      	mov	r2, r3
 80073ea:	4601      	mov	r1, r0
 80073ec:	4620      	mov	r0, r4
 80073ee:	f000 ffcd 	bl	800838c <__pow5mult>
 80073f2:	9b06      	ldr	r3, [sp, #24]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	4607      	mov	r7, r0
 80073f8:	dc40      	bgt.n	800747c <_dtoa_r+0x814>
 80073fa:	9b00      	ldr	r3, [sp, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d139      	bne.n	8007474 <_dtoa_r+0x80c>
 8007400:	9b01      	ldr	r3, [sp, #4]
 8007402:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007406:	2b00      	cmp	r3, #0
 8007408:	d136      	bne.n	8007478 <_dtoa_r+0x810>
 800740a:	9b01      	ldr	r3, [sp, #4]
 800740c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007410:	0d1b      	lsrs	r3, r3, #20
 8007412:	051b      	lsls	r3, r3, #20
 8007414:	b12b      	cbz	r3, 8007422 <_dtoa_r+0x7ba>
 8007416:	9b05      	ldr	r3, [sp, #20]
 8007418:	3301      	adds	r3, #1
 800741a:	9305      	str	r3, [sp, #20]
 800741c:	f108 0801 	add.w	r8, r8, #1
 8007420:	2301      	movs	r3, #1
 8007422:	9307      	str	r3, [sp, #28]
 8007424:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007426:	2b00      	cmp	r3, #0
 8007428:	d12a      	bne.n	8007480 <_dtoa_r+0x818>
 800742a:	2001      	movs	r0, #1
 800742c:	e030      	b.n	8007490 <_dtoa_r+0x828>
 800742e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007430:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007434:	e795      	b.n	8007362 <_dtoa_r+0x6fa>
 8007436:	9b07      	ldr	r3, [sp, #28]
 8007438:	f109 37ff 	add.w	r7, r9, #4294967295
 800743c:	42bb      	cmp	r3, r7
 800743e:	bfbf      	itttt	lt
 8007440:	9b07      	ldrlt	r3, [sp, #28]
 8007442:	9707      	strlt	r7, [sp, #28]
 8007444:	1afa      	sublt	r2, r7, r3
 8007446:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007448:	bfbb      	ittet	lt
 800744a:	189b      	addlt	r3, r3, r2
 800744c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800744e:	1bdf      	subge	r7, r3, r7
 8007450:	2700      	movlt	r7, #0
 8007452:	f1b9 0f00 	cmp.w	r9, #0
 8007456:	bfb5      	itete	lt
 8007458:	9b05      	ldrlt	r3, [sp, #20]
 800745a:	9d05      	ldrge	r5, [sp, #20]
 800745c:	eba3 0509 	sublt.w	r5, r3, r9
 8007460:	464b      	movge	r3, r9
 8007462:	bfb8      	it	lt
 8007464:	2300      	movlt	r3, #0
 8007466:	e77e      	b.n	8007366 <_dtoa_r+0x6fe>
 8007468:	9f07      	ldr	r7, [sp, #28]
 800746a:	9d05      	ldr	r5, [sp, #20]
 800746c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800746e:	e783      	b.n	8007378 <_dtoa_r+0x710>
 8007470:	9a07      	ldr	r2, [sp, #28]
 8007472:	e7ab      	b.n	80073cc <_dtoa_r+0x764>
 8007474:	2300      	movs	r3, #0
 8007476:	e7d4      	b.n	8007422 <_dtoa_r+0x7ba>
 8007478:	9b00      	ldr	r3, [sp, #0]
 800747a:	e7d2      	b.n	8007422 <_dtoa_r+0x7ba>
 800747c:	2300      	movs	r3, #0
 800747e:	9307      	str	r3, [sp, #28]
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007486:	6918      	ldr	r0, [r3, #16]
 8007488:	f000 fe93 	bl	80081b2 <__hi0bits>
 800748c:	f1c0 0020 	rsb	r0, r0, #32
 8007490:	4440      	add	r0, r8
 8007492:	f010 001f 	ands.w	r0, r0, #31
 8007496:	d047      	beq.n	8007528 <_dtoa_r+0x8c0>
 8007498:	f1c0 0320 	rsb	r3, r0, #32
 800749c:	2b04      	cmp	r3, #4
 800749e:	dd3b      	ble.n	8007518 <_dtoa_r+0x8b0>
 80074a0:	9b05      	ldr	r3, [sp, #20]
 80074a2:	f1c0 001c 	rsb	r0, r0, #28
 80074a6:	4403      	add	r3, r0
 80074a8:	9305      	str	r3, [sp, #20]
 80074aa:	4405      	add	r5, r0
 80074ac:	4480      	add	r8, r0
 80074ae:	9b05      	ldr	r3, [sp, #20]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	dd05      	ble.n	80074c0 <_dtoa_r+0x858>
 80074b4:	461a      	mov	r2, r3
 80074b6:	9904      	ldr	r1, [sp, #16]
 80074b8:	4620      	mov	r0, r4
 80074ba:	f000 ffb5 	bl	8008428 <__lshift>
 80074be:	9004      	str	r0, [sp, #16]
 80074c0:	f1b8 0f00 	cmp.w	r8, #0
 80074c4:	dd05      	ble.n	80074d2 <_dtoa_r+0x86a>
 80074c6:	4639      	mov	r1, r7
 80074c8:	4642      	mov	r2, r8
 80074ca:	4620      	mov	r0, r4
 80074cc:	f000 ffac 	bl	8008428 <__lshift>
 80074d0:	4607      	mov	r7, r0
 80074d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074d4:	b353      	cbz	r3, 800752c <_dtoa_r+0x8c4>
 80074d6:	4639      	mov	r1, r7
 80074d8:	9804      	ldr	r0, [sp, #16]
 80074da:	f000 fff9 	bl	80084d0 <__mcmp>
 80074de:	2800      	cmp	r0, #0
 80074e0:	da24      	bge.n	800752c <_dtoa_r+0x8c4>
 80074e2:	2300      	movs	r3, #0
 80074e4:	220a      	movs	r2, #10
 80074e6:	9904      	ldr	r1, [sp, #16]
 80074e8:	4620      	mov	r0, r4
 80074ea:	f000 fde9 	bl	80080c0 <__multadd>
 80074ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074f0:	9004      	str	r0, [sp, #16]
 80074f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	f000 814d 	beq.w	8007796 <_dtoa_r+0xb2e>
 80074fc:	2300      	movs	r3, #0
 80074fe:	4631      	mov	r1, r6
 8007500:	220a      	movs	r2, #10
 8007502:	4620      	mov	r0, r4
 8007504:	f000 fddc 	bl	80080c0 <__multadd>
 8007508:	9b02      	ldr	r3, [sp, #8]
 800750a:	2b00      	cmp	r3, #0
 800750c:	4606      	mov	r6, r0
 800750e:	dc4f      	bgt.n	80075b0 <_dtoa_r+0x948>
 8007510:	9b06      	ldr	r3, [sp, #24]
 8007512:	2b02      	cmp	r3, #2
 8007514:	dd4c      	ble.n	80075b0 <_dtoa_r+0x948>
 8007516:	e011      	b.n	800753c <_dtoa_r+0x8d4>
 8007518:	d0c9      	beq.n	80074ae <_dtoa_r+0x846>
 800751a:	9a05      	ldr	r2, [sp, #20]
 800751c:	331c      	adds	r3, #28
 800751e:	441a      	add	r2, r3
 8007520:	9205      	str	r2, [sp, #20]
 8007522:	441d      	add	r5, r3
 8007524:	4498      	add	r8, r3
 8007526:	e7c2      	b.n	80074ae <_dtoa_r+0x846>
 8007528:	4603      	mov	r3, r0
 800752a:	e7f6      	b.n	800751a <_dtoa_r+0x8b2>
 800752c:	f1b9 0f00 	cmp.w	r9, #0
 8007530:	dc38      	bgt.n	80075a4 <_dtoa_r+0x93c>
 8007532:	9b06      	ldr	r3, [sp, #24]
 8007534:	2b02      	cmp	r3, #2
 8007536:	dd35      	ble.n	80075a4 <_dtoa_r+0x93c>
 8007538:	f8cd 9008 	str.w	r9, [sp, #8]
 800753c:	9b02      	ldr	r3, [sp, #8]
 800753e:	b963      	cbnz	r3, 800755a <_dtoa_r+0x8f2>
 8007540:	4639      	mov	r1, r7
 8007542:	2205      	movs	r2, #5
 8007544:	4620      	mov	r0, r4
 8007546:	f000 fdbb 	bl	80080c0 <__multadd>
 800754a:	4601      	mov	r1, r0
 800754c:	4607      	mov	r7, r0
 800754e:	9804      	ldr	r0, [sp, #16]
 8007550:	f000 ffbe 	bl	80084d0 <__mcmp>
 8007554:	2800      	cmp	r0, #0
 8007556:	f73f adcc 	bgt.w	80070f2 <_dtoa_r+0x48a>
 800755a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800755c:	465d      	mov	r5, fp
 800755e:	ea6f 0a03 	mvn.w	sl, r3
 8007562:	f04f 0900 	mov.w	r9, #0
 8007566:	4639      	mov	r1, r7
 8007568:	4620      	mov	r0, r4
 800756a:	f000 fd92 	bl	8008092 <_Bfree>
 800756e:	2e00      	cmp	r6, #0
 8007570:	f43f aeb7 	beq.w	80072e2 <_dtoa_r+0x67a>
 8007574:	f1b9 0f00 	cmp.w	r9, #0
 8007578:	d005      	beq.n	8007586 <_dtoa_r+0x91e>
 800757a:	45b1      	cmp	r9, r6
 800757c:	d003      	beq.n	8007586 <_dtoa_r+0x91e>
 800757e:	4649      	mov	r1, r9
 8007580:	4620      	mov	r0, r4
 8007582:	f000 fd86 	bl	8008092 <_Bfree>
 8007586:	4631      	mov	r1, r6
 8007588:	4620      	mov	r0, r4
 800758a:	f000 fd82 	bl	8008092 <_Bfree>
 800758e:	e6a8      	b.n	80072e2 <_dtoa_r+0x67a>
 8007590:	2700      	movs	r7, #0
 8007592:	463e      	mov	r6, r7
 8007594:	e7e1      	b.n	800755a <_dtoa_r+0x8f2>
 8007596:	f8dd a020 	ldr.w	sl, [sp, #32]
 800759a:	463e      	mov	r6, r7
 800759c:	e5a9      	b.n	80070f2 <_dtoa_r+0x48a>
 800759e:	bf00      	nop
 80075a0:	40240000 	.word	0x40240000
 80075a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075a6:	f8cd 9008 	str.w	r9, [sp, #8]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	f000 80fa 	beq.w	80077a4 <_dtoa_r+0xb3c>
 80075b0:	2d00      	cmp	r5, #0
 80075b2:	dd05      	ble.n	80075c0 <_dtoa_r+0x958>
 80075b4:	4631      	mov	r1, r6
 80075b6:	462a      	mov	r2, r5
 80075b8:	4620      	mov	r0, r4
 80075ba:	f000 ff35 	bl	8008428 <__lshift>
 80075be:	4606      	mov	r6, r0
 80075c0:	9b07      	ldr	r3, [sp, #28]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d04c      	beq.n	8007660 <_dtoa_r+0x9f8>
 80075c6:	6871      	ldr	r1, [r6, #4]
 80075c8:	4620      	mov	r0, r4
 80075ca:	f000 fd2e 	bl	800802a <_Balloc>
 80075ce:	6932      	ldr	r2, [r6, #16]
 80075d0:	3202      	adds	r2, #2
 80075d2:	4605      	mov	r5, r0
 80075d4:	0092      	lsls	r2, r2, #2
 80075d6:	f106 010c 	add.w	r1, r6, #12
 80075da:	300c      	adds	r0, #12
 80075dc:	f000 fd1a 	bl	8008014 <memcpy>
 80075e0:	2201      	movs	r2, #1
 80075e2:	4629      	mov	r1, r5
 80075e4:	4620      	mov	r0, r4
 80075e6:	f000 ff1f 	bl	8008428 <__lshift>
 80075ea:	9b00      	ldr	r3, [sp, #0]
 80075ec:	f8cd b014 	str.w	fp, [sp, #20]
 80075f0:	f003 0301 	and.w	r3, r3, #1
 80075f4:	46b1      	mov	r9, r6
 80075f6:	9307      	str	r3, [sp, #28]
 80075f8:	4606      	mov	r6, r0
 80075fa:	4639      	mov	r1, r7
 80075fc:	9804      	ldr	r0, [sp, #16]
 80075fe:	f7ff faa5 	bl	8006b4c <quorem>
 8007602:	4649      	mov	r1, r9
 8007604:	4605      	mov	r5, r0
 8007606:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800760a:	9804      	ldr	r0, [sp, #16]
 800760c:	f000 ff60 	bl	80084d0 <__mcmp>
 8007610:	4632      	mov	r2, r6
 8007612:	9000      	str	r0, [sp, #0]
 8007614:	4639      	mov	r1, r7
 8007616:	4620      	mov	r0, r4
 8007618:	f000 ff74 	bl	8008504 <__mdiff>
 800761c:	68c3      	ldr	r3, [r0, #12]
 800761e:	4602      	mov	r2, r0
 8007620:	bb03      	cbnz	r3, 8007664 <_dtoa_r+0x9fc>
 8007622:	4601      	mov	r1, r0
 8007624:	9008      	str	r0, [sp, #32]
 8007626:	9804      	ldr	r0, [sp, #16]
 8007628:	f000 ff52 	bl	80084d0 <__mcmp>
 800762c:	9a08      	ldr	r2, [sp, #32]
 800762e:	4603      	mov	r3, r0
 8007630:	4611      	mov	r1, r2
 8007632:	4620      	mov	r0, r4
 8007634:	9308      	str	r3, [sp, #32]
 8007636:	f000 fd2c 	bl	8008092 <_Bfree>
 800763a:	9b08      	ldr	r3, [sp, #32]
 800763c:	b9a3      	cbnz	r3, 8007668 <_dtoa_r+0xa00>
 800763e:	9a06      	ldr	r2, [sp, #24]
 8007640:	b992      	cbnz	r2, 8007668 <_dtoa_r+0xa00>
 8007642:	9a07      	ldr	r2, [sp, #28]
 8007644:	b982      	cbnz	r2, 8007668 <_dtoa_r+0xa00>
 8007646:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800764a:	d029      	beq.n	80076a0 <_dtoa_r+0xa38>
 800764c:	9b00      	ldr	r3, [sp, #0]
 800764e:	2b00      	cmp	r3, #0
 8007650:	dd01      	ble.n	8007656 <_dtoa_r+0x9ee>
 8007652:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007656:	9b05      	ldr	r3, [sp, #20]
 8007658:	1c5d      	adds	r5, r3, #1
 800765a:	f883 8000 	strb.w	r8, [r3]
 800765e:	e782      	b.n	8007566 <_dtoa_r+0x8fe>
 8007660:	4630      	mov	r0, r6
 8007662:	e7c2      	b.n	80075ea <_dtoa_r+0x982>
 8007664:	2301      	movs	r3, #1
 8007666:	e7e3      	b.n	8007630 <_dtoa_r+0x9c8>
 8007668:	9a00      	ldr	r2, [sp, #0]
 800766a:	2a00      	cmp	r2, #0
 800766c:	db04      	blt.n	8007678 <_dtoa_r+0xa10>
 800766e:	d125      	bne.n	80076bc <_dtoa_r+0xa54>
 8007670:	9a06      	ldr	r2, [sp, #24]
 8007672:	bb1a      	cbnz	r2, 80076bc <_dtoa_r+0xa54>
 8007674:	9a07      	ldr	r2, [sp, #28]
 8007676:	bb0a      	cbnz	r2, 80076bc <_dtoa_r+0xa54>
 8007678:	2b00      	cmp	r3, #0
 800767a:	ddec      	ble.n	8007656 <_dtoa_r+0x9ee>
 800767c:	2201      	movs	r2, #1
 800767e:	9904      	ldr	r1, [sp, #16]
 8007680:	4620      	mov	r0, r4
 8007682:	f000 fed1 	bl	8008428 <__lshift>
 8007686:	4639      	mov	r1, r7
 8007688:	9004      	str	r0, [sp, #16]
 800768a:	f000 ff21 	bl	80084d0 <__mcmp>
 800768e:	2800      	cmp	r0, #0
 8007690:	dc03      	bgt.n	800769a <_dtoa_r+0xa32>
 8007692:	d1e0      	bne.n	8007656 <_dtoa_r+0x9ee>
 8007694:	f018 0f01 	tst.w	r8, #1
 8007698:	d0dd      	beq.n	8007656 <_dtoa_r+0x9ee>
 800769a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800769e:	d1d8      	bne.n	8007652 <_dtoa_r+0x9ea>
 80076a0:	9b05      	ldr	r3, [sp, #20]
 80076a2:	9a05      	ldr	r2, [sp, #20]
 80076a4:	1c5d      	adds	r5, r3, #1
 80076a6:	2339      	movs	r3, #57	; 0x39
 80076a8:	7013      	strb	r3, [r2, #0]
 80076aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80076ae:	2b39      	cmp	r3, #57	; 0x39
 80076b0:	f105 32ff 	add.w	r2, r5, #4294967295
 80076b4:	d04f      	beq.n	8007756 <_dtoa_r+0xaee>
 80076b6:	3301      	adds	r3, #1
 80076b8:	7013      	strb	r3, [r2, #0]
 80076ba:	e754      	b.n	8007566 <_dtoa_r+0x8fe>
 80076bc:	9a05      	ldr	r2, [sp, #20]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	f102 0501 	add.w	r5, r2, #1
 80076c4:	dd06      	ble.n	80076d4 <_dtoa_r+0xa6c>
 80076c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80076ca:	d0e9      	beq.n	80076a0 <_dtoa_r+0xa38>
 80076cc:	f108 0801 	add.w	r8, r8, #1
 80076d0:	9b05      	ldr	r3, [sp, #20]
 80076d2:	e7c2      	b.n	800765a <_dtoa_r+0x9f2>
 80076d4:	9a02      	ldr	r2, [sp, #8]
 80076d6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80076da:	eba5 030b 	sub.w	r3, r5, fp
 80076de:	4293      	cmp	r3, r2
 80076e0:	d021      	beq.n	8007726 <_dtoa_r+0xabe>
 80076e2:	2300      	movs	r3, #0
 80076e4:	220a      	movs	r2, #10
 80076e6:	9904      	ldr	r1, [sp, #16]
 80076e8:	4620      	mov	r0, r4
 80076ea:	f000 fce9 	bl	80080c0 <__multadd>
 80076ee:	45b1      	cmp	r9, r6
 80076f0:	9004      	str	r0, [sp, #16]
 80076f2:	f04f 0300 	mov.w	r3, #0
 80076f6:	f04f 020a 	mov.w	r2, #10
 80076fa:	4649      	mov	r1, r9
 80076fc:	4620      	mov	r0, r4
 80076fe:	d105      	bne.n	800770c <_dtoa_r+0xaa4>
 8007700:	f000 fcde 	bl	80080c0 <__multadd>
 8007704:	4681      	mov	r9, r0
 8007706:	4606      	mov	r6, r0
 8007708:	9505      	str	r5, [sp, #20]
 800770a:	e776      	b.n	80075fa <_dtoa_r+0x992>
 800770c:	f000 fcd8 	bl	80080c0 <__multadd>
 8007710:	4631      	mov	r1, r6
 8007712:	4681      	mov	r9, r0
 8007714:	2300      	movs	r3, #0
 8007716:	220a      	movs	r2, #10
 8007718:	4620      	mov	r0, r4
 800771a:	f000 fcd1 	bl	80080c0 <__multadd>
 800771e:	4606      	mov	r6, r0
 8007720:	e7f2      	b.n	8007708 <_dtoa_r+0xaa0>
 8007722:	f04f 0900 	mov.w	r9, #0
 8007726:	2201      	movs	r2, #1
 8007728:	9904      	ldr	r1, [sp, #16]
 800772a:	4620      	mov	r0, r4
 800772c:	f000 fe7c 	bl	8008428 <__lshift>
 8007730:	4639      	mov	r1, r7
 8007732:	9004      	str	r0, [sp, #16]
 8007734:	f000 fecc 	bl	80084d0 <__mcmp>
 8007738:	2800      	cmp	r0, #0
 800773a:	dcb6      	bgt.n	80076aa <_dtoa_r+0xa42>
 800773c:	d102      	bne.n	8007744 <_dtoa_r+0xadc>
 800773e:	f018 0f01 	tst.w	r8, #1
 8007742:	d1b2      	bne.n	80076aa <_dtoa_r+0xa42>
 8007744:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007748:	2b30      	cmp	r3, #48	; 0x30
 800774a:	f105 32ff 	add.w	r2, r5, #4294967295
 800774e:	f47f af0a 	bne.w	8007566 <_dtoa_r+0x8fe>
 8007752:	4615      	mov	r5, r2
 8007754:	e7f6      	b.n	8007744 <_dtoa_r+0xadc>
 8007756:	4593      	cmp	fp, r2
 8007758:	d105      	bne.n	8007766 <_dtoa_r+0xafe>
 800775a:	2331      	movs	r3, #49	; 0x31
 800775c:	f10a 0a01 	add.w	sl, sl, #1
 8007760:	f88b 3000 	strb.w	r3, [fp]
 8007764:	e6ff      	b.n	8007566 <_dtoa_r+0x8fe>
 8007766:	4615      	mov	r5, r2
 8007768:	e79f      	b.n	80076aa <_dtoa_r+0xa42>
 800776a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80077d0 <_dtoa_r+0xb68>
 800776e:	e007      	b.n	8007780 <_dtoa_r+0xb18>
 8007770:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007772:	f8df b060 	ldr.w	fp, [pc, #96]	; 80077d4 <_dtoa_r+0xb6c>
 8007776:	b11b      	cbz	r3, 8007780 <_dtoa_r+0xb18>
 8007778:	f10b 0308 	add.w	r3, fp, #8
 800777c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800777e:	6013      	str	r3, [r2, #0]
 8007780:	4658      	mov	r0, fp
 8007782:	b017      	add	sp, #92	; 0x5c
 8007784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007788:	9b06      	ldr	r3, [sp, #24]
 800778a:	2b01      	cmp	r3, #1
 800778c:	f77f ae35 	ble.w	80073fa <_dtoa_r+0x792>
 8007790:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007792:	9307      	str	r3, [sp, #28]
 8007794:	e649      	b.n	800742a <_dtoa_r+0x7c2>
 8007796:	9b02      	ldr	r3, [sp, #8]
 8007798:	2b00      	cmp	r3, #0
 800779a:	dc03      	bgt.n	80077a4 <_dtoa_r+0xb3c>
 800779c:	9b06      	ldr	r3, [sp, #24]
 800779e:	2b02      	cmp	r3, #2
 80077a0:	f73f aecc 	bgt.w	800753c <_dtoa_r+0x8d4>
 80077a4:	465d      	mov	r5, fp
 80077a6:	4639      	mov	r1, r7
 80077a8:	9804      	ldr	r0, [sp, #16]
 80077aa:	f7ff f9cf 	bl	8006b4c <quorem>
 80077ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80077b2:	f805 8b01 	strb.w	r8, [r5], #1
 80077b6:	9a02      	ldr	r2, [sp, #8]
 80077b8:	eba5 030b 	sub.w	r3, r5, fp
 80077bc:	429a      	cmp	r2, r3
 80077be:	ddb0      	ble.n	8007722 <_dtoa_r+0xaba>
 80077c0:	2300      	movs	r3, #0
 80077c2:	220a      	movs	r2, #10
 80077c4:	9904      	ldr	r1, [sp, #16]
 80077c6:	4620      	mov	r0, r4
 80077c8:	f000 fc7a 	bl	80080c0 <__multadd>
 80077cc:	9004      	str	r0, [sp, #16]
 80077ce:	e7ea      	b.n	80077a6 <_dtoa_r+0xb3e>
 80077d0:	08009530 	.word	0x08009530
 80077d4:	080095b0 	.word	0x080095b0

080077d8 <std>:
 80077d8:	2300      	movs	r3, #0
 80077da:	b510      	push	{r4, lr}
 80077dc:	4604      	mov	r4, r0
 80077de:	e9c0 3300 	strd	r3, r3, [r0]
 80077e2:	6083      	str	r3, [r0, #8]
 80077e4:	8181      	strh	r1, [r0, #12]
 80077e6:	6643      	str	r3, [r0, #100]	; 0x64
 80077e8:	81c2      	strh	r2, [r0, #14]
 80077ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077ee:	6183      	str	r3, [r0, #24]
 80077f0:	4619      	mov	r1, r3
 80077f2:	2208      	movs	r2, #8
 80077f4:	305c      	adds	r0, #92	; 0x5c
 80077f6:	f7fd fc75 	bl	80050e4 <memset>
 80077fa:	4b05      	ldr	r3, [pc, #20]	; (8007810 <std+0x38>)
 80077fc:	6263      	str	r3, [r4, #36]	; 0x24
 80077fe:	4b05      	ldr	r3, [pc, #20]	; (8007814 <std+0x3c>)
 8007800:	62a3      	str	r3, [r4, #40]	; 0x28
 8007802:	4b05      	ldr	r3, [pc, #20]	; (8007818 <std+0x40>)
 8007804:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007806:	4b05      	ldr	r3, [pc, #20]	; (800781c <std+0x44>)
 8007808:	6224      	str	r4, [r4, #32]
 800780a:	6323      	str	r3, [r4, #48]	; 0x30
 800780c:	bd10      	pop	{r4, pc}
 800780e:	bf00      	nop
 8007810:	08008ed9 	.word	0x08008ed9
 8007814:	08008efb 	.word	0x08008efb
 8007818:	08008f33 	.word	0x08008f33
 800781c:	08008f57 	.word	0x08008f57

08007820 <_cleanup_r>:
 8007820:	4901      	ldr	r1, [pc, #4]	; (8007828 <_cleanup_r+0x8>)
 8007822:	f000 b885 	b.w	8007930 <_fwalk_reent>
 8007826:	bf00      	nop
 8007828:	08009271 	.word	0x08009271

0800782c <__sfmoreglue>:
 800782c:	b570      	push	{r4, r5, r6, lr}
 800782e:	1e4a      	subs	r2, r1, #1
 8007830:	2568      	movs	r5, #104	; 0x68
 8007832:	4355      	muls	r5, r2
 8007834:	460e      	mov	r6, r1
 8007836:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800783a:	f001 f851 	bl	80088e0 <_malloc_r>
 800783e:	4604      	mov	r4, r0
 8007840:	b140      	cbz	r0, 8007854 <__sfmoreglue+0x28>
 8007842:	2100      	movs	r1, #0
 8007844:	e9c0 1600 	strd	r1, r6, [r0]
 8007848:	300c      	adds	r0, #12
 800784a:	60a0      	str	r0, [r4, #8]
 800784c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007850:	f7fd fc48 	bl	80050e4 <memset>
 8007854:	4620      	mov	r0, r4
 8007856:	bd70      	pop	{r4, r5, r6, pc}

08007858 <__sinit>:
 8007858:	6983      	ldr	r3, [r0, #24]
 800785a:	b510      	push	{r4, lr}
 800785c:	4604      	mov	r4, r0
 800785e:	bb33      	cbnz	r3, 80078ae <__sinit+0x56>
 8007860:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007864:	6503      	str	r3, [r0, #80]	; 0x50
 8007866:	4b12      	ldr	r3, [pc, #72]	; (80078b0 <__sinit+0x58>)
 8007868:	4a12      	ldr	r2, [pc, #72]	; (80078b4 <__sinit+0x5c>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	6282      	str	r2, [r0, #40]	; 0x28
 800786e:	4298      	cmp	r0, r3
 8007870:	bf04      	itt	eq
 8007872:	2301      	moveq	r3, #1
 8007874:	6183      	streq	r3, [r0, #24]
 8007876:	f000 f81f 	bl	80078b8 <__sfp>
 800787a:	6060      	str	r0, [r4, #4]
 800787c:	4620      	mov	r0, r4
 800787e:	f000 f81b 	bl	80078b8 <__sfp>
 8007882:	60a0      	str	r0, [r4, #8]
 8007884:	4620      	mov	r0, r4
 8007886:	f000 f817 	bl	80078b8 <__sfp>
 800788a:	2200      	movs	r2, #0
 800788c:	60e0      	str	r0, [r4, #12]
 800788e:	2104      	movs	r1, #4
 8007890:	6860      	ldr	r0, [r4, #4]
 8007892:	f7ff ffa1 	bl	80077d8 <std>
 8007896:	2201      	movs	r2, #1
 8007898:	2109      	movs	r1, #9
 800789a:	68a0      	ldr	r0, [r4, #8]
 800789c:	f7ff ff9c 	bl	80077d8 <std>
 80078a0:	2202      	movs	r2, #2
 80078a2:	2112      	movs	r1, #18
 80078a4:	68e0      	ldr	r0, [r4, #12]
 80078a6:	f7ff ff97 	bl	80077d8 <std>
 80078aa:	2301      	movs	r3, #1
 80078ac:	61a3      	str	r3, [r4, #24]
 80078ae:	bd10      	pop	{r4, pc}
 80078b0:	0800951c 	.word	0x0800951c
 80078b4:	08007821 	.word	0x08007821

080078b8 <__sfp>:
 80078b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ba:	4b1b      	ldr	r3, [pc, #108]	; (8007928 <__sfp+0x70>)
 80078bc:	681e      	ldr	r6, [r3, #0]
 80078be:	69b3      	ldr	r3, [r6, #24]
 80078c0:	4607      	mov	r7, r0
 80078c2:	b913      	cbnz	r3, 80078ca <__sfp+0x12>
 80078c4:	4630      	mov	r0, r6
 80078c6:	f7ff ffc7 	bl	8007858 <__sinit>
 80078ca:	3648      	adds	r6, #72	; 0x48
 80078cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80078d0:	3b01      	subs	r3, #1
 80078d2:	d503      	bpl.n	80078dc <__sfp+0x24>
 80078d4:	6833      	ldr	r3, [r6, #0]
 80078d6:	b133      	cbz	r3, 80078e6 <__sfp+0x2e>
 80078d8:	6836      	ldr	r6, [r6, #0]
 80078da:	e7f7      	b.n	80078cc <__sfp+0x14>
 80078dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80078e0:	b16d      	cbz	r5, 80078fe <__sfp+0x46>
 80078e2:	3468      	adds	r4, #104	; 0x68
 80078e4:	e7f4      	b.n	80078d0 <__sfp+0x18>
 80078e6:	2104      	movs	r1, #4
 80078e8:	4638      	mov	r0, r7
 80078ea:	f7ff ff9f 	bl	800782c <__sfmoreglue>
 80078ee:	6030      	str	r0, [r6, #0]
 80078f0:	2800      	cmp	r0, #0
 80078f2:	d1f1      	bne.n	80078d8 <__sfp+0x20>
 80078f4:	230c      	movs	r3, #12
 80078f6:	603b      	str	r3, [r7, #0]
 80078f8:	4604      	mov	r4, r0
 80078fa:	4620      	mov	r0, r4
 80078fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078fe:	4b0b      	ldr	r3, [pc, #44]	; (800792c <__sfp+0x74>)
 8007900:	6665      	str	r5, [r4, #100]	; 0x64
 8007902:	e9c4 5500 	strd	r5, r5, [r4]
 8007906:	60a5      	str	r5, [r4, #8]
 8007908:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800790c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007910:	2208      	movs	r2, #8
 8007912:	4629      	mov	r1, r5
 8007914:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007918:	f7fd fbe4 	bl	80050e4 <memset>
 800791c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007920:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007924:	e7e9      	b.n	80078fa <__sfp+0x42>
 8007926:	bf00      	nop
 8007928:	0800951c 	.word	0x0800951c
 800792c:	ffff0001 	.word	0xffff0001

08007930 <_fwalk_reent>:
 8007930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007934:	4680      	mov	r8, r0
 8007936:	4689      	mov	r9, r1
 8007938:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800793c:	2600      	movs	r6, #0
 800793e:	b914      	cbnz	r4, 8007946 <_fwalk_reent+0x16>
 8007940:	4630      	mov	r0, r6
 8007942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007946:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800794a:	3f01      	subs	r7, #1
 800794c:	d501      	bpl.n	8007952 <_fwalk_reent+0x22>
 800794e:	6824      	ldr	r4, [r4, #0]
 8007950:	e7f5      	b.n	800793e <_fwalk_reent+0xe>
 8007952:	89ab      	ldrh	r3, [r5, #12]
 8007954:	2b01      	cmp	r3, #1
 8007956:	d907      	bls.n	8007968 <_fwalk_reent+0x38>
 8007958:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800795c:	3301      	adds	r3, #1
 800795e:	d003      	beq.n	8007968 <_fwalk_reent+0x38>
 8007960:	4629      	mov	r1, r5
 8007962:	4640      	mov	r0, r8
 8007964:	47c8      	blx	r9
 8007966:	4306      	orrs	r6, r0
 8007968:	3568      	adds	r5, #104	; 0x68
 800796a:	e7ee      	b.n	800794a <_fwalk_reent+0x1a>

0800796c <rshift>:
 800796c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800796e:	6906      	ldr	r6, [r0, #16]
 8007970:	114b      	asrs	r3, r1, #5
 8007972:	429e      	cmp	r6, r3
 8007974:	f100 0414 	add.w	r4, r0, #20
 8007978:	dd30      	ble.n	80079dc <rshift+0x70>
 800797a:	f011 011f 	ands.w	r1, r1, #31
 800797e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007982:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007986:	d108      	bne.n	800799a <rshift+0x2e>
 8007988:	4621      	mov	r1, r4
 800798a:	42b2      	cmp	r2, r6
 800798c:	460b      	mov	r3, r1
 800798e:	d211      	bcs.n	80079b4 <rshift+0x48>
 8007990:	f852 3b04 	ldr.w	r3, [r2], #4
 8007994:	f841 3b04 	str.w	r3, [r1], #4
 8007998:	e7f7      	b.n	800798a <rshift+0x1e>
 800799a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800799e:	f1c1 0c20 	rsb	ip, r1, #32
 80079a2:	40cd      	lsrs	r5, r1
 80079a4:	3204      	adds	r2, #4
 80079a6:	4623      	mov	r3, r4
 80079a8:	42b2      	cmp	r2, r6
 80079aa:	4617      	mov	r7, r2
 80079ac:	d30c      	bcc.n	80079c8 <rshift+0x5c>
 80079ae:	601d      	str	r5, [r3, #0]
 80079b0:	b105      	cbz	r5, 80079b4 <rshift+0x48>
 80079b2:	3304      	adds	r3, #4
 80079b4:	1b1a      	subs	r2, r3, r4
 80079b6:	42a3      	cmp	r3, r4
 80079b8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80079bc:	bf08      	it	eq
 80079be:	2300      	moveq	r3, #0
 80079c0:	6102      	str	r2, [r0, #16]
 80079c2:	bf08      	it	eq
 80079c4:	6143      	streq	r3, [r0, #20]
 80079c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079c8:	683f      	ldr	r7, [r7, #0]
 80079ca:	fa07 f70c 	lsl.w	r7, r7, ip
 80079ce:	433d      	orrs	r5, r7
 80079d0:	f843 5b04 	str.w	r5, [r3], #4
 80079d4:	f852 5b04 	ldr.w	r5, [r2], #4
 80079d8:	40cd      	lsrs	r5, r1
 80079da:	e7e5      	b.n	80079a8 <rshift+0x3c>
 80079dc:	4623      	mov	r3, r4
 80079de:	e7e9      	b.n	80079b4 <rshift+0x48>

080079e0 <__hexdig_fun>:
 80079e0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80079e4:	2b09      	cmp	r3, #9
 80079e6:	d802      	bhi.n	80079ee <__hexdig_fun+0xe>
 80079e8:	3820      	subs	r0, #32
 80079ea:	b2c0      	uxtb	r0, r0
 80079ec:	4770      	bx	lr
 80079ee:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80079f2:	2b05      	cmp	r3, #5
 80079f4:	d801      	bhi.n	80079fa <__hexdig_fun+0x1a>
 80079f6:	3847      	subs	r0, #71	; 0x47
 80079f8:	e7f7      	b.n	80079ea <__hexdig_fun+0xa>
 80079fa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80079fe:	2b05      	cmp	r3, #5
 8007a00:	d801      	bhi.n	8007a06 <__hexdig_fun+0x26>
 8007a02:	3827      	subs	r0, #39	; 0x27
 8007a04:	e7f1      	b.n	80079ea <__hexdig_fun+0xa>
 8007a06:	2000      	movs	r0, #0
 8007a08:	4770      	bx	lr

08007a0a <__gethex>:
 8007a0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a0e:	b08b      	sub	sp, #44	; 0x2c
 8007a10:	468a      	mov	sl, r1
 8007a12:	9002      	str	r0, [sp, #8]
 8007a14:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007a16:	9306      	str	r3, [sp, #24]
 8007a18:	4690      	mov	r8, r2
 8007a1a:	f000 fad0 	bl	8007fbe <__localeconv_l>
 8007a1e:	6803      	ldr	r3, [r0, #0]
 8007a20:	9303      	str	r3, [sp, #12]
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7f8 fbd4 	bl	80001d0 <strlen>
 8007a28:	9b03      	ldr	r3, [sp, #12]
 8007a2a:	9001      	str	r0, [sp, #4]
 8007a2c:	4403      	add	r3, r0
 8007a2e:	f04f 0b00 	mov.w	fp, #0
 8007a32:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007a36:	9307      	str	r3, [sp, #28]
 8007a38:	f8da 3000 	ldr.w	r3, [sl]
 8007a3c:	3302      	adds	r3, #2
 8007a3e:	461f      	mov	r7, r3
 8007a40:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007a44:	2830      	cmp	r0, #48	; 0x30
 8007a46:	d06c      	beq.n	8007b22 <__gethex+0x118>
 8007a48:	f7ff ffca 	bl	80079e0 <__hexdig_fun>
 8007a4c:	4604      	mov	r4, r0
 8007a4e:	2800      	cmp	r0, #0
 8007a50:	d16a      	bne.n	8007b28 <__gethex+0x11e>
 8007a52:	9a01      	ldr	r2, [sp, #4]
 8007a54:	9903      	ldr	r1, [sp, #12]
 8007a56:	4638      	mov	r0, r7
 8007a58:	f001 fa81 	bl	8008f5e <strncmp>
 8007a5c:	2800      	cmp	r0, #0
 8007a5e:	d166      	bne.n	8007b2e <__gethex+0x124>
 8007a60:	9b01      	ldr	r3, [sp, #4]
 8007a62:	5cf8      	ldrb	r0, [r7, r3]
 8007a64:	18fe      	adds	r6, r7, r3
 8007a66:	f7ff ffbb 	bl	80079e0 <__hexdig_fun>
 8007a6a:	2800      	cmp	r0, #0
 8007a6c:	d062      	beq.n	8007b34 <__gethex+0x12a>
 8007a6e:	4633      	mov	r3, r6
 8007a70:	7818      	ldrb	r0, [r3, #0]
 8007a72:	2830      	cmp	r0, #48	; 0x30
 8007a74:	461f      	mov	r7, r3
 8007a76:	f103 0301 	add.w	r3, r3, #1
 8007a7a:	d0f9      	beq.n	8007a70 <__gethex+0x66>
 8007a7c:	f7ff ffb0 	bl	80079e0 <__hexdig_fun>
 8007a80:	fab0 f580 	clz	r5, r0
 8007a84:	096d      	lsrs	r5, r5, #5
 8007a86:	4634      	mov	r4, r6
 8007a88:	f04f 0b01 	mov.w	fp, #1
 8007a8c:	463a      	mov	r2, r7
 8007a8e:	4616      	mov	r6, r2
 8007a90:	3201      	adds	r2, #1
 8007a92:	7830      	ldrb	r0, [r6, #0]
 8007a94:	f7ff ffa4 	bl	80079e0 <__hexdig_fun>
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	d1f8      	bne.n	8007a8e <__gethex+0x84>
 8007a9c:	9a01      	ldr	r2, [sp, #4]
 8007a9e:	9903      	ldr	r1, [sp, #12]
 8007aa0:	4630      	mov	r0, r6
 8007aa2:	f001 fa5c 	bl	8008f5e <strncmp>
 8007aa6:	b950      	cbnz	r0, 8007abe <__gethex+0xb4>
 8007aa8:	b954      	cbnz	r4, 8007ac0 <__gethex+0xb6>
 8007aaa:	9b01      	ldr	r3, [sp, #4]
 8007aac:	18f4      	adds	r4, r6, r3
 8007aae:	4622      	mov	r2, r4
 8007ab0:	4616      	mov	r6, r2
 8007ab2:	3201      	adds	r2, #1
 8007ab4:	7830      	ldrb	r0, [r6, #0]
 8007ab6:	f7ff ff93 	bl	80079e0 <__hexdig_fun>
 8007aba:	2800      	cmp	r0, #0
 8007abc:	d1f8      	bne.n	8007ab0 <__gethex+0xa6>
 8007abe:	b10c      	cbz	r4, 8007ac4 <__gethex+0xba>
 8007ac0:	1ba4      	subs	r4, r4, r6
 8007ac2:	00a4      	lsls	r4, r4, #2
 8007ac4:	7833      	ldrb	r3, [r6, #0]
 8007ac6:	2b50      	cmp	r3, #80	; 0x50
 8007ac8:	d001      	beq.n	8007ace <__gethex+0xc4>
 8007aca:	2b70      	cmp	r3, #112	; 0x70
 8007acc:	d140      	bne.n	8007b50 <__gethex+0x146>
 8007ace:	7873      	ldrb	r3, [r6, #1]
 8007ad0:	2b2b      	cmp	r3, #43	; 0x2b
 8007ad2:	d031      	beq.n	8007b38 <__gethex+0x12e>
 8007ad4:	2b2d      	cmp	r3, #45	; 0x2d
 8007ad6:	d033      	beq.n	8007b40 <__gethex+0x136>
 8007ad8:	1c71      	adds	r1, r6, #1
 8007ada:	f04f 0900 	mov.w	r9, #0
 8007ade:	7808      	ldrb	r0, [r1, #0]
 8007ae0:	f7ff ff7e 	bl	80079e0 <__hexdig_fun>
 8007ae4:	1e43      	subs	r3, r0, #1
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	2b18      	cmp	r3, #24
 8007aea:	d831      	bhi.n	8007b50 <__gethex+0x146>
 8007aec:	f1a0 0210 	sub.w	r2, r0, #16
 8007af0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007af4:	f7ff ff74 	bl	80079e0 <__hexdig_fun>
 8007af8:	1e43      	subs	r3, r0, #1
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	2b18      	cmp	r3, #24
 8007afe:	d922      	bls.n	8007b46 <__gethex+0x13c>
 8007b00:	f1b9 0f00 	cmp.w	r9, #0
 8007b04:	d000      	beq.n	8007b08 <__gethex+0xfe>
 8007b06:	4252      	negs	r2, r2
 8007b08:	4414      	add	r4, r2
 8007b0a:	f8ca 1000 	str.w	r1, [sl]
 8007b0e:	b30d      	cbz	r5, 8007b54 <__gethex+0x14a>
 8007b10:	f1bb 0f00 	cmp.w	fp, #0
 8007b14:	bf0c      	ite	eq
 8007b16:	2706      	moveq	r7, #6
 8007b18:	2700      	movne	r7, #0
 8007b1a:	4638      	mov	r0, r7
 8007b1c:	b00b      	add	sp, #44	; 0x2c
 8007b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b22:	f10b 0b01 	add.w	fp, fp, #1
 8007b26:	e78a      	b.n	8007a3e <__gethex+0x34>
 8007b28:	2500      	movs	r5, #0
 8007b2a:	462c      	mov	r4, r5
 8007b2c:	e7ae      	b.n	8007a8c <__gethex+0x82>
 8007b2e:	463e      	mov	r6, r7
 8007b30:	2501      	movs	r5, #1
 8007b32:	e7c7      	b.n	8007ac4 <__gethex+0xba>
 8007b34:	4604      	mov	r4, r0
 8007b36:	e7fb      	b.n	8007b30 <__gethex+0x126>
 8007b38:	f04f 0900 	mov.w	r9, #0
 8007b3c:	1cb1      	adds	r1, r6, #2
 8007b3e:	e7ce      	b.n	8007ade <__gethex+0xd4>
 8007b40:	f04f 0901 	mov.w	r9, #1
 8007b44:	e7fa      	b.n	8007b3c <__gethex+0x132>
 8007b46:	230a      	movs	r3, #10
 8007b48:	fb03 0202 	mla	r2, r3, r2, r0
 8007b4c:	3a10      	subs	r2, #16
 8007b4e:	e7cf      	b.n	8007af0 <__gethex+0xe6>
 8007b50:	4631      	mov	r1, r6
 8007b52:	e7da      	b.n	8007b0a <__gethex+0x100>
 8007b54:	1bf3      	subs	r3, r6, r7
 8007b56:	3b01      	subs	r3, #1
 8007b58:	4629      	mov	r1, r5
 8007b5a:	2b07      	cmp	r3, #7
 8007b5c:	dc49      	bgt.n	8007bf2 <__gethex+0x1e8>
 8007b5e:	9802      	ldr	r0, [sp, #8]
 8007b60:	f000 fa63 	bl	800802a <_Balloc>
 8007b64:	9b01      	ldr	r3, [sp, #4]
 8007b66:	f100 0914 	add.w	r9, r0, #20
 8007b6a:	f04f 0b00 	mov.w	fp, #0
 8007b6e:	f1c3 0301 	rsb	r3, r3, #1
 8007b72:	4605      	mov	r5, r0
 8007b74:	f8cd 9010 	str.w	r9, [sp, #16]
 8007b78:	46da      	mov	sl, fp
 8007b7a:	9308      	str	r3, [sp, #32]
 8007b7c:	42b7      	cmp	r7, r6
 8007b7e:	d33b      	bcc.n	8007bf8 <__gethex+0x1ee>
 8007b80:	9804      	ldr	r0, [sp, #16]
 8007b82:	f840 ab04 	str.w	sl, [r0], #4
 8007b86:	eba0 0009 	sub.w	r0, r0, r9
 8007b8a:	1080      	asrs	r0, r0, #2
 8007b8c:	6128      	str	r0, [r5, #16]
 8007b8e:	0147      	lsls	r7, r0, #5
 8007b90:	4650      	mov	r0, sl
 8007b92:	f000 fb0e 	bl	80081b2 <__hi0bits>
 8007b96:	f8d8 6000 	ldr.w	r6, [r8]
 8007b9a:	1a3f      	subs	r7, r7, r0
 8007b9c:	42b7      	cmp	r7, r6
 8007b9e:	dd64      	ble.n	8007c6a <__gethex+0x260>
 8007ba0:	1bbf      	subs	r7, r7, r6
 8007ba2:	4639      	mov	r1, r7
 8007ba4:	4628      	mov	r0, r5
 8007ba6:	f000 fe1d 	bl	80087e4 <__any_on>
 8007baa:	4682      	mov	sl, r0
 8007bac:	b178      	cbz	r0, 8007bce <__gethex+0x1c4>
 8007bae:	1e7b      	subs	r3, r7, #1
 8007bb0:	1159      	asrs	r1, r3, #5
 8007bb2:	f003 021f 	and.w	r2, r3, #31
 8007bb6:	f04f 0a01 	mov.w	sl, #1
 8007bba:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007bbe:	fa0a f202 	lsl.w	r2, sl, r2
 8007bc2:	420a      	tst	r2, r1
 8007bc4:	d003      	beq.n	8007bce <__gethex+0x1c4>
 8007bc6:	4553      	cmp	r3, sl
 8007bc8:	dc46      	bgt.n	8007c58 <__gethex+0x24e>
 8007bca:	f04f 0a02 	mov.w	sl, #2
 8007bce:	4639      	mov	r1, r7
 8007bd0:	4628      	mov	r0, r5
 8007bd2:	f7ff fecb 	bl	800796c <rshift>
 8007bd6:	443c      	add	r4, r7
 8007bd8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007bdc:	42a3      	cmp	r3, r4
 8007bde:	da52      	bge.n	8007c86 <__gethex+0x27c>
 8007be0:	4629      	mov	r1, r5
 8007be2:	9802      	ldr	r0, [sp, #8]
 8007be4:	f000 fa55 	bl	8008092 <_Bfree>
 8007be8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007bea:	2300      	movs	r3, #0
 8007bec:	6013      	str	r3, [r2, #0]
 8007bee:	27a3      	movs	r7, #163	; 0xa3
 8007bf0:	e793      	b.n	8007b1a <__gethex+0x110>
 8007bf2:	3101      	adds	r1, #1
 8007bf4:	105b      	asrs	r3, r3, #1
 8007bf6:	e7b0      	b.n	8007b5a <__gethex+0x150>
 8007bf8:	1e73      	subs	r3, r6, #1
 8007bfa:	9305      	str	r3, [sp, #20]
 8007bfc:	9a07      	ldr	r2, [sp, #28]
 8007bfe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d018      	beq.n	8007c38 <__gethex+0x22e>
 8007c06:	f1bb 0f20 	cmp.w	fp, #32
 8007c0a:	d107      	bne.n	8007c1c <__gethex+0x212>
 8007c0c:	9b04      	ldr	r3, [sp, #16]
 8007c0e:	f8c3 a000 	str.w	sl, [r3]
 8007c12:	3304      	adds	r3, #4
 8007c14:	f04f 0a00 	mov.w	sl, #0
 8007c18:	9304      	str	r3, [sp, #16]
 8007c1a:	46d3      	mov	fp, sl
 8007c1c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007c20:	f7ff fede 	bl	80079e0 <__hexdig_fun>
 8007c24:	f000 000f 	and.w	r0, r0, #15
 8007c28:	fa00 f00b 	lsl.w	r0, r0, fp
 8007c2c:	ea4a 0a00 	orr.w	sl, sl, r0
 8007c30:	f10b 0b04 	add.w	fp, fp, #4
 8007c34:	9b05      	ldr	r3, [sp, #20]
 8007c36:	e00d      	b.n	8007c54 <__gethex+0x24a>
 8007c38:	9b05      	ldr	r3, [sp, #20]
 8007c3a:	9a08      	ldr	r2, [sp, #32]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	42bb      	cmp	r3, r7
 8007c40:	d3e1      	bcc.n	8007c06 <__gethex+0x1fc>
 8007c42:	4618      	mov	r0, r3
 8007c44:	9a01      	ldr	r2, [sp, #4]
 8007c46:	9903      	ldr	r1, [sp, #12]
 8007c48:	9309      	str	r3, [sp, #36]	; 0x24
 8007c4a:	f001 f988 	bl	8008f5e <strncmp>
 8007c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c50:	2800      	cmp	r0, #0
 8007c52:	d1d8      	bne.n	8007c06 <__gethex+0x1fc>
 8007c54:	461e      	mov	r6, r3
 8007c56:	e791      	b.n	8007b7c <__gethex+0x172>
 8007c58:	1eb9      	subs	r1, r7, #2
 8007c5a:	4628      	mov	r0, r5
 8007c5c:	f000 fdc2 	bl	80087e4 <__any_on>
 8007c60:	2800      	cmp	r0, #0
 8007c62:	d0b2      	beq.n	8007bca <__gethex+0x1c0>
 8007c64:	f04f 0a03 	mov.w	sl, #3
 8007c68:	e7b1      	b.n	8007bce <__gethex+0x1c4>
 8007c6a:	da09      	bge.n	8007c80 <__gethex+0x276>
 8007c6c:	1bf7      	subs	r7, r6, r7
 8007c6e:	4629      	mov	r1, r5
 8007c70:	463a      	mov	r2, r7
 8007c72:	9802      	ldr	r0, [sp, #8]
 8007c74:	f000 fbd8 	bl	8008428 <__lshift>
 8007c78:	1be4      	subs	r4, r4, r7
 8007c7a:	4605      	mov	r5, r0
 8007c7c:	f100 0914 	add.w	r9, r0, #20
 8007c80:	f04f 0a00 	mov.w	sl, #0
 8007c84:	e7a8      	b.n	8007bd8 <__gethex+0x1ce>
 8007c86:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007c8a:	42a0      	cmp	r0, r4
 8007c8c:	dd6a      	ble.n	8007d64 <__gethex+0x35a>
 8007c8e:	1b04      	subs	r4, r0, r4
 8007c90:	42a6      	cmp	r6, r4
 8007c92:	dc2e      	bgt.n	8007cf2 <__gethex+0x2e8>
 8007c94:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007c98:	2b02      	cmp	r3, #2
 8007c9a:	d022      	beq.n	8007ce2 <__gethex+0x2d8>
 8007c9c:	2b03      	cmp	r3, #3
 8007c9e:	d024      	beq.n	8007cea <__gethex+0x2e0>
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d115      	bne.n	8007cd0 <__gethex+0x2c6>
 8007ca4:	42a6      	cmp	r6, r4
 8007ca6:	d113      	bne.n	8007cd0 <__gethex+0x2c6>
 8007ca8:	2e01      	cmp	r6, #1
 8007caa:	dc0b      	bgt.n	8007cc4 <__gethex+0x2ba>
 8007cac:	9a06      	ldr	r2, [sp, #24]
 8007cae:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007cb2:	6013      	str	r3, [r2, #0]
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	612b      	str	r3, [r5, #16]
 8007cb8:	f8c9 3000 	str.w	r3, [r9]
 8007cbc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007cbe:	2762      	movs	r7, #98	; 0x62
 8007cc0:	601d      	str	r5, [r3, #0]
 8007cc2:	e72a      	b.n	8007b1a <__gethex+0x110>
 8007cc4:	1e71      	subs	r1, r6, #1
 8007cc6:	4628      	mov	r0, r5
 8007cc8:	f000 fd8c 	bl	80087e4 <__any_on>
 8007ccc:	2800      	cmp	r0, #0
 8007cce:	d1ed      	bne.n	8007cac <__gethex+0x2a2>
 8007cd0:	4629      	mov	r1, r5
 8007cd2:	9802      	ldr	r0, [sp, #8]
 8007cd4:	f000 f9dd 	bl	8008092 <_Bfree>
 8007cd8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007cda:	2300      	movs	r3, #0
 8007cdc:	6013      	str	r3, [r2, #0]
 8007cde:	2750      	movs	r7, #80	; 0x50
 8007ce0:	e71b      	b.n	8007b1a <__gethex+0x110>
 8007ce2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d0e1      	beq.n	8007cac <__gethex+0x2a2>
 8007ce8:	e7f2      	b.n	8007cd0 <__gethex+0x2c6>
 8007cea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d1dd      	bne.n	8007cac <__gethex+0x2a2>
 8007cf0:	e7ee      	b.n	8007cd0 <__gethex+0x2c6>
 8007cf2:	1e67      	subs	r7, r4, #1
 8007cf4:	f1ba 0f00 	cmp.w	sl, #0
 8007cf8:	d131      	bne.n	8007d5e <__gethex+0x354>
 8007cfa:	b127      	cbz	r7, 8007d06 <__gethex+0x2fc>
 8007cfc:	4639      	mov	r1, r7
 8007cfe:	4628      	mov	r0, r5
 8007d00:	f000 fd70 	bl	80087e4 <__any_on>
 8007d04:	4682      	mov	sl, r0
 8007d06:	117a      	asrs	r2, r7, #5
 8007d08:	2301      	movs	r3, #1
 8007d0a:	f007 071f 	and.w	r7, r7, #31
 8007d0e:	fa03 f707 	lsl.w	r7, r3, r7
 8007d12:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8007d16:	4621      	mov	r1, r4
 8007d18:	421f      	tst	r7, r3
 8007d1a:	4628      	mov	r0, r5
 8007d1c:	bf18      	it	ne
 8007d1e:	f04a 0a02 	orrne.w	sl, sl, #2
 8007d22:	1b36      	subs	r6, r6, r4
 8007d24:	f7ff fe22 	bl	800796c <rshift>
 8007d28:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8007d2c:	2702      	movs	r7, #2
 8007d2e:	f1ba 0f00 	cmp.w	sl, #0
 8007d32:	d048      	beq.n	8007dc6 <__gethex+0x3bc>
 8007d34:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007d38:	2b02      	cmp	r3, #2
 8007d3a:	d015      	beq.n	8007d68 <__gethex+0x35e>
 8007d3c:	2b03      	cmp	r3, #3
 8007d3e:	d017      	beq.n	8007d70 <__gethex+0x366>
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d109      	bne.n	8007d58 <__gethex+0x34e>
 8007d44:	f01a 0f02 	tst.w	sl, #2
 8007d48:	d006      	beq.n	8007d58 <__gethex+0x34e>
 8007d4a:	f8d9 3000 	ldr.w	r3, [r9]
 8007d4e:	ea4a 0a03 	orr.w	sl, sl, r3
 8007d52:	f01a 0f01 	tst.w	sl, #1
 8007d56:	d10e      	bne.n	8007d76 <__gethex+0x36c>
 8007d58:	f047 0710 	orr.w	r7, r7, #16
 8007d5c:	e033      	b.n	8007dc6 <__gethex+0x3bc>
 8007d5e:	f04f 0a01 	mov.w	sl, #1
 8007d62:	e7d0      	b.n	8007d06 <__gethex+0x2fc>
 8007d64:	2701      	movs	r7, #1
 8007d66:	e7e2      	b.n	8007d2e <__gethex+0x324>
 8007d68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d6a:	f1c3 0301 	rsb	r3, r3, #1
 8007d6e:	9315      	str	r3, [sp, #84]	; 0x54
 8007d70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d0f0      	beq.n	8007d58 <__gethex+0x34e>
 8007d76:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8007d7a:	f105 0314 	add.w	r3, r5, #20
 8007d7e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8007d82:	eb03 010a 	add.w	r1, r3, sl
 8007d86:	f04f 0c00 	mov.w	ip, #0
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d90:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007d94:	d01c      	beq.n	8007dd0 <__gethex+0x3c6>
 8007d96:	3201      	adds	r2, #1
 8007d98:	6002      	str	r2, [r0, #0]
 8007d9a:	2f02      	cmp	r7, #2
 8007d9c:	f105 0314 	add.w	r3, r5, #20
 8007da0:	d138      	bne.n	8007e14 <__gethex+0x40a>
 8007da2:	f8d8 2000 	ldr.w	r2, [r8]
 8007da6:	3a01      	subs	r2, #1
 8007da8:	42b2      	cmp	r2, r6
 8007daa:	d10a      	bne.n	8007dc2 <__gethex+0x3b8>
 8007dac:	1171      	asrs	r1, r6, #5
 8007dae:	2201      	movs	r2, #1
 8007db0:	f006 061f 	and.w	r6, r6, #31
 8007db4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007db8:	fa02 f606 	lsl.w	r6, r2, r6
 8007dbc:	421e      	tst	r6, r3
 8007dbe:	bf18      	it	ne
 8007dc0:	4617      	movne	r7, r2
 8007dc2:	f047 0720 	orr.w	r7, r7, #32
 8007dc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007dc8:	601d      	str	r5, [r3, #0]
 8007dca:	9b06      	ldr	r3, [sp, #24]
 8007dcc:	601c      	str	r4, [r3, #0]
 8007dce:	e6a4      	b.n	8007b1a <__gethex+0x110>
 8007dd0:	4299      	cmp	r1, r3
 8007dd2:	f843 cc04 	str.w	ip, [r3, #-4]
 8007dd6:	d8d8      	bhi.n	8007d8a <__gethex+0x380>
 8007dd8:	68ab      	ldr	r3, [r5, #8]
 8007dda:	4599      	cmp	r9, r3
 8007ddc:	db12      	blt.n	8007e04 <__gethex+0x3fa>
 8007dde:	6869      	ldr	r1, [r5, #4]
 8007de0:	9802      	ldr	r0, [sp, #8]
 8007de2:	3101      	adds	r1, #1
 8007de4:	f000 f921 	bl	800802a <_Balloc>
 8007de8:	692a      	ldr	r2, [r5, #16]
 8007dea:	3202      	adds	r2, #2
 8007dec:	f105 010c 	add.w	r1, r5, #12
 8007df0:	4683      	mov	fp, r0
 8007df2:	0092      	lsls	r2, r2, #2
 8007df4:	300c      	adds	r0, #12
 8007df6:	f000 f90d 	bl	8008014 <memcpy>
 8007dfa:	4629      	mov	r1, r5
 8007dfc:	9802      	ldr	r0, [sp, #8]
 8007dfe:	f000 f948 	bl	8008092 <_Bfree>
 8007e02:	465d      	mov	r5, fp
 8007e04:	692b      	ldr	r3, [r5, #16]
 8007e06:	1c5a      	adds	r2, r3, #1
 8007e08:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007e0c:	612a      	str	r2, [r5, #16]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	615a      	str	r2, [r3, #20]
 8007e12:	e7c2      	b.n	8007d9a <__gethex+0x390>
 8007e14:	692a      	ldr	r2, [r5, #16]
 8007e16:	454a      	cmp	r2, r9
 8007e18:	dd0b      	ble.n	8007e32 <__gethex+0x428>
 8007e1a:	2101      	movs	r1, #1
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	f7ff fda5 	bl	800796c <rshift>
 8007e22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007e26:	3401      	adds	r4, #1
 8007e28:	42a3      	cmp	r3, r4
 8007e2a:	f6ff aed9 	blt.w	8007be0 <__gethex+0x1d6>
 8007e2e:	2701      	movs	r7, #1
 8007e30:	e7c7      	b.n	8007dc2 <__gethex+0x3b8>
 8007e32:	f016 061f 	ands.w	r6, r6, #31
 8007e36:	d0fa      	beq.n	8007e2e <__gethex+0x424>
 8007e38:	449a      	add	sl, r3
 8007e3a:	f1c6 0620 	rsb	r6, r6, #32
 8007e3e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007e42:	f000 f9b6 	bl	80081b2 <__hi0bits>
 8007e46:	42b0      	cmp	r0, r6
 8007e48:	dbe7      	blt.n	8007e1a <__gethex+0x410>
 8007e4a:	e7f0      	b.n	8007e2e <__gethex+0x424>

08007e4c <L_shift>:
 8007e4c:	f1c2 0208 	rsb	r2, r2, #8
 8007e50:	0092      	lsls	r2, r2, #2
 8007e52:	b570      	push	{r4, r5, r6, lr}
 8007e54:	f1c2 0620 	rsb	r6, r2, #32
 8007e58:	6843      	ldr	r3, [r0, #4]
 8007e5a:	6804      	ldr	r4, [r0, #0]
 8007e5c:	fa03 f506 	lsl.w	r5, r3, r6
 8007e60:	432c      	orrs	r4, r5
 8007e62:	40d3      	lsrs	r3, r2
 8007e64:	6004      	str	r4, [r0, #0]
 8007e66:	f840 3f04 	str.w	r3, [r0, #4]!
 8007e6a:	4288      	cmp	r0, r1
 8007e6c:	d3f4      	bcc.n	8007e58 <L_shift+0xc>
 8007e6e:	bd70      	pop	{r4, r5, r6, pc}

08007e70 <__match>:
 8007e70:	b530      	push	{r4, r5, lr}
 8007e72:	6803      	ldr	r3, [r0, #0]
 8007e74:	3301      	adds	r3, #1
 8007e76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e7a:	b914      	cbnz	r4, 8007e82 <__match+0x12>
 8007e7c:	6003      	str	r3, [r0, #0]
 8007e7e:	2001      	movs	r0, #1
 8007e80:	bd30      	pop	{r4, r5, pc}
 8007e82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e86:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007e8a:	2d19      	cmp	r5, #25
 8007e8c:	bf98      	it	ls
 8007e8e:	3220      	addls	r2, #32
 8007e90:	42a2      	cmp	r2, r4
 8007e92:	d0f0      	beq.n	8007e76 <__match+0x6>
 8007e94:	2000      	movs	r0, #0
 8007e96:	e7f3      	b.n	8007e80 <__match+0x10>

08007e98 <__hexnan>:
 8007e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e9c:	680b      	ldr	r3, [r1, #0]
 8007e9e:	6801      	ldr	r1, [r0, #0]
 8007ea0:	115f      	asrs	r7, r3, #5
 8007ea2:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8007ea6:	f013 031f 	ands.w	r3, r3, #31
 8007eaa:	b087      	sub	sp, #28
 8007eac:	bf18      	it	ne
 8007eae:	3704      	addne	r7, #4
 8007eb0:	2500      	movs	r5, #0
 8007eb2:	1f3e      	subs	r6, r7, #4
 8007eb4:	4682      	mov	sl, r0
 8007eb6:	4690      	mov	r8, r2
 8007eb8:	9301      	str	r3, [sp, #4]
 8007eba:	f847 5c04 	str.w	r5, [r7, #-4]
 8007ebe:	46b1      	mov	r9, r6
 8007ec0:	4634      	mov	r4, r6
 8007ec2:	9502      	str	r5, [sp, #8]
 8007ec4:	46ab      	mov	fp, r5
 8007ec6:	784a      	ldrb	r2, [r1, #1]
 8007ec8:	1c4b      	adds	r3, r1, #1
 8007eca:	9303      	str	r3, [sp, #12]
 8007ecc:	b342      	cbz	r2, 8007f20 <__hexnan+0x88>
 8007ece:	4610      	mov	r0, r2
 8007ed0:	9105      	str	r1, [sp, #20]
 8007ed2:	9204      	str	r2, [sp, #16]
 8007ed4:	f7ff fd84 	bl	80079e0 <__hexdig_fun>
 8007ed8:	2800      	cmp	r0, #0
 8007eda:	d143      	bne.n	8007f64 <__hexnan+0xcc>
 8007edc:	9a04      	ldr	r2, [sp, #16]
 8007ede:	9905      	ldr	r1, [sp, #20]
 8007ee0:	2a20      	cmp	r2, #32
 8007ee2:	d818      	bhi.n	8007f16 <__hexnan+0x7e>
 8007ee4:	9b02      	ldr	r3, [sp, #8]
 8007ee6:	459b      	cmp	fp, r3
 8007ee8:	dd13      	ble.n	8007f12 <__hexnan+0x7a>
 8007eea:	454c      	cmp	r4, r9
 8007eec:	d206      	bcs.n	8007efc <__hexnan+0x64>
 8007eee:	2d07      	cmp	r5, #7
 8007ef0:	dc04      	bgt.n	8007efc <__hexnan+0x64>
 8007ef2:	462a      	mov	r2, r5
 8007ef4:	4649      	mov	r1, r9
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	f7ff ffa8 	bl	8007e4c <L_shift>
 8007efc:	4544      	cmp	r4, r8
 8007efe:	d944      	bls.n	8007f8a <__hexnan+0xf2>
 8007f00:	2300      	movs	r3, #0
 8007f02:	f1a4 0904 	sub.w	r9, r4, #4
 8007f06:	f844 3c04 	str.w	r3, [r4, #-4]
 8007f0a:	f8cd b008 	str.w	fp, [sp, #8]
 8007f0e:	464c      	mov	r4, r9
 8007f10:	461d      	mov	r5, r3
 8007f12:	9903      	ldr	r1, [sp, #12]
 8007f14:	e7d7      	b.n	8007ec6 <__hexnan+0x2e>
 8007f16:	2a29      	cmp	r2, #41	; 0x29
 8007f18:	d14a      	bne.n	8007fb0 <__hexnan+0x118>
 8007f1a:	3102      	adds	r1, #2
 8007f1c:	f8ca 1000 	str.w	r1, [sl]
 8007f20:	f1bb 0f00 	cmp.w	fp, #0
 8007f24:	d044      	beq.n	8007fb0 <__hexnan+0x118>
 8007f26:	454c      	cmp	r4, r9
 8007f28:	d206      	bcs.n	8007f38 <__hexnan+0xa0>
 8007f2a:	2d07      	cmp	r5, #7
 8007f2c:	dc04      	bgt.n	8007f38 <__hexnan+0xa0>
 8007f2e:	462a      	mov	r2, r5
 8007f30:	4649      	mov	r1, r9
 8007f32:	4620      	mov	r0, r4
 8007f34:	f7ff ff8a 	bl	8007e4c <L_shift>
 8007f38:	4544      	cmp	r4, r8
 8007f3a:	d928      	bls.n	8007f8e <__hexnan+0xf6>
 8007f3c:	4643      	mov	r3, r8
 8007f3e:	f854 2b04 	ldr.w	r2, [r4], #4
 8007f42:	f843 2b04 	str.w	r2, [r3], #4
 8007f46:	42a6      	cmp	r6, r4
 8007f48:	d2f9      	bcs.n	8007f3e <__hexnan+0xa6>
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f843 2b04 	str.w	r2, [r3], #4
 8007f50:	429e      	cmp	r6, r3
 8007f52:	d2fb      	bcs.n	8007f4c <__hexnan+0xb4>
 8007f54:	6833      	ldr	r3, [r6, #0]
 8007f56:	b91b      	cbnz	r3, 8007f60 <__hexnan+0xc8>
 8007f58:	4546      	cmp	r6, r8
 8007f5a:	d127      	bne.n	8007fac <__hexnan+0x114>
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	6033      	str	r3, [r6, #0]
 8007f60:	2005      	movs	r0, #5
 8007f62:	e026      	b.n	8007fb2 <__hexnan+0x11a>
 8007f64:	3501      	adds	r5, #1
 8007f66:	2d08      	cmp	r5, #8
 8007f68:	f10b 0b01 	add.w	fp, fp, #1
 8007f6c:	dd06      	ble.n	8007f7c <__hexnan+0xe4>
 8007f6e:	4544      	cmp	r4, r8
 8007f70:	d9cf      	bls.n	8007f12 <__hexnan+0x7a>
 8007f72:	2300      	movs	r3, #0
 8007f74:	f844 3c04 	str.w	r3, [r4, #-4]
 8007f78:	2501      	movs	r5, #1
 8007f7a:	3c04      	subs	r4, #4
 8007f7c:	6822      	ldr	r2, [r4, #0]
 8007f7e:	f000 000f 	and.w	r0, r0, #15
 8007f82:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007f86:	6020      	str	r0, [r4, #0]
 8007f88:	e7c3      	b.n	8007f12 <__hexnan+0x7a>
 8007f8a:	2508      	movs	r5, #8
 8007f8c:	e7c1      	b.n	8007f12 <__hexnan+0x7a>
 8007f8e:	9b01      	ldr	r3, [sp, #4]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d0df      	beq.n	8007f54 <__hexnan+0xbc>
 8007f94:	f04f 32ff 	mov.w	r2, #4294967295
 8007f98:	f1c3 0320 	rsb	r3, r3, #32
 8007f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8007fa0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8007fa4:	401a      	ands	r2, r3
 8007fa6:	f847 2c04 	str.w	r2, [r7, #-4]
 8007faa:	e7d3      	b.n	8007f54 <__hexnan+0xbc>
 8007fac:	3e04      	subs	r6, #4
 8007fae:	e7d1      	b.n	8007f54 <__hexnan+0xbc>
 8007fb0:	2004      	movs	r0, #4
 8007fb2:	b007      	add	sp, #28
 8007fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007fb8 <__locale_ctype_ptr_l>:
 8007fb8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007fbc:	4770      	bx	lr

08007fbe <__localeconv_l>:
 8007fbe:	30f0      	adds	r0, #240	; 0xf0
 8007fc0:	4770      	bx	lr
	...

08007fc4 <_localeconv_r>:
 8007fc4:	4b04      	ldr	r3, [pc, #16]	; (8007fd8 <_localeconv_r+0x14>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	6a18      	ldr	r0, [r3, #32]
 8007fca:	4b04      	ldr	r3, [pc, #16]	; (8007fdc <_localeconv_r+0x18>)
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	bf08      	it	eq
 8007fd0:	4618      	moveq	r0, r3
 8007fd2:	30f0      	adds	r0, #240	; 0xf0
 8007fd4:	4770      	bx	lr
 8007fd6:	bf00      	nop
 8007fd8:	20000010 	.word	0x20000010
 8007fdc:	20000074 	.word	0x20000074

08007fe0 <malloc>:
 8007fe0:	4b02      	ldr	r3, [pc, #8]	; (8007fec <malloc+0xc>)
 8007fe2:	4601      	mov	r1, r0
 8007fe4:	6818      	ldr	r0, [r3, #0]
 8007fe6:	f000 bc7b 	b.w	80088e0 <_malloc_r>
 8007fea:	bf00      	nop
 8007fec:	20000010 	.word	0x20000010

08007ff0 <__ascii_mbtowc>:
 8007ff0:	b082      	sub	sp, #8
 8007ff2:	b901      	cbnz	r1, 8007ff6 <__ascii_mbtowc+0x6>
 8007ff4:	a901      	add	r1, sp, #4
 8007ff6:	b142      	cbz	r2, 800800a <__ascii_mbtowc+0x1a>
 8007ff8:	b14b      	cbz	r3, 800800e <__ascii_mbtowc+0x1e>
 8007ffa:	7813      	ldrb	r3, [r2, #0]
 8007ffc:	600b      	str	r3, [r1, #0]
 8007ffe:	7812      	ldrb	r2, [r2, #0]
 8008000:	1c10      	adds	r0, r2, #0
 8008002:	bf18      	it	ne
 8008004:	2001      	movne	r0, #1
 8008006:	b002      	add	sp, #8
 8008008:	4770      	bx	lr
 800800a:	4610      	mov	r0, r2
 800800c:	e7fb      	b.n	8008006 <__ascii_mbtowc+0x16>
 800800e:	f06f 0001 	mvn.w	r0, #1
 8008012:	e7f8      	b.n	8008006 <__ascii_mbtowc+0x16>

08008014 <memcpy>:
 8008014:	b510      	push	{r4, lr}
 8008016:	1e43      	subs	r3, r0, #1
 8008018:	440a      	add	r2, r1
 800801a:	4291      	cmp	r1, r2
 800801c:	d100      	bne.n	8008020 <memcpy+0xc>
 800801e:	bd10      	pop	{r4, pc}
 8008020:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008024:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008028:	e7f7      	b.n	800801a <memcpy+0x6>

0800802a <_Balloc>:
 800802a:	b570      	push	{r4, r5, r6, lr}
 800802c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800802e:	4604      	mov	r4, r0
 8008030:	460e      	mov	r6, r1
 8008032:	b93d      	cbnz	r5, 8008044 <_Balloc+0x1a>
 8008034:	2010      	movs	r0, #16
 8008036:	f7ff ffd3 	bl	8007fe0 <malloc>
 800803a:	6260      	str	r0, [r4, #36]	; 0x24
 800803c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008040:	6005      	str	r5, [r0, #0]
 8008042:	60c5      	str	r5, [r0, #12]
 8008044:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008046:	68eb      	ldr	r3, [r5, #12]
 8008048:	b183      	cbz	r3, 800806c <_Balloc+0x42>
 800804a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008052:	b9b8      	cbnz	r0, 8008084 <_Balloc+0x5a>
 8008054:	2101      	movs	r1, #1
 8008056:	fa01 f506 	lsl.w	r5, r1, r6
 800805a:	1d6a      	adds	r2, r5, #5
 800805c:	0092      	lsls	r2, r2, #2
 800805e:	4620      	mov	r0, r4
 8008060:	f000 fbe1 	bl	8008826 <_calloc_r>
 8008064:	b160      	cbz	r0, 8008080 <_Balloc+0x56>
 8008066:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800806a:	e00e      	b.n	800808a <_Balloc+0x60>
 800806c:	2221      	movs	r2, #33	; 0x21
 800806e:	2104      	movs	r1, #4
 8008070:	4620      	mov	r0, r4
 8008072:	f000 fbd8 	bl	8008826 <_calloc_r>
 8008076:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008078:	60e8      	str	r0, [r5, #12]
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1e4      	bne.n	800804a <_Balloc+0x20>
 8008080:	2000      	movs	r0, #0
 8008082:	bd70      	pop	{r4, r5, r6, pc}
 8008084:	6802      	ldr	r2, [r0, #0]
 8008086:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800808a:	2300      	movs	r3, #0
 800808c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008090:	e7f7      	b.n	8008082 <_Balloc+0x58>

08008092 <_Bfree>:
 8008092:	b570      	push	{r4, r5, r6, lr}
 8008094:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008096:	4606      	mov	r6, r0
 8008098:	460d      	mov	r5, r1
 800809a:	b93c      	cbnz	r4, 80080ac <_Bfree+0x1a>
 800809c:	2010      	movs	r0, #16
 800809e:	f7ff ff9f 	bl	8007fe0 <malloc>
 80080a2:	6270      	str	r0, [r6, #36]	; 0x24
 80080a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80080a8:	6004      	str	r4, [r0, #0]
 80080aa:	60c4      	str	r4, [r0, #12]
 80080ac:	b13d      	cbz	r5, 80080be <_Bfree+0x2c>
 80080ae:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80080b0:	686a      	ldr	r2, [r5, #4]
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80080b8:	6029      	str	r1, [r5, #0]
 80080ba:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80080be:	bd70      	pop	{r4, r5, r6, pc}

080080c0 <__multadd>:
 80080c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080c4:	690d      	ldr	r5, [r1, #16]
 80080c6:	461f      	mov	r7, r3
 80080c8:	4606      	mov	r6, r0
 80080ca:	460c      	mov	r4, r1
 80080cc:	f101 0c14 	add.w	ip, r1, #20
 80080d0:	2300      	movs	r3, #0
 80080d2:	f8dc 0000 	ldr.w	r0, [ip]
 80080d6:	b281      	uxth	r1, r0
 80080d8:	fb02 7101 	mla	r1, r2, r1, r7
 80080dc:	0c0f      	lsrs	r7, r1, #16
 80080de:	0c00      	lsrs	r0, r0, #16
 80080e0:	fb02 7000 	mla	r0, r2, r0, r7
 80080e4:	b289      	uxth	r1, r1
 80080e6:	3301      	adds	r3, #1
 80080e8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80080ec:	429d      	cmp	r5, r3
 80080ee:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80080f2:	f84c 1b04 	str.w	r1, [ip], #4
 80080f6:	dcec      	bgt.n	80080d2 <__multadd+0x12>
 80080f8:	b1d7      	cbz	r7, 8008130 <__multadd+0x70>
 80080fa:	68a3      	ldr	r3, [r4, #8]
 80080fc:	42ab      	cmp	r3, r5
 80080fe:	dc12      	bgt.n	8008126 <__multadd+0x66>
 8008100:	6861      	ldr	r1, [r4, #4]
 8008102:	4630      	mov	r0, r6
 8008104:	3101      	adds	r1, #1
 8008106:	f7ff ff90 	bl	800802a <_Balloc>
 800810a:	6922      	ldr	r2, [r4, #16]
 800810c:	3202      	adds	r2, #2
 800810e:	f104 010c 	add.w	r1, r4, #12
 8008112:	4680      	mov	r8, r0
 8008114:	0092      	lsls	r2, r2, #2
 8008116:	300c      	adds	r0, #12
 8008118:	f7ff ff7c 	bl	8008014 <memcpy>
 800811c:	4621      	mov	r1, r4
 800811e:	4630      	mov	r0, r6
 8008120:	f7ff ffb7 	bl	8008092 <_Bfree>
 8008124:	4644      	mov	r4, r8
 8008126:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800812a:	3501      	adds	r5, #1
 800812c:	615f      	str	r7, [r3, #20]
 800812e:	6125      	str	r5, [r4, #16]
 8008130:	4620      	mov	r0, r4
 8008132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008136 <__s2b>:
 8008136:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800813a:	460c      	mov	r4, r1
 800813c:	4615      	mov	r5, r2
 800813e:	461f      	mov	r7, r3
 8008140:	2209      	movs	r2, #9
 8008142:	3308      	adds	r3, #8
 8008144:	4606      	mov	r6, r0
 8008146:	fb93 f3f2 	sdiv	r3, r3, r2
 800814a:	2100      	movs	r1, #0
 800814c:	2201      	movs	r2, #1
 800814e:	429a      	cmp	r2, r3
 8008150:	db20      	blt.n	8008194 <__s2b+0x5e>
 8008152:	4630      	mov	r0, r6
 8008154:	f7ff ff69 	bl	800802a <_Balloc>
 8008158:	9b08      	ldr	r3, [sp, #32]
 800815a:	6143      	str	r3, [r0, #20]
 800815c:	2d09      	cmp	r5, #9
 800815e:	f04f 0301 	mov.w	r3, #1
 8008162:	6103      	str	r3, [r0, #16]
 8008164:	dd19      	ble.n	800819a <__s2b+0x64>
 8008166:	f104 0809 	add.w	r8, r4, #9
 800816a:	46c1      	mov	r9, r8
 800816c:	442c      	add	r4, r5
 800816e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8008172:	4601      	mov	r1, r0
 8008174:	3b30      	subs	r3, #48	; 0x30
 8008176:	220a      	movs	r2, #10
 8008178:	4630      	mov	r0, r6
 800817a:	f7ff ffa1 	bl	80080c0 <__multadd>
 800817e:	45a1      	cmp	r9, r4
 8008180:	d1f5      	bne.n	800816e <__s2b+0x38>
 8008182:	eb08 0405 	add.w	r4, r8, r5
 8008186:	3c08      	subs	r4, #8
 8008188:	1b2d      	subs	r5, r5, r4
 800818a:	1963      	adds	r3, r4, r5
 800818c:	42bb      	cmp	r3, r7
 800818e:	db07      	blt.n	80081a0 <__s2b+0x6a>
 8008190:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008194:	0052      	lsls	r2, r2, #1
 8008196:	3101      	adds	r1, #1
 8008198:	e7d9      	b.n	800814e <__s2b+0x18>
 800819a:	340a      	adds	r4, #10
 800819c:	2509      	movs	r5, #9
 800819e:	e7f3      	b.n	8008188 <__s2b+0x52>
 80081a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80081a4:	4601      	mov	r1, r0
 80081a6:	3b30      	subs	r3, #48	; 0x30
 80081a8:	220a      	movs	r2, #10
 80081aa:	4630      	mov	r0, r6
 80081ac:	f7ff ff88 	bl	80080c0 <__multadd>
 80081b0:	e7eb      	b.n	800818a <__s2b+0x54>

080081b2 <__hi0bits>:
 80081b2:	0c02      	lsrs	r2, r0, #16
 80081b4:	0412      	lsls	r2, r2, #16
 80081b6:	4603      	mov	r3, r0
 80081b8:	b9b2      	cbnz	r2, 80081e8 <__hi0bits+0x36>
 80081ba:	0403      	lsls	r3, r0, #16
 80081bc:	2010      	movs	r0, #16
 80081be:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80081c2:	bf04      	itt	eq
 80081c4:	021b      	lsleq	r3, r3, #8
 80081c6:	3008      	addeq	r0, #8
 80081c8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80081cc:	bf04      	itt	eq
 80081ce:	011b      	lsleq	r3, r3, #4
 80081d0:	3004      	addeq	r0, #4
 80081d2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80081d6:	bf04      	itt	eq
 80081d8:	009b      	lsleq	r3, r3, #2
 80081da:	3002      	addeq	r0, #2
 80081dc:	2b00      	cmp	r3, #0
 80081de:	db06      	blt.n	80081ee <__hi0bits+0x3c>
 80081e0:	005b      	lsls	r3, r3, #1
 80081e2:	d503      	bpl.n	80081ec <__hi0bits+0x3a>
 80081e4:	3001      	adds	r0, #1
 80081e6:	4770      	bx	lr
 80081e8:	2000      	movs	r0, #0
 80081ea:	e7e8      	b.n	80081be <__hi0bits+0xc>
 80081ec:	2020      	movs	r0, #32
 80081ee:	4770      	bx	lr

080081f0 <__lo0bits>:
 80081f0:	6803      	ldr	r3, [r0, #0]
 80081f2:	f013 0207 	ands.w	r2, r3, #7
 80081f6:	4601      	mov	r1, r0
 80081f8:	d00b      	beq.n	8008212 <__lo0bits+0x22>
 80081fa:	07da      	lsls	r2, r3, #31
 80081fc:	d423      	bmi.n	8008246 <__lo0bits+0x56>
 80081fe:	0798      	lsls	r0, r3, #30
 8008200:	bf49      	itett	mi
 8008202:	085b      	lsrmi	r3, r3, #1
 8008204:	089b      	lsrpl	r3, r3, #2
 8008206:	2001      	movmi	r0, #1
 8008208:	600b      	strmi	r3, [r1, #0]
 800820a:	bf5c      	itt	pl
 800820c:	600b      	strpl	r3, [r1, #0]
 800820e:	2002      	movpl	r0, #2
 8008210:	4770      	bx	lr
 8008212:	b298      	uxth	r0, r3
 8008214:	b9a8      	cbnz	r0, 8008242 <__lo0bits+0x52>
 8008216:	0c1b      	lsrs	r3, r3, #16
 8008218:	2010      	movs	r0, #16
 800821a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800821e:	bf04      	itt	eq
 8008220:	0a1b      	lsreq	r3, r3, #8
 8008222:	3008      	addeq	r0, #8
 8008224:	071a      	lsls	r2, r3, #28
 8008226:	bf04      	itt	eq
 8008228:	091b      	lsreq	r3, r3, #4
 800822a:	3004      	addeq	r0, #4
 800822c:	079a      	lsls	r2, r3, #30
 800822e:	bf04      	itt	eq
 8008230:	089b      	lsreq	r3, r3, #2
 8008232:	3002      	addeq	r0, #2
 8008234:	07da      	lsls	r2, r3, #31
 8008236:	d402      	bmi.n	800823e <__lo0bits+0x4e>
 8008238:	085b      	lsrs	r3, r3, #1
 800823a:	d006      	beq.n	800824a <__lo0bits+0x5a>
 800823c:	3001      	adds	r0, #1
 800823e:	600b      	str	r3, [r1, #0]
 8008240:	4770      	bx	lr
 8008242:	4610      	mov	r0, r2
 8008244:	e7e9      	b.n	800821a <__lo0bits+0x2a>
 8008246:	2000      	movs	r0, #0
 8008248:	4770      	bx	lr
 800824a:	2020      	movs	r0, #32
 800824c:	4770      	bx	lr

0800824e <__i2b>:
 800824e:	b510      	push	{r4, lr}
 8008250:	460c      	mov	r4, r1
 8008252:	2101      	movs	r1, #1
 8008254:	f7ff fee9 	bl	800802a <_Balloc>
 8008258:	2201      	movs	r2, #1
 800825a:	6144      	str	r4, [r0, #20]
 800825c:	6102      	str	r2, [r0, #16]
 800825e:	bd10      	pop	{r4, pc}

08008260 <__multiply>:
 8008260:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008264:	4614      	mov	r4, r2
 8008266:	690a      	ldr	r2, [r1, #16]
 8008268:	6923      	ldr	r3, [r4, #16]
 800826a:	429a      	cmp	r2, r3
 800826c:	bfb8      	it	lt
 800826e:	460b      	movlt	r3, r1
 8008270:	4688      	mov	r8, r1
 8008272:	bfbc      	itt	lt
 8008274:	46a0      	movlt	r8, r4
 8008276:	461c      	movlt	r4, r3
 8008278:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800827c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008280:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008284:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008288:	eb07 0609 	add.w	r6, r7, r9
 800828c:	42b3      	cmp	r3, r6
 800828e:	bfb8      	it	lt
 8008290:	3101      	addlt	r1, #1
 8008292:	f7ff feca 	bl	800802a <_Balloc>
 8008296:	f100 0514 	add.w	r5, r0, #20
 800829a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800829e:	462b      	mov	r3, r5
 80082a0:	2200      	movs	r2, #0
 80082a2:	4573      	cmp	r3, lr
 80082a4:	d316      	bcc.n	80082d4 <__multiply+0x74>
 80082a6:	f104 0214 	add.w	r2, r4, #20
 80082aa:	f108 0114 	add.w	r1, r8, #20
 80082ae:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80082b2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80082b6:	9300      	str	r3, [sp, #0]
 80082b8:	9b00      	ldr	r3, [sp, #0]
 80082ba:	9201      	str	r2, [sp, #4]
 80082bc:	4293      	cmp	r3, r2
 80082be:	d80c      	bhi.n	80082da <__multiply+0x7a>
 80082c0:	2e00      	cmp	r6, #0
 80082c2:	dd03      	ble.n	80082cc <__multiply+0x6c>
 80082c4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d05d      	beq.n	8008388 <__multiply+0x128>
 80082cc:	6106      	str	r6, [r0, #16]
 80082ce:	b003      	add	sp, #12
 80082d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082d4:	f843 2b04 	str.w	r2, [r3], #4
 80082d8:	e7e3      	b.n	80082a2 <__multiply+0x42>
 80082da:	f8b2 b000 	ldrh.w	fp, [r2]
 80082de:	f1bb 0f00 	cmp.w	fp, #0
 80082e2:	d023      	beq.n	800832c <__multiply+0xcc>
 80082e4:	4689      	mov	r9, r1
 80082e6:	46ac      	mov	ip, r5
 80082e8:	f04f 0800 	mov.w	r8, #0
 80082ec:	f859 4b04 	ldr.w	r4, [r9], #4
 80082f0:	f8dc a000 	ldr.w	sl, [ip]
 80082f4:	b2a3      	uxth	r3, r4
 80082f6:	fa1f fa8a 	uxth.w	sl, sl
 80082fa:	fb0b a303 	mla	r3, fp, r3, sl
 80082fe:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008302:	f8dc 4000 	ldr.w	r4, [ip]
 8008306:	4443      	add	r3, r8
 8008308:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800830c:	fb0b 840a 	mla	r4, fp, sl, r8
 8008310:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008314:	46e2      	mov	sl, ip
 8008316:	b29b      	uxth	r3, r3
 8008318:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800831c:	454f      	cmp	r7, r9
 800831e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008322:	f84a 3b04 	str.w	r3, [sl], #4
 8008326:	d82b      	bhi.n	8008380 <__multiply+0x120>
 8008328:	f8cc 8004 	str.w	r8, [ip, #4]
 800832c:	9b01      	ldr	r3, [sp, #4]
 800832e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008332:	3204      	adds	r2, #4
 8008334:	f1ba 0f00 	cmp.w	sl, #0
 8008338:	d020      	beq.n	800837c <__multiply+0x11c>
 800833a:	682b      	ldr	r3, [r5, #0]
 800833c:	4689      	mov	r9, r1
 800833e:	46a8      	mov	r8, r5
 8008340:	f04f 0b00 	mov.w	fp, #0
 8008344:	f8b9 c000 	ldrh.w	ip, [r9]
 8008348:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800834c:	fb0a 440c 	mla	r4, sl, ip, r4
 8008350:	445c      	add	r4, fp
 8008352:	46c4      	mov	ip, r8
 8008354:	b29b      	uxth	r3, r3
 8008356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800835a:	f84c 3b04 	str.w	r3, [ip], #4
 800835e:	f859 3b04 	ldr.w	r3, [r9], #4
 8008362:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008366:	0c1b      	lsrs	r3, r3, #16
 8008368:	fb0a b303 	mla	r3, sl, r3, fp
 800836c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008370:	454f      	cmp	r7, r9
 8008372:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008376:	d805      	bhi.n	8008384 <__multiply+0x124>
 8008378:	f8c8 3004 	str.w	r3, [r8, #4]
 800837c:	3504      	adds	r5, #4
 800837e:	e79b      	b.n	80082b8 <__multiply+0x58>
 8008380:	46d4      	mov	ip, sl
 8008382:	e7b3      	b.n	80082ec <__multiply+0x8c>
 8008384:	46e0      	mov	r8, ip
 8008386:	e7dd      	b.n	8008344 <__multiply+0xe4>
 8008388:	3e01      	subs	r6, #1
 800838a:	e799      	b.n	80082c0 <__multiply+0x60>

0800838c <__pow5mult>:
 800838c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008390:	4615      	mov	r5, r2
 8008392:	f012 0203 	ands.w	r2, r2, #3
 8008396:	4606      	mov	r6, r0
 8008398:	460f      	mov	r7, r1
 800839a:	d007      	beq.n	80083ac <__pow5mult+0x20>
 800839c:	3a01      	subs	r2, #1
 800839e:	4c21      	ldr	r4, [pc, #132]	; (8008424 <__pow5mult+0x98>)
 80083a0:	2300      	movs	r3, #0
 80083a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083a6:	f7ff fe8b 	bl	80080c0 <__multadd>
 80083aa:	4607      	mov	r7, r0
 80083ac:	10ad      	asrs	r5, r5, #2
 80083ae:	d035      	beq.n	800841c <__pow5mult+0x90>
 80083b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80083b2:	b93c      	cbnz	r4, 80083c4 <__pow5mult+0x38>
 80083b4:	2010      	movs	r0, #16
 80083b6:	f7ff fe13 	bl	8007fe0 <malloc>
 80083ba:	6270      	str	r0, [r6, #36]	; 0x24
 80083bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083c0:	6004      	str	r4, [r0, #0]
 80083c2:	60c4      	str	r4, [r0, #12]
 80083c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80083c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80083cc:	b94c      	cbnz	r4, 80083e2 <__pow5mult+0x56>
 80083ce:	f240 2171 	movw	r1, #625	; 0x271
 80083d2:	4630      	mov	r0, r6
 80083d4:	f7ff ff3b 	bl	800824e <__i2b>
 80083d8:	2300      	movs	r3, #0
 80083da:	f8c8 0008 	str.w	r0, [r8, #8]
 80083de:	4604      	mov	r4, r0
 80083e0:	6003      	str	r3, [r0, #0]
 80083e2:	f04f 0800 	mov.w	r8, #0
 80083e6:	07eb      	lsls	r3, r5, #31
 80083e8:	d50a      	bpl.n	8008400 <__pow5mult+0x74>
 80083ea:	4639      	mov	r1, r7
 80083ec:	4622      	mov	r2, r4
 80083ee:	4630      	mov	r0, r6
 80083f0:	f7ff ff36 	bl	8008260 <__multiply>
 80083f4:	4639      	mov	r1, r7
 80083f6:	4681      	mov	r9, r0
 80083f8:	4630      	mov	r0, r6
 80083fa:	f7ff fe4a 	bl	8008092 <_Bfree>
 80083fe:	464f      	mov	r7, r9
 8008400:	106d      	asrs	r5, r5, #1
 8008402:	d00b      	beq.n	800841c <__pow5mult+0x90>
 8008404:	6820      	ldr	r0, [r4, #0]
 8008406:	b938      	cbnz	r0, 8008418 <__pow5mult+0x8c>
 8008408:	4622      	mov	r2, r4
 800840a:	4621      	mov	r1, r4
 800840c:	4630      	mov	r0, r6
 800840e:	f7ff ff27 	bl	8008260 <__multiply>
 8008412:	6020      	str	r0, [r4, #0]
 8008414:	f8c0 8000 	str.w	r8, [r0]
 8008418:	4604      	mov	r4, r0
 800841a:	e7e4      	b.n	80083e6 <__pow5mult+0x5a>
 800841c:	4638      	mov	r0, r7
 800841e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008422:	bf00      	nop
 8008424:	08009720 	.word	0x08009720

08008428 <__lshift>:
 8008428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800842c:	460c      	mov	r4, r1
 800842e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008432:	6923      	ldr	r3, [r4, #16]
 8008434:	6849      	ldr	r1, [r1, #4]
 8008436:	eb0a 0903 	add.w	r9, sl, r3
 800843a:	68a3      	ldr	r3, [r4, #8]
 800843c:	4607      	mov	r7, r0
 800843e:	4616      	mov	r6, r2
 8008440:	f109 0501 	add.w	r5, r9, #1
 8008444:	42ab      	cmp	r3, r5
 8008446:	db32      	blt.n	80084ae <__lshift+0x86>
 8008448:	4638      	mov	r0, r7
 800844a:	f7ff fdee 	bl	800802a <_Balloc>
 800844e:	2300      	movs	r3, #0
 8008450:	4680      	mov	r8, r0
 8008452:	f100 0114 	add.w	r1, r0, #20
 8008456:	461a      	mov	r2, r3
 8008458:	4553      	cmp	r3, sl
 800845a:	db2b      	blt.n	80084b4 <__lshift+0x8c>
 800845c:	6920      	ldr	r0, [r4, #16]
 800845e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008462:	f104 0314 	add.w	r3, r4, #20
 8008466:	f016 021f 	ands.w	r2, r6, #31
 800846a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800846e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008472:	d025      	beq.n	80084c0 <__lshift+0x98>
 8008474:	f1c2 0e20 	rsb	lr, r2, #32
 8008478:	2000      	movs	r0, #0
 800847a:	681e      	ldr	r6, [r3, #0]
 800847c:	468a      	mov	sl, r1
 800847e:	4096      	lsls	r6, r2
 8008480:	4330      	orrs	r0, r6
 8008482:	f84a 0b04 	str.w	r0, [sl], #4
 8008486:	f853 0b04 	ldr.w	r0, [r3], #4
 800848a:	459c      	cmp	ip, r3
 800848c:	fa20 f00e 	lsr.w	r0, r0, lr
 8008490:	d814      	bhi.n	80084bc <__lshift+0x94>
 8008492:	6048      	str	r0, [r1, #4]
 8008494:	b108      	cbz	r0, 800849a <__lshift+0x72>
 8008496:	f109 0502 	add.w	r5, r9, #2
 800849a:	3d01      	subs	r5, #1
 800849c:	4638      	mov	r0, r7
 800849e:	f8c8 5010 	str.w	r5, [r8, #16]
 80084a2:	4621      	mov	r1, r4
 80084a4:	f7ff fdf5 	bl	8008092 <_Bfree>
 80084a8:	4640      	mov	r0, r8
 80084aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ae:	3101      	adds	r1, #1
 80084b0:	005b      	lsls	r3, r3, #1
 80084b2:	e7c7      	b.n	8008444 <__lshift+0x1c>
 80084b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80084b8:	3301      	adds	r3, #1
 80084ba:	e7cd      	b.n	8008458 <__lshift+0x30>
 80084bc:	4651      	mov	r1, sl
 80084be:	e7dc      	b.n	800847a <__lshift+0x52>
 80084c0:	3904      	subs	r1, #4
 80084c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80084c6:	f841 2f04 	str.w	r2, [r1, #4]!
 80084ca:	459c      	cmp	ip, r3
 80084cc:	d8f9      	bhi.n	80084c2 <__lshift+0x9a>
 80084ce:	e7e4      	b.n	800849a <__lshift+0x72>

080084d0 <__mcmp>:
 80084d0:	6903      	ldr	r3, [r0, #16]
 80084d2:	690a      	ldr	r2, [r1, #16]
 80084d4:	1a9b      	subs	r3, r3, r2
 80084d6:	b530      	push	{r4, r5, lr}
 80084d8:	d10c      	bne.n	80084f4 <__mcmp+0x24>
 80084da:	0092      	lsls	r2, r2, #2
 80084dc:	3014      	adds	r0, #20
 80084de:	3114      	adds	r1, #20
 80084e0:	1884      	adds	r4, r0, r2
 80084e2:	4411      	add	r1, r2
 80084e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80084e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80084ec:	4295      	cmp	r5, r2
 80084ee:	d003      	beq.n	80084f8 <__mcmp+0x28>
 80084f0:	d305      	bcc.n	80084fe <__mcmp+0x2e>
 80084f2:	2301      	movs	r3, #1
 80084f4:	4618      	mov	r0, r3
 80084f6:	bd30      	pop	{r4, r5, pc}
 80084f8:	42a0      	cmp	r0, r4
 80084fa:	d3f3      	bcc.n	80084e4 <__mcmp+0x14>
 80084fc:	e7fa      	b.n	80084f4 <__mcmp+0x24>
 80084fe:	f04f 33ff 	mov.w	r3, #4294967295
 8008502:	e7f7      	b.n	80084f4 <__mcmp+0x24>

08008504 <__mdiff>:
 8008504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008508:	460d      	mov	r5, r1
 800850a:	4607      	mov	r7, r0
 800850c:	4611      	mov	r1, r2
 800850e:	4628      	mov	r0, r5
 8008510:	4614      	mov	r4, r2
 8008512:	f7ff ffdd 	bl	80084d0 <__mcmp>
 8008516:	1e06      	subs	r6, r0, #0
 8008518:	d108      	bne.n	800852c <__mdiff+0x28>
 800851a:	4631      	mov	r1, r6
 800851c:	4638      	mov	r0, r7
 800851e:	f7ff fd84 	bl	800802a <_Balloc>
 8008522:	2301      	movs	r3, #1
 8008524:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800852c:	bfa4      	itt	ge
 800852e:	4623      	movge	r3, r4
 8008530:	462c      	movge	r4, r5
 8008532:	4638      	mov	r0, r7
 8008534:	6861      	ldr	r1, [r4, #4]
 8008536:	bfa6      	itte	ge
 8008538:	461d      	movge	r5, r3
 800853a:	2600      	movge	r6, #0
 800853c:	2601      	movlt	r6, #1
 800853e:	f7ff fd74 	bl	800802a <_Balloc>
 8008542:	692b      	ldr	r3, [r5, #16]
 8008544:	60c6      	str	r6, [r0, #12]
 8008546:	6926      	ldr	r6, [r4, #16]
 8008548:	f105 0914 	add.w	r9, r5, #20
 800854c:	f104 0214 	add.w	r2, r4, #20
 8008550:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008554:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008558:	f100 0514 	add.w	r5, r0, #20
 800855c:	f04f 0e00 	mov.w	lr, #0
 8008560:	f852 ab04 	ldr.w	sl, [r2], #4
 8008564:	f859 4b04 	ldr.w	r4, [r9], #4
 8008568:	fa1e f18a 	uxtah	r1, lr, sl
 800856c:	b2a3      	uxth	r3, r4
 800856e:	1ac9      	subs	r1, r1, r3
 8008570:	0c23      	lsrs	r3, r4, #16
 8008572:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008576:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800857a:	b289      	uxth	r1, r1
 800857c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008580:	45c8      	cmp	r8, r9
 8008582:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008586:	4694      	mov	ip, r2
 8008588:	f845 3b04 	str.w	r3, [r5], #4
 800858c:	d8e8      	bhi.n	8008560 <__mdiff+0x5c>
 800858e:	45bc      	cmp	ip, r7
 8008590:	d304      	bcc.n	800859c <__mdiff+0x98>
 8008592:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008596:	b183      	cbz	r3, 80085ba <__mdiff+0xb6>
 8008598:	6106      	str	r6, [r0, #16]
 800859a:	e7c5      	b.n	8008528 <__mdiff+0x24>
 800859c:	f85c 1b04 	ldr.w	r1, [ip], #4
 80085a0:	fa1e f381 	uxtah	r3, lr, r1
 80085a4:	141a      	asrs	r2, r3, #16
 80085a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085b0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80085b4:	f845 3b04 	str.w	r3, [r5], #4
 80085b8:	e7e9      	b.n	800858e <__mdiff+0x8a>
 80085ba:	3e01      	subs	r6, #1
 80085bc:	e7e9      	b.n	8008592 <__mdiff+0x8e>
	...

080085c0 <__ulp>:
 80085c0:	4b12      	ldr	r3, [pc, #72]	; (800860c <__ulp+0x4c>)
 80085c2:	ee10 2a90 	vmov	r2, s1
 80085c6:	401a      	ands	r2, r3
 80085c8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	dd04      	ble.n	80085da <__ulp+0x1a>
 80085d0:	2000      	movs	r0, #0
 80085d2:	4619      	mov	r1, r3
 80085d4:	ec41 0b10 	vmov	d0, r0, r1
 80085d8:	4770      	bx	lr
 80085da:	425b      	negs	r3, r3
 80085dc:	151b      	asrs	r3, r3, #20
 80085de:	2b13      	cmp	r3, #19
 80085e0:	f04f 0000 	mov.w	r0, #0
 80085e4:	f04f 0100 	mov.w	r1, #0
 80085e8:	dc04      	bgt.n	80085f4 <__ulp+0x34>
 80085ea:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80085ee:	fa42 f103 	asr.w	r1, r2, r3
 80085f2:	e7ef      	b.n	80085d4 <__ulp+0x14>
 80085f4:	3b14      	subs	r3, #20
 80085f6:	2b1e      	cmp	r3, #30
 80085f8:	f04f 0201 	mov.w	r2, #1
 80085fc:	bfda      	itte	le
 80085fe:	f1c3 031f 	rsble	r3, r3, #31
 8008602:	fa02 f303 	lslle.w	r3, r2, r3
 8008606:	4613      	movgt	r3, r2
 8008608:	4618      	mov	r0, r3
 800860a:	e7e3      	b.n	80085d4 <__ulp+0x14>
 800860c:	7ff00000 	.word	0x7ff00000

08008610 <__b2d>:
 8008610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008612:	6905      	ldr	r5, [r0, #16]
 8008614:	f100 0714 	add.w	r7, r0, #20
 8008618:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800861c:	1f2e      	subs	r6, r5, #4
 800861e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008622:	4620      	mov	r0, r4
 8008624:	f7ff fdc5 	bl	80081b2 <__hi0bits>
 8008628:	f1c0 0320 	rsb	r3, r0, #32
 800862c:	280a      	cmp	r0, #10
 800862e:	600b      	str	r3, [r1, #0]
 8008630:	f8df c074 	ldr.w	ip, [pc, #116]	; 80086a8 <__b2d+0x98>
 8008634:	dc14      	bgt.n	8008660 <__b2d+0x50>
 8008636:	f1c0 0e0b 	rsb	lr, r0, #11
 800863a:	fa24 f10e 	lsr.w	r1, r4, lr
 800863e:	42b7      	cmp	r7, r6
 8008640:	ea41 030c 	orr.w	r3, r1, ip
 8008644:	bf34      	ite	cc
 8008646:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800864a:	2100      	movcs	r1, #0
 800864c:	3015      	adds	r0, #21
 800864e:	fa04 f000 	lsl.w	r0, r4, r0
 8008652:	fa21 f10e 	lsr.w	r1, r1, lr
 8008656:	ea40 0201 	orr.w	r2, r0, r1
 800865a:	ec43 2b10 	vmov	d0, r2, r3
 800865e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008660:	42b7      	cmp	r7, r6
 8008662:	bf3a      	itte	cc
 8008664:	f1a5 0608 	subcc.w	r6, r5, #8
 8008668:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800866c:	2100      	movcs	r1, #0
 800866e:	380b      	subs	r0, #11
 8008670:	d015      	beq.n	800869e <__b2d+0x8e>
 8008672:	4084      	lsls	r4, r0
 8008674:	f1c0 0520 	rsb	r5, r0, #32
 8008678:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800867c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8008680:	42be      	cmp	r6, r7
 8008682:	fa21 fc05 	lsr.w	ip, r1, r5
 8008686:	ea44 030c 	orr.w	r3, r4, ip
 800868a:	bf8c      	ite	hi
 800868c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008690:	2400      	movls	r4, #0
 8008692:	fa01 f000 	lsl.w	r0, r1, r0
 8008696:	40ec      	lsrs	r4, r5
 8008698:	ea40 0204 	orr.w	r2, r0, r4
 800869c:	e7dd      	b.n	800865a <__b2d+0x4a>
 800869e:	ea44 030c 	orr.w	r3, r4, ip
 80086a2:	460a      	mov	r2, r1
 80086a4:	e7d9      	b.n	800865a <__b2d+0x4a>
 80086a6:	bf00      	nop
 80086a8:	3ff00000 	.word	0x3ff00000

080086ac <__d2b>:
 80086ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80086b0:	460e      	mov	r6, r1
 80086b2:	2101      	movs	r1, #1
 80086b4:	ec59 8b10 	vmov	r8, r9, d0
 80086b8:	4615      	mov	r5, r2
 80086ba:	f7ff fcb6 	bl	800802a <_Balloc>
 80086be:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80086c2:	4607      	mov	r7, r0
 80086c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80086c8:	bb34      	cbnz	r4, 8008718 <__d2b+0x6c>
 80086ca:	9301      	str	r3, [sp, #4]
 80086cc:	f1b8 0300 	subs.w	r3, r8, #0
 80086d0:	d027      	beq.n	8008722 <__d2b+0x76>
 80086d2:	a802      	add	r0, sp, #8
 80086d4:	f840 3d08 	str.w	r3, [r0, #-8]!
 80086d8:	f7ff fd8a 	bl	80081f0 <__lo0bits>
 80086dc:	9900      	ldr	r1, [sp, #0]
 80086de:	b1f0      	cbz	r0, 800871e <__d2b+0x72>
 80086e0:	9a01      	ldr	r2, [sp, #4]
 80086e2:	f1c0 0320 	rsb	r3, r0, #32
 80086e6:	fa02 f303 	lsl.w	r3, r2, r3
 80086ea:	430b      	orrs	r3, r1
 80086ec:	40c2      	lsrs	r2, r0
 80086ee:	617b      	str	r3, [r7, #20]
 80086f0:	9201      	str	r2, [sp, #4]
 80086f2:	9b01      	ldr	r3, [sp, #4]
 80086f4:	61bb      	str	r3, [r7, #24]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	bf14      	ite	ne
 80086fa:	2102      	movne	r1, #2
 80086fc:	2101      	moveq	r1, #1
 80086fe:	6139      	str	r1, [r7, #16]
 8008700:	b1c4      	cbz	r4, 8008734 <__d2b+0x88>
 8008702:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008706:	4404      	add	r4, r0
 8008708:	6034      	str	r4, [r6, #0]
 800870a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800870e:	6028      	str	r0, [r5, #0]
 8008710:	4638      	mov	r0, r7
 8008712:	b003      	add	sp, #12
 8008714:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008718:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800871c:	e7d5      	b.n	80086ca <__d2b+0x1e>
 800871e:	6179      	str	r1, [r7, #20]
 8008720:	e7e7      	b.n	80086f2 <__d2b+0x46>
 8008722:	a801      	add	r0, sp, #4
 8008724:	f7ff fd64 	bl	80081f0 <__lo0bits>
 8008728:	9b01      	ldr	r3, [sp, #4]
 800872a:	617b      	str	r3, [r7, #20]
 800872c:	2101      	movs	r1, #1
 800872e:	6139      	str	r1, [r7, #16]
 8008730:	3020      	adds	r0, #32
 8008732:	e7e5      	b.n	8008700 <__d2b+0x54>
 8008734:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008738:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800873c:	6030      	str	r0, [r6, #0]
 800873e:	6918      	ldr	r0, [r3, #16]
 8008740:	f7ff fd37 	bl	80081b2 <__hi0bits>
 8008744:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008748:	e7e1      	b.n	800870e <__d2b+0x62>

0800874a <__ratio>:
 800874a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800874e:	4688      	mov	r8, r1
 8008750:	4669      	mov	r1, sp
 8008752:	4681      	mov	r9, r0
 8008754:	f7ff ff5c 	bl	8008610 <__b2d>
 8008758:	a901      	add	r1, sp, #4
 800875a:	4640      	mov	r0, r8
 800875c:	ec57 6b10 	vmov	r6, r7, d0
 8008760:	f7ff ff56 	bl	8008610 <__b2d>
 8008764:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008768:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800876c:	eba3 0c02 	sub.w	ip, r3, r2
 8008770:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008774:	1a9b      	subs	r3, r3, r2
 8008776:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800877a:	ec5b ab10 	vmov	sl, fp, d0
 800877e:	2b00      	cmp	r3, #0
 8008780:	bfce      	itee	gt
 8008782:	463a      	movgt	r2, r7
 8008784:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008788:	465a      	movle	r2, fp
 800878a:	4659      	mov	r1, fp
 800878c:	463d      	mov	r5, r7
 800878e:	bfd4      	ite	le
 8008790:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8008794:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8008798:	4630      	mov	r0, r6
 800879a:	ee10 2a10 	vmov	r2, s0
 800879e:	460b      	mov	r3, r1
 80087a0:	4629      	mov	r1, r5
 80087a2:	f7f8 f853 	bl	800084c <__aeabi_ddiv>
 80087a6:	ec41 0b10 	vmov	d0, r0, r1
 80087aa:	b003      	add	sp, #12
 80087ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080087b0 <__copybits>:
 80087b0:	3901      	subs	r1, #1
 80087b2:	b510      	push	{r4, lr}
 80087b4:	1149      	asrs	r1, r1, #5
 80087b6:	6914      	ldr	r4, [r2, #16]
 80087b8:	3101      	adds	r1, #1
 80087ba:	f102 0314 	add.w	r3, r2, #20
 80087be:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80087c2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80087c6:	42a3      	cmp	r3, r4
 80087c8:	4602      	mov	r2, r0
 80087ca:	d303      	bcc.n	80087d4 <__copybits+0x24>
 80087cc:	2300      	movs	r3, #0
 80087ce:	428a      	cmp	r2, r1
 80087d0:	d305      	bcc.n	80087de <__copybits+0x2e>
 80087d2:	bd10      	pop	{r4, pc}
 80087d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80087d8:	f840 2b04 	str.w	r2, [r0], #4
 80087dc:	e7f3      	b.n	80087c6 <__copybits+0x16>
 80087de:	f842 3b04 	str.w	r3, [r2], #4
 80087e2:	e7f4      	b.n	80087ce <__copybits+0x1e>

080087e4 <__any_on>:
 80087e4:	f100 0214 	add.w	r2, r0, #20
 80087e8:	6900      	ldr	r0, [r0, #16]
 80087ea:	114b      	asrs	r3, r1, #5
 80087ec:	4298      	cmp	r0, r3
 80087ee:	b510      	push	{r4, lr}
 80087f0:	db11      	blt.n	8008816 <__any_on+0x32>
 80087f2:	dd0a      	ble.n	800880a <__any_on+0x26>
 80087f4:	f011 011f 	ands.w	r1, r1, #31
 80087f8:	d007      	beq.n	800880a <__any_on+0x26>
 80087fa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80087fe:	fa24 f001 	lsr.w	r0, r4, r1
 8008802:	fa00 f101 	lsl.w	r1, r0, r1
 8008806:	428c      	cmp	r4, r1
 8008808:	d10b      	bne.n	8008822 <__any_on+0x3e>
 800880a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800880e:	4293      	cmp	r3, r2
 8008810:	d803      	bhi.n	800881a <__any_on+0x36>
 8008812:	2000      	movs	r0, #0
 8008814:	bd10      	pop	{r4, pc}
 8008816:	4603      	mov	r3, r0
 8008818:	e7f7      	b.n	800880a <__any_on+0x26>
 800881a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800881e:	2900      	cmp	r1, #0
 8008820:	d0f5      	beq.n	800880e <__any_on+0x2a>
 8008822:	2001      	movs	r0, #1
 8008824:	e7f6      	b.n	8008814 <__any_on+0x30>

08008826 <_calloc_r>:
 8008826:	b538      	push	{r3, r4, r5, lr}
 8008828:	fb02 f401 	mul.w	r4, r2, r1
 800882c:	4621      	mov	r1, r4
 800882e:	f000 f857 	bl	80088e0 <_malloc_r>
 8008832:	4605      	mov	r5, r0
 8008834:	b118      	cbz	r0, 800883e <_calloc_r+0x18>
 8008836:	4622      	mov	r2, r4
 8008838:	2100      	movs	r1, #0
 800883a:	f7fc fc53 	bl	80050e4 <memset>
 800883e:	4628      	mov	r0, r5
 8008840:	bd38      	pop	{r3, r4, r5, pc}
	...

08008844 <_free_r>:
 8008844:	b538      	push	{r3, r4, r5, lr}
 8008846:	4605      	mov	r5, r0
 8008848:	2900      	cmp	r1, #0
 800884a:	d045      	beq.n	80088d8 <_free_r+0x94>
 800884c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008850:	1f0c      	subs	r4, r1, #4
 8008852:	2b00      	cmp	r3, #0
 8008854:	bfb8      	it	lt
 8008856:	18e4      	addlt	r4, r4, r3
 8008858:	f000 fdc3 	bl	80093e2 <__malloc_lock>
 800885c:	4a1f      	ldr	r2, [pc, #124]	; (80088dc <_free_r+0x98>)
 800885e:	6813      	ldr	r3, [r2, #0]
 8008860:	4610      	mov	r0, r2
 8008862:	b933      	cbnz	r3, 8008872 <_free_r+0x2e>
 8008864:	6063      	str	r3, [r4, #4]
 8008866:	6014      	str	r4, [r2, #0]
 8008868:	4628      	mov	r0, r5
 800886a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800886e:	f000 bdb9 	b.w	80093e4 <__malloc_unlock>
 8008872:	42a3      	cmp	r3, r4
 8008874:	d90c      	bls.n	8008890 <_free_r+0x4c>
 8008876:	6821      	ldr	r1, [r4, #0]
 8008878:	1862      	adds	r2, r4, r1
 800887a:	4293      	cmp	r3, r2
 800887c:	bf04      	itt	eq
 800887e:	681a      	ldreq	r2, [r3, #0]
 8008880:	685b      	ldreq	r3, [r3, #4]
 8008882:	6063      	str	r3, [r4, #4]
 8008884:	bf04      	itt	eq
 8008886:	1852      	addeq	r2, r2, r1
 8008888:	6022      	streq	r2, [r4, #0]
 800888a:	6004      	str	r4, [r0, #0]
 800888c:	e7ec      	b.n	8008868 <_free_r+0x24>
 800888e:	4613      	mov	r3, r2
 8008890:	685a      	ldr	r2, [r3, #4]
 8008892:	b10a      	cbz	r2, 8008898 <_free_r+0x54>
 8008894:	42a2      	cmp	r2, r4
 8008896:	d9fa      	bls.n	800888e <_free_r+0x4a>
 8008898:	6819      	ldr	r1, [r3, #0]
 800889a:	1858      	adds	r0, r3, r1
 800889c:	42a0      	cmp	r0, r4
 800889e:	d10b      	bne.n	80088b8 <_free_r+0x74>
 80088a0:	6820      	ldr	r0, [r4, #0]
 80088a2:	4401      	add	r1, r0
 80088a4:	1858      	adds	r0, r3, r1
 80088a6:	4282      	cmp	r2, r0
 80088a8:	6019      	str	r1, [r3, #0]
 80088aa:	d1dd      	bne.n	8008868 <_free_r+0x24>
 80088ac:	6810      	ldr	r0, [r2, #0]
 80088ae:	6852      	ldr	r2, [r2, #4]
 80088b0:	605a      	str	r2, [r3, #4]
 80088b2:	4401      	add	r1, r0
 80088b4:	6019      	str	r1, [r3, #0]
 80088b6:	e7d7      	b.n	8008868 <_free_r+0x24>
 80088b8:	d902      	bls.n	80088c0 <_free_r+0x7c>
 80088ba:	230c      	movs	r3, #12
 80088bc:	602b      	str	r3, [r5, #0]
 80088be:	e7d3      	b.n	8008868 <_free_r+0x24>
 80088c0:	6820      	ldr	r0, [r4, #0]
 80088c2:	1821      	adds	r1, r4, r0
 80088c4:	428a      	cmp	r2, r1
 80088c6:	bf04      	itt	eq
 80088c8:	6811      	ldreq	r1, [r2, #0]
 80088ca:	6852      	ldreq	r2, [r2, #4]
 80088cc:	6062      	str	r2, [r4, #4]
 80088ce:	bf04      	itt	eq
 80088d0:	1809      	addeq	r1, r1, r0
 80088d2:	6021      	streq	r1, [r4, #0]
 80088d4:	605c      	str	r4, [r3, #4]
 80088d6:	e7c7      	b.n	8008868 <_free_r+0x24>
 80088d8:	bd38      	pop	{r3, r4, r5, pc}
 80088da:	bf00      	nop
 80088dc:	20000200 	.word	0x20000200

080088e0 <_malloc_r>:
 80088e0:	b570      	push	{r4, r5, r6, lr}
 80088e2:	1ccd      	adds	r5, r1, #3
 80088e4:	f025 0503 	bic.w	r5, r5, #3
 80088e8:	3508      	adds	r5, #8
 80088ea:	2d0c      	cmp	r5, #12
 80088ec:	bf38      	it	cc
 80088ee:	250c      	movcc	r5, #12
 80088f0:	2d00      	cmp	r5, #0
 80088f2:	4606      	mov	r6, r0
 80088f4:	db01      	blt.n	80088fa <_malloc_r+0x1a>
 80088f6:	42a9      	cmp	r1, r5
 80088f8:	d903      	bls.n	8008902 <_malloc_r+0x22>
 80088fa:	230c      	movs	r3, #12
 80088fc:	6033      	str	r3, [r6, #0]
 80088fe:	2000      	movs	r0, #0
 8008900:	bd70      	pop	{r4, r5, r6, pc}
 8008902:	f000 fd6e 	bl	80093e2 <__malloc_lock>
 8008906:	4a21      	ldr	r2, [pc, #132]	; (800898c <_malloc_r+0xac>)
 8008908:	6814      	ldr	r4, [r2, #0]
 800890a:	4621      	mov	r1, r4
 800890c:	b991      	cbnz	r1, 8008934 <_malloc_r+0x54>
 800890e:	4c20      	ldr	r4, [pc, #128]	; (8008990 <_malloc_r+0xb0>)
 8008910:	6823      	ldr	r3, [r4, #0]
 8008912:	b91b      	cbnz	r3, 800891c <_malloc_r+0x3c>
 8008914:	4630      	mov	r0, r6
 8008916:	f000 facf 	bl	8008eb8 <_sbrk_r>
 800891a:	6020      	str	r0, [r4, #0]
 800891c:	4629      	mov	r1, r5
 800891e:	4630      	mov	r0, r6
 8008920:	f000 faca 	bl	8008eb8 <_sbrk_r>
 8008924:	1c43      	adds	r3, r0, #1
 8008926:	d124      	bne.n	8008972 <_malloc_r+0x92>
 8008928:	230c      	movs	r3, #12
 800892a:	6033      	str	r3, [r6, #0]
 800892c:	4630      	mov	r0, r6
 800892e:	f000 fd59 	bl	80093e4 <__malloc_unlock>
 8008932:	e7e4      	b.n	80088fe <_malloc_r+0x1e>
 8008934:	680b      	ldr	r3, [r1, #0]
 8008936:	1b5b      	subs	r3, r3, r5
 8008938:	d418      	bmi.n	800896c <_malloc_r+0x8c>
 800893a:	2b0b      	cmp	r3, #11
 800893c:	d90f      	bls.n	800895e <_malloc_r+0x7e>
 800893e:	600b      	str	r3, [r1, #0]
 8008940:	50cd      	str	r5, [r1, r3]
 8008942:	18cc      	adds	r4, r1, r3
 8008944:	4630      	mov	r0, r6
 8008946:	f000 fd4d 	bl	80093e4 <__malloc_unlock>
 800894a:	f104 000b 	add.w	r0, r4, #11
 800894e:	1d23      	adds	r3, r4, #4
 8008950:	f020 0007 	bic.w	r0, r0, #7
 8008954:	1ac3      	subs	r3, r0, r3
 8008956:	d0d3      	beq.n	8008900 <_malloc_r+0x20>
 8008958:	425a      	negs	r2, r3
 800895a:	50e2      	str	r2, [r4, r3]
 800895c:	e7d0      	b.n	8008900 <_malloc_r+0x20>
 800895e:	428c      	cmp	r4, r1
 8008960:	684b      	ldr	r3, [r1, #4]
 8008962:	bf16      	itet	ne
 8008964:	6063      	strne	r3, [r4, #4]
 8008966:	6013      	streq	r3, [r2, #0]
 8008968:	460c      	movne	r4, r1
 800896a:	e7eb      	b.n	8008944 <_malloc_r+0x64>
 800896c:	460c      	mov	r4, r1
 800896e:	6849      	ldr	r1, [r1, #4]
 8008970:	e7cc      	b.n	800890c <_malloc_r+0x2c>
 8008972:	1cc4      	adds	r4, r0, #3
 8008974:	f024 0403 	bic.w	r4, r4, #3
 8008978:	42a0      	cmp	r0, r4
 800897a:	d005      	beq.n	8008988 <_malloc_r+0xa8>
 800897c:	1a21      	subs	r1, r4, r0
 800897e:	4630      	mov	r0, r6
 8008980:	f000 fa9a 	bl	8008eb8 <_sbrk_r>
 8008984:	3001      	adds	r0, #1
 8008986:	d0cf      	beq.n	8008928 <_malloc_r+0x48>
 8008988:	6025      	str	r5, [r4, #0]
 800898a:	e7db      	b.n	8008944 <_malloc_r+0x64>
 800898c:	20000200 	.word	0x20000200
 8008990:	20000204 	.word	0x20000204

08008994 <__ssputs_r>:
 8008994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008998:	688e      	ldr	r6, [r1, #8]
 800899a:	429e      	cmp	r6, r3
 800899c:	4682      	mov	sl, r0
 800899e:	460c      	mov	r4, r1
 80089a0:	4690      	mov	r8, r2
 80089a2:	4699      	mov	r9, r3
 80089a4:	d837      	bhi.n	8008a16 <__ssputs_r+0x82>
 80089a6:	898a      	ldrh	r2, [r1, #12]
 80089a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80089ac:	d031      	beq.n	8008a12 <__ssputs_r+0x7e>
 80089ae:	6825      	ldr	r5, [r4, #0]
 80089b0:	6909      	ldr	r1, [r1, #16]
 80089b2:	1a6f      	subs	r7, r5, r1
 80089b4:	6965      	ldr	r5, [r4, #20]
 80089b6:	2302      	movs	r3, #2
 80089b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089bc:	fb95 f5f3 	sdiv	r5, r5, r3
 80089c0:	f109 0301 	add.w	r3, r9, #1
 80089c4:	443b      	add	r3, r7
 80089c6:	429d      	cmp	r5, r3
 80089c8:	bf38      	it	cc
 80089ca:	461d      	movcc	r5, r3
 80089cc:	0553      	lsls	r3, r2, #21
 80089ce:	d530      	bpl.n	8008a32 <__ssputs_r+0x9e>
 80089d0:	4629      	mov	r1, r5
 80089d2:	f7ff ff85 	bl	80088e0 <_malloc_r>
 80089d6:	4606      	mov	r6, r0
 80089d8:	b950      	cbnz	r0, 80089f0 <__ssputs_r+0x5c>
 80089da:	230c      	movs	r3, #12
 80089dc:	f8ca 3000 	str.w	r3, [sl]
 80089e0:	89a3      	ldrh	r3, [r4, #12]
 80089e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089e6:	81a3      	strh	r3, [r4, #12]
 80089e8:	f04f 30ff 	mov.w	r0, #4294967295
 80089ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089f0:	463a      	mov	r2, r7
 80089f2:	6921      	ldr	r1, [r4, #16]
 80089f4:	f7ff fb0e 	bl	8008014 <memcpy>
 80089f8:	89a3      	ldrh	r3, [r4, #12]
 80089fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80089fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a02:	81a3      	strh	r3, [r4, #12]
 8008a04:	6126      	str	r6, [r4, #16]
 8008a06:	6165      	str	r5, [r4, #20]
 8008a08:	443e      	add	r6, r7
 8008a0a:	1bed      	subs	r5, r5, r7
 8008a0c:	6026      	str	r6, [r4, #0]
 8008a0e:	60a5      	str	r5, [r4, #8]
 8008a10:	464e      	mov	r6, r9
 8008a12:	454e      	cmp	r6, r9
 8008a14:	d900      	bls.n	8008a18 <__ssputs_r+0x84>
 8008a16:	464e      	mov	r6, r9
 8008a18:	4632      	mov	r2, r6
 8008a1a:	4641      	mov	r1, r8
 8008a1c:	6820      	ldr	r0, [r4, #0]
 8008a1e:	f000 fcc7 	bl	80093b0 <memmove>
 8008a22:	68a3      	ldr	r3, [r4, #8]
 8008a24:	1b9b      	subs	r3, r3, r6
 8008a26:	60a3      	str	r3, [r4, #8]
 8008a28:	6823      	ldr	r3, [r4, #0]
 8008a2a:	441e      	add	r6, r3
 8008a2c:	6026      	str	r6, [r4, #0]
 8008a2e:	2000      	movs	r0, #0
 8008a30:	e7dc      	b.n	80089ec <__ssputs_r+0x58>
 8008a32:	462a      	mov	r2, r5
 8008a34:	f000 fcd7 	bl	80093e6 <_realloc_r>
 8008a38:	4606      	mov	r6, r0
 8008a3a:	2800      	cmp	r0, #0
 8008a3c:	d1e2      	bne.n	8008a04 <__ssputs_r+0x70>
 8008a3e:	6921      	ldr	r1, [r4, #16]
 8008a40:	4650      	mov	r0, sl
 8008a42:	f7ff feff 	bl	8008844 <_free_r>
 8008a46:	e7c8      	b.n	80089da <__ssputs_r+0x46>

08008a48 <_svfiprintf_r>:
 8008a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a4c:	461d      	mov	r5, r3
 8008a4e:	898b      	ldrh	r3, [r1, #12]
 8008a50:	061f      	lsls	r7, r3, #24
 8008a52:	b09d      	sub	sp, #116	; 0x74
 8008a54:	4680      	mov	r8, r0
 8008a56:	460c      	mov	r4, r1
 8008a58:	4616      	mov	r6, r2
 8008a5a:	d50f      	bpl.n	8008a7c <_svfiprintf_r+0x34>
 8008a5c:	690b      	ldr	r3, [r1, #16]
 8008a5e:	b96b      	cbnz	r3, 8008a7c <_svfiprintf_r+0x34>
 8008a60:	2140      	movs	r1, #64	; 0x40
 8008a62:	f7ff ff3d 	bl	80088e0 <_malloc_r>
 8008a66:	6020      	str	r0, [r4, #0]
 8008a68:	6120      	str	r0, [r4, #16]
 8008a6a:	b928      	cbnz	r0, 8008a78 <_svfiprintf_r+0x30>
 8008a6c:	230c      	movs	r3, #12
 8008a6e:	f8c8 3000 	str.w	r3, [r8]
 8008a72:	f04f 30ff 	mov.w	r0, #4294967295
 8008a76:	e0c8      	b.n	8008c0a <_svfiprintf_r+0x1c2>
 8008a78:	2340      	movs	r3, #64	; 0x40
 8008a7a:	6163      	str	r3, [r4, #20]
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	9309      	str	r3, [sp, #36]	; 0x24
 8008a80:	2320      	movs	r3, #32
 8008a82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a86:	2330      	movs	r3, #48	; 0x30
 8008a88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a8c:	9503      	str	r5, [sp, #12]
 8008a8e:	f04f 0b01 	mov.w	fp, #1
 8008a92:	4637      	mov	r7, r6
 8008a94:	463d      	mov	r5, r7
 8008a96:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008a9a:	b10b      	cbz	r3, 8008aa0 <_svfiprintf_r+0x58>
 8008a9c:	2b25      	cmp	r3, #37	; 0x25
 8008a9e:	d13e      	bne.n	8008b1e <_svfiprintf_r+0xd6>
 8008aa0:	ebb7 0a06 	subs.w	sl, r7, r6
 8008aa4:	d00b      	beq.n	8008abe <_svfiprintf_r+0x76>
 8008aa6:	4653      	mov	r3, sl
 8008aa8:	4632      	mov	r2, r6
 8008aaa:	4621      	mov	r1, r4
 8008aac:	4640      	mov	r0, r8
 8008aae:	f7ff ff71 	bl	8008994 <__ssputs_r>
 8008ab2:	3001      	adds	r0, #1
 8008ab4:	f000 80a4 	beq.w	8008c00 <_svfiprintf_r+0x1b8>
 8008ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aba:	4453      	add	r3, sl
 8008abc:	9309      	str	r3, [sp, #36]	; 0x24
 8008abe:	783b      	ldrb	r3, [r7, #0]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f000 809d 	beq.w	8008c00 <_svfiprintf_r+0x1b8>
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8008acc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ad0:	9304      	str	r3, [sp, #16]
 8008ad2:	9307      	str	r3, [sp, #28]
 8008ad4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ad8:	931a      	str	r3, [sp, #104]	; 0x68
 8008ada:	462f      	mov	r7, r5
 8008adc:	2205      	movs	r2, #5
 8008ade:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008ae2:	4850      	ldr	r0, [pc, #320]	; (8008c24 <_svfiprintf_r+0x1dc>)
 8008ae4:	f7f7 fb7c 	bl	80001e0 <memchr>
 8008ae8:	9b04      	ldr	r3, [sp, #16]
 8008aea:	b9d0      	cbnz	r0, 8008b22 <_svfiprintf_r+0xda>
 8008aec:	06d9      	lsls	r1, r3, #27
 8008aee:	bf44      	itt	mi
 8008af0:	2220      	movmi	r2, #32
 8008af2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008af6:	071a      	lsls	r2, r3, #28
 8008af8:	bf44      	itt	mi
 8008afa:	222b      	movmi	r2, #43	; 0x2b
 8008afc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008b00:	782a      	ldrb	r2, [r5, #0]
 8008b02:	2a2a      	cmp	r2, #42	; 0x2a
 8008b04:	d015      	beq.n	8008b32 <_svfiprintf_r+0xea>
 8008b06:	9a07      	ldr	r2, [sp, #28]
 8008b08:	462f      	mov	r7, r5
 8008b0a:	2000      	movs	r0, #0
 8008b0c:	250a      	movs	r5, #10
 8008b0e:	4639      	mov	r1, r7
 8008b10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b14:	3b30      	subs	r3, #48	; 0x30
 8008b16:	2b09      	cmp	r3, #9
 8008b18:	d94d      	bls.n	8008bb6 <_svfiprintf_r+0x16e>
 8008b1a:	b1b8      	cbz	r0, 8008b4c <_svfiprintf_r+0x104>
 8008b1c:	e00f      	b.n	8008b3e <_svfiprintf_r+0xf6>
 8008b1e:	462f      	mov	r7, r5
 8008b20:	e7b8      	b.n	8008a94 <_svfiprintf_r+0x4c>
 8008b22:	4a40      	ldr	r2, [pc, #256]	; (8008c24 <_svfiprintf_r+0x1dc>)
 8008b24:	1a80      	subs	r0, r0, r2
 8008b26:	fa0b f000 	lsl.w	r0, fp, r0
 8008b2a:	4318      	orrs	r0, r3
 8008b2c:	9004      	str	r0, [sp, #16]
 8008b2e:	463d      	mov	r5, r7
 8008b30:	e7d3      	b.n	8008ada <_svfiprintf_r+0x92>
 8008b32:	9a03      	ldr	r2, [sp, #12]
 8008b34:	1d11      	adds	r1, r2, #4
 8008b36:	6812      	ldr	r2, [r2, #0]
 8008b38:	9103      	str	r1, [sp, #12]
 8008b3a:	2a00      	cmp	r2, #0
 8008b3c:	db01      	blt.n	8008b42 <_svfiprintf_r+0xfa>
 8008b3e:	9207      	str	r2, [sp, #28]
 8008b40:	e004      	b.n	8008b4c <_svfiprintf_r+0x104>
 8008b42:	4252      	negs	r2, r2
 8008b44:	f043 0302 	orr.w	r3, r3, #2
 8008b48:	9207      	str	r2, [sp, #28]
 8008b4a:	9304      	str	r3, [sp, #16]
 8008b4c:	783b      	ldrb	r3, [r7, #0]
 8008b4e:	2b2e      	cmp	r3, #46	; 0x2e
 8008b50:	d10c      	bne.n	8008b6c <_svfiprintf_r+0x124>
 8008b52:	787b      	ldrb	r3, [r7, #1]
 8008b54:	2b2a      	cmp	r3, #42	; 0x2a
 8008b56:	d133      	bne.n	8008bc0 <_svfiprintf_r+0x178>
 8008b58:	9b03      	ldr	r3, [sp, #12]
 8008b5a:	1d1a      	adds	r2, r3, #4
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	9203      	str	r2, [sp, #12]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	bfb8      	it	lt
 8008b64:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b68:	3702      	adds	r7, #2
 8008b6a:	9305      	str	r3, [sp, #20]
 8008b6c:	4d2e      	ldr	r5, [pc, #184]	; (8008c28 <_svfiprintf_r+0x1e0>)
 8008b6e:	7839      	ldrb	r1, [r7, #0]
 8008b70:	2203      	movs	r2, #3
 8008b72:	4628      	mov	r0, r5
 8008b74:	f7f7 fb34 	bl	80001e0 <memchr>
 8008b78:	b138      	cbz	r0, 8008b8a <_svfiprintf_r+0x142>
 8008b7a:	2340      	movs	r3, #64	; 0x40
 8008b7c:	1b40      	subs	r0, r0, r5
 8008b7e:	fa03 f000 	lsl.w	r0, r3, r0
 8008b82:	9b04      	ldr	r3, [sp, #16]
 8008b84:	4303      	orrs	r3, r0
 8008b86:	3701      	adds	r7, #1
 8008b88:	9304      	str	r3, [sp, #16]
 8008b8a:	7839      	ldrb	r1, [r7, #0]
 8008b8c:	4827      	ldr	r0, [pc, #156]	; (8008c2c <_svfiprintf_r+0x1e4>)
 8008b8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b92:	2206      	movs	r2, #6
 8008b94:	1c7e      	adds	r6, r7, #1
 8008b96:	f7f7 fb23 	bl	80001e0 <memchr>
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	d038      	beq.n	8008c10 <_svfiprintf_r+0x1c8>
 8008b9e:	4b24      	ldr	r3, [pc, #144]	; (8008c30 <_svfiprintf_r+0x1e8>)
 8008ba0:	bb13      	cbnz	r3, 8008be8 <_svfiprintf_r+0x1a0>
 8008ba2:	9b03      	ldr	r3, [sp, #12]
 8008ba4:	3307      	adds	r3, #7
 8008ba6:	f023 0307 	bic.w	r3, r3, #7
 8008baa:	3308      	adds	r3, #8
 8008bac:	9303      	str	r3, [sp, #12]
 8008bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bb0:	444b      	add	r3, r9
 8008bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8008bb4:	e76d      	b.n	8008a92 <_svfiprintf_r+0x4a>
 8008bb6:	fb05 3202 	mla	r2, r5, r2, r3
 8008bba:	2001      	movs	r0, #1
 8008bbc:	460f      	mov	r7, r1
 8008bbe:	e7a6      	b.n	8008b0e <_svfiprintf_r+0xc6>
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	3701      	adds	r7, #1
 8008bc4:	9305      	str	r3, [sp, #20]
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	250a      	movs	r5, #10
 8008bca:	4638      	mov	r0, r7
 8008bcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bd0:	3a30      	subs	r2, #48	; 0x30
 8008bd2:	2a09      	cmp	r2, #9
 8008bd4:	d903      	bls.n	8008bde <_svfiprintf_r+0x196>
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d0c8      	beq.n	8008b6c <_svfiprintf_r+0x124>
 8008bda:	9105      	str	r1, [sp, #20]
 8008bdc:	e7c6      	b.n	8008b6c <_svfiprintf_r+0x124>
 8008bde:	fb05 2101 	mla	r1, r5, r1, r2
 8008be2:	2301      	movs	r3, #1
 8008be4:	4607      	mov	r7, r0
 8008be6:	e7f0      	b.n	8008bca <_svfiprintf_r+0x182>
 8008be8:	ab03      	add	r3, sp, #12
 8008bea:	9300      	str	r3, [sp, #0]
 8008bec:	4622      	mov	r2, r4
 8008bee:	4b11      	ldr	r3, [pc, #68]	; (8008c34 <_svfiprintf_r+0x1ec>)
 8008bf0:	a904      	add	r1, sp, #16
 8008bf2:	4640      	mov	r0, r8
 8008bf4:	f7fc fb12 	bl	800521c <_printf_float>
 8008bf8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008bfc:	4681      	mov	r9, r0
 8008bfe:	d1d6      	bne.n	8008bae <_svfiprintf_r+0x166>
 8008c00:	89a3      	ldrh	r3, [r4, #12]
 8008c02:	065b      	lsls	r3, r3, #25
 8008c04:	f53f af35 	bmi.w	8008a72 <_svfiprintf_r+0x2a>
 8008c08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c0a:	b01d      	add	sp, #116	; 0x74
 8008c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c10:	ab03      	add	r3, sp, #12
 8008c12:	9300      	str	r3, [sp, #0]
 8008c14:	4622      	mov	r2, r4
 8008c16:	4b07      	ldr	r3, [pc, #28]	; (8008c34 <_svfiprintf_r+0x1ec>)
 8008c18:	a904      	add	r1, sp, #16
 8008c1a:	4640      	mov	r0, r8
 8008c1c:	f7fc fdb4 	bl	8005788 <_printf_i>
 8008c20:	e7ea      	b.n	8008bf8 <_svfiprintf_r+0x1b0>
 8008c22:	bf00      	nop
 8008c24:	0800972c 	.word	0x0800972c
 8008c28:	08009732 	.word	0x08009732
 8008c2c:	08009736 	.word	0x08009736
 8008c30:	0800521d 	.word	0x0800521d
 8008c34:	08008995 	.word	0x08008995

08008c38 <__sfputc_r>:
 8008c38:	6893      	ldr	r3, [r2, #8]
 8008c3a:	3b01      	subs	r3, #1
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	b410      	push	{r4}
 8008c40:	6093      	str	r3, [r2, #8]
 8008c42:	da08      	bge.n	8008c56 <__sfputc_r+0x1e>
 8008c44:	6994      	ldr	r4, [r2, #24]
 8008c46:	42a3      	cmp	r3, r4
 8008c48:	db01      	blt.n	8008c4e <__sfputc_r+0x16>
 8008c4a:	290a      	cmp	r1, #10
 8008c4c:	d103      	bne.n	8008c56 <__sfputc_r+0x1e>
 8008c4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c52:	f000 b997 	b.w	8008f84 <__swbuf_r>
 8008c56:	6813      	ldr	r3, [r2, #0]
 8008c58:	1c58      	adds	r0, r3, #1
 8008c5a:	6010      	str	r0, [r2, #0]
 8008c5c:	7019      	strb	r1, [r3, #0]
 8008c5e:	4608      	mov	r0, r1
 8008c60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c64:	4770      	bx	lr

08008c66 <__sfputs_r>:
 8008c66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c68:	4606      	mov	r6, r0
 8008c6a:	460f      	mov	r7, r1
 8008c6c:	4614      	mov	r4, r2
 8008c6e:	18d5      	adds	r5, r2, r3
 8008c70:	42ac      	cmp	r4, r5
 8008c72:	d101      	bne.n	8008c78 <__sfputs_r+0x12>
 8008c74:	2000      	movs	r0, #0
 8008c76:	e007      	b.n	8008c88 <__sfputs_r+0x22>
 8008c78:	463a      	mov	r2, r7
 8008c7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c7e:	4630      	mov	r0, r6
 8008c80:	f7ff ffda 	bl	8008c38 <__sfputc_r>
 8008c84:	1c43      	adds	r3, r0, #1
 8008c86:	d1f3      	bne.n	8008c70 <__sfputs_r+0xa>
 8008c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008c8c <_vfiprintf_r>:
 8008c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c90:	460c      	mov	r4, r1
 8008c92:	b09d      	sub	sp, #116	; 0x74
 8008c94:	4617      	mov	r7, r2
 8008c96:	461d      	mov	r5, r3
 8008c98:	4606      	mov	r6, r0
 8008c9a:	b118      	cbz	r0, 8008ca4 <_vfiprintf_r+0x18>
 8008c9c:	6983      	ldr	r3, [r0, #24]
 8008c9e:	b90b      	cbnz	r3, 8008ca4 <_vfiprintf_r+0x18>
 8008ca0:	f7fe fdda 	bl	8007858 <__sinit>
 8008ca4:	4b7c      	ldr	r3, [pc, #496]	; (8008e98 <_vfiprintf_r+0x20c>)
 8008ca6:	429c      	cmp	r4, r3
 8008ca8:	d158      	bne.n	8008d5c <_vfiprintf_r+0xd0>
 8008caa:	6874      	ldr	r4, [r6, #4]
 8008cac:	89a3      	ldrh	r3, [r4, #12]
 8008cae:	0718      	lsls	r0, r3, #28
 8008cb0:	d55e      	bpl.n	8008d70 <_vfiprintf_r+0xe4>
 8008cb2:	6923      	ldr	r3, [r4, #16]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d05b      	beq.n	8008d70 <_vfiprintf_r+0xe4>
 8008cb8:	2300      	movs	r3, #0
 8008cba:	9309      	str	r3, [sp, #36]	; 0x24
 8008cbc:	2320      	movs	r3, #32
 8008cbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cc2:	2330      	movs	r3, #48	; 0x30
 8008cc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008cc8:	9503      	str	r5, [sp, #12]
 8008cca:	f04f 0b01 	mov.w	fp, #1
 8008cce:	46b8      	mov	r8, r7
 8008cd0:	4645      	mov	r5, r8
 8008cd2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008cd6:	b10b      	cbz	r3, 8008cdc <_vfiprintf_r+0x50>
 8008cd8:	2b25      	cmp	r3, #37	; 0x25
 8008cda:	d154      	bne.n	8008d86 <_vfiprintf_r+0xfa>
 8008cdc:	ebb8 0a07 	subs.w	sl, r8, r7
 8008ce0:	d00b      	beq.n	8008cfa <_vfiprintf_r+0x6e>
 8008ce2:	4653      	mov	r3, sl
 8008ce4:	463a      	mov	r2, r7
 8008ce6:	4621      	mov	r1, r4
 8008ce8:	4630      	mov	r0, r6
 8008cea:	f7ff ffbc 	bl	8008c66 <__sfputs_r>
 8008cee:	3001      	adds	r0, #1
 8008cf0:	f000 80c2 	beq.w	8008e78 <_vfiprintf_r+0x1ec>
 8008cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cf6:	4453      	add	r3, sl
 8008cf8:	9309      	str	r3, [sp, #36]	; 0x24
 8008cfa:	f898 3000 	ldrb.w	r3, [r8]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	f000 80ba 	beq.w	8008e78 <_vfiprintf_r+0x1ec>
 8008d04:	2300      	movs	r3, #0
 8008d06:	f04f 32ff 	mov.w	r2, #4294967295
 8008d0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d0e:	9304      	str	r3, [sp, #16]
 8008d10:	9307      	str	r3, [sp, #28]
 8008d12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d16:	931a      	str	r3, [sp, #104]	; 0x68
 8008d18:	46a8      	mov	r8, r5
 8008d1a:	2205      	movs	r2, #5
 8008d1c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008d20:	485e      	ldr	r0, [pc, #376]	; (8008e9c <_vfiprintf_r+0x210>)
 8008d22:	f7f7 fa5d 	bl	80001e0 <memchr>
 8008d26:	9b04      	ldr	r3, [sp, #16]
 8008d28:	bb78      	cbnz	r0, 8008d8a <_vfiprintf_r+0xfe>
 8008d2a:	06d9      	lsls	r1, r3, #27
 8008d2c:	bf44      	itt	mi
 8008d2e:	2220      	movmi	r2, #32
 8008d30:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008d34:	071a      	lsls	r2, r3, #28
 8008d36:	bf44      	itt	mi
 8008d38:	222b      	movmi	r2, #43	; 0x2b
 8008d3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008d3e:	782a      	ldrb	r2, [r5, #0]
 8008d40:	2a2a      	cmp	r2, #42	; 0x2a
 8008d42:	d02a      	beq.n	8008d9a <_vfiprintf_r+0x10e>
 8008d44:	9a07      	ldr	r2, [sp, #28]
 8008d46:	46a8      	mov	r8, r5
 8008d48:	2000      	movs	r0, #0
 8008d4a:	250a      	movs	r5, #10
 8008d4c:	4641      	mov	r1, r8
 8008d4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d52:	3b30      	subs	r3, #48	; 0x30
 8008d54:	2b09      	cmp	r3, #9
 8008d56:	d969      	bls.n	8008e2c <_vfiprintf_r+0x1a0>
 8008d58:	b360      	cbz	r0, 8008db4 <_vfiprintf_r+0x128>
 8008d5a:	e024      	b.n	8008da6 <_vfiprintf_r+0x11a>
 8008d5c:	4b50      	ldr	r3, [pc, #320]	; (8008ea0 <_vfiprintf_r+0x214>)
 8008d5e:	429c      	cmp	r4, r3
 8008d60:	d101      	bne.n	8008d66 <_vfiprintf_r+0xda>
 8008d62:	68b4      	ldr	r4, [r6, #8]
 8008d64:	e7a2      	b.n	8008cac <_vfiprintf_r+0x20>
 8008d66:	4b4f      	ldr	r3, [pc, #316]	; (8008ea4 <_vfiprintf_r+0x218>)
 8008d68:	429c      	cmp	r4, r3
 8008d6a:	bf08      	it	eq
 8008d6c:	68f4      	ldreq	r4, [r6, #12]
 8008d6e:	e79d      	b.n	8008cac <_vfiprintf_r+0x20>
 8008d70:	4621      	mov	r1, r4
 8008d72:	4630      	mov	r0, r6
 8008d74:	f000 f978 	bl	8009068 <__swsetup_r>
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	d09d      	beq.n	8008cb8 <_vfiprintf_r+0x2c>
 8008d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d80:	b01d      	add	sp, #116	; 0x74
 8008d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d86:	46a8      	mov	r8, r5
 8008d88:	e7a2      	b.n	8008cd0 <_vfiprintf_r+0x44>
 8008d8a:	4a44      	ldr	r2, [pc, #272]	; (8008e9c <_vfiprintf_r+0x210>)
 8008d8c:	1a80      	subs	r0, r0, r2
 8008d8e:	fa0b f000 	lsl.w	r0, fp, r0
 8008d92:	4318      	orrs	r0, r3
 8008d94:	9004      	str	r0, [sp, #16]
 8008d96:	4645      	mov	r5, r8
 8008d98:	e7be      	b.n	8008d18 <_vfiprintf_r+0x8c>
 8008d9a:	9a03      	ldr	r2, [sp, #12]
 8008d9c:	1d11      	adds	r1, r2, #4
 8008d9e:	6812      	ldr	r2, [r2, #0]
 8008da0:	9103      	str	r1, [sp, #12]
 8008da2:	2a00      	cmp	r2, #0
 8008da4:	db01      	blt.n	8008daa <_vfiprintf_r+0x11e>
 8008da6:	9207      	str	r2, [sp, #28]
 8008da8:	e004      	b.n	8008db4 <_vfiprintf_r+0x128>
 8008daa:	4252      	negs	r2, r2
 8008dac:	f043 0302 	orr.w	r3, r3, #2
 8008db0:	9207      	str	r2, [sp, #28]
 8008db2:	9304      	str	r3, [sp, #16]
 8008db4:	f898 3000 	ldrb.w	r3, [r8]
 8008db8:	2b2e      	cmp	r3, #46	; 0x2e
 8008dba:	d10e      	bne.n	8008dda <_vfiprintf_r+0x14e>
 8008dbc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008dc0:	2b2a      	cmp	r3, #42	; 0x2a
 8008dc2:	d138      	bne.n	8008e36 <_vfiprintf_r+0x1aa>
 8008dc4:	9b03      	ldr	r3, [sp, #12]
 8008dc6:	1d1a      	adds	r2, r3, #4
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	9203      	str	r2, [sp, #12]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	bfb8      	it	lt
 8008dd0:	f04f 33ff 	movlt.w	r3, #4294967295
 8008dd4:	f108 0802 	add.w	r8, r8, #2
 8008dd8:	9305      	str	r3, [sp, #20]
 8008dda:	4d33      	ldr	r5, [pc, #204]	; (8008ea8 <_vfiprintf_r+0x21c>)
 8008ddc:	f898 1000 	ldrb.w	r1, [r8]
 8008de0:	2203      	movs	r2, #3
 8008de2:	4628      	mov	r0, r5
 8008de4:	f7f7 f9fc 	bl	80001e0 <memchr>
 8008de8:	b140      	cbz	r0, 8008dfc <_vfiprintf_r+0x170>
 8008dea:	2340      	movs	r3, #64	; 0x40
 8008dec:	1b40      	subs	r0, r0, r5
 8008dee:	fa03 f000 	lsl.w	r0, r3, r0
 8008df2:	9b04      	ldr	r3, [sp, #16]
 8008df4:	4303      	orrs	r3, r0
 8008df6:	f108 0801 	add.w	r8, r8, #1
 8008dfa:	9304      	str	r3, [sp, #16]
 8008dfc:	f898 1000 	ldrb.w	r1, [r8]
 8008e00:	482a      	ldr	r0, [pc, #168]	; (8008eac <_vfiprintf_r+0x220>)
 8008e02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e06:	2206      	movs	r2, #6
 8008e08:	f108 0701 	add.w	r7, r8, #1
 8008e0c:	f7f7 f9e8 	bl	80001e0 <memchr>
 8008e10:	2800      	cmp	r0, #0
 8008e12:	d037      	beq.n	8008e84 <_vfiprintf_r+0x1f8>
 8008e14:	4b26      	ldr	r3, [pc, #152]	; (8008eb0 <_vfiprintf_r+0x224>)
 8008e16:	bb1b      	cbnz	r3, 8008e60 <_vfiprintf_r+0x1d4>
 8008e18:	9b03      	ldr	r3, [sp, #12]
 8008e1a:	3307      	adds	r3, #7
 8008e1c:	f023 0307 	bic.w	r3, r3, #7
 8008e20:	3308      	adds	r3, #8
 8008e22:	9303      	str	r3, [sp, #12]
 8008e24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e26:	444b      	add	r3, r9
 8008e28:	9309      	str	r3, [sp, #36]	; 0x24
 8008e2a:	e750      	b.n	8008cce <_vfiprintf_r+0x42>
 8008e2c:	fb05 3202 	mla	r2, r5, r2, r3
 8008e30:	2001      	movs	r0, #1
 8008e32:	4688      	mov	r8, r1
 8008e34:	e78a      	b.n	8008d4c <_vfiprintf_r+0xc0>
 8008e36:	2300      	movs	r3, #0
 8008e38:	f108 0801 	add.w	r8, r8, #1
 8008e3c:	9305      	str	r3, [sp, #20]
 8008e3e:	4619      	mov	r1, r3
 8008e40:	250a      	movs	r5, #10
 8008e42:	4640      	mov	r0, r8
 8008e44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e48:	3a30      	subs	r2, #48	; 0x30
 8008e4a:	2a09      	cmp	r2, #9
 8008e4c:	d903      	bls.n	8008e56 <_vfiprintf_r+0x1ca>
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d0c3      	beq.n	8008dda <_vfiprintf_r+0x14e>
 8008e52:	9105      	str	r1, [sp, #20]
 8008e54:	e7c1      	b.n	8008dda <_vfiprintf_r+0x14e>
 8008e56:	fb05 2101 	mla	r1, r5, r1, r2
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	4680      	mov	r8, r0
 8008e5e:	e7f0      	b.n	8008e42 <_vfiprintf_r+0x1b6>
 8008e60:	ab03      	add	r3, sp, #12
 8008e62:	9300      	str	r3, [sp, #0]
 8008e64:	4622      	mov	r2, r4
 8008e66:	4b13      	ldr	r3, [pc, #76]	; (8008eb4 <_vfiprintf_r+0x228>)
 8008e68:	a904      	add	r1, sp, #16
 8008e6a:	4630      	mov	r0, r6
 8008e6c:	f7fc f9d6 	bl	800521c <_printf_float>
 8008e70:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008e74:	4681      	mov	r9, r0
 8008e76:	d1d5      	bne.n	8008e24 <_vfiprintf_r+0x198>
 8008e78:	89a3      	ldrh	r3, [r4, #12]
 8008e7a:	065b      	lsls	r3, r3, #25
 8008e7c:	f53f af7e 	bmi.w	8008d7c <_vfiprintf_r+0xf0>
 8008e80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e82:	e77d      	b.n	8008d80 <_vfiprintf_r+0xf4>
 8008e84:	ab03      	add	r3, sp, #12
 8008e86:	9300      	str	r3, [sp, #0]
 8008e88:	4622      	mov	r2, r4
 8008e8a:	4b0a      	ldr	r3, [pc, #40]	; (8008eb4 <_vfiprintf_r+0x228>)
 8008e8c:	a904      	add	r1, sp, #16
 8008e8e:	4630      	mov	r0, r6
 8008e90:	f7fc fc7a 	bl	8005788 <_printf_i>
 8008e94:	e7ec      	b.n	8008e70 <_vfiprintf_r+0x1e4>
 8008e96:	bf00      	nop
 8008e98:	080095e0 	.word	0x080095e0
 8008e9c:	0800972c 	.word	0x0800972c
 8008ea0:	08009600 	.word	0x08009600
 8008ea4:	080095c0 	.word	0x080095c0
 8008ea8:	08009732 	.word	0x08009732
 8008eac:	08009736 	.word	0x08009736
 8008eb0:	0800521d 	.word	0x0800521d
 8008eb4:	08008c67 	.word	0x08008c67

08008eb8 <_sbrk_r>:
 8008eb8:	b538      	push	{r3, r4, r5, lr}
 8008eba:	4c06      	ldr	r4, [pc, #24]	; (8008ed4 <_sbrk_r+0x1c>)
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	4605      	mov	r5, r0
 8008ec0:	4608      	mov	r0, r1
 8008ec2:	6023      	str	r3, [r4, #0]
 8008ec4:	f7fc f858 	bl	8004f78 <_sbrk>
 8008ec8:	1c43      	adds	r3, r0, #1
 8008eca:	d102      	bne.n	8008ed2 <_sbrk_r+0x1a>
 8008ecc:	6823      	ldr	r3, [r4, #0]
 8008ece:	b103      	cbz	r3, 8008ed2 <_sbrk_r+0x1a>
 8008ed0:	602b      	str	r3, [r5, #0]
 8008ed2:	bd38      	pop	{r3, r4, r5, pc}
 8008ed4:	200002f0 	.word	0x200002f0

08008ed8 <__sread>:
 8008ed8:	b510      	push	{r4, lr}
 8008eda:	460c      	mov	r4, r1
 8008edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ee0:	f000 faa8 	bl	8009434 <_read_r>
 8008ee4:	2800      	cmp	r0, #0
 8008ee6:	bfab      	itete	ge
 8008ee8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008eea:	89a3      	ldrhlt	r3, [r4, #12]
 8008eec:	181b      	addge	r3, r3, r0
 8008eee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008ef2:	bfac      	ite	ge
 8008ef4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008ef6:	81a3      	strhlt	r3, [r4, #12]
 8008ef8:	bd10      	pop	{r4, pc}

08008efa <__swrite>:
 8008efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008efe:	461f      	mov	r7, r3
 8008f00:	898b      	ldrh	r3, [r1, #12]
 8008f02:	05db      	lsls	r3, r3, #23
 8008f04:	4605      	mov	r5, r0
 8008f06:	460c      	mov	r4, r1
 8008f08:	4616      	mov	r6, r2
 8008f0a:	d505      	bpl.n	8008f18 <__swrite+0x1e>
 8008f0c:	2302      	movs	r3, #2
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f14:	f000 f9d6 	bl	80092c4 <_lseek_r>
 8008f18:	89a3      	ldrh	r3, [r4, #12]
 8008f1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f22:	81a3      	strh	r3, [r4, #12]
 8008f24:	4632      	mov	r2, r6
 8008f26:	463b      	mov	r3, r7
 8008f28:	4628      	mov	r0, r5
 8008f2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f2e:	f000 b889 	b.w	8009044 <_write_r>

08008f32 <__sseek>:
 8008f32:	b510      	push	{r4, lr}
 8008f34:	460c      	mov	r4, r1
 8008f36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f3a:	f000 f9c3 	bl	80092c4 <_lseek_r>
 8008f3e:	1c43      	adds	r3, r0, #1
 8008f40:	89a3      	ldrh	r3, [r4, #12]
 8008f42:	bf15      	itete	ne
 8008f44:	6560      	strne	r0, [r4, #84]	; 0x54
 8008f46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008f4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f4e:	81a3      	strheq	r3, [r4, #12]
 8008f50:	bf18      	it	ne
 8008f52:	81a3      	strhne	r3, [r4, #12]
 8008f54:	bd10      	pop	{r4, pc}

08008f56 <__sclose>:
 8008f56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f5a:	f000 b8f3 	b.w	8009144 <_close_r>

08008f5e <strncmp>:
 8008f5e:	b510      	push	{r4, lr}
 8008f60:	b16a      	cbz	r2, 8008f7e <strncmp+0x20>
 8008f62:	3901      	subs	r1, #1
 8008f64:	1884      	adds	r4, r0, r2
 8008f66:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008f6a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d103      	bne.n	8008f7a <strncmp+0x1c>
 8008f72:	42a0      	cmp	r0, r4
 8008f74:	d001      	beq.n	8008f7a <strncmp+0x1c>
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d1f5      	bne.n	8008f66 <strncmp+0x8>
 8008f7a:	1a98      	subs	r0, r3, r2
 8008f7c:	bd10      	pop	{r4, pc}
 8008f7e:	4610      	mov	r0, r2
 8008f80:	e7fc      	b.n	8008f7c <strncmp+0x1e>
	...

08008f84 <__swbuf_r>:
 8008f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f86:	460e      	mov	r6, r1
 8008f88:	4614      	mov	r4, r2
 8008f8a:	4605      	mov	r5, r0
 8008f8c:	b118      	cbz	r0, 8008f96 <__swbuf_r+0x12>
 8008f8e:	6983      	ldr	r3, [r0, #24]
 8008f90:	b90b      	cbnz	r3, 8008f96 <__swbuf_r+0x12>
 8008f92:	f7fe fc61 	bl	8007858 <__sinit>
 8008f96:	4b21      	ldr	r3, [pc, #132]	; (800901c <__swbuf_r+0x98>)
 8008f98:	429c      	cmp	r4, r3
 8008f9a:	d12a      	bne.n	8008ff2 <__swbuf_r+0x6e>
 8008f9c:	686c      	ldr	r4, [r5, #4]
 8008f9e:	69a3      	ldr	r3, [r4, #24]
 8008fa0:	60a3      	str	r3, [r4, #8]
 8008fa2:	89a3      	ldrh	r3, [r4, #12]
 8008fa4:	071a      	lsls	r2, r3, #28
 8008fa6:	d52e      	bpl.n	8009006 <__swbuf_r+0x82>
 8008fa8:	6923      	ldr	r3, [r4, #16]
 8008faa:	b363      	cbz	r3, 8009006 <__swbuf_r+0x82>
 8008fac:	6923      	ldr	r3, [r4, #16]
 8008fae:	6820      	ldr	r0, [r4, #0]
 8008fb0:	1ac0      	subs	r0, r0, r3
 8008fb2:	6963      	ldr	r3, [r4, #20]
 8008fb4:	b2f6      	uxtb	r6, r6
 8008fb6:	4283      	cmp	r3, r0
 8008fb8:	4637      	mov	r7, r6
 8008fba:	dc04      	bgt.n	8008fc6 <__swbuf_r+0x42>
 8008fbc:	4621      	mov	r1, r4
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	f000 f956 	bl	8009270 <_fflush_r>
 8008fc4:	bb28      	cbnz	r0, 8009012 <__swbuf_r+0x8e>
 8008fc6:	68a3      	ldr	r3, [r4, #8]
 8008fc8:	3b01      	subs	r3, #1
 8008fca:	60a3      	str	r3, [r4, #8]
 8008fcc:	6823      	ldr	r3, [r4, #0]
 8008fce:	1c5a      	adds	r2, r3, #1
 8008fd0:	6022      	str	r2, [r4, #0]
 8008fd2:	701e      	strb	r6, [r3, #0]
 8008fd4:	6963      	ldr	r3, [r4, #20]
 8008fd6:	3001      	adds	r0, #1
 8008fd8:	4283      	cmp	r3, r0
 8008fda:	d004      	beq.n	8008fe6 <__swbuf_r+0x62>
 8008fdc:	89a3      	ldrh	r3, [r4, #12]
 8008fde:	07db      	lsls	r3, r3, #31
 8008fe0:	d519      	bpl.n	8009016 <__swbuf_r+0x92>
 8008fe2:	2e0a      	cmp	r6, #10
 8008fe4:	d117      	bne.n	8009016 <__swbuf_r+0x92>
 8008fe6:	4621      	mov	r1, r4
 8008fe8:	4628      	mov	r0, r5
 8008fea:	f000 f941 	bl	8009270 <_fflush_r>
 8008fee:	b190      	cbz	r0, 8009016 <__swbuf_r+0x92>
 8008ff0:	e00f      	b.n	8009012 <__swbuf_r+0x8e>
 8008ff2:	4b0b      	ldr	r3, [pc, #44]	; (8009020 <__swbuf_r+0x9c>)
 8008ff4:	429c      	cmp	r4, r3
 8008ff6:	d101      	bne.n	8008ffc <__swbuf_r+0x78>
 8008ff8:	68ac      	ldr	r4, [r5, #8]
 8008ffa:	e7d0      	b.n	8008f9e <__swbuf_r+0x1a>
 8008ffc:	4b09      	ldr	r3, [pc, #36]	; (8009024 <__swbuf_r+0xa0>)
 8008ffe:	429c      	cmp	r4, r3
 8009000:	bf08      	it	eq
 8009002:	68ec      	ldreq	r4, [r5, #12]
 8009004:	e7cb      	b.n	8008f9e <__swbuf_r+0x1a>
 8009006:	4621      	mov	r1, r4
 8009008:	4628      	mov	r0, r5
 800900a:	f000 f82d 	bl	8009068 <__swsetup_r>
 800900e:	2800      	cmp	r0, #0
 8009010:	d0cc      	beq.n	8008fac <__swbuf_r+0x28>
 8009012:	f04f 37ff 	mov.w	r7, #4294967295
 8009016:	4638      	mov	r0, r7
 8009018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800901a:	bf00      	nop
 800901c:	080095e0 	.word	0x080095e0
 8009020:	08009600 	.word	0x08009600
 8009024:	080095c0 	.word	0x080095c0

08009028 <__ascii_wctomb>:
 8009028:	b149      	cbz	r1, 800903e <__ascii_wctomb+0x16>
 800902a:	2aff      	cmp	r2, #255	; 0xff
 800902c:	bf85      	ittet	hi
 800902e:	238a      	movhi	r3, #138	; 0x8a
 8009030:	6003      	strhi	r3, [r0, #0]
 8009032:	700a      	strbls	r2, [r1, #0]
 8009034:	f04f 30ff 	movhi.w	r0, #4294967295
 8009038:	bf98      	it	ls
 800903a:	2001      	movls	r0, #1
 800903c:	4770      	bx	lr
 800903e:	4608      	mov	r0, r1
 8009040:	4770      	bx	lr
	...

08009044 <_write_r>:
 8009044:	b538      	push	{r3, r4, r5, lr}
 8009046:	4c07      	ldr	r4, [pc, #28]	; (8009064 <_write_r+0x20>)
 8009048:	4605      	mov	r5, r0
 800904a:	4608      	mov	r0, r1
 800904c:	4611      	mov	r1, r2
 800904e:	2200      	movs	r2, #0
 8009050:	6022      	str	r2, [r4, #0]
 8009052:	461a      	mov	r2, r3
 8009054:	f7fb ff3f 	bl	8004ed6 <_write>
 8009058:	1c43      	adds	r3, r0, #1
 800905a:	d102      	bne.n	8009062 <_write_r+0x1e>
 800905c:	6823      	ldr	r3, [r4, #0]
 800905e:	b103      	cbz	r3, 8009062 <_write_r+0x1e>
 8009060:	602b      	str	r3, [r5, #0]
 8009062:	bd38      	pop	{r3, r4, r5, pc}
 8009064:	200002f0 	.word	0x200002f0

08009068 <__swsetup_r>:
 8009068:	4b32      	ldr	r3, [pc, #200]	; (8009134 <__swsetup_r+0xcc>)
 800906a:	b570      	push	{r4, r5, r6, lr}
 800906c:	681d      	ldr	r5, [r3, #0]
 800906e:	4606      	mov	r6, r0
 8009070:	460c      	mov	r4, r1
 8009072:	b125      	cbz	r5, 800907e <__swsetup_r+0x16>
 8009074:	69ab      	ldr	r3, [r5, #24]
 8009076:	b913      	cbnz	r3, 800907e <__swsetup_r+0x16>
 8009078:	4628      	mov	r0, r5
 800907a:	f7fe fbed 	bl	8007858 <__sinit>
 800907e:	4b2e      	ldr	r3, [pc, #184]	; (8009138 <__swsetup_r+0xd0>)
 8009080:	429c      	cmp	r4, r3
 8009082:	d10f      	bne.n	80090a4 <__swsetup_r+0x3c>
 8009084:	686c      	ldr	r4, [r5, #4]
 8009086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800908a:	b29a      	uxth	r2, r3
 800908c:	0715      	lsls	r5, r2, #28
 800908e:	d42c      	bmi.n	80090ea <__swsetup_r+0x82>
 8009090:	06d0      	lsls	r0, r2, #27
 8009092:	d411      	bmi.n	80090b8 <__swsetup_r+0x50>
 8009094:	2209      	movs	r2, #9
 8009096:	6032      	str	r2, [r6, #0]
 8009098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800909c:	81a3      	strh	r3, [r4, #12]
 800909e:	f04f 30ff 	mov.w	r0, #4294967295
 80090a2:	e03e      	b.n	8009122 <__swsetup_r+0xba>
 80090a4:	4b25      	ldr	r3, [pc, #148]	; (800913c <__swsetup_r+0xd4>)
 80090a6:	429c      	cmp	r4, r3
 80090a8:	d101      	bne.n	80090ae <__swsetup_r+0x46>
 80090aa:	68ac      	ldr	r4, [r5, #8]
 80090ac:	e7eb      	b.n	8009086 <__swsetup_r+0x1e>
 80090ae:	4b24      	ldr	r3, [pc, #144]	; (8009140 <__swsetup_r+0xd8>)
 80090b0:	429c      	cmp	r4, r3
 80090b2:	bf08      	it	eq
 80090b4:	68ec      	ldreq	r4, [r5, #12]
 80090b6:	e7e6      	b.n	8009086 <__swsetup_r+0x1e>
 80090b8:	0751      	lsls	r1, r2, #29
 80090ba:	d512      	bpl.n	80090e2 <__swsetup_r+0x7a>
 80090bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090be:	b141      	cbz	r1, 80090d2 <__swsetup_r+0x6a>
 80090c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090c4:	4299      	cmp	r1, r3
 80090c6:	d002      	beq.n	80090ce <__swsetup_r+0x66>
 80090c8:	4630      	mov	r0, r6
 80090ca:	f7ff fbbb 	bl	8008844 <_free_r>
 80090ce:	2300      	movs	r3, #0
 80090d0:	6363      	str	r3, [r4, #52]	; 0x34
 80090d2:	89a3      	ldrh	r3, [r4, #12]
 80090d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80090d8:	81a3      	strh	r3, [r4, #12]
 80090da:	2300      	movs	r3, #0
 80090dc:	6063      	str	r3, [r4, #4]
 80090de:	6923      	ldr	r3, [r4, #16]
 80090e0:	6023      	str	r3, [r4, #0]
 80090e2:	89a3      	ldrh	r3, [r4, #12]
 80090e4:	f043 0308 	orr.w	r3, r3, #8
 80090e8:	81a3      	strh	r3, [r4, #12]
 80090ea:	6923      	ldr	r3, [r4, #16]
 80090ec:	b94b      	cbnz	r3, 8009102 <__swsetup_r+0x9a>
 80090ee:	89a3      	ldrh	r3, [r4, #12]
 80090f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80090f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090f8:	d003      	beq.n	8009102 <__swsetup_r+0x9a>
 80090fa:	4621      	mov	r1, r4
 80090fc:	4630      	mov	r0, r6
 80090fe:	f000 f917 	bl	8009330 <__smakebuf_r>
 8009102:	89a2      	ldrh	r2, [r4, #12]
 8009104:	f012 0301 	ands.w	r3, r2, #1
 8009108:	d00c      	beq.n	8009124 <__swsetup_r+0xbc>
 800910a:	2300      	movs	r3, #0
 800910c:	60a3      	str	r3, [r4, #8]
 800910e:	6963      	ldr	r3, [r4, #20]
 8009110:	425b      	negs	r3, r3
 8009112:	61a3      	str	r3, [r4, #24]
 8009114:	6923      	ldr	r3, [r4, #16]
 8009116:	b953      	cbnz	r3, 800912e <__swsetup_r+0xc6>
 8009118:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800911c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009120:	d1ba      	bne.n	8009098 <__swsetup_r+0x30>
 8009122:	bd70      	pop	{r4, r5, r6, pc}
 8009124:	0792      	lsls	r2, r2, #30
 8009126:	bf58      	it	pl
 8009128:	6963      	ldrpl	r3, [r4, #20]
 800912a:	60a3      	str	r3, [r4, #8]
 800912c:	e7f2      	b.n	8009114 <__swsetup_r+0xac>
 800912e:	2000      	movs	r0, #0
 8009130:	e7f7      	b.n	8009122 <__swsetup_r+0xba>
 8009132:	bf00      	nop
 8009134:	20000010 	.word	0x20000010
 8009138:	080095e0 	.word	0x080095e0
 800913c:	08009600 	.word	0x08009600
 8009140:	080095c0 	.word	0x080095c0

08009144 <_close_r>:
 8009144:	b538      	push	{r3, r4, r5, lr}
 8009146:	4c06      	ldr	r4, [pc, #24]	; (8009160 <_close_r+0x1c>)
 8009148:	2300      	movs	r3, #0
 800914a:	4605      	mov	r5, r0
 800914c:	4608      	mov	r0, r1
 800914e:	6023      	str	r3, [r4, #0]
 8009150:	f7fb fedd 	bl	8004f0e <_close>
 8009154:	1c43      	adds	r3, r0, #1
 8009156:	d102      	bne.n	800915e <_close_r+0x1a>
 8009158:	6823      	ldr	r3, [r4, #0]
 800915a:	b103      	cbz	r3, 800915e <_close_r+0x1a>
 800915c:	602b      	str	r3, [r5, #0]
 800915e:	bd38      	pop	{r3, r4, r5, pc}
 8009160:	200002f0 	.word	0x200002f0

08009164 <__sflush_r>:
 8009164:	898a      	ldrh	r2, [r1, #12]
 8009166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800916a:	4605      	mov	r5, r0
 800916c:	0710      	lsls	r0, r2, #28
 800916e:	460c      	mov	r4, r1
 8009170:	d458      	bmi.n	8009224 <__sflush_r+0xc0>
 8009172:	684b      	ldr	r3, [r1, #4]
 8009174:	2b00      	cmp	r3, #0
 8009176:	dc05      	bgt.n	8009184 <__sflush_r+0x20>
 8009178:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800917a:	2b00      	cmp	r3, #0
 800917c:	dc02      	bgt.n	8009184 <__sflush_r+0x20>
 800917e:	2000      	movs	r0, #0
 8009180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009184:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009186:	2e00      	cmp	r6, #0
 8009188:	d0f9      	beq.n	800917e <__sflush_r+0x1a>
 800918a:	2300      	movs	r3, #0
 800918c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009190:	682f      	ldr	r7, [r5, #0]
 8009192:	6a21      	ldr	r1, [r4, #32]
 8009194:	602b      	str	r3, [r5, #0]
 8009196:	d032      	beq.n	80091fe <__sflush_r+0x9a>
 8009198:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800919a:	89a3      	ldrh	r3, [r4, #12]
 800919c:	075a      	lsls	r2, r3, #29
 800919e:	d505      	bpl.n	80091ac <__sflush_r+0x48>
 80091a0:	6863      	ldr	r3, [r4, #4]
 80091a2:	1ac0      	subs	r0, r0, r3
 80091a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80091a6:	b10b      	cbz	r3, 80091ac <__sflush_r+0x48>
 80091a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80091aa:	1ac0      	subs	r0, r0, r3
 80091ac:	2300      	movs	r3, #0
 80091ae:	4602      	mov	r2, r0
 80091b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091b2:	6a21      	ldr	r1, [r4, #32]
 80091b4:	4628      	mov	r0, r5
 80091b6:	47b0      	blx	r6
 80091b8:	1c43      	adds	r3, r0, #1
 80091ba:	89a3      	ldrh	r3, [r4, #12]
 80091bc:	d106      	bne.n	80091cc <__sflush_r+0x68>
 80091be:	6829      	ldr	r1, [r5, #0]
 80091c0:	291d      	cmp	r1, #29
 80091c2:	d848      	bhi.n	8009256 <__sflush_r+0xf2>
 80091c4:	4a29      	ldr	r2, [pc, #164]	; (800926c <__sflush_r+0x108>)
 80091c6:	40ca      	lsrs	r2, r1
 80091c8:	07d6      	lsls	r6, r2, #31
 80091ca:	d544      	bpl.n	8009256 <__sflush_r+0xf2>
 80091cc:	2200      	movs	r2, #0
 80091ce:	6062      	str	r2, [r4, #4]
 80091d0:	04d9      	lsls	r1, r3, #19
 80091d2:	6922      	ldr	r2, [r4, #16]
 80091d4:	6022      	str	r2, [r4, #0]
 80091d6:	d504      	bpl.n	80091e2 <__sflush_r+0x7e>
 80091d8:	1c42      	adds	r2, r0, #1
 80091da:	d101      	bne.n	80091e0 <__sflush_r+0x7c>
 80091dc:	682b      	ldr	r3, [r5, #0]
 80091de:	b903      	cbnz	r3, 80091e2 <__sflush_r+0x7e>
 80091e0:	6560      	str	r0, [r4, #84]	; 0x54
 80091e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091e4:	602f      	str	r7, [r5, #0]
 80091e6:	2900      	cmp	r1, #0
 80091e8:	d0c9      	beq.n	800917e <__sflush_r+0x1a>
 80091ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091ee:	4299      	cmp	r1, r3
 80091f0:	d002      	beq.n	80091f8 <__sflush_r+0x94>
 80091f2:	4628      	mov	r0, r5
 80091f4:	f7ff fb26 	bl	8008844 <_free_r>
 80091f8:	2000      	movs	r0, #0
 80091fa:	6360      	str	r0, [r4, #52]	; 0x34
 80091fc:	e7c0      	b.n	8009180 <__sflush_r+0x1c>
 80091fe:	2301      	movs	r3, #1
 8009200:	4628      	mov	r0, r5
 8009202:	47b0      	blx	r6
 8009204:	1c41      	adds	r1, r0, #1
 8009206:	d1c8      	bne.n	800919a <__sflush_r+0x36>
 8009208:	682b      	ldr	r3, [r5, #0]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d0c5      	beq.n	800919a <__sflush_r+0x36>
 800920e:	2b1d      	cmp	r3, #29
 8009210:	d001      	beq.n	8009216 <__sflush_r+0xb2>
 8009212:	2b16      	cmp	r3, #22
 8009214:	d101      	bne.n	800921a <__sflush_r+0xb6>
 8009216:	602f      	str	r7, [r5, #0]
 8009218:	e7b1      	b.n	800917e <__sflush_r+0x1a>
 800921a:	89a3      	ldrh	r3, [r4, #12]
 800921c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009220:	81a3      	strh	r3, [r4, #12]
 8009222:	e7ad      	b.n	8009180 <__sflush_r+0x1c>
 8009224:	690f      	ldr	r7, [r1, #16]
 8009226:	2f00      	cmp	r7, #0
 8009228:	d0a9      	beq.n	800917e <__sflush_r+0x1a>
 800922a:	0793      	lsls	r3, r2, #30
 800922c:	680e      	ldr	r6, [r1, #0]
 800922e:	bf08      	it	eq
 8009230:	694b      	ldreq	r3, [r1, #20]
 8009232:	600f      	str	r7, [r1, #0]
 8009234:	bf18      	it	ne
 8009236:	2300      	movne	r3, #0
 8009238:	eba6 0807 	sub.w	r8, r6, r7
 800923c:	608b      	str	r3, [r1, #8]
 800923e:	f1b8 0f00 	cmp.w	r8, #0
 8009242:	dd9c      	ble.n	800917e <__sflush_r+0x1a>
 8009244:	4643      	mov	r3, r8
 8009246:	463a      	mov	r2, r7
 8009248:	6a21      	ldr	r1, [r4, #32]
 800924a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800924c:	4628      	mov	r0, r5
 800924e:	47b0      	blx	r6
 8009250:	2800      	cmp	r0, #0
 8009252:	dc06      	bgt.n	8009262 <__sflush_r+0xfe>
 8009254:	89a3      	ldrh	r3, [r4, #12]
 8009256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800925a:	81a3      	strh	r3, [r4, #12]
 800925c:	f04f 30ff 	mov.w	r0, #4294967295
 8009260:	e78e      	b.n	8009180 <__sflush_r+0x1c>
 8009262:	4407      	add	r7, r0
 8009264:	eba8 0800 	sub.w	r8, r8, r0
 8009268:	e7e9      	b.n	800923e <__sflush_r+0xda>
 800926a:	bf00      	nop
 800926c:	20400001 	.word	0x20400001

08009270 <_fflush_r>:
 8009270:	b538      	push	{r3, r4, r5, lr}
 8009272:	690b      	ldr	r3, [r1, #16]
 8009274:	4605      	mov	r5, r0
 8009276:	460c      	mov	r4, r1
 8009278:	b1db      	cbz	r3, 80092b2 <_fflush_r+0x42>
 800927a:	b118      	cbz	r0, 8009284 <_fflush_r+0x14>
 800927c:	6983      	ldr	r3, [r0, #24]
 800927e:	b90b      	cbnz	r3, 8009284 <_fflush_r+0x14>
 8009280:	f7fe faea 	bl	8007858 <__sinit>
 8009284:	4b0c      	ldr	r3, [pc, #48]	; (80092b8 <_fflush_r+0x48>)
 8009286:	429c      	cmp	r4, r3
 8009288:	d109      	bne.n	800929e <_fflush_r+0x2e>
 800928a:	686c      	ldr	r4, [r5, #4]
 800928c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009290:	b17b      	cbz	r3, 80092b2 <_fflush_r+0x42>
 8009292:	4621      	mov	r1, r4
 8009294:	4628      	mov	r0, r5
 8009296:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800929a:	f7ff bf63 	b.w	8009164 <__sflush_r>
 800929e:	4b07      	ldr	r3, [pc, #28]	; (80092bc <_fflush_r+0x4c>)
 80092a0:	429c      	cmp	r4, r3
 80092a2:	d101      	bne.n	80092a8 <_fflush_r+0x38>
 80092a4:	68ac      	ldr	r4, [r5, #8]
 80092a6:	e7f1      	b.n	800928c <_fflush_r+0x1c>
 80092a8:	4b05      	ldr	r3, [pc, #20]	; (80092c0 <_fflush_r+0x50>)
 80092aa:	429c      	cmp	r4, r3
 80092ac:	bf08      	it	eq
 80092ae:	68ec      	ldreq	r4, [r5, #12]
 80092b0:	e7ec      	b.n	800928c <_fflush_r+0x1c>
 80092b2:	2000      	movs	r0, #0
 80092b4:	bd38      	pop	{r3, r4, r5, pc}
 80092b6:	bf00      	nop
 80092b8:	080095e0 	.word	0x080095e0
 80092bc:	08009600 	.word	0x08009600
 80092c0:	080095c0 	.word	0x080095c0

080092c4 <_lseek_r>:
 80092c4:	b538      	push	{r3, r4, r5, lr}
 80092c6:	4c07      	ldr	r4, [pc, #28]	; (80092e4 <_lseek_r+0x20>)
 80092c8:	4605      	mov	r5, r0
 80092ca:	4608      	mov	r0, r1
 80092cc:	4611      	mov	r1, r2
 80092ce:	2200      	movs	r2, #0
 80092d0:	6022      	str	r2, [r4, #0]
 80092d2:	461a      	mov	r2, r3
 80092d4:	f7fb fe42 	bl	8004f5c <_lseek>
 80092d8:	1c43      	adds	r3, r0, #1
 80092da:	d102      	bne.n	80092e2 <_lseek_r+0x1e>
 80092dc:	6823      	ldr	r3, [r4, #0]
 80092de:	b103      	cbz	r3, 80092e2 <_lseek_r+0x1e>
 80092e0:	602b      	str	r3, [r5, #0]
 80092e2:	bd38      	pop	{r3, r4, r5, pc}
 80092e4:	200002f0 	.word	0x200002f0

080092e8 <__swhatbuf_r>:
 80092e8:	b570      	push	{r4, r5, r6, lr}
 80092ea:	460e      	mov	r6, r1
 80092ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092f0:	2900      	cmp	r1, #0
 80092f2:	b096      	sub	sp, #88	; 0x58
 80092f4:	4614      	mov	r4, r2
 80092f6:	461d      	mov	r5, r3
 80092f8:	da07      	bge.n	800930a <__swhatbuf_r+0x22>
 80092fa:	2300      	movs	r3, #0
 80092fc:	602b      	str	r3, [r5, #0]
 80092fe:	89b3      	ldrh	r3, [r6, #12]
 8009300:	061a      	lsls	r2, r3, #24
 8009302:	d410      	bmi.n	8009326 <__swhatbuf_r+0x3e>
 8009304:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009308:	e00e      	b.n	8009328 <__swhatbuf_r+0x40>
 800930a:	466a      	mov	r2, sp
 800930c:	f000 f8a4 	bl	8009458 <_fstat_r>
 8009310:	2800      	cmp	r0, #0
 8009312:	dbf2      	blt.n	80092fa <__swhatbuf_r+0x12>
 8009314:	9a01      	ldr	r2, [sp, #4]
 8009316:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800931a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800931e:	425a      	negs	r2, r3
 8009320:	415a      	adcs	r2, r3
 8009322:	602a      	str	r2, [r5, #0]
 8009324:	e7ee      	b.n	8009304 <__swhatbuf_r+0x1c>
 8009326:	2340      	movs	r3, #64	; 0x40
 8009328:	2000      	movs	r0, #0
 800932a:	6023      	str	r3, [r4, #0]
 800932c:	b016      	add	sp, #88	; 0x58
 800932e:	bd70      	pop	{r4, r5, r6, pc}

08009330 <__smakebuf_r>:
 8009330:	898b      	ldrh	r3, [r1, #12]
 8009332:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009334:	079d      	lsls	r5, r3, #30
 8009336:	4606      	mov	r6, r0
 8009338:	460c      	mov	r4, r1
 800933a:	d507      	bpl.n	800934c <__smakebuf_r+0x1c>
 800933c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009340:	6023      	str	r3, [r4, #0]
 8009342:	6123      	str	r3, [r4, #16]
 8009344:	2301      	movs	r3, #1
 8009346:	6163      	str	r3, [r4, #20]
 8009348:	b002      	add	sp, #8
 800934a:	bd70      	pop	{r4, r5, r6, pc}
 800934c:	ab01      	add	r3, sp, #4
 800934e:	466a      	mov	r2, sp
 8009350:	f7ff ffca 	bl	80092e8 <__swhatbuf_r>
 8009354:	9900      	ldr	r1, [sp, #0]
 8009356:	4605      	mov	r5, r0
 8009358:	4630      	mov	r0, r6
 800935a:	f7ff fac1 	bl	80088e0 <_malloc_r>
 800935e:	b948      	cbnz	r0, 8009374 <__smakebuf_r+0x44>
 8009360:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009364:	059a      	lsls	r2, r3, #22
 8009366:	d4ef      	bmi.n	8009348 <__smakebuf_r+0x18>
 8009368:	f023 0303 	bic.w	r3, r3, #3
 800936c:	f043 0302 	orr.w	r3, r3, #2
 8009370:	81a3      	strh	r3, [r4, #12]
 8009372:	e7e3      	b.n	800933c <__smakebuf_r+0xc>
 8009374:	4b0d      	ldr	r3, [pc, #52]	; (80093ac <__smakebuf_r+0x7c>)
 8009376:	62b3      	str	r3, [r6, #40]	; 0x28
 8009378:	89a3      	ldrh	r3, [r4, #12]
 800937a:	6020      	str	r0, [r4, #0]
 800937c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009380:	81a3      	strh	r3, [r4, #12]
 8009382:	9b00      	ldr	r3, [sp, #0]
 8009384:	6163      	str	r3, [r4, #20]
 8009386:	9b01      	ldr	r3, [sp, #4]
 8009388:	6120      	str	r0, [r4, #16]
 800938a:	b15b      	cbz	r3, 80093a4 <__smakebuf_r+0x74>
 800938c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009390:	4630      	mov	r0, r6
 8009392:	f000 f873 	bl	800947c <_isatty_r>
 8009396:	b128      	cbz	r0, 80093a4 <__smakebuf_r+0x74>
 8009398:	89a3      	ldrh	r3, [r4, #12]
 800939a:	f023 0303 	bic.w	r3, r3, #3
 800939e:	f043 0301 	orr.w	r3, r3, #1
 80093a2:	81a3      	strh	r3, [r4, #12]
 80093a4:	89a3      	ldrh	r3, [r4, #12]
 80093a6:	431d      	orrs	r5, r3
 80093a8:	81a5      	strh	r5, [r4, #12]
 80093aa:	e7cd      	b.n	8009348 <__smakebuf_r+0x18>
 80093ac:	08007821 	.word	0x08007821

080093b0 <memmove>:
 80093b0:	4288      	cmp	r0, r1
 80093b2:	b510      	push	{r4, lr}
 80093b4:	eb01 0302 	add.w	r3, r1, r2
 80093b8:	d807      	bhi.n	80093ca <memmove+0x1a>
 80093ba:	1e42      	subs	r2, r0, #1
 80093bc:	4299      	cmp	r1, r3
 80093be:	d00a      	beq.n	80093d6 <memmove+0x26>
 80093c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093c4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80093c8:	e7f8      	b.n	80093bc <memmove+0xc>
 80093ca:	4283      	cmp	r3, r0
 80093cc:	d9f5      	bls.n	80093ba <memmove+0xa>
 80093ce:	1881      	adds	r1, r0, r2
 80093d0:	1ad2      	subs	r2, r2, r3
 80093d2:	42d3      	cmn	r3, r2
 80093d4:	d100      	bne.n	80093d8 <memmove+0x28>
 80093d6:	bd10      	pop	{r4, pc}
 80093d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093dc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80093e0:	e7f7      	b.n	80093d2 <memmove+0x22>

080093e2 <__malloc_lock>:
 80093e2:	4770      	bx	lr

080093e4 <__malloc_unlock>:
 80093e4:	4770      	bx	lr

080093e6 <_realloc_r>:
 80093e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093e8:	4607      	mov	r7, r0
 80093ea:	4614      	mov	r4, r2
 80093ec:	460e      	mov	r6, r1
 80093ee:	b921      	cbnz	r1, 80093fa <_realloc_r+0x14>
 80093f0:	4611      	mov	r1, r2
 80093f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80093f6:	f7ff ba73 	b.w	80088e0 <_malloc_r>
 80093fa:	b922      	cbnz	r2, 8009406 <_realloc_r+0x20>
 80093fc:	f7ff fa22 	bl	8008844 <_free_r>
 8009400:	4625      	mov	r5, r4
 8009402:	4628      	mov	r0, r5
 8009404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009406:	f000 f849 	bl	800949c <_malloc_usable_size_r>
 800940a:	42a0      	cmp	r0, r4
 800940c:	d20f      	bcs.n	800942e <_realloc_r+0x48>
 800940e:	4621      	mov	r1, r4
 8009410:	4638      	mov	r0, r7
 8009412:	f7ff fa65 	bl	80088e0 <_malloc_r>
 8009416:	4605      	mov	r5, r0
 8009418:	2800      	cmp	r0, #0
 800941a:	d0f2      	beq.n	8009402 <_realloc_r+0x1c>
 800941c:	4631      	mov	r1, r6
 800941e:	4622      	mov	r2, r4
 8009420:	f7fe fdf8 	bl	8008014 <memcpy>
 8009424:	4631      	mov	r1, r6
 8009426:	4638      	mov	r0, r7
 8009428:	f7ff fa0c 	bl	8008844 <_free_r>
 800942c:	e7e9      	b.n	8009402 <_realloc_r+0x1c>
 800942e:	4635      	mov	r5, r6
 8009430:	e7e7      	b.n	8009402 <_realloc_r+0x1c>
	...

08009434 <_read_r>:
 8009434:	b538      	push	{r3, r4, r5, lr}
 8009436:	4c07      	ldr	r4, [pc, #28]	; (8009454 <_read_r+0x20>)
 8009438:	4605      	mov	r5, r0
 800943a:	4608      	mov	r0, r1
 800943c:	4611      	mov	r1, r2
 800943e:	2200      	movs	r2, #0
 8009440:	6022      	str	r2, [r4, #0]
 8009442:	461a      	mov	r2, r3
 8009444:	f7fb fd2a 	bl	8004e9c <_read>
 8009448:	1c43      	adds	r3, r0, #1
 800944a:	d102      	bne.n	8009452 <_read_r+0x1e>
 800944c:	6823      	ldr	r3, [r4, #0]
 800944e:	b103      	cbz	r3, 8009452 <_read_r+0x1e>
 8009450:	602b      	str	r3, [r5, #0]
 8009452:	bd38      	pop	{r3, r4, r5, pc}
 8009454:	200002f0 	.word	0x200002f0

08009458 <_fstat_r>:
 8009458:	b538      	push	{r3, r4, r5, lr}
 800945a:	4c07      	ldr	r4, [pc, #28]	; (8009478 <_fstat_r+0x20>)
 800945c:	2300      	movs	r3, #0
 800945e:	4605      	mov	r5, r0
 8009460:	4608      	mov	r0, r1
 8009462:	4611      	mov	r1, r2
 8009464:	6023      	str	r3, [r4, #0]
 8009466:	f7fb fd5e 	bl	8004f26 <_fstat>
 800946a:	1c43      	adds	r3, r0, #1
 800946c:	d102      	bne.n	8009474 <_fstat_r+0x1c>
 800946e:	6823      	ldr	r3, [r4, #0]
 8009470:	b103      	cbz	r3, 8009474 <_fstat_r+0x1c>
 8009472:	602b      	str	r3, [r5, #0]
 8009474:	bd38      	pop	{r3, r4, r5, pc}
 8009476:	bf00      	nop
 8009478:	200002f0 	.word	0x200002f0

0800947c <_isatty_r>:
 800947c:	b538      	push	{r3, r4, r5, lr}
 800947e:	4c06      	ldr	r4, [pc, #24]	; (8009498 <_isatty_r+0x1c>)
 8009480:	2300      	movs	r3, #0
 8009482:	4605      	mov	r5, r0
 8009484:	4608      	mov	r0, r1
 8009486:	6023      	str	r3, [r4, #0]
 8009488:	f7fb fd5d 	bl	8004f46 <_isatty>
 800948c:	1c43      	adds	r3, r0, #1
 800948e:	d102      	bne.n	8009496 <_isatty_r+0x1a>
 8009490:	6823      	ldr	r3, [r4, #0]
 8009492:	b103      	cbz	r3, 8009496 <_isatty_r+0x1a>
 8009494:	602b      	str	r3, [r5, #0]
 8009496:	bd38      	pop	{r3, r4, r5, pc}
 8009498:	200002f0 	.word	0x200002f0

0800949c <_malloc_usable_size_r>:
 800949c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094a0:	1f18      	subs	r0, r3, #4
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	bfbc      	itt	lt
 80094a6:	580b      	ldrlt	r3, [r1, r0]
 80094a8:	18c0      	addlt	r0, r0, r3
 80094aa:	4770      	bx	lr

080094ac <_init>:
 80094ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ae:	bf00      	nop
 80094b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094b2:	bc08      	pop	{r3}
 80094b4:	469e      	mov	lr, r3
 80094b6:	4770      	bx	lr

080094b8 <_fini>:
 80094b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ba:	bf00      	nop
 80094bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094be:	bc08      	pop	{r3}
 80094c0:	469e      	mov	lr, r3
 80094c2:	4770      	bx	lr
