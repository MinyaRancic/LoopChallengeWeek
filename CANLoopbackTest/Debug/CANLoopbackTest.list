
CANLoopbackTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000495c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08004aec  08004aec  00014aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bd4  08004bd4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004bd4  08004bd4  00014bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bdc  08004bdc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bdc  08004bdc  00014bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004be0  08004be0  00014be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004be4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000070  08004c54  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08004c54  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c3b7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d92  00000000  00000000  0002c457  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000aa0  00000000  00000000  0002e1f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009a8  00000000  00000000  0002ec90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026e2a  00000000  00000000  0002f638  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008cdf  00000000  00000000  00056462  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ebff8  00000000  00000000  0005f141  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014b139  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000317c  00000000  00000000  0014b1b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004ad4 	.word	0x08004ad4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004ad4 	.word	0x08004ad4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000576:	2300      	movs	r3, #0
 8000578:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800057a:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <HAL_Init+0x3c>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a0b      	ldr	r2, [pc, #44]	; (80005ac <HAL_Init+0x3c>)
 8000580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000584:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000586:	2003      	movs	r0, #3
 8000588:	f000 fd38 	bl	8000ffc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800058c:	2000      	movs	r0, #0
 800058e:	f000 f80f 	bl	80005b0 <HAL_InitTick>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d002      	beq.n	800059e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000598:	2301      	movs	r3, #1
 800059a:	71fb      	strb	r3, [r7, #7]
 800059c:	e001      	b.n	80005a2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800059e:	f003 f9b1 	bl	8003904 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005a2:	79fb      	ldrb	r3, [r7, #7]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40022000 	.word	0x40022000

080005b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005b8:	2300      	movs	r3, #0
 80005ba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80005bc:	4b16      	ldr	r3, [pc, #88]	; (8000618 <HAL_InitTick+0x68>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d022      	beq.n	800060a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80005c4:	4b15      	ldr	r3, [pc, #84]	; (800061c <HAL_InitTick+0x6c>)
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	4b13      	ldr	r3, [pc, #76]	; (8000618 <HAL_InitTick+0x68>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80005d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 fd36 	bl	800104a <HAL_SYSTICK_Config>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d10f      	bne.n	8000604 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2b0f      	cmp	r3, #15
 80005e8:	d809      	bhi.n	80005fe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005ea:	2200      	movs	r2, #0
 80005ec:	6879      	ldr	r1, [r7, #4]
 80005ee:	f04f 30ff 	mov.w	r0, #4294967295
 80005f2:	f000 fd0e 	bl	8001012 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005f6:	4a0a      	ldr	r2, [pc, #40]	; (8000620 <HAL_InitTick+0x70>)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	e007      	b.n	800060e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	73fb      	strb	r3, [r7, #15]
 8000602:	e004      	b.n	800060e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000604:	2301      	movs	r3, #1
 8000606:	73fb      	strb	r3, [r7, #15]
 8000608:	e001      	b.n	800060e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800060a:	2301      	movs	r3, #1
 800060c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800060e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000610:	4618      	mov	r0, r3
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000004 	.word	0x20000004
 800061c:	20000008 	.word	0x20000008
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <HAL_IncTick+0x1c>)
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <HAL_IncTick+0x20>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4413      	add	r3, r2
 8000632:	4a03      	ldr	r2, [pc, #12]	; (8000640 <HAL_IncTick+0x1c>)
 8000634:	6013      	str	r3, [r2, #0]
}
 8000636:	bf00      	nop
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	20000098 	.word	0x20000098
 8000644:	20000004 	.word	0x20000004

08000648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  return uwTick;
 800064c:	4b03      	ldr	r3, [pc, #12]	; (800065c <HAL_GetTick+0x14>)
 800064e:	681b      	ldr	r3, [r3, #0]
}
 8000650:	4618      	mov	r0, r3
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	20000098 	.word	0x20000098

08000660 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d101      	bne.n	8000672 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800066e:	2301      	movs	r3, #1
 8000670:	e0ed      	b.n	800084e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000678:	b2db      	uxtb	r3, r3
 800067a:	2b00      	cmp	r3, #0
 800067c:	d102      	bne.n	8000684 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800067e:	6878      	ldr	r0, [r7, #4]
 8000680:	f003 f964 	bl	800394c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	f022 0202 	bic.w	r2, r2, #2
 8000692:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000694:	f7ff ffd8 	bl	8000648 <HAL_GetTick>
 8000698:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800069a:	e012      	b.n	80006c2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800069c:	f7ff ffd4 	bl	8000648 <HAL_GetTick>
 80006a0:	4602      	mov	r2, r0
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	1ad3      	subs	r3, r2, r3
 80006a6:	2b0a      	cmp	r3, #10
 80006a8:	d90b      	bls.n	80006c2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2205      	movs	r2, #5
 80006ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80006be:	2301      	movs	r3, #1
 80006c0:	e0c5      	b.n	800084e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	f003 0302 	and.w	r3, r3, #2
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d1e5      	bne.n	800069c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f042 0201 	orr.w	r2, r2, #1
 80006de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80006e0:	f7ff ffb2 	bl	8000648 <HAL_GetTick>
 80006e4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006e6:	e012      	b.n	800070e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80006e8:	f7ff ffae 	bl	8000648 <HAL_GetTick>
 80006ec:	4602      	mov	r2, r0
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	1ad3      	subs	r3, r2, r3
 80006f2:	2b0a      	cmp	r3, #10
 80006f4:	d90b      	bls.n	800070e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2205      	movs	r2, #5
 8000706:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800070a:	2301      	movs	r3, #1
 800070c:	e09f      	b.n	800084e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	f003 0301 	and.w	r3, r3, #1
 8000718:	2b00      	cmp	r3, #0
 800071a:	d0e5      	beq.n	80006e8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	7e1b      	ldrb	r3, [r3, #24]
 8000720:	2b01      	cmp	r3, #1
 8000722:	d108      	bne.n	8000736 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	e007      	b.n	8000746 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000744:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	7e5b      	ldrb	r3, [r3, #25]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d108      	bne.n	8000760 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	e007      	b.n	8000770 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800076e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	7e9b      	ldrb	r3, [r3, #26]
 8000774:	2b01      	cmp	r3, #1
 8000776:	d108      	bne.n	800078a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f042 0220 	orr.w	r2, r2, #32
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	e007      	b.n	800079a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f022 0220 	bic.w	r2, r2, #32
 8000798:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	7edb      	ldrb	r3, [r3, #27]
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d108      	bne.n	80007b4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f022 0210 	bic.w	r2, r2, #16
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	e007      	b.n	80007c4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f042 0210 	orr.w	r2, r2, #16
 80007c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	7f1b      	ldrb	r3, [r3, #28]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d108      	bne.n	80007de <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f042 0208 	orr.w	r2, r2, #8
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	e007      	b.n	80007ee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f022 0208 	bic.w	r2, r2, #8
 80007ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	7f5b      	ldrb	r3, [r3, #29]
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d108      	bne.n	8000808 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f042 0204 	orr.w	r2, r2, #4
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	e007      	b.n	8000818 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f022 0204 	bic.w	r2, r2, #4
 8000816:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	689a      	ldr	r2, [r3, #8]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	431a      	orrs	r2, r3
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	691b      	ldr	r3, [r3, #16]
 8000826:	431a      	orrs	r2, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	695b      	ldr	r3, [r3, #20]
 800082c:	ea42 0103 	orr.w	r1, r2, r3
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	1e5a      	subs	r2, r3, #1
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	430a      	orrs	r2, r1
 800083c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2200      	movs	r2, #0
 8000842:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2201      	movs	r2, #1
 8000848:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000856:	b480      	push	{r7}
 8000858:	b087      	sub	sp, #28
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
 800085e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	f893 3020 	ldrb.w	r3, [r3, #32]
 800086c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800086e:	7cfb      	ldrb	r3, [r7, #19]
 8000870:	2b01      	cmp	r3, #1
 8000872:	d003      	beq.n	800087c <HAL_CAN_ConfigFilter+0x26>
 8000874:	7cfb      	ldrb	r3, [r7, #19]
 8000876:	2b02      	cmp	r3, #2
 8000878:	f040 80aa 	bne.w	80009d0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000882:	f043 0201 	orr.w	r2, r3, #1
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	695b      	ldr	r3, [r3, #20]
 8000890:	f003 031f 	and.w	r3, r3, #31
 8000894:	2201      	movs	r2, #1
 8000896:	fa02 f303 	lsl.w	r3, r2, r3
 800089a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	43db      	mvns	r3, r3
 80008a6:	401a      	ands	r2, r3
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	69db      	ldr	r3, [r3, #28]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d123      	bne.n	80008fe <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	43db      	mvns	r3, r3
 80008c0:	401a      	ands	r2, r3
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008d4:	683a      	ldr	r2, [r7, #0]
 80008d6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80008d8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	3248      	adds	r2, #72	; 0x48
 80008de:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	689b      	ldr	r3, [r3, #8]
 80008e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80008f2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80008f4:	6979      	ldr	r1, [r7, #20]
 80008f6:	3348      	adds	r3, #72	; 0x48
 80008f8:	00db      	lsls	r3, r3, #3
 80008fa:	440b      	add	r3, r1
 80008fc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	69db      	ldr	r3, [r3, #28]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d122      	bne.n	800094c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	431a      	orrs	r2, r3
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000922:	683a      	ldr	r2, [r7, #0]
 8000924:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000926:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	3248      	adds	r2, #72	; 0x48
 800092c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	68db      	ldr	r3, [r3, #12]
 800093a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000940:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000942:	6979      	ldr	r1, [r7, #20]
 8000944:	3348      	adds	r3, #72	; 0x48
 8000946:	00db      	lsls	r3, r3, #3
 8000948:	440b      	add	r3, r1
 800094a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d109      	bne.n	8000968 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	43db      	mvns	r3, r3
 800095e:	401a      	ands	r2, r3
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000966:	e007      	b.n	8000978 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	431a      	orrs	r2, r3
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	691b      	ldr	r3, [r3, #16]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d109      	bne.n	8000994 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	43db      	mvns	r3, r3
 800098a:	401a      	ands	r2, r3
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000992:	e007      	b.n	80009a4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	431a      	orrs	r2, r3
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	6a1b      	ldr	r3, [r3, #32]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d107      	bne.n	80009bc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	431a      	orrs	r2, r3
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80009c2:	f023 0201 	bic.w	r2, r3, #1
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80009cc:	2300      	movs	r3, #0
 80009ce:	e006      	b.n	80009de <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80009dc:	2301      	movs	r3, #1
  }
}
 80009de:	4618      	mov	r0, r3
 80009e0:	371c      	adds	r7, #28
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b084      	sub	sp, #16
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d12e      	bne.n	8000a5c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2202      	movs	r2, #2
 8000a02:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f022 0201 	bic.w	r2, r2, #1
 8000a14:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000a16:	f7ff fe17 	bl	8000648 <HAL_GetTick>
 8000a1a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000a1c:	e012      	b.n	8000a44 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a1e:	f7ff fe13 	bl	8000648 <HAL_GetTick>
 8000a22:	4602      	mov	r2, r0
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	1ad3      	subs	r3, r2, r3
 8000a28:	2b0a      	cmp	r3, #10
 8000a2a:	d90b      	bls.n	8000a44 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a30:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2205      	movs	r2, #5
 8000a3c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000a40:	2301      	movs	r3, #1
 8000a42:	e012      	b.n	8000a6a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d1e5      	bne.n	8000a1e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2200      	movs	r2, #0
 8000a56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	e006      	b.n	8000a6a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a60:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000a68:	2301      	movs	r3, #1
  }
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000a72:	b480      	push	{r7}
 8000a74:	b089      	sub	sp, #36	; 0x24
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	60f8      	str	r0, [r7, #12]
 8000a7a:	60b9      	str	r1, [r7, #8]
 8000a7c:	607a      	str	r2, [r7, #4]
 8000a7e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a86:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000a90:	7ffb      	ldrb	r3, [r7, #31]
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d003      	beq.n	8000a9e <HAL_CAN_AddTxMessage+0x2c>
 8000a96:	7ffb      	ldrb	r3, [r7, #31]
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	f040 80b8 	bne.w	8000c0e <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d10a      	bne.n	8000abe <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d105      	bne.n	8000abe <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	f000 80a0 	beq.w	8000bfe <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000abe:	69bb      	ldr	r3, [r7, #24]
 8000ac0:	0e1b      	lsrs	r3, r3, #24
 8000ac2:	f003 0303 	and.w	r3, r3, #3
 8000ac6:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	2b02      	cmp	r3, #2
 8000acc:	d907      	bls.n	8000ade <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	e09e      	b.n	8000c1c <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000ade:	2201      	movs	r2, #1
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	409a      	lsls	r2, r3
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d10d      	bne.n	8000b0c <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000afa:	68f9      	ldr	r1, [r7, #12]
 8000afc:	6809      	ldr	r1, [r1, #0]
 8000afe:	431a      	orrs	r2, r3
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	3318      	adds	r3, #24
 8000b04:	011b      	lsls	r3, r3, #4
 8000b06:	440b      	add	r3, r1
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	e00f      	b.n	8000b2c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b16:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b1c:	68f9      	ldr	r1, [r7, #12]
 8000b1e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000b20:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	3318      	adds	r3, #24
 8000b26:	011b      	lsls	r3, r3, #4
 8000b28:	440b      	add	r3, r1
 8000b2a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	6819      	ldr	r1, [r3, #0]
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	691a      	ldr	r2, [r3, #16]
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	3318      	adds	r3, #24
 8000b38:	011b      	lsls	r3, r3, #4
 8000b3a:	440b      	add	r3, r1
 8000b3c:	3304      	adds	r3, #4
 8000b3e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	7d1b      	ldrb	r3, [r3, #20]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d111      	bne.n	8000b6c <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	3318      	adds	r3, #24
 8000b50:	011b      	lsls	r3, r3, #4
 8000b52:	4413      	add	r3, r2
 8000b54:	3304      	adds	r3, #4
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	68fa      	ldr	r2, [r7, #12]
 8000b5a:	6811      	ldr	r1, [r2, #0]
 8000b5c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	3318      	adds	r3, #24
 8000b64:	011b      	lsls	r3, r3, #4
 8000b66:	440b      	add	r3, r1
 8000b68:	3304      	adds	r3, #4
 8000b6a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3307      	adds	r3, #7
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	061a      	lsls	r2, r3, #24
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	3306      	adds	r3, #6
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	041b      	lsls	r3, r3, #16
 8000b7c:	431a      	orrs	r2, r3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	3305      	adds	r3, #5
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	021b      	lsls	r3, r3, #8
 8000b86:	4313      	orrs	r3, r2
 8000b88:	687a      	ldr	r2, [r7, #4]
 8000b8a:	3204      	adds	r2, #4
 8000b8c:	7812      	ldrb	r2, [r2, #0]
 8000b8e:	4610      	mov	r0, r2
 8000b90:	68fa      	ldr	r2, [r7, #12]
 8000b92:	6811      	ldr	r1, [r2, #0]
 8000b94:	ea43 0200 	orr.w	r2, r3, r0
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	011b      	lsls	r3, r3, #4
 8000b9c:	440b      	add	r3, r1
 8000b9e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000ba2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3303      	adds	r3, #3
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	061a      	lsls	r2, r3, #24
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3302      	adds	r3, #2
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	041b      	lsls	r3, r3, #16
 8000bb4:	431a      	orrs	r2, r3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	021b      	lsls	r3, r3, #8
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	7812      	ldrb	r2, [r2, #0]
 8000bc4:	4610      	mov	r0, r2
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	6811      	ldr	r1, [r2, #0]
 8000bca:	ea43 0200 	orr.w	r2, r3, r0
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	011b      	lsls	r3, r3, #4
 8000bd2:	440b      	add	r3, r1
 8000bd4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000bd8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	3318      	adds	r3, #24
 8000be2:	011b      	lsls	r3, r3, #4
 8000be4:	4413      	add	r3, r2
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	68fa      	ldr	r2, [r7, #12]
 8000bea:	6811      	ldr	r1, [r2, #0]
 8000bec:	f043 0201 	orr.w	r2, r3, #1
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	3318      	adds	r3, #24
 8000bf4:	011b      	lsls	r3, r3, #4
 8000bf6:	440b      	add	r3, r1
 8000bf8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	e00e      	b.n	8000c1c <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c02:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e006      	b.n	8000c1c <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c12:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
  }
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3724      	adds	r7, #36	; 0x24
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c3c:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8000c3e:	7afb      	ldrb	r3, [r7, #11]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d002      	beq.n	8000c4a <HAL_CAN_IsTxMessagePending+0x22>
 8000c44:	7afb      	ldrb	r3, [r7, #11]
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d10b      	bne.n	8000c62 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	689a      	ldr	r2, [r3, #8]
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	069b      	lsls	r3, r3, #26
 8000c54:	401a      	ands	r2, r3
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	069b      	lsls	r3, r3, #26
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d001      	beq.n	8000c62 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8000c62:	68fb      	ldr	r3, [r7, #12]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000c70:	b480      	push	{r7}
 8000c72:	b087      	sub	sp, #28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
 8000c7c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c84:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000c86:	7dfb      	ldrb	r3, [r7, #23]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d003      	beq.n	8000c94 <HAL_CAN_GetRxMessage+0x24>
 8000c8c:	7dfb      	ldrb	r3, [r7, #23]
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	f040 80f4 	bne.w	8000e7c <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d10e      	bne.n	8000cb8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	f003 0303 	and.w	r3, r3, #3
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d116      	bne.n	8000cd6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e0e8      	b.n	8000e8a <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	691b      	ldr	r3, [r3, #16]
 8000cbe:	f003 0303 	and.w	r3, r3, #3
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d107      	bne.n	8000cd6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e0d9      	b.n	8000e8a <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	331b      	adds	r3, #27
 8000cde:	011b      	lsls	r3, r3, #4
 8000ce0:	4413      	add	r3, r2
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f003 0204 	and.w	r2, r3, #4
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d10c      	bne.n	8000d0e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	331b      	adds	r3, #27
 8000cfc:	011b      	lsls	r3, r3, #4
 8000cfe:	4413      	add	r3, r2
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	0d5b      	lsrs	r3, r3, #21
 8000d04:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	e00b      	b.n	8000d26 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	331b      	adds	r3, #27
 8000d16:	011b      	lsls	r3, r3, #4
 8000d18:	4413      	add	r3, r2
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	08db      	lsrs	r3, r3, #3
 8000d1e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	331b      	adds	r3, #27
 8000d2e:	011b      	lsls	r3, r3, #4
 8000d30:	4413      	add	r3, r2
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	085b      	lsrs	r3, r3, #1
 8000d36:	f003 0201 	and.w	r2, r3, #1
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	331b      	adds	r3, #27
 8000d46:	011b      	lsls	r3, r3, #4
 8000d48:	4413      	add	r3, r2
 8000d4a:	3304      	adds	r3, #4
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f003 020f 	and.w	r2, r3, #15
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	331b      	adds	r3, #27
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	4413      	add	r3, r2
 8000d62:	3304      	adds	r3, #4
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	0a1b      	lsrs	r3, r3, #8
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	331b      	adds	r3, #27
 8000d76:	011b      	lsls	r3, r3, #4
 8000d78:	4413      	add	r3, r2
 8000d7a:	3304      	adds	r3, #4
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	0c1b      	lsrs	r3, r3, #16
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	011b      	lsls	r3, r3, #4
 8000d8e:	4413      	add	r3, r2
 8000d90:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	011b      	lsls	r3, r3, #4
 8000da4:	4413      	add	r3, r2
 8000da6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	0a1a      	lsrs	r2, r3, #8
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	3301      	adds	r3, #1
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	011b      	lsls	r3, r3, #4
 8000dbe:	4413      	add	r3, r2
 8000dc0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	0c1a      	lsrs	r2, r3, #16
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	3302      	adds	r3, #2
 8000dcc:	b2d2      	uxtb	r2, r2
 8000dce:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	011b      	lsls	r3, r3, #4
 8000dd8:	4413      	add	r3, r2
 8000dda:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	0e1a      	lsrs	r2, r3, #24
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	3303      	adds	r3, #3
 8000de6:	b2d2      	uxtb	r2, r2
 8000de8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	011b      	lsls	r3, r3, #4
 8000df2:	4413      	add	r3, r2
 8000df4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	b2d2      	uxtb	r2, r2
 8000e00:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	011b      	lsls	r3, r3, #4
 8000e0a:	4413      	add	r3, r2
 8000e0c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	0a1a      	lsrs	r2, r3, #8
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	3305      	adds	r3, #5
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	011b      	lsls	r3, r3, #4
 8000e24:	4413      	add	r3, r2
 8000e26:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	0c1a      	lsrs	r2, r3, #16
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	3306      	adds	r3, #6
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	011b      	lsls	r3, r3, #4
 8000e3e:	4413      	add	r3, r2
 8000e40:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	0e1a      	lsrs	r2, r3, #24
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	3307      	adds	r3, #7
 8000e4c:	b2d2      	uxtb	r2, r2
 8000e4e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d108      	bne.n	8000e68 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	68da      	ldr	r2, [r3, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f042 0220 	orr.w	r2, r2, #32
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	e007      	b.n	8000e78 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	691a      	ldr	r2, [r3, #16]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f042 0220 	orr.w	r2, r2, #32
 8000e76:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	e006      	b.n	8000e8a <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e80:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
  }
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	371c      	adds	r7, #28
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
	...

08000e98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <__NVIC_SetPriorityGrouping+0x44>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eae:	68ba      	ldr	r2, [r7, #8]
 8000eb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eca:	4a04      	ldr	r2, [pc, #16]	; (8000edc <__NVIC_SetPriorityGrouping+0x44>)
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	60d3      	str	r3, [r2, #12]
}
 8000ed0:	bf00      	nop
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee4:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	0a1b      	lsrs	r3, r3, #8
 8000eea:	f003 0307 	and.w	r3, r3, #7
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	6039      	str	r1, [r7, #0]
 8000f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	db0a      	blt.n	8000f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	490c      	ldr	r1, [pc, #48]	; (8000f48 <__NVIC_SetPriority+0x4c>)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	0112      	lsls	r2, r2, #4
 8000f1c:	b2d2      	uxtb	r2, r2
 8000f1e:	440b      	add	r3, r1
 8000f20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f24:	e00a      	b.n	8000f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	4908      	ldr	r1, [pc, #32]	; (8000f4c <__NVIC_SetPriority+0x50>)
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	f003 030f 	and.w	r3, r3, #15
 8000f32:	3b04      	subs	r3, #4
 8000f34:	0112      	lsls	r2, r2, #4
 8000f36:	b2d2      	uxtb	r2, r2
 8000f38:	440b      	add	r3, r1
 8000f3a:	761a      	strb	r2, [r3, #24]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000e100 	.word	0xe000e100
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b089      	sub	sp, #36	; 0x24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	f1c3 0307 	rsb	r3, r3, #7
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	bf28      	it	cs
 8000f6e:	2304      	movcs	r3, #4
 8000f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3304      	adds	r3, #4
 8000f76:	2b06      	cmp	r3, #6
 8000f78:	d902      	bls.n	8000f80 <NVIC_EncodePriority+0x30>
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3b03      	subs	r3, #3
 8000f7e:	e000      	b.n	8000f82 <NVIC_EncodePriority+0x32>
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	f04f 32ff 	mov.w	r2, #4294967295
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43da      	mvns	r2, r3
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	401a      	ands	r2, r3
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f98:	f04f 31ff 	mov.w	r1, #4294967295
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa2:	43d9      	mvns	r1, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	4313      	orrs	r3, r2
         );
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3724      	adds	r7, #36	; 0x24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fc8:	d301      	bcc.n	8000fce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e00f      	b.n	8000fee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fce:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <SysTick_Config+0x40>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fd6:	210f      	movs	r1, #15
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fdc:	f7ff ff8e 	bl	8000efc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <SysTick_Config+0x40>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fe6:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <SysTick_Config+0x40>)
 8000fe8:	2207      	movs	r2, #7
 8000fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	e000e010 	.word	0xe000e010

08000ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff ff47 	bl	8000e98 <__NVIC_SetPriorityGrouping>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b086      	sub	sp, #24
 8001016:	af00      	add	r7, sp, #0
 8001018:	4603      	mov	r3, r0
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
 800101e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001024:	f7ff ff5c 	bl	8000ee0 <__NVIC_GetPriorityGrouping>
 8001028:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	68b9      	ldr	r1, [r7, #8]
 800102e:	6978      	ldr	r0, [r7, #20]
 8001030:	f7ff ff8e 	bl	8000f50 <NVIC_EncodePriority>
 8001034:	4602      	mov	r2, r0
 8001036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103a:	4611      	mov	r1, r2
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff5d 	bl	8000efc <__NVIC_SetPriority>
}
 8001042:	bf00      	nop
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ffb0 	bl	8000fb8 <SysTick_Config>
 8001058:	4603      	mov	r3, r0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001064:	b480      	push	{r7}
 8001066:	b087      	sub	sp, #28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001072:	e17f      	b.n	8001374 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	2101      	movs	r1, #1
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	fa01 f303 	lsl.w	r3, r1, r3
 8001080:	4013      	ands	r3, r2
 8001082:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2b00      	cmp	r3, #0
 8001088:	f000 8171 	beq.w	800136e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	2b02      	cmp	r3, #2
 8001092:	d003      	beq.n	800109c <HAL_GPIO_Init+0x38>
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	2b12      	cmp	r3, #18
 800109a:	d123      	bne.n	80010e4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	08da      	lsrs	r2, r3, #3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3208      	adds	r2, #8
 80010a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	f003 0307 	and.w	r3, r3, #7
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	220f      	movs	r2, #15
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	691a      	ldr	r2, [r3, #16]
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	08da      	lsrs	r2, r3, #3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	3208      	adds	r2, #8
 80010de:	6939      	ldr	r1, [r7, #16]
 80010e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	2203      	movs	r2, #3
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4013      	ands	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 0203 	and.w	r2, r3, #3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	4313      	orrs	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d00b      	beq.n	8001138 <HAL_GPIO_Init+0xd4>
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	2b02      	cmp	r3, #2
 8001126:	d007      	beq.n	8001138 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800112c:	2b11      	cmp	r3, #17
 800112e:	d003      	beq.n	8001138 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	2b12      	cmp	r3, #18
 8001136:	d130      	bne.n	800119a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	2203      	movs	r2, #3
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	68da      	ldr	r2, [r3, #12]
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4313      	orrs	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800116e:	2201      	movs	r2, #1
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43db      	mvns	r3, r3
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4013      	ands	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	091b      	lsrs	r3, r3, #4
 8001184:	f003 0201 	and.w	r2, r3, #1
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f003 0303 	and.w	r3, r3, #3
 80011a2:	2b03      	cmp	r3, #3
 80011a4:	d118      	bne.n	80011d8 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80011ac:	2201      	movs	r2, #1
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	08db      	lsrs	r3, r3, #3
 80011c2:	f003 0201 	and.w	r2, r3, #1
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	2203      	movs	r2, #3
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4313      	orrs	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001210:	2b00      	cmp	r3, #0
 8001212:	f000 80ac 	beq.w	800136e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001216:	4b5e      	ldr	r3, [pc, #376]	; (8001390 <HAL_GPIO_Init+0x32c>)
 8001218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800121a:	4a5d      	ldr	r2, [pc, #372]	; (8001390 <HAL_GPIO_Init+0x32c>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6613      	str	r3, [r2, #96]	; 0x60
 8001222:	4b5b      	ldr	r3, [pc, #364]	; (8001390 <HAL_GPIO_Init+0x32c>)
 8001224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800122e:	4a59      	ldr	r2, [pc, #356]	; (8001394 <HAL_GPIO_Init+0x330>)
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	089b      	lsrs	r3, r3, #2
 8001234:	3302      	adds	r3, #2
 8001236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	f003 0303 	and.w	r3, r3, #3
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	220f      	movs	r2, #15
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4013      	ands	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001258:	d025      	beq.n	80012a6 <HAL_GPIO_Init+0x242>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4e      	ldr	r2, [pc, #312]	; (8001398 <HAL_GPIO_Init+0x334>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d01f      	beq.n	80012a2 <HAL_GPIO_Init+0x23e>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4d      	ldr	r2, [pc, #308]	; (800139c <HAL_GPIO_Init+0x338>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d019      	beq.n	800129e <HAL_GPIO_Init+0x23a>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a4c      	ldr	r2, [pc, #304]	; (80013a0 <HAL_GPIO_Init+0x33c>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d013      	beq.n	800129a <HAL_GPIO_Init+0x236>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a4b      	ldr	r2, [pc, #300]	; (80013a4 <HAL_GPIO_Init+0x340>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d00d      	beq.n	8001296 <HAL_GPIO_Init+0x232>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a4a      	ldr	r2, [pc, #296]	; (80013a8 <HAL_GPIO_Init+0x344>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d007      	beq.n	8001292 <HAL_GPIO_Init+0x22e>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a49      	ldr	r2, [pc, #292]	; (80013ac <HAL_GPIO_Init+0x348>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d101      	bne.n	800128e <HAL_GPIO_Init+0x22a>
 800128a:	2306      	movs	r3, #6
 800128c:	e00c      	b.n	80012a8 <HAL_GPIO_Init+0x244>
 800128e:	2307      	movs	r3, #7
 8001290:	e00a      	b.n	80012a8 <HAL_GPIO_Init+0x244>
 8001292:	2305      	movs	r3, #5
 8001294:	e008      	b.n	80012a8 <HAL_GPIO_Init+0x244>
 8001296:	2304      	movs	r3, #4
 8001298:	e006      	b.n	80012a8 <HAL_GPIO_Init+0x244>
 800129a:	2303      	movs	r3, #3
 800129c:	e004      	b.n	80012a8 <HAL_GPIO_Init+0x244>
 800129e:	2302      	movs	r3, #2
 80012a0:	e002      	b.n	80012a8 <HAL_GPIO_Init+0x244>
 80012a2:	2301      	movs	r3, #1
 80012a4:	e000      	b.n	80012a8 <HAL_GPIO_Init+0x244>
 80012a6:	2300      	movs	r3, #0
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	f002 0203 	and.w	r2, r2, #3
 80012ae:	0092      	lsls	r2, r2, #2
 80012b0:	4093      	lsls	r3, r2
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012b8:	4936      	ldr	r1, [pc, #216]	; (8001394 <HAL_GPIO_Init+0x330>)
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	089b      	lsrs	r3, r3, #2
 80012be:	3302      	adds	r3, #2
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012c6:	4b3a      	ldr	r3, [pc, #232]	; (80013b0 <HAL_GPIO_Init+0x34c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	43db      	mvns	r3, r3
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	4013      	ands	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012ea:	4a31      	ldr	r2, [pc, #196]	; (80013b0 <HAL_GPIO_Init+0x34c>)
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80012f0:	4b2f      	ldr	r3, [pc, #188]	; (80013b0 <HAL_GPIO_Init+0x34c>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4013      	ands	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4313      	orrs	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001314:	4a26      	ldr	r2, [pc, #152]	; (80013b0 <HAL_GPIO_Init+0x34c>)
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800131a:	4b25      	ldr	r3, [pc, #148]	; (80013b0 <HAL_GPIO_Init+0x34c>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	43db      	mvns	r3, r3
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	4013      	ands	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4313      	orrs	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800133e:	4a1c      	ldr	r2, [pc, #112]	; (80013b0 <HAL_GPIO_Init+0x34c>)
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001344:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <HAL_GPIO_Init+0x34c>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	43db      	mvns	r3, r3
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4013      	ands	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4313      	orrs	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001368:	4a11      	ldr	r2, [pc, #68]	; (80013b0 <HAL_GPIO_Init+0x34c>)
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	3301      	adds	r3, #1
 8001372:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	fa22 f303 	lsr.w	r3, r2, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	f47f ae78 	bne.w	8001074 <HAL_GPIO_Init+0x10>
  }
}
 8001384:	bf00      	nop
 8001386:	371c      	adds	r7, #28
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	40021000 	.word	0x40021000
 8001394:	40010000 	.word	0x40010000
 8001398:	48000400 	.word	0x48000400
 800139c:	48000800 	.word	0x48000800
 80013a0:	48000c00 	.word	0x48000c00
 80013a4:	48001000 	.word	0x48001000
 80013a8:	48001400 	.word	0x48001400
 80013ac:	48001800 	.word	0x48001800
 80013b0:	40010400 	.word	0x40010400

080013b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	460b      	mov	r3, r1
 80013be:	807b      	strh	r3, [r7, #2]
 80013c0:	4613      	mov	r3, r2
 80013c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013c4:	787b      	ldrb	r3, [r7, #1]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013ca:	887a      	ldrh	r2, [r7, #2]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013d0:	e002      	b.n	80013d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013d2:	887a      	ldrh	r2, [r7, #2]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80013e8:	4b04      	ldr	r3, [pc, #16]	; (80013fc <HAL_PWREx_GetVoltageRange+0x18>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40007000 	.word	0x40007000

08001400 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800140e:	d130      	bne.n	8001472 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001410:	4b23      	ldr	r3, [pc, #140]	; (80014a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800141c:	d038      	beq.n	8001490 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800141e:	4b20      	ldr	r3, [pc, #128]	; (80014a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001426:	4a1e      	ldr	r2, [pc, #120]	; (80014a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001428:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800142c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800142e:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2232      	movs	r2, #50	; 0x32
 8001434:	fb02 f303 	mul.w	r3, r2, r3
 8001438:	4a1b      	ldr	r2, [pc, #108]	; (80014a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800143a:	fba2 2303 	umull	r2, r3, r2, r3
 800143e:	0c9b      	lsrs	r3, r3, #18
 8001440:	3301      	adds	r3, #1
 8001442:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001444:	e002      	b.n	800144c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	3b01      	subs	r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800144c:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800144e:	695b      	ldr	r3, [r3, #20]
 8001450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001458:	d102      	bne.n	8001460 <HAL_PWREx_ControlVoltageScaling+0x60>
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1f2      	bne.n	8001446 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001460:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800146c:	d110      	bne.n	8001490 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e00f      	b.n	8001492 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800147a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800147e:	d007      	beq.n	8001490 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001480:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001488:	4a05      	ldr	r2, [pc, #20]	; (80014a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800148a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800148e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40007000 	.word	0x40007000
 80014a4:	20000008 	.word	0x20000008
 80014a8:	431bde83 	.word	0x431bde83

080014ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e39d      	b.n	8001bfa <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014be:	4ba4      	ldr	r3, [pc, #656]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 030c 	and.w	r3, r3, #12
 80014c6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014c8:	4ba1      	ldr	r3, [pc, #644]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	f003 0303 	and.w	r3, r3, #3
 80014d0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0310 	and.w	r3, r3, #16
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f000 80e1 	beq.w	80016a2 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d007      	beq.n	80014f6 <HAL_RCC_OscConfig+0x4a>
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	2b0c      	cmp	r3, #12
 80014ea:	f040 8088 	bne.w	80015fe <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	f040 8084 	bne.w	80015fe <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014f6:	4b96      	ldr	r3, [pc, #600]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d005      	beq.n	800150e <HAL_RCC_OscConfig+0x62>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e375      	b.n	8001bfa <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a1a      	ldr	r2, [r3, #32]
 8001512:	4b8f      	ldr	r3, [pc, #572]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0308 	and.w	r3, r3, #8
 800151a:	2b00      	cmp	r3, #0
 800151c:	d004      	beq.n	8001528 <HAL_RCC_OscConfig+0x7c>
 800151e:	4b8c      	ldr	r3, [pc, #560]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001526:	e005      	b.n	8001534 <HAL_RCC_OscConfig+0x88>
 8001528:	4b89      	ldr	r3, [pc, #548]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 800152a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800152e:	091b      	lsrs	r3, r3, #4
 8001530:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001534:	4293      	cmp	r3, r2
 8001536:	d223      	bcs.n	8001580 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	4618      	mov	r0, r3
 800153e:	f000 fd09 	bl	8001f54 <RCC_SetFlashLatencyFromMSIRange>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e356      	b.n	8001bfa <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800154c:	4b80      	ldr	r3, [pc, #512]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a7f      	ldr	r2, [pc, #508]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 8001552:	f043 0308 	orr.w	r3, r3, #8
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	4b7d      	ldr	r3, [pc, #500]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	497a      	ldr	r1, [pc, #488]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 8001566:	4313      	orrs	r3, r2
 8001568:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800156a:	4b79      	ldr	r3, [pc, #484]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	4975      	ldr	r1, [pc, #468]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 800157a:	4313      	orrs	r3, r2
 800157c:	604b      	str	r3, [r1, #4]
 800157e:	e022      	b.n	80015c6 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001580:	4b73      	ldr	r3, [pc, #460]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a72      	ldr	r2, [pc, #456]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 8001586:	f043 0308 	orr.w	r3, r3, #8
 800158a:	6013      	str	r3, [r2, #0]
 800158c:	4b70      	ldr	r3, [pc, #448]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a1b      	ldr	r3, [r3, #32]
 8001598:	496d      	ldr	r1, [pc, #436]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 800159a:	4313      	orrs	r3, r2
 800159c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800159e:	4b6c      	ldr	r3, [pc, #432]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	021b      	lsls	r3, r3, #8
 80015ac:	4968      	ldr	r1, [pc, #416]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 fccc 	bl	8001f54 <RCC_SetFlashLatencyFromMSIRange>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e319      	b.n	8001bfa <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015c6:	f000 fc03 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 80015ca:	4601      	mov	r1, r0
 80015cc:	4b60      	ldr	r3, [pc, #384]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	091b      	lsrs	r3, r3, #4
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	4a5f      	ldr	r2, [pc, #380]	; (8001754 <HAL_RCC_OscConfig+0x2a8>)
 80015d8:	5cd3      	ldrb	r3, [r2, r3]
 80015da:	f003 031f 	and.w	r3, r3, #31
 80015de:	fa21 f303 	lsr.w	r3, r1, r3
 80015e2:	4a5d      	ldr	r2, [pc, #372]	; (8001758 <HAL_RCC_OscConfig+0x2ac>)
 80015e4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015e6:	4b5d      	ldr	r3, [pc, #372]	; (800175c <HAL_RCC_OscConfig+0x2b0>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7fe ffe0 	bl	80005b0 <HAL_InitTick>
 80015f0:	4603      	mov	r3, r0
 80015f2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d052      	beq.n	80016a0 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	e2fd      	b.n	8001bfa <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d032      	beq.n	800166c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001606:	4b52      	ldr	r3, [pc, #328]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a51      	ldr	r2, [pc, #324]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001612:	f7ff f819 	bl	8000648 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800161a:	f7ff f815 	bl	8000648 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e2e6      	b.n	8001bfa <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800162c:	4b48      	ldr	r3, [pc, #288]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0f0      	beq.n	800161a <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001638:	4b45      	ldr	r3, [pc, #276]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a44      	ldr	r2, [pc, #272]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 800163e:	f043 0308 	orr.w	r3, r3, #8
 8001642:	6013      	str	r3, [r2, #0]
 8001644:	4b42      	ldr	r3, [pc, #264]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	493f      	ldr	r1, [pc, #252]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 8001652:	4313      	orrs	r3, r2
 8001654:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001656:	4b3e      	ldr	r3, [pc, #248]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	021b      	lsls	r3, r3, #8
 8001664:	493a      	ldr	r1, [pc, #232]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 8001666:	4313      	orrs	r3, r2
 8001668:	604b      	str	r3, [r1, #4]
 800166a:	e01a      	b.n	80016a2 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800166c:	4b38      	ldr	r3, [pc, #224]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a37      	ldr	r2, [pc, #220]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 8001672:	f023 0301 	bic.w	r3, r3, #1
 8001676:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001678:	f7fe ffe6 	bl	8000648 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001680:	f7fe ffe2 	bl	8000648 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e2b3      	b.n	8001bfa <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001692:	4b2f      	ldr	r3, [pc, #188]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x1d4>
 800169e:	e000      	b.n	80016a2 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d074      	beq.n	8001798 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	2b08      	cmp	r3, #8
 80016b2:	d005      	beq.n	80016c0 <HAL_RCC_OscConfig+0x214>
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	2b0c      	cmp	r3, #12
 80016b8:	d10e      	bne.n	80016d8 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	2b03      	cmp	r3, #3
 80016be:	d10b      	bne.n	80016d8 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c0:	4b23      	ldr	r3, [pc, #140]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d064      	beq.n	8001796 <HAL_RCC_OscConfig+0x2ea>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d160      	bne.n	8001796 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e290      	b.n	8001bfa <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016e0:	d106      	bne.n	80016f0 <HAL_RCC_OscConfig+0x244>
 80016e2:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a1a      	ldr	r2, [pc, #104]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 80016e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	e01d      	b.n	800172c <HAL_RCC_OscConfig+0x280>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016f8:	d10c      	bne.n	8001714 <HAL_RCC_OscConfig+0x268>
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a14      	ldr	r2, [pc, #80]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 8001700:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001704:	6013      	str	r3, [r2, #0]
 8001706:	4b12      	ldr	r3, [pc, #72]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a11      	ldr	r2, [pc, #68]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 800170c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001710:	6013      	str	r3, [r2, #0]
 8001712:	e00b      	b.n	800172c <HAL_RCC_OscConfig+0x280>
 8001714:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a0d      	ldr	r2, [pc, #52]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 800171a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a0a      	ldr	r2, [pc, #40]	; (8001750 <HAL_RCC_OscConfig+0x2a4>)
 8001726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800172a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d01c      	beq.n	800176e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001734:	f7fe ff88 	bl	8000648 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800173a:	e011      	b.n	8001760 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800173c:	f7fe ff84 	bl	8000648 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b64      	cmp	r3, #100	; 0x64
 8001748:	d90a      	bls.n	8001760 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e255      	b.n	8001bfa <HAL_RCC_OscConfig+0x74e>
 800174e:	bf00      	nop
 8001750:	40021000 	.word	0x40021000
 8001754:	08004af4 	.word	0x08004af4
 8001758:	20000008 	.word	0x20000008
 800175c:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001760:	4bae      	ldr	r3, [pc, #696]	; (8001a1c <HAL_RCC_OscConfig+0x570>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0e7      	beq.n	800173c <HAL_RCC_OscConfig+0x290>
 800176c:	e014      	b.n	8001798 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176e:	f7fe ff6b 	bl	8000648 <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001774:	e008      	b.n	8001788 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001776:	f7fe ff67 	bl	8000648 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b64      	cmp	r3, #100	; 0x64
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e238      	b.n	8001bfa <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001788:	4ba4      	ldr	r3, [pc, #656]	; (8001a1c <HAL_RCC_OscConfig+0x570>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1f0      	bne.n	8001776 <HAL_RCC_OscConfig+0x2ca>
 8001794:	e000      	b.n	8001798 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001796:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d060      	beq.n	8001866 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	d005      	beq.n	80017b6 <HAL_RCC_OscConfig+0x30a>
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	2b0c      	cmp	r3, #12
 80017ae:	d119      	bne.n	80017e4 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d116      	bne.n	80017e4 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017b6:	4b99      	ldr	r3, [pc, #612]	; (8001a1c <HAL_RCC_OscConfig+0x570>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d005      	beq.n	80017ce <HAL_RCC_OscConfig+0x322>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e215      	b.n	8001bfa <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ce:	4b93      	ldr	r3, [pc, #588]	; (8001a1c <HAL_RCC_OscConfig+0x570>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	061b      	lsls	r3, r3, #24
 80017dc:	498f      	ldr	r1, [pc, #572]	; (8001a1c <HAL_RCC_OscConfig+0x570>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017e2:	e040      	b.n	8001866 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d023      	beq.n	8001834 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017ec:	4b8b      	ldr	r3, [pc, #556]	; (8001a1c <HAL_RCC_OscConfig+0x570>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a8a      	ldr	r2, [pc, #552]	; (8001a1c <HAL_RCC_OscConfig+0x570>)
 80017f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f8:	f7fe ff26 	bl	8000648 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001800:	f7fe ff22 	bl	8000648 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e1f3      	b.n	8001bfa <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001812:	4b82      	ldr	r3, [pc, #520]	; (8001a1c <HAL_RCC_OscConfig+0x570>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0f0      	beq.n	8001800 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181e:	4b7f      	ldr	r3, [pc, #508]	; (8001a1c <HAL_RCC_OscConfig+0x570>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	061b      	lsls	r3, r3, #24
 800182c:	497b      	ldr	r1, [pc, #492]	; (8001a1c <HAL_RCC_OscConfig+0x570>)
 800182e:	4313      	orrs	r3, r2
 8001830:	604b      	str	r3, [r1, #4]
 8001832:	e018      	b.n	8001866 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001834:	4b79      	ldr	r3, [pc, #484]	; (8001a1c <HAL_RCC_OscConfig+0x570>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a78      	ldr	r2, [pc, #480]	; (8001a1c <HAL_RCC_OscConfig+0x570>)
 800183a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800183e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001840:	f7fe ff02 	bl	8000648 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001848:	f7fe fefe 	bl	8000648 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e1cf      	b.n	8001bfa <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800185a:	4b70      	ldr	r3, [pc, #448]	; (8001a1c <HAL_RCC_OscConfig+0x570>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f0      	bne.n	8001848 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0308 	and.w	r3, r3, #8
 800186e:	2b00      	cmp	r3, #0
 8001870:	d03c      	beq.n	80018ec <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d01c      	beq.n	80018b4 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800187a:	4b68      	ldr	r3, [pc, #416]	; (8001a1c <HAL_RCC_OscConfig+0x570>)
 800187c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001880:	4a66      	ldr	r2, [pc, #408]	; (8001a1c <HAL_RCC_OscConfig+0x570>)
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800188a:	f7fe fedd 	bl	8000648 <HAL_GetTick>
 800188e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001892:	f7fe fed9 	bl	8000648 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e1aa      	b.n	8001bfa <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018a4:	4b5d      	ldr	r3, [pc, #372]	; (8001a1c <HAL_RCC_OscConfig+0x570>)
 80018a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d0ef      	beq.n	8001892 <HAL_RCC_OscConfig+0x3e6>
 80018b2:	e01b      	b.n	80018ec <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018b4:	4b59      	ldr	r3, [pc, #356]	; (8001a1c <HAL_RCC_OscConfig+0x570>)
 80018b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018ba:	4a58      	ldr	r2, [pc, #352]	; (8001a1c <HAL_RCC_OscConfig+0x570>)
 80018bc:	f023 0301 	bic.w	r3, r3, #1
 80018c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c4:	f7fe fec0 	bl	8000648 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018cc:	f7fe febc 	bl	8000648 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e18d      	b.n	8001bfa <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018de:	4b4f      	ldr	r3, [pc, #316]	; (8001a1c <HAL_RCC_OscConfig+0x570>)
 80018e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1ef      	bne.n	80018cc <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f000 80a5 	beq.w	8001a44 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018fa:	2300      	movs	r3, #0
 80018fc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80018fe:	4b47      	ldr	r3, [pc, #284]	; (8001a1c <HAL_RCC_OscConfig+0x570>)
 8001900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10d      	bne.n	8001926 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800190a:	4b44      	ldr	r3, [pc, #272]	; (8001a1c <HAL_RCC_OscConfig+0x570>)
 800190c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190e:	4a43      	ldr	r2, [pc, #268]	; (8001a1c <HAL_RCC_OscConfig+0x570>)
 8001910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001914:	6593      	str	r3, [r2, #88]	; 0x58
 8001916:	4b41      	ldr	r3, [pc, #260]	; (8001a1c <HAL_RCC_OscConfig+0x570>)
 8001918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001922:	2301      	movs	r3, #1
 8001924:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001926:	4b3e      	ldr	r3, [pc, #248]	; (8001a20 <HAL_RCC_OscConfig+0x574>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800192e:	2b00      	cmp	r3, #0
 8001930:	d118      	bne.n	8001964 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001932:	4b3b      	ldr	r3, [pc, #236]	; (8001a20 <HAL_RCC_OscConfig+0x574>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a3a      	ldr	r2, [pc, #232]	; (8001a20 <HAL_RCC_OscConfig+0x574>)
 8001938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800193c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800193e:	f7fe fe83 	bl	8000648 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001946:	f7fe fe7f 	bl	8000648 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e150      	b.n	8001bfa <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001958:	4b31      	ldr	r3, [pc, #196]	; (8001a20 <HAL_RCC_OscConfig+0x574>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0f0      	beq.n	8001946 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d108      	bne.n	800197e <HAL_RCC_OscConfig+0x4d2>
 800196c:	4b2b      	ldr	r3, [pc, #172]	; (8001a1c <HAL_RCC_OscConfig+0x570>)
 800196e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001972:	4a2a      	ldr	r2, [pc, #168]	; (8001a1c <HAL_RCC_OscConfig+0x570>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800197c:	e024      	b.n	80019c8 <HAL_RCC_OscConfig+0x51c>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	2b05      	cmp	r3, #5
 8001984:	d110      	bne.n	80019a8 <HAL_RCC_OscConfig+0x4fc>
 8001986:	4b25      	ldr	r3, [pc, #148]	; (8001a1c <HAL_RCC_OscConfig+0x570>)
 8001988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800198c:	4a23      	ldr	r2, [pc, #140]	; (8001a1c <HAL_RCC_OscConfig+0x570>)
 800198e:	f043 0304 	orr.w	r3, r3, #4
 8001992:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001996:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <HAL_RCC_OscConfig+0x570>)
 8001998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800199c:	4a1f      	ldr	r2, [pc, #124]	; (8001a1c <HAL_RCC_OscConfig+0x570>)
 800199e:	f043 0301 	orr.w	r3, r3, #1
 80019a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019a6:	e00f      	b.n	80019c8 <HAL_RCC_OscConfig+0x51c>
 80019a8:	4b1c      	ldr	r3, [pc, #112]	; (8001a1c <HAL_RCC_OscConfig+0x570>)
 80019aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ae:	4a1b      	ldr	r2, [pc, #108]	; (8001a1c <HAL_RCC_OscConfig+0x570>)
 80019b0:	f023 0301 	bic.w	r3, r3, #1
 80019b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019b8:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <HAL_RCC_OscConfig+0x570>)
 80019ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019be:	4a17      	ldr	r2, [pc, #92]	; (8001a1c <HAL_RCC_OscConfig+0x570>)
 80019c0:	f023 0304 	bic.w	r3, r3, #4
 80019c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d016      	beq.n	80019fe <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d0:	f7fe fe3a 	bl	8000648 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019d6:	e00a      	b.n	80019ee <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019d8:	f7fe fe36 	bl	8000648 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e105      	b.n	8001bfa <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019ee:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <HAL_RCC_OscConfig+0x570>)
 80019f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0ed      	beq.n	80019d8 <HAL_RCC_OscConfig+0x52c>
 80019fc:	e019      	b.n	8001a32 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fe:	f7fe fe23 	bl	8000648 <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a04:	e00e      	b.n	8001a24 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a06:	f7fe fe1f 	bl	8000648 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d905      	bls.n	8001a24 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e0ee      	b.n	8001bfa <HAL_RCC_OscConfig+0x74e>
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a24:	4b77      	ldr	r3, [pc, #476]	; (8001c04 <HAL_RCC_OscConfig+0x758>)
 8001a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1e9      	bne.n	8001a06 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a32:	7ffb      	ldrb	r3, [r7, #31]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d105      	bne.n	8001a44 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a38:	4b72      	ldr	r3, [pc, #456]	; (8001c04 <HAL_RCC_OscConfig+0x758>)
 8001a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3c:	4a71      	ldr	r2, [pc, #452]	; (8001c04 <HAL_RCC_OscConfig+0x758>)
 8001a3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a42:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 80d5 	beq.w	8001bf8 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	2b0c      	cmp	r3, #12
 8001a52:	f000 808e 	beq.w	8001b72 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d15b      	bne.n	8001b16 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a5e:	4b69      	ldr	r3, [pc, #420]	; (8001c04 <HAL_RCC_OscConfig+0x758>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a68      	ldr	r2, [pc, #416]	; (8001c04 <HAL_RCC_OscConfig+0x758>)
 8001a64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6a:	f7fe fded 	bl	8000648 <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a72:	f7fe fde9 	bl	8000648 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e0ba      	b.n	8001bfa <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a84:	4b5f      	ldr	r3, [pc, #380]	; (8001c04 <HAL_RCC_OscConfig+0x758>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1f0      	bne.n	8001a72 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a90:	4b5c      	ldr	r3, [pc, #368]	; (8001c04 <HAL_RCC_OscConfig+0x758>)
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	4b5c      	ldr	r3, [pc, #368]	; (8001c08 <HAL_RCC_OscConfig+0x75c>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001aa0:	3a01      	subs	r2, #1
 8001aa2:	0112      	lsls	r2, r2, #4
 8001aa4:	4311      	orrs	r1, r2
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001aaa:	0212      	lsls	r2, r2, #8
 8001aac:	4311      	orrs	r1, r2
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ab2:	0852      	lsrs	r2, r2, #1
 8001ab4:	3a01      	subs	r2, #1
 8001ab6:	0552      	lsls	r2, r2, #21
 8001ab8:	4311      	orrs	r1, r2
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001abe:	0852      	lsrs	r2, r2, #1
 8001ac0:	3a01      	subs	r2, #1
 8001ac2:	0652      	lsls	r2, r2, #25
 8001ac4:	4311      	orrs	r1, r2
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001aca:	0912      	lsrs	r2, r2, #4
 8001acc:	0452      	lsls	r2, r2, #17
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	494c      	ldr	r1, [pc, #304]	; (8001c04 <HAL_RCC_OscConfig+0x758>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ad6:	4b4b      	ldr	r3, [pc, #300]	; (8001c04 <HAL_RCC_OscConfig+0x758>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a4a      	ldr	r2, [pc, #296]	; (8001c04 <HAL_RCC_OscConfig+0x758>)
 8001adc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ae0:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ae2:	4b48      	ldr	r3, [pc, #288]	; (8001c04 <HAL_RCC_OscConfig+0x758>)
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	4a47      	ldr	r2, [pc, #284]	; (8001c04 <HAL_RCC_OscConfig+0x758>)
 8001ae8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aec:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aee:	f7fe fdab 	bl	8000648 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af6:	f7fe fda7 	bl	8000648 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e078      	b.n	8001bfa <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b08:	4b3e      	ldr	r3, [pc, #248]	; (8001c04 <HAL_RCC_OscConfig+0x758>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0f0      	beq.n	8001af6 <HAL_RCC_OscConfig+0x64a>
 8001b14:	e070      	b.n	8001bf8 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b16:	4b3b      	ldr	r3, [pc, #236]	; (8001c04 <HAL_RCC_OscConfig+0x758>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a3a      	ldr	r2, [pc, #232]	; (8001c04 <HAL_RCC_OscConfig+0x758>)
 8001b1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b20:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001b22:	4b38      	ldr	r3, [pc, #224]	; (8001c04 <HAL_RCC_OscConfig+0x758>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d105      	bne.n	8001b3a <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001b2e:	4b35      	ldr	r3, [pc, #212]	; (8001c04 <HAL_RCC_OscConfig+0x758>)
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	4a34      	ldr	r2, [pc, #208]	; (8001c04 <HAL_RCC_OscConfig+0x758>)
 8001b34:	f023 0303 	bic.w	r3, r3, #3
 8001b38:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b3a:	4b32      	ldr	r3, [pc, #200]	; (8001c04 <HAL_RCC_OscConfig+0x758>)
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	4a31      	ldr	r2, [pc, #196]	; (8001c04 <HAL_RCC_OscConfig+0x758>)
 8001b40:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001b44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b48:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4a:	f7fe fd7d 	bl	8000648 <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b52:	f7fe fd79 	bl	8000648 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e04a      	b.n	8001bfa <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b64:	4b27      	ldr	r3, [pc, #156]	; (8001c04 <HAL_RCC_OscConfig+0x758>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1f0      	bne.n	8001b52 <HAL_RCC_OscConfig+0x6a6>
 8001b70:	e042      	b.n	8001bf8 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d101      	bne.n	8001b7e <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e03d      	b.n	8001bfa <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001b7e:	4b21      	ldr	r3, [pc, #132]	; (8001c04 <HAL_RCC_OscConfig+0x758>)
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	f003 0203 	and.w	r2, r3, #3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d130      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d127      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bae:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d11f      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bbe:	2a07      	cmp	r2, #7
 8001bc0:	bf14      	ite	ne
 8001bc2:	2201      	movne	r2, #1
 8001bc4:	2200      	moveq	r2, #0
 8001bc6:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d113      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd6:	085b      	lsrs	r3, r3, #1
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d109      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	085b      	lsrs	r3, r3, #1
 8001bec:	3b01      	subs	r3, #1
 8001bee:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d001      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e000      	b.n	8001bfa <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3720      	adds	r7, #32
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40021000 	.word	0x40021000
 8001c08:	f99d808c 	.word	0xf99d808c

08001c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e0c8      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c20:	4b66      	ldr	r3, [pc, #408]	; (8001dbc <HAL_RCC_ClockConfig+0x1b0>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d910      	bls.n	8001c50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2e:	4b63      	ldr	r3, [pc, #396]	; (8001dbc <HAL_RCC_ClockConfig+0x1b0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f023 0207 	bic.w	r2, r3, #7
 8001c36:	4961      	ldr	r1, [pc, #388]	; (8001dbc <HAL_RCC_ClockConfig+0x1b0>)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3e:	4b5f      	ldr	r3, [pc, #380]	; (8001dbc <HAL_RCC_ClockConfig+0x1b0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d001      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e0b0      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d04c      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b03      	cmp	r3, #3
 8001c62:	d107      	bne.n	8001c74 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c64:	4b56      	ldr	r3, [pc, #344]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d121      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e09e      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d107      	bne.n	8001c8c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c7c:	4b50      	ldr	r3, [pc, #320]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d115      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e092      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d107      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c94:	4b4a      	ldr	r3, [pc, #296]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d109      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e086      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ca4:	4b46      	ldr	r3, [pc, #280]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e07e      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cb4:	4b42      	ldr	r3, [pc, #264]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f023 0203 	bic.w	r2, r3, #3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	493f      	ldr	r1, [pc, #252]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cc6:	f7fe fcbf 	bl	8000648 <HAL_GetTick>
 8001cca:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ccc:	e00a      	b.n	8001ce4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cce:	f7fe fcbb 	bl	8000648 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e066      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce4:	4b36      	ldr	r3, [pc, #216]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 020c 	and.w	r2, r3, #12
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d1eb      	bne.n	8001cce <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d008      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d02:	4b2f      	ldr	r3, [pc, #188]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	492c      	ldr	r1, [pc, #176]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d14:	4b29      	ldr	r3, [pc, #164]	; (8001dbc <HAL_RCC_ClockConfig+0x1b0>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d210      	bcs.n	8001d44 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d22:	4b26      	ldr	r3, [pc, #152]	; (8001dbc <HAL_RCC_ClockConfig+0x1b0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f023 0207 	bic.w	r2, r3, #7
 8001d2a:	4924      	ldr	r1, [pc, #144]	; (8001dbc <HAL_RCC_ClockConfig+0x1b0>)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d32:	4b22      	ldr	r3, [pc, #136]	; (8001dbc <HAL_RCC_ClockConfig+0x1b0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d001      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e036      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d008      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d50:	4b1b      	ldr	r3, [pc, #108]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	4918      	ldr	r1, [pc, #96]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d009      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d6e:	4b14      	ldr	r3, [pc, #80]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	4910      	ldr	r1, [pc, #64]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d82:	f000 f825 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8001d86:	4601      	mov	r1, r0
 8001d88:	4b0d      	ldr	r3, [pc, #52]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	4a0c      	ldr	r2, [pc, #48]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d94:	5cd3      	ldrb	r3, [r2, r3]
 8001d96:	f003 031f 	and.w	r3, r3, #31
 8001d9a:	fa21 f303 	lsr.w	r3, r1, r3
 8001d9e:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001da0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001da2:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fc02 	bl	80005b0 <HAL_InitTick>
 8001dac:	4603      	mov	r3, r0
 8001dae:	72fb      	strb	r3, [r7, #11]

  return status;
 8001db0:	7afb      	ldrb	r3, [r7, #11]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40022000 	.word	0x40022000
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	08004af4 	.word	0x08004af4
 8001dc8:	20000008 	.word	0x20000008
 8001dcc:	20000000 	.word	0x20000000

08001dd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b089      	sub	sp, #36	; 0x24
 8001dd4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dde:	4b3d      	ldr	r3, [pc, #244]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 030c 	and.w	r3, r3, #12
 8001de6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001de8:	4b3a      	ldr	r3, [pc, #232]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f003 0303 	and.w	r3, r3, #3
 8001df0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d005      	beq.n	8001e04 <HAL_RCC_GetSysClockFreq+0x34>
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	2b0c      	cmp	r3, #12
 8001dfc:	d121      	bne.n	8001e42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d11e      	bne.n	8001e42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e04:	4b33      	ldr	r3, [pc, #204]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0308 	and.w	r3, r3, #8
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d107      	bne.n	8001e20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e10:	4b30      	ldr	r3, [pc, #192]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e16:	0a1b      	lsrs	r3, r3, #8
 8001e18:	f003 030f 	and.w	r3, r3, #15
 8001e1c:	61fb      	str	r3, [r7, #28]
 8001e1e:	e005      	b.n	8001e2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e20:	4b2c      	ldr	r3, [pc, #176]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	091b      	lsrs	r3, r3, #4
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e2c:	4a2a      	ldr	r2, [pc, #168]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d10d      	bne.n	8001e58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e40:	e00a      	b.n	8001e58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d102      	bne.n	8001e4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e48:	4b24      	ldr	r3, [pc, #144]	; (8001edc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e4a:	61bb      	str	r3, [r7, #24]
 8001e4c:	e004      	b.n	8001e58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d101      	bne.n	8001e58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e54:	4b22      	ldr	r3, [pc, #136]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	2b0c      	cmp	r3, #12
 8001e5c:	d133      	bne.n	8001ec6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e5e:	4b1d      	ldr	r3, [pc, #116]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d002      	beq.n	8001e74 <HAL_RCC_GetSysClockFreq+0xa4>
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	d003      	beq.n	8001e7a <HAL_RCC_GetSysClockFreq+0xaa>
 8001e72:	e005      	b.n	8001e80 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e74:	4b19      	ldr	r3, [pc, #100]	; (8001edc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e76:	617b      	str	r3, [r7, #20]
      break;
 8001e78:	e005      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e7a:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e7c:	617b      	str	r3, [r7, #20]
      break;
 8001e7e:	e002      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	617b      	str	r3, [r7, #20]
      break;
 8001e84:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e86:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	091b      	lsrs	r3, r3, #4
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	3301      	adds	r3, #1
 8001e92:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e94:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	0a1b      	lsrs	r3, r3, #8
 8001e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	fb02 f203 	mul.w	r2, r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eaa:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001eac:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	0e5b      	lsrs	r3, r3, #25
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ec6:	69bb      	ldr	r3, [r7, #24]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3724      	adds	r7, #36	; 0x24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	08004b0c 	.word	0x08004b0c
 8001edc:	00f42400 	.word	0x00f42400
 8001ee0:	007a1200 	.word	0x007a1200

08001ee4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ee8:	4b03      	ldr	r3, [pc, #12]	; (8001ef8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eea:	681b      	ldr	r3, [r3, #0]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	20000008 	.word	0x20000008

08001efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f00:	f7ff fff0 	bl	8001ee4 <HAL_RCC_GetHCLKFreq>
 8001f04:	4601      	mov	r1, r0
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	0a1b      	lsrs	r3, r3, #8
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	4a04      	ldr	r2, [pc, #16]	; (8001f24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f12:	5cd3      	ldrb	r3, [r2, r3]
 8001f14:	f003 031f 	and.w	r3, r3, #31
 8001f18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40021000 	.word	0x40021000
 8001f24:	08004b04 	.word	0x08004b04

08001f28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f2c:	f7ff ffda 	bl	8001ee4 <HAL_RCC_GetHCLKFreq>
 8001f30:	4601      	mov	r1, r0
 8001f32:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	0adb      	lsrs	r3, r3, #11
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	4a04      	ldr	r2, [pc, #16]	; (8001f50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f3e:	5cd3      	ldrb	r3, [r2, r3]
 8001f40:	f003 031f 	and.w	r3, r3, #31
 8001f44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	08004b04 	.word	0x08004b04

08001f54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f60:	4b2a      	ldr	r3, [pc, #168]	; (800200c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f6c:	f7ff fa3a 	bl	80013e4 <HAL_PWREx_GetVoltageRange>
 8001f70:	6178      	str	r0, [r7, #20]
 8001f72:	e014      	b.n	8001f9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f74:	4b25      	ldr	r3, [pc, #148]	; (800200c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f78:	4a24      	ldr	r2, [pc, #144]	; (800200c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f80:	4b22      	ldr	r3, [pc, #136]	; (800200c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f8c:	f7ff fa2a 	bl	80013e4 <HAL_PWREx_GetVoltageRange>
 8001f90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f92:	4b1e      	ldr	r3, [pc, #120]	; (800200c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f96:	4a1d      	ldr	r2, [pc, #116]	; (800200c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fa4:	d10b      	bne.n	8001fbe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b80      	cmp	r3, #128	; 0x80
 8001faa:	d919      	bls.n	8001fe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2ba0      	cmp	r3, #160	; 0xa0
 8001fb0:	d902      	bls.n	8001fb8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	e013      	b.n	8001fe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fb8:	2301      	movs	r3, #1
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	e010      	b.n	8001fe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b80      	cmp	r3, #128	; 0x80
 8001fc2:	d902      	bls.n	8001fca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	e00a      	b.n	8001fe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b80      	cmp	r3, #128	; 0x80
 8001fce:	d102      	bne.n	8001fd6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	e004      	b.n	8001fe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b70      	cmp	r3, #112	; 0x70
 8001fda:	d101      	bne.n	8001fe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fdc:	2301      	movs	r3, #1
 8001fde:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f023 0207 	bic.w	r2, r3, #7
 8001fe8:	4909      	ldr	r1, [pc, #36]	; (8002010 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ff0:	4b07      	ldr	r3, [pc, #28]	; (8002010 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d001      	beq.n	8002002 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e000      	b.n	8002004 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3718      	adds	r7, #24
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40021000 	.word	0x40021000
 8002010:	40022000 	.word	0x40022000

08002014 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800201c:	2300      	movs	r3, #0
 800201e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002020:	2300      	movs	r3, #0
 8002022:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800202c:	2b00      	cmp	r3, #0
 800202e:	d03f      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002034:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002038:	d01c      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800203a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800203e:	d802      	bhi.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00e      	beq.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002044:	e01f      	b.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002046:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800204a:	d003      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800204c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002050:	d01c      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002052:	e018      	b.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002054:	4b85      	ldr	r3, [pc, #532]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	4a84      	ldr	r2, [pc, #528]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800205a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800205e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002060:	e015      	b.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3304      	adds	r3, #4
 8002066:	2100      	movs	r1, #0
 8002068:	4618      	mov	r0, r3
 800206a:	f000 fab9 	bl	80025e0 <RCCEx_PLLSAI1_Config>
 800206e:	4603      	mov	r3, r0
 8002070:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002072:	e00c      	b.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3320      	adds	r3, #32
 8002078:	2100      	movs	r1, #0
 800207a:	4618      	mov	r0, r3
 800207c:	f000 fba0 	bl	80027c0 <RCCEx_PLLSAI2_Config>
 8002080:	4603      	mov	r3, r0
 8002082:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002084:	e003      	b.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	74fb      	strb	r3, [r7, #19]
      break;
 800208a:	e000      	b.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800208c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800208e:	7cfb      	ldrb	r3, [r7, #19]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10b      	bne.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002094:	4b75      	ldr	r3, [pc, #468]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020a2:	4972      	ldr	r1, [pc, #456]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020aa:	e001      	b.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020ac:	7cfb      	ldrb	r3, [r7, #19]
 80020ae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d03f      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020c4:	d01c      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80020c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020ca:	d802      	bhi.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00e      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0xda>
 80020d0:	e01f      	b.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80020d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020d6:	d003      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80020d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80020dc:	d01c      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80020de:	e018      	b.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020e0:	4b62      	ldr	r3, [pc, #392]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	4a61      	ldr	r2, [pc, #388]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020ec:	e015      	b.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	3304      	adds	r3, #4
 80020f2:	2100      	movs	r1, #0
 80020f4:	4618      	mov	r0, r3
 80020f6:	f000 fa73 	bl	80025e0 <RCCEx_PLLSAI1_Config>
 80020fa:	4603      	mov	r3, r0
 80020fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020fe:	e00c      	b.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3320      	adds	r3, #32
 8002104:	2100      	movs	r1, #0
 8002106:	4618      	mov	r0, r3
 8002108:	f000 fb5a 	bl	80027c0 <RCCEx_PLLSAI2_Config>
 800210c:	4603      	mov	r3, r0
 800210e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002110:	e003      	b.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	74fb      	strb	r3, [r7, #19]
      break;
 8002116:	e000      	b.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002118:	bf00      	nop
    }

    if(ret == HAL_OK)
 800211a:	7cfb      	ldrb	r3, [r7, #19]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10b      	bne.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002120:	4b52      	ldr	r3, [pc, #328]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002126:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800212e:	494f      	ldr	r1, [pc, #316]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002130:	4313      	orrs	r3, r2
 8002132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002136:	e001      	b.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002138:	7cfb      	ldrb	r3, [r7, #19]
 800213a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 80a0 	beq.w	800228a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800214a:	2300      	movs	r3, #0
 800214c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800214e:	4b47      	ldr	r3, [pc, #284]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800215e:	2300      	movs	r3, #0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00d      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002164:	4b41      	ldr	r3, [pc, #260]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002168:	4a40      	ldr	r2, [pc, #256]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800216a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800216e:	6593      	str	r3, [r2, #88]	; 0x58
 8002170:	4b3e      	ldr	r3, [pc, #248]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800217c:	2301      	movs	r3, #1
 800217e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002180:	4b3b      	ldr	r3, [pc, #236]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a3a      	ldr	r2, [pc, #232]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800218a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800218c:	f7fe fa5c 	bl	8000648 <HAL_GetTick>
 8002190:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002192:	e009      	b.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002194:	f7fe fa58 	bl	8000648 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d902      	bls.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	74fb      	strb	r3, [r7, #19]
        break;
 80021a6:	e005      	b.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021a8:	4b31      	ldr	r3, [pc, #196]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0ef      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80021b4:	7cfb      	ldrb	r3, [r7, #19]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d15c      	bne.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021ba:	4b2c      	ldr	r3, [pc, #176]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d01f      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d019      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021d8:	4b24      	ldr	r3, [pc, #144]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021e4:	4b21      	ldr	r3, [pc, #132]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ea:	4a20      	ldr	r2, [pc, #128]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021f4:	4b1d      	ldr	r3, [pc, #116]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021fa:	4a1c      	ldr	r2, [pc, #112]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002200:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002204:	4a19      	ldr	r2, [pc, #100]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d016      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002216:	f7fe fa17 	bl	8000648 <HAL_GetTick>
 800221a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800221c:	e00b      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800221e:	f7fe fa13 	bl	8000648 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	f241 3288 	movw	r2, #5000	; 0x1388
 800222c:	4293      	cmp	r3, r2
 800222e:	d902      	bls.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	74fb      	strb	r3, [r7, #19]
            break;
 8002234:	e006      	b.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002236:	4b0d      	ldr	r3, [pc, #52]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0ec      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002244:	7cfb      	ldrb	r3, [r7, #19]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10c      	bne.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800224a:	4b08      	ldr	r3, [pc, #32]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800224c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002250:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800225a:	4904      	ldr	r1, [pc, #16]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800225c:	4313      	orrs	r3, r2
 800225e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002262:	e009      	b.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002264:	7cfb      	ldrb	r3, [r7, #19]
 8002266:	74bb      	strb	r3, [r7, #18]
 8002268:	e006      	b.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800226a:	bf00      	nop
 800226c:	40021000 	.word	0x40021000
 8002270:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002274:	7cfb      	ldrb	r3, [r7, #19]
 8002276:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002278:	7c7b      	ldrb	r3, [r7, #17]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d105      	bne.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800227e:	4b9e      	ldr	r3, [pc, #632]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002282:	4a9d      	ldr	r2, [pc, #628]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002284:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002288:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00a      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002296:	4b98      	ldr	r3, [pc, #608]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229c:	f023 0203 	bic.w	r2, r3, #3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a4:	4994      	ldr	r1, [pc, #592]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00a      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022b8:	4b8f      	ldr	r3, [pc, #572]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022be:	f023 020c 	bic.w	r2, r3, #12
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c6:	498c      	ldr	r1, [pc, #560]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0304 	and.w	r3, r3, #4
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00a      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022da:	4b87      	ldr	r3, [pc, #540]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e8:	4983      	ldr	r1, [pc, #524]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0308 	and.w	r3, r3, #8
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00a      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022fc:	4b7e      	ldr	r3, [pc, #504]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002302:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230a:	497b      	ldr	r1, [pc, #492]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800230c:	4313      	orrs	r3, r2
 800230e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0310 	and.w	r3, r3, #16
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00a      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800231e:	4b76      	ldr	r3, [pc, #472]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002324:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800232c:	4972      	ldr	r1, [pc, #456]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800232e:	4313      	orrs	r3, r2
 8002330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0320 	and.w	r3, r3, #32
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00a      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002340:	4b6d      	ldr	r3, [pc, #436]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002346:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234e:	496a      	ldr	r1, [pc, #424]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002350:	4313      	orrs	r3, r2
 8002352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00a      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002362:	4b65      	ldr	r3, [pc, #404]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002368:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002370:	4961      	ldr	r1, [pc, #388]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002372:	4313      	orrs	r3, r2
 8002374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00a      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002384:	4b5c      	ldr	r3, [pc, #368]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002392:	4959      	ldr	r1, [pc, #356]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002394:	4313      	orrs	r3, r2
 8002396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00a      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023a6:	4b54      	ldr	r3, [pc, #336]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023b4:	4950      	ldr	r1, [pc, #320]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00a      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023c8:	4b4b      	ldr	r3, [pc, #300]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d6:	4948      	ldr	r1, [pc, #288]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00a      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023ea:	4b43      	ldr	r3, [pc, #268]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f8:	493f      	ldr	r1, [pc, #252]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d028      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800240c:	4b3a      	ldr	r3, [pc, #232]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002412:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800241a:	4937      	ldr	r1, [pc, #220]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800241c:	4313      	orrs	r3, r2
 800241e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002426:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800242a:	d106      	bne.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800242c:	4b32      	ldr	r3, [pc, #200]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	4a31      	ldr	r2, [pc, #196]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002432:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002436:	60d3      	str	r3, [r2, #12]
 8002438:	e011      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800243e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002442:	d10c      	bne.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3304      	adds	r3, #4
 8002448:	2101      	movs	r1, #1
 800244a:	4618      	mov	r0, r3
 800244c:	f000 f8c8 	bl	80025e0 <RCCEx_PLLSAI1_Config>
 8002450:	4603      	mov	r3, r0
 8002452:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002454:	7cfb      	ldrb	r3, [r7, #19]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800245a:	7cfb      	ldrb	r3, [r7, #19]
 800245c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d028      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800246a:	4b23      	ldr	r3, [pc, #140]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800246c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002470:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002478:	491f      	ldr	r1, [pc, #124]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800247a:	4313      	orrs	r3, r2
 800247c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002484:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002488:	d106      	bne.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800248a:	4b1b      	ldr	r3, [pc, #108]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	4a1a      	ldr	r2, [pc, #104]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002490:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002494:	60d3      	str	r3, [r2, #12]
 8002496:	e011      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024a0:	d10c      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	3304      	adds	r3, #4
 80024a6:	2101      	movs	r1, #1
 80024a8:	4618      	mov	r0, r3
 80024aa:	f000 f899 	bl	80025e0 <RCCEx_PLLSAI1_Config>
 80024ae:	4603      	mov	r3, r0
 80024b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024b2:	7cfb      	ldrb	r3, [r7, #19]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80024b8:	7cfb      	ldrb	r3, [r7, #19]
 80024ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d02b      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024c8:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024d6:	4908      	ldr	r1, [pc, #32]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024e6:	d109      	bne.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024e8:	4b03      	ldr	r3, [pc, #12]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	4a02      	ldr	r2, [pc, #8]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024f2:	60d3      	str	r3, [r2, #12]
 80024f4:	e014      	b.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80024f6:	bf00      	nop
 80024f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002500:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002504:	d10c      	bne.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	3304      	adds	r3, #4
 800250a:	2101      	movs	r1, #1
 800250c:	4618      	mov	r0, r3
 800250e:	f000 f867 	bl	80025e0 <RCCEx_PLLSAI1_Config>
 8002512:	4603      	mov	r3, r0
 8002514:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002516:	7cfb      	ldrb	r3, [r7, #19]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800251c:	7cfb      	ldrb	r3, [r7, #19]
 800251e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d02f      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800252c:	4b2b      	ldr	r3, [pc, #172]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800252e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002532:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800253a:	4928      	ldr	r1, [pc, #160]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800253c:	4313      	orrs	r3, r2
 800253e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002546:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800254a:	d10d      	bne.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3304      	adds	r3, #4
 8002550:	2102      	movs	r1, #2
 8002552:	4618      	mov	r0, r3
 8002554:	f000 f844 	bl	80025e0 <RCCEx_PLLSAI1_Config>
 8002558:	4603      	mov	r3, r0
 800255a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800255c:	7cfb      	ldrb	r3, [r7, #19]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d014      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002562:	7cfb      	ldrb	r3, [r7, #19]
 8002564:	74bb      	strb	r3, [r7, #18]
 8002566:	e011      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800256c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002570:	d10c      	bne.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3320      	adds	r3, #32
 8002576:	2102      	movs	r1, #2
 8002578:	4618      	mov	r0, r3
 800257a:	f000 f921 	bl	80027c0 <RCCEx_PLLSAI2_Config>
 800257e:	4603      	mov	r3, r0
 8002580:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002582:	7cfb      	ldrb	r3, [r7, #19]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002588:	7cfb      	ldrb	r3, [r7, #19]
 800258a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00a      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002598:	4b10      	ldr	r3, [pc, #64]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800259a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025a6:	490d      	ldr	r1, [pc, #52]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00b      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025ba:	4b08      	ldr	r3, [pc, #32]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80025bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025ca:	4904      	ldr	r1, [pc, #16]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80025d2:	7cbb      	ldrb	r3, [r7, #18]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3718      	adds	r7, #24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40021000 	.word	0x40021000

080025e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025ea:	2300      	movs	r3, #0
 80025ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025ee:	4b73      	ldr	r3, [pc, #460]	; (80027bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d018      	beq.n	800262c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80025fa:	4b70      	ldr	r3, [pc, #448]	; (80027bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	f003 0203 	and.w	r2, r3, #3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	429a      	cmp	r2, r3
 8002608:	d10d      	bne.n	8002626 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
       ||
 800260e:	2b00      	cmp	r3, #0
 8002610:	d009      	beq.n	8002626 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002612:	4b6a      	ldr	r3, [pc, #424]	; (80027bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	091b      	lsrs	r3, r3, #4
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
       ||
 8002622:	429a      	cmp	r2, r3
 8002624:	d044      	beq.n	80026b0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	73fb      	strb	r3, [r7, #15]
 800262a:	e041      	b.n	80026b0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b02      	cmp	r3, #2
 8002632:	d00c      	beq.n	800264e <RCCEx_PLLSAI1_Config+0x6e>
 8002634:	2b03      	cmp	r3, #3
 8002636:	d013      	beq.n	8002660 <RCCEx_PLLSAI1_Config+0x80>
 8002638:	2b01      	cmp	r3, #1
 800263a:	d120      	bne.n	800267e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800263c:	4b5f      	ldr	r3, [pc, #380]	; (80027bc <RCCEx_PLLSAI1_Config+0x1dc>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d11d      	bne.n	8002684 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800264c:	e01a      	b.n	8002684 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800264e:	4b5b      	ldr	r3, [pc, #364]	; (80027bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002656:	2b00      	cmp	r3, #0
 8002658:	d116      	bne.n	8002688 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800265e:	e013      	b.n	8002688 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002660:	4b56      	ldr	r3, [pc, #344]	; (80027bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10f      	bne.n	800268c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800266c:	4b53      	ldr	r3, [pc, #332]	; (80027bc <RCCEx_PLLSAI1_Config+0x1dc>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d109      	bne.n	800268c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800267c:	e006      	b.n	800268c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	73fb      	strb	r3, [r7, #15]
      break;
 8002682:	e004      	b.n	800268e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002684:	bf00      	nop
 8002686:	e002      	b.n	800268e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002688:	bf00      	nop
 800268a:	e000      	b.n	800268e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800268c:	bf00      	nop
    }

    if(status == HAL_OK)
 800268e:	7bfb      	ldrb	r3, [r7, #15]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10d      	bne.n	80026b0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002694:	4b49      	ldr	r3, [pc, #292]	; (80027bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6819      	ldr	r1, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	3b01      	subs	r3, #1
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	430b      	orrs	r3, r1
 80026aa:	4944      	ldr	r1, [pc, #272]	; (80027bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d17d      	bne.n	80027b2 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80026b6:	4b41      	ldr	r3, [pc, #260]	; (80027bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a40      	ldr	r2, [pc, #256]	; (80027bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80026bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80026c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026c2:	f7fd ffc1 	bl	8000648 <HAL_GetTick>
 80026c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026c8:	e009      	b.n	80026de <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026ca:	f7fd ffbd 	bl	8000648 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d902      	bls.n	80026de <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	73fb      	strb	r3, [r7, #15]
        break;
 80026dc:	e005      	b.n	80026ea <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026de:	4b37      	ldr	r3, [pc, #220]	; (80027bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1ef      	bne.n	80026ca <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d160      	bne.n	80027b2 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d111      	bne.n	800271a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026f6:	4b31      	ldr	r3, [pc, #196]	; (80027bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80026fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6892      	ldr	r2, [r2, #8]
 8002706:	0211      	lsls	r1, r2, #8
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	68d2      	ldr	r2, [r2, #12]
 800270c:	0912      	lsrs	r2, r2, #4
 800270e:	0452      	lsls	r2, r2, #17
 8002710:	430a      	orrs	r2, r1
 8002712:	492a      	ldr	r1, [pc, #168]	; (80027bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002714:	4313      	orrs	r3, r2
 8002716:	610b      	str	r3, [r1, #16]
 8002718:	e027      	b.n	800276a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d112      	bne.n	8002746 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002720:	4b26      	ldr	r3, [pc, #152]	; (80027bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002728:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6892      	ldr	r2, [r2, #8]
 8002730:	0211      	lsls	r1, r2, #8
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6912      	ldr	r2, [r2, #16]
 8002736:	0852      	lsrs	r2, r2, #1
 8002738:	3a01      	subs	r2, #1
 800273a:	0552      	lsls	r2, r2, #21
 800273c:	430a      	orrs	r2, r1
 800273e:	491f      	ldr	r1, [pc, #124]	; (80027bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002740:	4313      	orrs	r3, r2
 8002742:	610b      	str	r3, [r1, #16]
 8002744:	e011      	b.n	800276a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002746:	4b1d      	ldr	r3, [pc, #116]	; (80027bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800274e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6892      	ldr	r2, [r2, #8]
 8002756:	0211      	lsls	r1, r2, #8
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6952      	ldr	r2, [r2, #20]
 800275c:	0852      	lsrs	r2, r2, #1
 800275e:	3a01      	subs	r2, #1
 8002760:	0652      	lsls	r2, r2, #25
 8002762:	430a      	orrs	r2, r1
 8002764:	4915      	ldr	r1, [pc, #84]	; (80027bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002766:	4313      	orrs	r3, r2
 8002768:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800276a:	4b14      	ldr	r3, [pc, #80]	; (80027bc <RCCEx_PLLSAI1_Config+0x1dc>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a13      	ldr	r2, [pc, #76]	; (80027bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002770:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002774:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002776:	f7fd ff67 	bl	8000648 <HAL_GetTick>
 800277a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800277c:	e009      	b.n	8002792 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800277e:	f7fd ff63 	bl	8000648 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d902      	bls.n	8002792 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	73fb      	strb	r3, [r7, #15]
          break;
 8002790:	e005      	b.n	800279e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002792:	4b0a      	ldr	r3, [pc, #40]	; (80027bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0ef      	beq.n	800277e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800279e:	7bfb      	ldrb	r3, [r7, #15]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d106      	bne.n	80027b2 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80027a4:	4b05      	ldr	r3, [pc, #20]	; (80027bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80027a6:	691a      	ldr	r2, [r3, #16]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	4903      	ldr	r1, [pc, #12]	; (80027bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80027b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40021000 	.word	0x40021000

080027c0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027ca:	2300      	movs	r3, #0
 80027cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027ce:	4b68      	ldr	r3, [pc, #416]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d018      	beq.n	800280c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80027da:	4b65      	ldr	r3, [pc, #404]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	f003 0203 	and.w	r2, r3, #3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d10d      	bne.n	8002806 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
       ||
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d009      	beq.n	8002806 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80027f2:	4b5f      	ldr	r3, [pc, #380]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	091b      	lsrs	r3, r3, #4
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
       ||
 8002802:	429a      	cmp	r2, r3
 8002804:	d044      	beq.n	8002890 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	73fb      	strb	r3, [r7, #15]
 800280a:	e041      	b.n	8002890 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b02      	cmp	r3, #2
 8002812:	d00c      	beq.n	800282e <RCCEx_PLLSAI2_Config+0x6e>
 8002814:	2b03      	cmp	r3, #3
 8002816:	d013      	beq.n	8002840 <RCCEx_PLLSAI2_Config+0x80>
 8002818:	2b01      	cmp	r3, #1
 800281a:	d120      	bne.n	800285e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800281c:	4b54      	ldr	r3, [pc, #336]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b0>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d11d      	bne.n	8002864 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800282c:	e01a      	b.n	8002864 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800282e:	4b50      	ldr	r3, [pc, #320]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002836:	2b00      	cmp	r3, #0
 8002838:	d116      	bne.n	8002868 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800283e:	e013      	b.n	8002868 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002840:	4b4b      	ldr	r3, [pc, #300]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10f      	bne.n	800286c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800284c:	4b48      	ldr	r3, [pc, #288]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b0>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d109      	bne.n	800286c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800285c:	e006      	b.n	800286c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	73fb      	strb	r3, [r7, #15]
      break;
 8002862:	e004      	b.n	800286e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002864:	bf00      	nop
 8002866:	e002      	b.n	800286e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002868:	bf00      	nop
 800286a:	e000      	b.n	800286e <RCCEx_PLLSAI2_Config+0xae>
      break;
 800286c:	bf00      	nop
    }

    if(status == HAL_OK)
 800286e:	7bfb      	ldrb	r3, [r7, #15]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10d      	bne.n	8002890 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002874:	4b3e      	ldr	r3, [pc, #248]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6819      	ldr	r1, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	3b01      	subs	r3, #1
 8002886:	011b      	lsls	r3, r3, #4
 8002888:	430b      	orrs	r3, r1
 800288a:	4939      	ldr	r1, [pc, #228]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b0>)
 800288c:	4313      	orrs	r3, r2
 800288e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002890:	7bfb      	ldrb	r3, [r7, #15]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d167      	bne.n	8002966 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002896:	4b36      	ldr	r3, [pc, #216]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a35      	ldr	r2, [pc, #212]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b0>)
 800289c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028a2:	f7fd fed1 	bl	8000648 <HAL_GetTick>
 80028a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028a8:	e009      	b.n	80028be <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028aa:	f7fd fecd 	bl	8000648 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d902      	bls.n	80028be <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	73fb      	strb	r3, [r7, #15]
        break;
 80028bc:	e005      	b.n	80028ca <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028be:	4b2c      	ldr	r3, [pc, #176]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1ef      	bne.n	80028aa <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80028ca:	7bfb      	ldrb	r3, [r7, #15]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d14a      	bne.n	8002966 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d111      	bne.n	80028fa <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028d6:	4b26      	ldr	r3, [pc, #152]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80028de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6892      	ldr	r2, [r2, #8]
 80028e6:	0211      	lsls	r1, r2, #8
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	68d2      	ldr	r2, [r2, #12]
 80028ec:	0912      	lsrs	r2, r2, #4
 80028ee:	0452      	lsls	r2, r2, #17
 80028f0:	430a      	orrs	r2, r1
 80028f2:	491f      	ldr	r1, [pc, #124]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	614b      	str	r3, [r1, #20]
 80028f8:	e011      	b.n	800291e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028fa:	4b1d      	ldr	r3, [pc, #116]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002902:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6892      	ldr	r2, [r2, #8]
 800290a:	0211      	lsls	r1, r2, #8
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6912      	ldr	r2, [r2, #16]
 8002910:	0852      	lsrs	r2, r2, #1
 8002912:	3a01      	subs	r2, #1
 8002914:	0652      	lsls	r2, r2, #25
 8002916:	430a      	orrs	r2, r1
 8002918:	4915      	ldr	r1, [pc, #84]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b0>)
 800291a:	4313      	orrs	r3, r2
 800291c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800291e:	4b14      	ldr	r3, [pc, #80]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a13      	ldr	r2, [pc, #76]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002928:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292a:	f7fd fe8d 	bl	8000648 <HAL_GetTick>
 800292e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002930:	e009      	b.n	8002946 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002932:	f7fd fe89 	bl	8000648 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d902      	bls.n	8002946 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	73fb      	strb	r3, [r7, #15]
          break;
 8002944:	e005      	b.n	8002952 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002946:	4b0a      	ldr	r3, [pc, #40]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0ef      	beq.n	8002932 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002952:	7bfb      	ldrb	r3, [r7, #15]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d106      	bne.n	8002966 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002958:	4b05      	ldr	r3, [pc, #20]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b0>)
 800295a:	695a      	ldr	r2, [r3, #20]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	4903      	ldr	r1, [pc, #12]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002962:	4313      	orrs	r3, r2
 8002964:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002966:	7bfb      	ldrb	r3, [r7, #15]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40021000 	.word	0x40021000

08002974 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e040      	b.n	8002a08 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800298a:	2b00      	cmp	r3, #0
 800298c:	d106      	bne.n	800299c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f001 f81c 	bl	80039d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2224      	movs	r2, #36	; 0x24
 80029a0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 0201 	bic.w	r2, r2, #1
 80029b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f8c0 	bl	8002b38 <UART_SetConfig>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d101      	bne.n	80029c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e022      	b.n	8002a08 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 fbfc 	bl	80031c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689a      	ldr	r2, [r3, #8]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 0201 	orr.w	r2, r2, #1
 80029fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 fc83 	bl	800330c <UART_CheckIdleState>
 8002a06:	4603      	mov	r3, r0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08a      	sub	sp, #40	; 0x28
 8002a14:	af02      	add	r7, sp, #8
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	603b      	str	r3, [r7, #0]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a24:	2b20      	cmp	r3, #32
 8002a26:	f040 8081 	bne.w	8002b2c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d002      	beq.n	8002a36 <HAL_UART_Transmit+0x26>
 8002a30:	88fb      	ldrh	r3, [r7, #6]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e079      	b.n	8002b2e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d101      	bne.n	8002a48 <HAL_UART_Transmit+0x38>
 8002a44:	2302      	movs	r3, #2
 8002a46:	e072      	b.n	8002b2e <HAL_UART_Transmit+0x11e>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2221      	movs	r2, #33	; 0x21
 8002a5a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002a5c:	f7fd fdf4 	bl	8000648 <HAL_GetTick>
 8002a60:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	88fa      	ldrh	r2, [r7, #6]
 8002a66:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	88fa      	ldrh	r2, [r7, #6]
 8002a6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a7a:	d108      	bne.n	8002a8e <HAL_UART_Transmit+0x7e>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d104      	bne.n	8002a8e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	61bb      	str	r3, [r7, #24]
 8002a8c:	e003      	b.n	8002a96 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a92:	2300      	movs	r3, #0
 8002a94:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a96:	e02d      	b.n	8002af4 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	2180      	movs	r1, #128	; 0x80
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 fc77 	bl	8003396 <UART_WaitOnFlagUntilTimeout>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e03d      	b.n	8002b2e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10b      	bne.n	8002ad0 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	881a      	ldrh	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ac4:	b292      	uxth	r2, r2
 8002ac6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	3302      	adds	r3, #2
 8002acc:	61bb      	str	r3, [r7, #24]
 8002ace:	e008      	b.n	8002ae2 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	781a      	ldrb	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	b292      	uxth	r2, r2
 8002ada:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	3b01      	subs	r3, #1
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1cb      	bne.n	8002a98 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	2200      	movs	r2, #0
 8002b08:	2140      	movs	r1, #64	; 0x40
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 fc43 	bl	8003396 <UART_WaitOnFlagUntilTimeout>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e009      	b.n	8002b2e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	e000      	b.n	8002b2e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002b2c:	2302      	movs	r3, #2
  }
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3720      	adds	r7, #32
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b38:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002b3c:	b088      	sub	sp, #32
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b46:	2300      	movs	r3, #0
 8002b48:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689a      	ldr	r2, [r3, #8]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	4bac      	ldr	r3, [pc, #688]	; (8002e20 <UART_SetConfig+0x2e8>)
 8002b6e:	4013      	ands	r3, r2
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6812      	ldr	r2, [r2, #0]
 8002b74:	69f9      	ldr	r1, [r7, #28]
 8002b76:	430b      	orrs	r3, r1
 8002b78:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68da      	ldr	r2, [r3, #12]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4aa2      	ldr	r2, [pc, #648]	; (8002e24 <UART_SetConfig+0x2ec>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d004      	beq.n	8002baa <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	69fa      	ldr	r2, [r7, #28]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	69fa      	ldr	r2, [r7, #28]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a99      	ldr	r2, [pc, #612]	; (8002e28 <UART_SetConfig+0x2f0>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d121      	bne.n	8002c0c <UART_SetConfig+0xd4>
 8002bc8:	4b98      	ldr	r3, [pc, #608]	; (8002e2c <UART_SetConfig+0x2f4>)
 8002bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	2b03      	cmp	r3, #3
 8002bd4:	d816      	bhi.n	8002c04 <UART_SetConfig+0xcc>
 8002bd6:	a201      	add	r2, pc, #4	; (adr r2, 8002bdc <UART_SetConfig+0xa4>)
 8002bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bdc:	08002bed 	.word	0x08002bed
 8002be0:	08002bf9 	.word	0x08002bf9
 8002be4:	08002bf3 	.word	0x08002bf3
 8002be8:	08002bff 	.word	0x08002bff
 8002bec:	2301      	movs	r3, #1
 8002bee:	76fb      	strb	r3, [r7, #27]
 8002bf0:	e0e8      	b.n	8002dc4 <UART_SetConfig+0x28c>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	76fb      	strb	r3, [r7, #27]
 8002bf6:	e0e5      	b.n	8002dc4 <UART_SetConfig+0x28c>
 8002bf8:	2304      	movs	r3, #4
 8002bfa:	76fb      	strb	r3, [r7, #27]
 8002bfc:	e0e2      	b.n	8002dc4 <UART_SetConfig+0x28c>
 8002bfe:	2308      	movs	r3, #8
 8002c00:	76fb      	strb	r3, [r7, #27]
 8002c02:	e0df      	b.n	8002dc4 <UART_SetConfig+0x28c>
 8002c04:	2310      	movs	r3, #16
 8002c06:	76fb      	strb	r3, [r7, #27]
 8002c08:	bf00      	nop
 8002c0a:	e0db      	b.n	8002dc4 <UART_SetConfig+0x28c>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a87      	ldr	r2, [pc, #540]	; (8002e30 <UART_SetConfig+0x2f8>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d134      	bne.n	8002c80 <UART_SetConfig+0x148>
 8002c16:	4b85      	ldr	r3, [pc, #532]	; (8002e2c <UART_SetConfig+0x2f4>)
 8002c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1c:	f003 030c 	and.w	r3, r3, #12
 8002c20:	2b0c      	cmp	r3, #12
 8002c22:	d829      	bhi.n	8002c78 <UART_SetConfig+0x140>
 8002c24:	a201      	add	r2, pc, #4	; (adr r2, 8002c2c <UART_SetConfig+0xf4>)
 8002c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2a:	bf00      	nop
 8002c2c:	08002c61 	.word	0x08002c61
 8002c30:	08002c79 	.word	0x08002c79
 8002c34:	08002c79 	.word	0x08002c79
 8002c38:	08002c79 	.word	0x08002c79
 8002c3c:	08002c6d 	.word	0x08002c6d
 8002c40:	08002c79 	.word	0x08002c79
 8002c44:	08002c79 	.word	0x08002c79
 8002c48:	08002c79 	.word	0x08002c79
 8002c4c:	08002c67 	.word	0x08002c67
 8002c50:	08002c79 	.word	0x08002c79
 8002c54:	08002c79 	.word	0x08002c79
 8002c58:	08002c79 	.word	0x08002c79
 8002c5c:	08002c73 	.word	0x08002c73
 8002c60:	2300      	movs	r3, #0
 8002c62:	76fb      	strb	r3, [r7, #27]
 8002c64:	e0ae      	b.n	8002dc4 <UART_SetConfig+0x28c>
 8002c66:	2302      	movs	r3, #2
 8002c68:	76fb      	strb	r3, [r7, #27]
 8002c6a:	e0ab      	b.n	8002dc4 <UART_SetConfig+0x28c>
 8002c6c:	2304      	movs	r3, #4
 8002c6e:	76fb      	strb	r3, [r7, #27]
 8002c70:	e0a8      	b.n	8002dc4 <UART_SetConfig+0x28c>
 8002c72:	2308      	movs	r3, #8
 8002c74:	76fb      	strb	r3, [r7, #27]
 8002c76:	e0a5      	b.n	8002dc4 <UART_SetConfig+0x28c>
 8002c78:	2310      	movs	r3, #16
 8002c7a:	76fb      	strb	r3, [r7, #27]
 8002c7c:	bf00      	nop
 8002c7e:	e0a1      	b.n	8002dc4 <UART_SetConfig+0x28c>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a6b      	ldr	r2, [pc, #428]	; (8002e34 <UART_SetConfig+0x2fc>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d120      	bne.n	8002ccc <UART_SetConfig+0x194>
 8002c8a:	4b68      	ldr	r3, [pc, #416]	; (8002e2c <UART_SetConfig+0x2f4>)
 8002c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c90:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002c94:	2b10      	cmp	r3, #16
 8002c96:	d00f      	beq.n	8002cb8 <UART_SetConfig+0x180>
 8002c98:	2b10      	cmp	r3, #16
 8002c9a:	d802      	bhi.n	8002ca2 <UART_SetConfig+0x16a>
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d005      	beq.n	8002cac <UART_SetConfig+0x174>
 8002ca0:	e010      	b.n	8002cc4 <UART_SetConfig+0x18c>
 8002ca2:	2b20      	cmp	r3, #32
 8002ca4:	d005      	beq.n	8002cb2 <UART_SetConfig+0x17a>
 8002ca6:	2b30      	cmp	r3, #48	; 0x30
 8002ca8:	d009      	beq.n	8002cbe <UART_SetConfig+0x186>
 8002caa:	e00b      	b.n	8002cc4 <UART_SetConfig+0x18c>
 8002cac:	2300      	movs	r3, #0
 8002cae:	76fb      	strb	r3, [r7, #27]
 8002cb0:	e088      	b.n	8002dc4 <UART_SetConfig+0x28c>
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	76fb      	strb	r3, [r7, #27]
 8002cb6:	e085      	b.n	8002dc4 <UART_SetConfig+0x28c>
 8002cb8:	2304      	movs	r3, #4
 8002cba:	76fb      	strb	r3, [r7, #27]
 8002cbc:	e082      	b.n	8002dc4 <UART_SetConfig+0x28c>
 8002cbe:	2308      	movs	r3, #8
 8002cc0:	76fb      	strb	r3, [r7, #27]
 8002cc2:	e07f      	b.n	8002dc4 <UART_SetConfig+0x28c>
 8002cc4:	2310      	movs	r3, #16
 8002cc6:	76fb      	strb	r3, [r7, #27]
 8002cc8:	bf00      	nop
 8002cca:	e07b      	b.n	8002dc4 <UART_SetConfig+0x28c>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a59      	ldr	r2, [pc, #356]	; (8002e38 <UART_SetConfig+0x300>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d120      	bne.n	8002d18 <UART_SetConfig+0x1e0>
 8002cd6:	4b55      	ldr	r3, [pc, #340]	; (8002e2c <UART_SetConfig+0x2f4>)
 8002cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cdc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002ce0:	2b40      	cmp	r3, #64	; 0x40
 8002ce2:	d00f      	beq.n	8002d04 <UART_SetConfig+0x1cc>
 8002ce4:	2b40      	cmp	r3, #64	; 0x40
 8002ce6:	d802      	bhi.n	8002cee <UART_SetConfig+0x1b6>
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d005      	beq.n	8002cf8 <UART_SetConfig+0x1c0>
 8002cec:	e010      	b.n	8002d10 <UART_SetConfig+0x1d8>
 8002cee:	2b80      	cmp	r3, #128	; 0x80
 8002cf0:	d005      	beq.n	8002cfe <UART_SetConfig+0x1c6>
 8002cf2:	2bc0      	cmp	r3, #192	; 0xc0
 8002cf4:	d009      	beq.n	8002d0a <UART_SetConfig+0x1d2>
 8002cf6:	e00b      	b.n	8002d10 <UART_SetConfig+0x1d8>
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	76fb      	strb	r3, [r7, #27]
 8002cfc:	e062      	b.n	8002dc4 <UART_SetConfig+0x28c>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	76fb      	strb	r3, [r7, #27]
 8002d02:	e05f      	b.n	8002dc4 <UART_SetConfig+0x28c>
 8002d04:	2304      	movs	r3, #4
 8002d06:	76fb      	strb	r3, [r7, #27]
 8002d08:	e05c      	b.n	8002dc4 <UART_SetConfig+0x28c>
 8002d0a:	2308      	movs	r3, #8
 8002d0c:	76fb      	strb	r3, [r7, #27]
 8002d0e:	e059      	b.n	8002dc4 <UART_SetConfig+0x28c>
 8002d10:	2310      	movs	r3, #16
 8002d12:	76fb      	strb	r3, [r7, #27]
 8002d14:	bf00      	nop
 8002d16:	e055      	b.n	8002dc4 <UART_SetConfig+0x28c>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a47      	ldr	r2, [pc, #284]	; (8002e3c <UART_SetConfig+0x304>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d124      	bne.n	8002d6c <UART_SetConfig+0x234>
 8002d22:	4b42      	ldr	r3, [pc, #264]	; (8002e2c <UART_SetConfig+0x2f4>)
 8002d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d30:	d012      	beq.n	8002d58 <UART_SetConfig+0x220>
 8002d32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d36:	d802      	bhi.n	8002d3e <UART_SetConfig+0x206>
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d007      	beq.n	8002d4c <UART_SetConfig+0x214>
 8002d3c:	e012      	b.n	8002d64 <UART_SetConfig+0x22c>
 8002d3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d42:	d006      	beq.n	8002d52 <UART_SetConfig+0x21a>
 8002d44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d48:	d009      	beq.n	8002d5e <UART_SetConfig+0x226>
 8002d4a:	e00b      	b.n	8002d64 <UART_SetConfig+0x22c>
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	76fb      	strb	r3, [r7, #27]
 8002d50:	e038      	b.n	8002dc4 <UART_SetConfig+0x28c>
 8002d52:	2302      	movs	r3, #2
 8002d54:	76fb      	strb	r3, [r7, #27]
 8002d56:	e035      	b.n	8002dc4 <UART_SetConfig+0x28c>
 8002d58:	2304      	movs	r3, #4
 8002d5a:	76fb      	strb	r3, [r7, #27]
 8002d5c:	e032      	b.n	8002dc4 <UART_SetConfig+0x28c>
 8002d5e:	2308      	movs	r3, #8
 8002d60:	76fb      	strb	r3, [r7, #27]
 8002d62:	e02f      	b.n	8002dc4 <UART_SetConfig+0x28c>
 8002d64:	2310      	movs	r3, #16
 8002d66:	76fb      	strb	r3, [r7, #27]
 8002d68:	bf00      	nop
 8002d6a:	e02b      	b.n	8002dc4 <UART_SetConfig+0x28c>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a2c      	ldr	r2, [pc, #176]	; (8002e24 <UART_SetConfig+0x2ec>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d124      	bne.n	8002dc0 <UART_SetConfig+0x288>
 8002d76:	4b2d      	ldr	r3, [pc, #180]	; (8002e2c <UART_SetConfig+0x2f4>)
 8002d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d84:	d012      	beq.n	8002dac <UART_SetConfig+0x274>
 8002d86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d8a:	d802      	bhi.n	8002d92 <UART_SetConfig+0x25a>
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d007      	beq.n	8002da0 <UART_SetConfig+0x268>
 8002d90:	e012      	b.n	8002db8 <UART_SetConfig+0x280>
 8002d92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d96:	d006      	beq.n	8002da6 <UART_SetConfig+0x26e>
 8002d98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d9c:	d009      	beq.n	8002db2 <UART_SetConfig+0x27a>
 8002d9e:	e00b      	b.n	8002db8 <UART_SetConfig+0x280>
 8002da0:	2300      	movs	r3, #0
 8002da2:	76fb      	strb	r3, [r7, #27]
 8002da4:	e00e      	b.n	8002dc4 <UART_SetConfig+0x28c>
 8002da6:	2302      	movs	r3, #2
 8002da8:	76fb      	strb	r3, [r7, #27]
 8002daa:	e00b      	b.n	8002dc4 <UART_SetConfig+0x28c>
 8002dac:	2304      	movs	r3, #4
 8002dae:	76fb      	strb	r3, [r7, #27]
 8002db0:	e008      	b.n	8002dc4 <UART_SetConfig+0x28c>
 8002db2:	2308      	movs	r3, #8
 8002db4:	76fb      	strb	r3, [r7, #27]
 8002db6:	e005      	b.n	8002dc4 <UART_SetConfig+0x28c>
 8002db8:	2310      	movs	r3, #16
 8002dba:	76fb      	strb	r3, [r7, #27]
 8002dbc:	bf00      	nop
 8002dbe:	e001      	b.n	8002dc4 <UART_SetConfig+0x28c>
 8002dc0:	2310      	movs	r3, #16
 8002dc2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a16      	ldr	r2, [pc, #88]	; (8002e24 <UART_SetConfig+0x2ec>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	f040 80fa 	bne.w	8002fc4 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002dd0:	7efb      	ldrb	r3, [r7, #27]
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d836      	bhi.n	8002e44 <UART_SetConfig+0x30c>
 8002dd6:	a201      	add	r2, pc, #4	; (adr r2, 8002ddc <UART_SetConfig+0x2a4>)
 8002dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ddc:	08002e01 	.word	0x08002e01
 8002de0:	08002e45 	.word	0x08002e45
 8002de4:	08002e09 	.word	0x08002e09
 8002de8:	08002e45 	.word	0x08002e45
 8002dec:	08002e0f 	.word	0x08002e0f
 8002df0:	08002e45 	.word	0x08002e45
 8002df4:	08002e45 	.word	0x08002e45
 8002df8:	08002e45 	.word	0x08002e45
 8002dfc:	08002e17 	.word	0x08002e17
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002e00:	f7ff f87c 	bl	8001efc <HAL_RCC_GetPCLK1Freq>
 8002e04:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002e06:	e020      	b.n	8002e4a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002e08:	4b0d      	ldr	r3, [pc, #52]	; (8002e40 <UART_SetConfig+0x308>)
 8002e0a:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002e0c:	e01d      	b.n	8002e4a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002e0e:	f7fe ffdf 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8002e12:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002e14:	e019      	b.n	8002e4a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002e16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e1a:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002e1c:	e015      	b.n	8002e4a <UART_SetConfig+0x312>
 8002e1e:	bf00      	nop
 8002e20:	efff69f3 	.word	0xefff69f3
 8002e24:	40008000 	.word	0x40008000
 8002e28:	40013800 	.word	0x40013800
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	40004400 	.word	0x40004400
 8002e34:	40004800 	.word	0x40004800
 8002e38:	40004c00 	.word	0x40004c00
 8002e3c:	40005000 	.word	0x40005000
 8002e40:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	74fb      	strb	r3, [r7, #19]
        break;
 8002e48:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 81ac 	beq.w	80031aa <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	4413      	add	r3, r2
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d305      	bcc.n	8002e6e <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d902      	bls.n	8002e74 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	74fb      	strb	r3, [r7, #19]
 8002e72:	e19a      	b.n	80031aa <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8002e74:	7efb      	ldrb	r3, [r7, #27]
 8002e76:	2b08      	cmp	r3, #8
 8002e78:	f200 8091 	bhi.w	8002f9e <UART_SetConfig+0x466>
 8002e7c:	a201      	add	r2, pc, #4	; (adr r2, 8002e84 <UART_SetConfig+0x34c>)
 8002e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e82:	bf00      	nop
 8002e84:	08002ea9 	.word	0x08002ea9
 8002e88:	08002f9f 	.word	0x08002f9f
 8002e8c:	08002ef5 	.word	0x08002ef5
 8002e90:	08002f9f 	.word	0x08002f9f
 8002e94:	08002f29 	.word	0x08002f29
 8002e98:	08002f9f 	.word	0x08002f9f
 8002e9c:	08002f9f 	.word	0x08002f9f
 8002ea0:	08002f9f 	.word	0x08002f9f
 8002ea4:	08002f75 	.word	0x08002f75
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002ea8:	f7ff f828 	bl	8001efc <HAL_RCC_GetPCLK1Freq>
 8002eac:	4603      	mov	r3, r0
 8002eae:	4619      	mov	r1, r3
 8002eb0:	f04f 0200 	mov.w	r2, #0
 8002eb4:	f04f 0300 	mov.w	r3, #0
 8002eb8:	f04f 0400 	mov.w	r4, #0
 8002ebc:	0214      	lsls	r4, r2, #8
 8002ebe:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002ec2:	020b      	lsls	r3, r1, #8
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6852      	ldr	r2, [r2, #4]
 8002ec8:	0852      	lsrs	r2, r2, #1
 8002eca:	4611      	mov	r1, r2
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	eb13 0b01 	adds.w	fp, r3, r1
 8002ed4:	eb44 0c02 	adc.w	ip, r4, r2
 8002ed8:	4658      	mov	r0, fp
 8002eda:	4661      	mov	r1, ip
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f04f 0400 	mov.w	r4, #0
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	4623      	mov	r3, r4
 8002ee8:	f7fd f9c2 	bl	8000270 <__aeabi_uldivmod>
 8002eec:	4603      	mov	r3, r0
 8002eee:	460c      	mov	r4, r1
 8002ef0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002ef2:	e057      	b.n	8002fa4 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	085b      	lsrs	r3, r3, #1
 8002efa:	f04f 0400 	mov.w	r4, #0
 8002efe:	49b1      	ldr	r1, [pc, #708]	; (80031c4 <UART_SetConfig+0x68c>)
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	eb13 0b01 	adds.w	fp, r3, r1
 8002f08:	eb44 0c02 	adc.w	ip, r4, r2
 8002f0c:	4658      	mov	r0, fp
 8002f0e:	4661      	mov	r1, ip
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f04f 0400 	mov.w	r4, #0
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4623      	mov	r3, r4
 8002f1c:	f7fd f9a8 	bl	8000270 <__aeabi_uldivmod>
 8002f20:	4603      	mov	r3, r0
 8002f22:	460c      	mov	r4, r1
 8002f24:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002f26:	e03d      	b.n	8002fa4 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002f28:	f7fe ff52 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	4619      	mov	r1, r3
 8002f30:	f04f 0200 	mov.w	r2, #0
 8002f34:	f04f 0300 	mov.w	r3, #0
 8002f38:	f04f 0400 	mov.w	r4, #0
 8002f3c:	0214      	lsls	r4, r2, #8
 8002f3e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002f42:	020b      	lsls	r3, r1, #8
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6852      	ldr	r2, [r2, #4]
 8002f48:	0852      	lsrs	r2, r2, #1
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	eb13 0b01 	adds.w	fp, r3, r1
 8002f54:	eb44 0c02 	adc.w	ip, r4, r2
 8002f58:	4658      	mov	r0, fp
 8002f5a:	4661      	mov	r1, ip
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f04f 0400 	mov.w	r4, #0
 8002f64:	461a      	mov	r2, r3
 8002f66:	4623      	mov	r3, r4
 8002f68:	f7fd f982 	bl	8000270 <__aeabi_uldivmod>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	460c      	mov	r4, r1
 8002f70:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002f72:	e017      	b.n	8002fa4 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	085b      	lsrs	r3, r3, #1
 8002f7a:	f04f 0400 	mov.w	r4, #0
 8002f7e:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8002f82:	f144 0100 	adc.w	r1, r4, #0
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f04f 0400 	mov.w	r4, #0
 8002f8e:	461a      	mov	r2, r3
 8002f90:	4623      	mov	r3, r4
 8002f92:	f7fd f96d 	bl	8000270 <__aeabi_uldivmod>
 8002f96:	4603      	mov	r3, r0
 8002f98:	460c      	mov	r4, r1
 8002f9a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002f9c:	e002      	b.n	8002fa4 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	74fb      	strb	r3, [r7, #19]
            break;
 8002fa2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002faa:	d308      	bcc.n	8002fbe <UART_SetConfig+0x486>
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fb2:	d204      	bcs.n	8002fbe <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	60da      	str	r2, [r3, #12]
 8002fbc:	e0f5      	b.n	80031aa <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	74fb      	strb	r3, [r7, #19]
 8002fc2:	e0f2      	b.n	80031aa <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fcc:	d17f      	bne.n	80030ce <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8002fce:	7efb      	ldrb	r3, [r7, #27]
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d85c      	bhi.n	800308e <UART_SetConfig+0x556>
 8002fd4:	a201      	add	r2, pc, #4	; (adr r2, 8002fdc <UART_SetConfig+0x4a4>)
 8002fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fda:	bf00      	nop
 8002fdc:	08003001 	.word	0x08003001
 8002fe0:	0800301f 	.word	0x0800301f
 8002fe4:	0800303d 	.word	0x0800303d
 8002fe8:	0800308f 	.word	0x0800308f
 8002fec:	08003059 	.word	0x08003059
 8002ff0:	0800308f 	.word	0x0800308f
 8002ff4:	0800308f 	.word	0x0800308f
 8002ff8:	0800308f 	.word	0x0800308f
 8002ffc:	08003077 	.word	0x08003077
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003000:	f7fe ff7c 	bl	8001efc <HAL_RCC_GetPCLK1Freq>
 8003004:	4603      	mov	r3, r0
 8003006:	005a      	lsls	r2, r3, #1
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	085b      	lsrs	r3, r3, #1
 800300e:	441a      	add	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	fbb2 f3f3 	udiv	r3, r2, r3
 8003018:	b29b      	uxth	r3, r3
 800301a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800301c:	e03a      	b.n	8003094 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800301e:	f7fe ff83 	bl	8001f28 <HAL_RCC_GetPCLK2Freq>
 8003022:	4603      	mov	r3, r0
 8003024:	005a      	lsls	r2, r3, #1
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	085b      	lsrs	r3, r3, #1
 800302c:	441a      	add	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	fbb2 f3f3 	udiv	r3, r2, r3
 8003036:	b29b      	uxth	r3, r3
 8003038:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800303a:	e02b      	b.n	8003094 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	085b      	lsrs	r3, r3, #1
 8003042:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003046:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6852      	ldr	r2, [r2, #4]
 800304e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003052:	b29b      	uxth	r3, r3
 8003054:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003056:	e01d      	b.n	8003094 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003058:	f7fe feba 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 800305c:	4603      	mov	r3, r0
 800305e:	005a      	lsls	r2, r3, #1
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	085b      	lsrs	r3, r3, #1
 8003066:	441a      	add	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003070:	b29b      	uxth	r3, r3
 8003072:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003074:	e00e      	b.n	8003094 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	085b      	lsrs	r3, r3, #1
 800307c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	fbb2 f3f3 	udiv	r3, r2, r3
 8003088:	b29b      	uxth	r3, r3
 800308a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800308c:	e002      	b.n	8003094 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	74fb      	strb	r3, [r7, #19]
        break;
 8003092:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	2b0f      	cmp	r3, #15
 8003098:	d916      	bls.n	80030c8 <UART_SetConfig+0x590>
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030a0:	d212      	bcs.n	80030c8 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	f023 030f 	bic.w	r3, r3, #15
 80030aa:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	085b      	lsrs	r3, r3, #1
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	897b      	ldrh	r3, [r7, #10]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	897a      	ldrh	r2, [r7, #10]
 80030c4:	60da      	str	r2, [r3, #12]
 80030c6:	e070      	b.n	80031aa <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	74fb      	strb	r3, [r7, #19]
 80030cc:	e06d      	b.n	80031aa <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 80030ce:	7efb      	ldrb	r3, [r7, #27]
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d859      	bhi.n	8003188 <UART_SetConfig+0x650>
 80030d4:	a201      	add	r2, pc, #4	; (adr r2, 80030dc <UART_SetConfig+0x5a4>)
 80030d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030da:	bf00      	nop
 80030dc:	08003101 	.word	0x08003101
 80030e0:	0800311d 	.word	0x0800311d
 80030e4:	08003139 	.word	0x08003139
 80030e8:	08003189 	.word	0x08003189
 80030ec:	08003155 	.word	0x08003155
 80030f0:	08003189 	.word	0x08003189
 80030f4:	08003189 	.word	0x08003189
 80030f8:	08003189 	.word	0x08003189
 80030fc:	08003171 	.word	0x08003171
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003100:	f7fe fefc 	bl	8001efc <HAL_RCC_GetPCLK1Freq>
 8003104:	4602      	mov	r2, r0
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	085b      	lsrs	r3, r3, #1
 800310c:	441a      	add	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	fbb2 f3f3 	udiv	r3, r2, r3
 8003116:	b29b      	uxth	r3, r3
 8003118:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800311a:	e038      	b.n	800318e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800311c:	f7fe ff04 	bl	8001f28 <HAL_RCC_GetPCLK2Freq>
 8003120:	4602      	mov	r2, r0
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	085b      	lsrs	r3, r3, #1
 8003128:	441a      	add	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003132:	b29b      	uxth	r3, r3
 8003134:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003136:	e02a      	b.n	800318e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	085b      	lsrs	r3, r3, #1
 800313e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003142:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	6852      	ldr	r2, [r2, #4]
 800314a:	fbb3 f3f2 	udiv	r3, r3, r2
 800314e:	b29b      	uxth	r3, r3
 8003150:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003152:	e01c      	b.n	800318e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003154:	f7fe fe3c 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8003158:	4602      	mov	r2, r0
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	085b      	lsrs	r3, r3, #1
 8003160:	441a      	add	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	fbb2 f3f3 	udiv	r3, r2, r3
 800316a:	b29b      	uxth	r3, r3
 800316c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800316e:	e00e      	b.n	800318e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	085b      	lsrs	r3, r3, #1
 8003176:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003182:	b29b      	uxth	r3, r3
 8003184:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003186:	e002      	b.n	800318e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	74fb      	strb	r3, [r7, #19]
        break;
 800318c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2b0f      	cmp	r3, #15
 8003192:	d908      	bls.n	80031a6 <UART_SetConfig+0x66e>
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800319a:	d204      	bcs.n	80031a6 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	60da      	str	r2, [r3, #12]
 80031a4:	e001      	b.n	80031aa <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80031b6:	7cfb      	ldrb	r3, [r7, #19]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3720      	adds	r7, #32
 80031bc:	46bd      	mov	sp, r7
 80031be:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80031c2:	bf00      	nop
 80031c4:	f4240000 	.word	0xf4240000

080031c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00a      	beq.n	80031f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00a      	beq.n	8003214 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00a      	beq.n	8003236 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00a      	beq.n	8003258 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	430a      	orrs	r2, r1
 8003256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	f003 0310 	and.w	r3, r3, #16
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00a      	beq.n	800327a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	f003 0320 	and.w	r3, r3, #32
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d01a      	beq.n	80032de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032c6:	d10a      	bne.n	80032de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00a      	beq.n	8003300 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	605a      	str	r2, [r3, #4]
  }
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af02      	add	r7, sp, #8
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800331a:	f7fd f995 	bl	8000648 <HAL_GetTick>
 800331e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b08      	cmp	r3, #8
 800332c:	d10e      	bne.n	800334c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800332e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 f82a 	bl	8003396 <UART_WaitOnFlagUntilTimeout>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e020      	b.n	800338e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0304 	and.w	r3, r3, #4
 8003356:	2b04      	cmp	r3, #4
 8003358:	d10e      	bne.n	8003378 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800335a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f814 	bl	8003396 <UART_WaitOnFlagUntilTimeout>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e00a      	b.n	800338e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2220      	movs	r2, #32
 800337c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2220      	movs	r2, #32
 8003382:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b084      	sub	sp, #16
 800339a:	af00      	add	r7, sp, #0
 800339c:	60f8      	str	r0, [r7, #12]
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	603b      	str	r3, [r7, #0]
 80033a2:	4613      	mov	r3, r2
 80033a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033a6:	e02a      	b.n	80033fe <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ae:	d026      	beq.n	80033fe <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033b0:	f7fd f94a 	bl	8000648 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d302      	bcc.n	80033c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d11b      	bne.n	80033fe <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033d4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0201 	bic.w	r2, r2, #1
 80033e4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2220      	movs	r2, #32
 80033ea:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2220      	movs	r2, #32
 80033f0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e00f      	b.n	800341e <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	69da      	ldr	r2, [r3, #28]
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	4013      	ands	r3, r2
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	429a      	cmp	r2, r3
 800340c:	bf0c      	ite	eq
 800340e:	2301      	moveq	r3, #1
 8003410:	2300      	movne	r3, #0
 8003412:	b2db      	uxtb	r3, r3
 8003414:	461a      	mov	r2, r3
 8003416:	79fb      	ldrb	r3, [r7, #7]
 8003418:	429a      	cmp	r2, r3
 800341a:	d0c5      	beq.n	80033a8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <generateTXHeader>:
 */

#include "can.h"

CAN_TxHeaderTypeDef generateTXHeader(uint32_t StdId, uint32_t ExtId, uint32_t IDE, uint32_t RTR,
		uint32_t DLC, FunctionalState TimeTransmit) {
 8003426:	b4b0      	push	{r4, r5, r7}
 8003428:	b08b      	sub	sp, #44	; 0x2c
 800342a:	af00      	add	r7, sp, #0
 800342c:	60f8      	str	r0, [r7, #12]
 800342e:	60b9      	str	r1, [r7, #8]
 8003430:	607a      	str	r2, [r7, #4]
 8003432:	603b      	str	r3, [r7, #0]
	CAN_TxHeaderTypeDef txHeader;
	txHeader.StdId = StdId;
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	613b      	str	r3, [r7, #16]
	txHeader.ExtId = ExtId;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	617b      	str	r3, [r7, #20]
	txHeader.IDE = IDE;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	61bb      	str	r3, [r7, #24]
	txHeader.RTR = RTR;
 8003440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003442:	61fb      	str	r3, [r7, #28]
	txHeader.DLC = DLC;
 8003444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003446:	623b      	str	r3, [r7, #32]
	txHeader.TransmitGlobalTime = DISABLE;
 8003448:	2300      	movs	r3, #0
 800344a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	return txHeader;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	461d      	mov	r5, r3
 8003452:	f107 0410 	add.w	r4, r7, #16
 8003456:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003458:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800345a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800345e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	372c      	adds	r7, #44	; 0x2c
 8003466:	46bd      	mov	sp, r7
 8003468:	bcb0      	pop	{r4, r5, r7}
 800346a:	4770      	bx	lr

0800346c <generateRXHeader>:

CAN_RxHeaderTypeDef generateRXHeader(uint32_t StdId, uint32_t ExtId, uint32_t IDE, uint32_t RTR,
		uint32_t DLC) {
 800346c:	b4b0      	push	{r4, r5, r7}
 800346e:	b08d      	sub	sp, #52	; 0x34
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
 8003478:	603b      	str	r3, [r7, #0]
	CAN_RxHeaderTypeDef rxHeader;
	rxHeader.StdId = StdId;
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	617b      	str	r3, [r7, #20]
	rxHeader.ExtId = ExtId;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	61bb      	str	r3, [r7, #24]
	rxHeader.IDE = IDE;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	61fb      	str	r3, [r7, #28]
	rxHeader.RTR = RTR;
 8003486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003488:	623b      	str	r3, [r7, #32]
	rxHeader.DLC = DLC;
 800348a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800348c:	627b      	str	r3, [r7, #36]	; 0x24

	return rxHeader;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	461d      	mov	r5, r3
 8003492:	f107 0414 	add.w	r4, r7, #20
 8003496:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003498:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800349a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800349e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	3734      	adds	r7, #52	; 0x34
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bcb0      	pop	{r4, r5, r7}
 80034aa:	4770      	bx	lr

080034ac <writeToCAN>:

/**
 * Writes to the CAN Transmit Line and returns the amount of data written (approximately)
 *
 */
int writeToCAN(CAN_HandleTypeDef *hcan, uint8_t data[], uint8_t dataSize) {
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b090      	sub	sp, #64	; 0x40
 80034b0:	af04      	add	r7, sp, #16
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	4613      	mov	r3, r2
 80034b8:	71fb      	strb	r3, [r7, #7]
	CAN_TxHeaderTypeDef txHeader = generateTXHeader(CAN_ID, CAN_EXT_ID,
 80034ba:	79fb      	ldrb	r3, [r7, #7]
 80034bc:	f107 0018 	add.w	r0, r7, #24
 80034c0:	2200      	movs	r2, #0
 80034c2:	9202      	str	r2, [sp, #8]
 80034c4:	9301      	str	r3, [sp, #4]
 80034c6:	2300      	movs	r3, #0
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	2300      	movs	r3, #0
 80034cc:	2200      	movs	r2, #0
 80034ce:	2101      	movs	r1, #1
 80034d0:	f7ff ffa9 	bl	8003426 <generateTXHeader>
	CAN_IS_EXT, CAN_RTR_DATA, dataSize, DISABLE);
	uint32_t mailbox = CAN_TX_MAILBOX0;
 80034d4:	2301      	movs	r3, #1
 80034d6:	617b      	str	r3, [r7, #20]

	if (HAL_CAN_AddTxMessage(hcan, &txHeader, data, &mailbox) != HAL_OK) {
 80034d8:	f107 0314 	add.w	r3, r7, #20
 80034dc:	f107 0118 	add.w	r1, r7, #24
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f7fd fac5 	bl	8000a72 <HAL_CAN_AddTxMessage>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d002      	beq.n	80034f4 <writeToCAN+0x48>
		return -1;
 80034ee:	f04f 33ff 	mov.w	r3, #4294967295
 80034f2:	e009      	b.n	8003508 <writeToCAN+0x5c>
	}
	while (HAL_CAN_IsTxMessagePending(hcan, mailbox))
 80034f4:	bf00      	nop
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	4619      	mov	r1, r3
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f7fd fb94 	bl	8000c28 <HAL_CAN_IsTxMessagePending>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1f7      	bne.n	80034f6 <writeToCAN+0x4a>
		;
	return dataSize;
 8003506:	79fb      	ldrb	r3, [r7, #7]
}
 8003508:	4618      	mov	r0, r3
 800350a:	3730      	adds	r7, #48	; 0x30
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <readCAN>:

int readCAN(CAN_HandleTypeDef *hcan, uint8_t *data, uint32_t dataSize) {
 8003510:	b580      	push	{r7, lr}
 8003512:	b08e      	sub	sp, #56	; 0x38
 8003514:	af02      	add	r7, sp, #8
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
	CAN_RxHeaderTypeDef rxHeader = generateRXHeader(CAN_ID, CAN_EXT_ID,
 800351c:	f107 0014 	add.w	r0, r7, #20
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	9301      	str	r3, [sp, #4]
 8003524:	2300      	movs	r3, #0
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	2300      	movs	r3, #0
 800352a:	2200      	movs	r2, #0
 800352c:	2101      	movs	r1, #1
 800352e:	f7ff ff9d 	bl	800346c <generateRXHeader>
									CAN_IS_EXT, CAN_RTR_DATA, dataSize);
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, data) != HAL_OK) {
 8003532:	f107 0214 	add.w	r2, r7, #20
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2100      	movs	r1, #0
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f7fd fb98 	bl	8000c70 <HAL_CAN_GetRxMessage>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d002      	beq.n	800354c <readCAN+0x3c>
		return -1;
 8003546:	f04f 33ff 	mov.w	r3, #4294967295
 800354a:	e000      	b.n	800354e <readCAN+0x3e>
	}
	return dataSize;
 800354c:	687b      	ldr	r3, [r7, #4]
}
 800354e:	4618      	mov	r0, r3
 8003550:	3730      	adds	r7, #48	; 0x30
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
	...

08003558 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800355e:	f7fd f807 	bl	8000570 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003562:	f000 f84d 	bl	8003600 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003566:	f000 f947 	bl	80037f8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800356a:	f000 f915 	bl	8003798 <MX_USART2_UART_Init>
	MX_CAN1_Init();
 800356e:	f000 f8bd 	bl	80036ec <MX_CAN1_Init>
	/* USER CODE BEGIN 2 */
	int i = 0;
 8003572:	2300      	movs	r3, #0
 8003574:	617b      	str	r3, [r7, #20]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
 8003576:	2200      	movs	r2, #0
 8003578:	2120      	movs	r1, #32
 800357a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800357e:	f7fd ff19 	bl	80013b4 <HAL_GPIO_WritePin>

		uint8_t data[6] = { 'H', 'A', 'L', 'O', 'K', '\n'};
 8003582:	4a1d      	ldr	r2, [pc, #116]	; (80035f8 <main+0xa0>)
 8003584:	f107 030c 	add.w	r3, r7, #12
 8003588:	e892 0003 	ldmia.w	r2, {r0, r1}
 800358c:	6018      	str	r0, [r3, #0]
 800358e:	3304      	adds	r3, #4
 8003590:	8019      	strh	r1, [r3, #0]
		uint8_t dataResult[6];
		HAL_StatusTypeDef start = HAL_CAN_Start(&hcan1);
 8003592:	481a      	ldr	r0, [pc, #104]	; (80035fc <main+0xa4>)
 8003594:	f7fd fa29 	bl	80009ea <HAL_CAN_Start>
 8003598:	4603      	mov	r3, r0
 800359a:	74fb      	strb	r3, [r7, #19]

		if(writeToCAN(&hcan1, data, 6) == -1) {
 800359c:	f107 030c 	add.w	r3, r7, #12
 80035a0:	2206      	movs	r2, #6
 80035a2:	4619      	mov	r1, r3
 80035a4:	4815      	ldr	r0, [pc, #84]	; (80035fc <main+0xa4>)
 80035a6:	f7ff ff81 	bl	80034ac <writeToCAN>
 80035aa:	4603      	mov	r3, r0
 80035ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b0:	d101      	bne.n	80035b6 <main+0x5e>
			Error_Handler();
 80035b2:	f000 f99f 	bl	80038f4 <Error_Handler>
		}

		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, SET);
 80035b6:	2201      	movs	r2, #1
 80035b8:	2120      	movs	r1, #32
 80035ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035be:	f7fd fef9 	bl	80013b4 <HAL_GPIO_WritePin>

		if(readCAN(&hcan1, dataResult, 6) != -1) {
 80035c2:	1d3b      	adds	r3, r7, #4
 80035c4:	2206      	movs	r2, #6
 80035c6:	4619      	mov	r1, r3
 80035c8:	480c      	ldr	r0, [pc, #48]	; (80035fc <main+0xa4>)
 80035ca:	f7ff ffa1 	bl	8003510 <readCAN>
 80035ce:	4603      	mov	r3, r0
 80035d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d4:	d007      	beq.n	80035e6 <main+0x8e>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
 80035d6:	2200      	movs	r2, #0
 80035d8:	2120      	movs	r1, #32
 80035da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035de:	f7fd fee9 	bl	80013b4 <HAL_GPIO_WritePin>
			Error_Handler();
 80035e2:	f000 f987 	bl	80038f4 <Error_Handler>
		}

//		_write(0, (char*)dataResult, 6);
		printf((char*)dataResult);
 80035e6:	1d3b      	adds	r3, r7, #4
 80035e8:	4618      	mov	r0, r3
 80035ea:	f000 fb8f 	bl	8003d0c <iprintf>
		i++;
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	3301      	adds	r3, #1
 80035f2:	617b      	str	r3, [r7, #20]
	while (1) {
 80035f4:	e7bf      	b.n	8003576 <main+0x1e>
 80035f6:	bf00      	nop
 80035f8:	08004aec 	.word	0x08004aec
 80035fc:	2000011c 	.word	0x2000011c

08003600 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003600:	b580      	push	{r7, lr}
 8003602:	b0b8      	sub	sp, #224	; 0xe0
 8003604:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003606:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800360a:	2244      	movs	r2, #68	; 0x44
 800360c:	2100      	movs	r1, #0
 800360e:	4618      	mov	r0, r3
 8003610:	f000 fb74 	bl	8003cfc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003614:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	605a      	str	r2, [r3, #4]
 800361e:	609a      	str	r2, [r3, #8]
 8003620:	60da      	str	r2, [r3, #12]
 8003622:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8003624:	463b      	mov	r3, r7
 8003626:	2288      	movs	r2, #136	; 0x88
 8003628:	2100      	movs	r1, #0
 800362a:	4618      	mov	r0, r3
 800362c:	f000 fb66 	bl	8003cfc <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003630:	2302      	movs	r3, #2
 8003632:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003636:	f44f 7380 	mov.w	r3, #256	; 0x100
 800363a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800363e:	2310      	movs	r3, #16
 8003640:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003644:	2302      	movs	r3, #2
 8003646:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800364a:	2302      	movs	r3, #2
 800364c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 1;
 8003650:	2301      	movs	r3, #1
 8003652:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 10;
 8003656:	230a      	movs	r3, #10
 8003658:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800365c:	2307      	movs	r3, #7
 800365e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003662:	2302      	movs	r3, #2
 8003664:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003668:	2302      	movs	r3, #2
 800366a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800366e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003672:	4618      	mov	r0, r3
 8003674:	f7fd ff1a 	bl	80014ac <HAL_RCC_OscConfig>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <SystemClock_Config+0x82>
		Error_Handler();
 800367e:	f000 f939 	bl	80038f4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003682:	230f      	movs	r3, #15
 8003684:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003688:	2303      	movs	r3, #3
 800368a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800368e:	2300      	movs	r3, #0
 8003690:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003694:	2300      	movs	r3, #0
 8003696:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800369a:	2300      	movs	r3, #0
 800369c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80036a0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80036a4:	2104      	movs	r1, #4
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7fe fab0 	bl	8001c0c <HAL_RCC_ClockConfig>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <SystemClock_Config+0xb6>
		Error_Handler();
 80036b2:	f000 f91f 	bl	80038f4 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80036b6:	2302      	movs	r3, #2
 80036b8:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80036ba:	2300      	movs	r3, #0
 80036bc:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80036be:	463b      	mov	r3, r7
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fe fca7 	bl	8002014 <HAL_RCCEx_PeriphCLKConfig>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <SystemClock_Config+0xd0>
		Error_Handler();
 80036cc:	f000 f912 	bl	80038f4 <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80036d0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80036d4:	f7fd fe94 	bl	8001400 <HAL_PWREx_ControlVoltageScaling>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <SystemClock_Config+0xe2>
			!= HAL_OK) {
		Error_Handler();
 80036de:	f000 f909 	bl	80038f4 <Error_Handler>
	}
}
 80036e2:	bf00      	nop
 80036e4:	37e0      	adds	r7, #224	; 0xe0
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
	...

080036ec <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b08a      	sub	sp, #40	; 0x28
 80036f0:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 80036f2:	4b27      	ldr	r3, [pc, #156]	; (8003790 <MX_CAN1_Init+0xa4>)
 80036f4:	4a27      	ldr	r2, [pc, #156]	; (8003794 <MX_CAN1_Init+0xa8>)
 80036f6:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 10;
 80036f8:	4b25      	ldr	r3, [pc, #148]	; (8003790 <MX_CAN1_Init+0xa4>)
 80036fa:	220a      	movs	r2, #10
 80036fc:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_SILENT_LOOPBACK;
 80036fe:	4b24      	ldr	r3, [pc, #144]	; (8003790 <MX_CAN1_Init+0xa4>)
 8003700:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8003704:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003706:	4b22      	ldr	r3, [pc, #136]	; (8003790 <MX_CAN1_Init+0xa4>)
 8003708:	2200      	movs	r2, #0
 800370a:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800370c:	4b20      	ldr	r3, [pc, #128]	; (8003790 <MX_CAN1_Init+0xa4>)
 800370e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8003712:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS1_2TQ;
 8003714:	4b1e      	ldr	r3, [pc, #120]	; (8003790 <MX_CAN1_Init+0xa4>)
 8003716:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800371a:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 800371c:	4b1c      	ldr	r3, [pc, #112]	; (8003790 <MX_CAN1_Init+0xa4>)
 800371e:	2200      	movs	r2, #0
 8003720:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8003722:	4b1b      	ldr	r3, [pc, #108]	; (8003790 <MX_CAN1_Init+0xa4>)
 8003724:	2200      	movs	r2, #0
 8003726:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8003728:	4b19      	ldr	r3, [pc, #100]	; (8003790 <MX_CAN1_Init+0xa4>)
 800372a:	2200      	movs	r2, #0
 800372c:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = ENABLE;
 800372e:	4b18      	ldr	r3, [pc, #96]	; (8003790 <MX_CAN1_Init+0xa4>)
 8003730:	2201      	movs	r2, #1
 8003732:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003734:	4b16      	ldr	r3, [pc, #88]	; (8003790 <MX_CAN1_Init+0xa4>)
 8003736:	2200      	movs	r2, #0
 8003738:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 800373a:	4b15      	ldr	r3, [pc, #84]	; (8003790 <MX_CAN1_Init+0xa4>)
 800373c:	2200      	movs	r2, #0
 800373e:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8003740:	4813      	ldr	r0, [pc, #76]	; (8003790 <MX_CAN1_Init+0xa4>)
 8003742:	f7fc ff8d 	bl	8000660 <HAL_CAN_Init>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <MX_CAN1_Init+0x64>
		Error_Handler();
 800374c:	f000 f8d2 	bl	80038f4 <Error_Handler>
	 * Found Id = 0xXXXXXXXX
	 * Masked = (0x00000000) & 0xXXXXXXXX = 0x00000000
	 * Expected = 0x00000000
	 */
	CAN_FilterTypeDef filterParams;
	filterParams.FilterBank = 0; // Does this matter?
 8003750:	2300      	movs	r3, #0
 8003752:	617b      	str	r3, [r7, #20]
	filterParams.FilterFIFOAssignment = CAN_RX_FIFO0;
 8003754:	2300      	movs	r3, #0
 8003756:	613b      	str	r3, [r7, #16]
	filterParams.FilterMode = CAN_FILTERMODE_IDMASK;
 8003758:	2300      	movs	r3, #0
 800375a:	61bb      	str	r3, [r7, #24]
	filterParams.FilterScale = CAN_FILTERSCALE_32BIT;
 800375c:	2301      	movs	r3, #1
 800375e:	61fb      	str	r3, [r7, #28]
	filterParams.FilterIdHigh = 0x0000;
 8003760:	2300      	movs	r3, #0
 8003762:	603b      	str	r3, [r7, #0]
	filterParams.FilterIdLow = 0x0000;
 8003764:	2300      	movs	r3, #0
 8003766:	607b      	str	r3, [r7, #4]
	filterParams.FilterMaskIdHigh = 0x0000;
 8003768:	2300      	movs	r3, #0
 800376a:	60bb      	str	r3, [r7, #8]
	filterParams.FilterMaskIdLow = 0x0000;
 800376c:	2300      	movs	r3, #0
 800376e:	60fb      	str	r3, [r7, #12]
	filterParams.FilterActivation = CAN_FILTER_ENABLE;
 8003770:	2301      	movs	r3, #1
 8003772:	623b      	str	r3, [r7, #32]

	if(HAL_CAN_ConfigFilter(&hcan1, &filterParams) != HAL_OK) {
 8003774:	463b      	mov	r3, r7
 8003776:	4619      	mov	r1, r3
 8003778:	4805      	ldr	r0, [pc, #20]	; (8003790 <MX_CAN1_Init+0xa4>)
 800377a:	f7fd f86c 	bl	8000856 <HAL_CAN_ConfigFilter>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <MX_CAN1_Init+0x9c>
		Error_Handler();
 8003784:	f000 f8b6 	bl	80038f4 <Error_Handler>
	}

	/* USER CODE END CAN1_Init 2 */

}
 8003788:	bf00      	nop
 800378a:	3728      	adds	r7, #40	; 0x28
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	2000011c 	.word	0x2000011c
 8003794:	40006400 	.word	0x40006400

08003798 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800379c:	4b14      	ldr	r3, [pc, #80]	; (80037f0 <MX_USART2_UART_Init+0x58>)
 800379e:	4a15      	ldr	r2, [pc, #84]	; (80037f4 <MX_USART2_UART_Init+0x5c>)
 80037a0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80037a2:	4b13      	ldr	r3, [pc, #76]	; (80037f0 <MX_USART2_UART_Init+0x58>)
 80037a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80037a8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80037aa:	4b11      	ldr	r3, [pc, #68]	; (80037f0 <MX_USART2_UART_Init+0x58>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80037b0:	4b0f      	ldr	r3, [pc, #60]	; (80037f0 <MX_USART2_UART_Init+0x58>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80037b6:	4b0e      	ldr	r3, [pc, #56]	; (80037f0 <MX_USART2_UART_Init+0x58>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80037bc:	4b0c      	ldr	r3, [pc, #48]	; (80037f0 <MX_USART2_UART_Init+0x58>)
 80037be:	220c      	movs	r2, #12
 80037c0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037c2:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <MX_USART2_UART_Init+0x58>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80037c8:	4b09      	ldr	r3, [pc, #36]	; (80037f0 <MX_USART2_UART_Init+0x58>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80037ce:	4b08      	ldr	r3, [pc, #32]	; (80037f0 <MX_USART2_UART_Init+0x58>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80037d4:	4b06      	ldr	r3, [pc, #24]	; (80037f0 <MX_USART2_UART_Init+0x58>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80037da:	4805      	ldr	r0, [pc, #20]	; (80037f0 <MX_USART2_UART_Init+0x58>)
 80037dc:	f7ff f8ca 	bl	8002974 <HAL_UART_Init>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80037e6:	f000 f885 	bl	80038f4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80037ea:	bf00      	nop
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	2000009c 	.word	0x2000009c
 80037f4:	40004400 	.word	0x40004400

080037f8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b08a      	sub	sp, #40	; 0x28
 80037fc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80037fe:	f107 0314 	add.w	r3, r7, #20
 8003802:	2200      	movs	r2, #0
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	605a      	str	r2, [r3, #4]
 8003808:	609a      	str	r2, [r3, #8]
 800380a:	60da      	str	r2, [r3, #12]
 800380c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 800380e:	4b2b      	ldr	r3, [pc, #172]	; (80038bc <MX_GPIO_Init+0xc4>)
 8003810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003812:	4a2a      	ldr	r2, [pc, #168]	; (80038bc <MX_GPIO_Init+0xc4>)
 8003814:	f043 0304 	orr.w	r3, r3, #4
 8003818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800381a:	4b28      	ldr	r3, [pc, #160]	; (80038bc <MX_GPIO_Init+0xc4>)
 800381c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800381e:	f003 0304 	and.w	r3, r3, #4
 8003822:	613b      	str	r3, [r7, #16]
 8003824:	693b      	ldr	r3, [r7, #16]
	;
	__HAL_RCC_GPIOH_CLK_ENABLE()
 8003826:	4b25      	ldr	r3, [pc, #148]	; (80038bc <MX_GPIO_Init+0xc4>)
 8003828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382a:	4a24      	ldr	r2, [pc, #144]	; (80038bc <MX_GPIO_Init+0xc4>)
 800382c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003832:	4b22      	ldr	r3, [pc, #136]	; (80038bc <MX_GPIO_Init+0xc4>)
 8003834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	68fb      	ldr	r3, [r7, #12]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800383e:	4b1f      	ldr	r3, [pc, #124]	; (80038bc <MX_GPIO_Init+0xc4>)
 8003840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003842:	4a1e      	ldr	r2, [pc, #120]	; (80038bc <MX_GPIO_Init+0xc4>)
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800384a:	4b1c      	ldr	r3, [pc, #112]	; (80038bc <MX_GPIO_Init+0xc4>)
 800384c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	60bb      	str	r3, [r7, #8]
 8003854:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8003856:	4b19      	ldr	r3, [pc, #100]	; (80038bc <MX_GPIO_Init+0xc4>)
 8003858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385a:	4a18      	ldr	r2, [pc, #96]	; (80038bc <MX_GPIO_Init+0xc4>)
 800385c:	f043 0302 	orr.w	r3, r3, #2
 8003860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003862:	4b16      	ldr	r3, [pc, #88]	; (80038bc <MX_GPIO_Init+0xc4>)
 8003864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	607b      	str	r3, [r7, #4]
 800386c:	687b      	ldr	r3, [r7, #4]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800386e:	2200      	movs	r2, #0
 8003870:	2120      	movs	r1, #32
 8003872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003876:	f7fd fd9d 	bl	80013b4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800387a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800387e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003880:	4b0f      	ldr	r3, [pc, #60]	; (80038c0 <MX_GPIO_Init+0xc8>)
 8003882:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003884:	2300      	movs	r3, #0
 8003886:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003888:	f107 0314 	add.w	r3, r7, #20
 800388c:	4619      	mov	r1, r3
 800388e:	480d      	ldr	r0, [pc, #52]	; (80038c4 <MX_GPIO_Init+0xcc>)
 8003890:	f7fd fbe8 	bl	8001064 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8003894:	2320      	movs	r3, #32
 8003896:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003898:	2301      	movs	r3, #1
 800389a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800389c:	2300      	movs	r3, #0
 800389e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038a0:	2300      	movs	r3, #0
 80038a2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80038a4:	f107 0314 	add.w	r3, r7, #20
 80038a8:	4619      	mov	r1, r3
 80038aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038ae:	f7fd fbd9 	bl	8001064 <HAL_GPIO_Init>

}
 80038b2:	bf00      	nop
 80038b4:	3728      	adds	r7, #40	; 0x28
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	40021000 	.word	0x40021000
 80038c0:	10210000 	.word	0x10210000
 80038c4:	48000800 	.word	0x48000800

080038c8 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	733b      	strb	r3, [r7, #12]
 HAL_UART_Transmit(&huart2, &*c, 1, 10);
 80038d6:	f107 010c 	add.w	r1, r7, #12
 80038da:	230a      	movs	r3, #10
 80038dc:	2201      	movs	r2, #1
 80038de:	4804      	ldr	r0, [pc, #16]	; (80038f0 <__io_putchar+0x28>)
 80038e0:	f7ff f896 	bl	8002a10 <HAL_UART_Transmit>
 return ch;
 80038e4:	687b      	ldr	r3, [r7, #4]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	2000009c 	.word	0x2000009c

080038f4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
//	_write(0, "Error Caught", strlen("Error Caught"));
	/* USER CODE END Error_Handler_Debug */
}
 80038f8:	bf00      	nop
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
	...

08003904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800390a:	4b0f      	ldr	r3, [pc, #60]	; (8003948 <HAL_MspInit+0x44>)
 800390c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800390e:	4a0e      	ldr	r2, [pc, #56]	; (8003948 <HAL_MspInit+0x44>)
 8003910:	f043 0301 	orr.w	r3, r3, #1
 8003914:	6613      	str	r3, [r2, #96]	; 0x60
 8003916:	4b0c      	ldr	r3, [pc, #48]	; (8003948 <HAL_MspInit+0x44>)
 8003918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	607b      	str	r3, [r7, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003922:	4b09      	ldr	r3, [pc, #36]	; (8003948 <HAL_MspInit+0x44>)
 8003924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003926:	4a08      	ldr	r2, [pc, #32]	; (8003948 <HAL_MspInit+0x44>)
 8003928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800392c:	6593      	str	r3, [r2, #88]	; 0x58
 800392e:	4b06      	ldr	r3, [pc, #24]	; (8003948 <HAL_MspInit+0x44>)
 8003930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003936:	603b      	str	r3, [r7, #0]
 8003938:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800393a:	bf00      	nop
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40021000 	.word	0x40021000

0800394c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b08a      	sub	sp, #40	; 0x28
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003954:	f107 0314 	add.w	r3, r7, #20
 8003958:	2200      	movs	r2, #0
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	605a      	str	r2, [r3, #4]
 800395e:	609a      	str	r2, [r3, #8]
 8003960:	60da      	str	r2, [r3, #12]
 8003962:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a18      	ldr	r2, [pc, #96]	; (80039cc <HAL_CAN_MspInit+0x80>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d129      	bne.n	80039c2 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800396e:	4b18      	ldr	r3, [pc, #96]	; (80039d0 <HAL_CAN_MspInit+0x84>)
 8003970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003972:	4a17      	ldr	r2, [pc, #92]	; (80039d0 <HAL_CAN_MspInit+0x84>)
 8003974:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003978:	6593      	str	r3, [r2, #88]	; 0x58
 800397a:	4b15      	ldr	r3, [pc, #84]	; (80039d0 <HAL_CAN_MspInit+0x84>)
 800397c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003982:	613b      	str	r3, [r7, #16]
 8003984:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003986:	4b12      	ldr	r3, [pc, #72]	; (80039d0 <HAL_CAN_MspInit+0x84>)
 8003988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800398a:	4a11      	ldr	r2, [pc, #68]	; (80039d0 <HAL_CAN_MspInit+0x84>)
 800398c:	f043 0301 	orr.w	r3, r3, #1
 8003990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003992:	4b0f      	ldr	r3, [pc, #60]	; (80039d0 <HAL_CAN_MspInit+0x84>)
 8003994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800399e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80039a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a4:	2302      	movs	r3, #2
 80039a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a8:	2300      	movs	r3, #0
 80039aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ac:	2303      	movs	r3, #3
 80039ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80039b0:	2309      	movs	r3, #9
 80039b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039b4:	f107 0314 	add.w	r3, r7, #20
 80039b8:	4619      	mov	r1, r3
 80039ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039be:	f7fd fb51 	bl	8001064 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80039c2:	bf00      	nop
 80039c4:	3728      	adds	r7, #40	; 0x28
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40006400 	.word	0x40006400
 80039d0:	40021000 	.word	0x40021000

080039d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b08a      	sub	sp, #40	; 0x28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039dc:	f107 0314 	add.w	r3, r7, #20
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	605a      	str	r2, [r3, #4]
 80039e6:	609a      	str	r2, [r3, #8]
 80039e8:	60da      	str	r2, [r3, #12]
 80039ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a17      	ldr	r2, [pc, #92]	; (8003a50 <HAL_UART_MspInit+0x7c>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d128      	bne.n	8003a48 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80039f6:	4b17      	ldr	r3, [pc, #92]	; (8003a54 <HAL_UART_MspInit+0x80>)
 80039f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fa:	4a16      	ldr	r2, [pc, #88]	; (8003a54 <HAL_UART_MspInit+0x80>)
 80039fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a00:	6593      	str	r3, [r2, #88]	; 0x58
 8003a02:	4b14      	ldr	r3, [pc, #80]	; (8003a54 <HAL_UART_MspInit+0x80>)
 8003a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0a:	613b      	str	r3, [r7, #16]
 8003a0c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a0e:	4b11      	ldr	r3, [pc, #68]	; (8003a54 <HAL_UART_MspInit+0x80>)
 8003a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a12:	4a10      	ldr	r2, [pc, #64]	; (8003a54 <HAL_UART_MspInit+0x80>)
 8003a14:	f043 0301 	orr.w	r3, r3, #1
 8003a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a1a:	4b0e      	ldr	r3, [pc, #56]	; (8003a54 <HAL_UART_MspInit+0x80>)
 8003a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003a26:	230c      	movs	r3, #12
 8003a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a32:	2303      	movs	r3, #3
 8003a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a36:	2307      	movs	r3, #7
 8003a38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a3a:	f107 0314 	add.w	r3, r7, #20
 8003a3e:	4619      	mov	r1, r3
 8003a40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a44:	f7fd fb0e 	bl	8001064 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003a48:	bf00      	nop
 8003a4a:	3728      	adds	r7, #40	; 0x28
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40004400 	.word	0x40004400
 8003a54:	40021000 	.word	0x40021000

08003a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003a5c:	bf00      	nop
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a66:	b480      	push	{r7}
 8003a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a6a:	e7fe      	b.n	8003a6a <HardFault_Handler+0x4>

08003a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a70:	e7fe      	b.n	8003a70 <MemManage_Handler+0x4>

08003a72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a72:	b480      	push	{r7}
 8003a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a76:	e7fe      	b.n	8003a76 <BusFault_Handler+0x4>

08003a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a7c:	e7fe      	b.n	8003a7c <UsageFault_Handler+0x4>

08003a7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a82:	bf00      	nop
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a90:	bf00      	nop
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a9e:	bf00      	nop
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003aac:	f7fc fdba 	bl	8000624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ab0:	bf00      	nop
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	617b      	str	r3, [r7, #20]
 8003ac4:	e00a      	b.n	8003adc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003ac6:	f3af 8000 	nop.w
 8003aca:	4601      	mov	r1, r0
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	60ba      	str	r2, [r7, #8]
 8003ad2:	b2ca      	uxtb	r2, r1
 8003ad4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	617b      	str	r3, [r7, #20]
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	dbf0      	blt.n	8003ac6 <_read+0x12>
	}

return len;
 8003ae4:	687b      	ldr	r3, [r7, #4]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3718      	adds	r7, #24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b086      	sub	sp, #24
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003afa:	2300      	movs	r3, #0
 8003afc:	617b      	str	r3, [r7, #20]
 8003afe:	e009      	b.n	8003b14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	1c5a      	adds	r2, r3, #1
 8003b04:	60ba      	str	r2, [r7, #8]
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff fedd 	bl	80038c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	3301      	adds	r3, #1
 8003b12:	617b      	str	r3, [r7, #20]
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	dbf1      	blt.n	8003b00 <_write+0x12>
	}
	return len;
 8003b1c:	687b      	ldr	r3, [r7, #4]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3718      	adds	r7, #24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <_close>:

int _close(int file)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b083      	sub	sp, #12
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
	return -1;
 8003b2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
 8003b46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b4e:	605a      	str	r2, [r3, #4]
	return 0;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <_isatty>:

int _isatty(int file)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
	return 1;
 8003b66:	2301      	movs	r3, #1
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
	return 0;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
	...

08003b90 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003b98:	4b11      	ldr	r3, [pc, #68]	; (8003be0 <_sbrk+0x50>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d102      	bne.n	8003ba6 <_sbrk+0x16>
		heap_end = &end;
 8003ba0:	4b0f      	ldr	r3, [pc, #60]	; (8003be0 <_sbrk+0x50>)
 8003ba2:	4a10      	ldr	r2, [pc, #64]	; (8003be4 <_sbrk+0x54>)
 8003ba4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003ba6:	4b0e      	ldr	r3, [pc, #56]	; (8003be0 <_sbrk+0x50>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003bac:	4b0c      	ldr	r3, [pc, #48]	; (8003be0 <_sbrk+0x50>)
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	466a      	mov	r2, sp
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d907      	bls.n	8003bca <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003bba:	f000 f875 	bl	8003ca8 <__errno>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	230c      	movs	r3, #12
 8003bc2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc8:	e006      	b.n	8003bd8 <_sbrk+0x48>
	}

	heap_end += incr;
 8003bca:	4b05      	ldr	r3, [pc, #20]	; (8003be0 <_sbrk+0x50>)
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	4a03      	ldr	r2, [pc, #12]	; (8003be0 <_sbrk+0x50>)
 8003bd4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	2000008c 	.word	0x2000008c
 8003be4:	20000148 	.word	0x20000148

08003be8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bec:	4b17      	ldr	r3, [pc, #92]	; (8003c4c <SystemInit+0x64>)
 8003bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf2:	4a16      	ldr	r2, [pc, #88]	; (8003c4c <SystemInit+0x64>)
 8003bf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003bfc:	4b14      	ldr	r3, [pc, #80]	; (8003c50 <SystemInit+0x68>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a13      	ldr	r2, [pc, #76]	; (8003c50 <SystemInit+0x68>)
 8003c02:	f043 0301 	orr.w	r3, r3, #1
 8003c06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003c08:	4b11      	ldr	r3, [pc, #68]	; (8003c50 <SystemInit+0x68>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003c0e:	4b10      	ldr	r3, [pc, #64]	; (8003c50 <SystemInit+0x68>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a0f      	ldr	r2, [pc, #60]	; (8003c50 <SystemInit+0x68>)
 8003c14:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003c18:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003c1c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003c1e:	4b0c      	ldr	r3, [pc, #48]	; (8003c50 <SystemInit+0x68>)
 8003c20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c24:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003c26:	4b0a      	ldr	r3, [pc, #40]	; (8003c50 <SystemInit+0x68>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a09      	ldr	r2, [pc, #36]	; (8003c50 <SystemInit+0x68>)
 8003c2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c30:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003c32:	4b07      	ldr	r3, [pc, #28]	; (8003c50 <SystemInit+0x68>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003c38:	4b04      	ldr	r3, [pc, #16]	; (8003c4c <SystemInit+0x64>)
 8003c3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c3e:	609a      	str	r2, [r3, #8]
#endif
}
 8003c40:	bf00      	nop
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	e000ed00 	.word	0xe000ed00
 8003c50:	40021000 	.word	0x40021000

08003c54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003c54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c8c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003c58:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003c5a:	e003      	b.n	8003c64 <LoopCopyDataInit>

08003c5c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003c5c:	4b0c      	ldr	r3, [pc, #48]	; (8003c90 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003c5e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003c60:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003c62:	3104      	adds	r1, #4

08003c64 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003c64:	480b      	ldr	r0, [pc, #44]	; (8003c94 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003c66:	4b0c      	ldr	r3, [pc, #48]	; (8003c98 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003c68:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003c6a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003c6c:	d3f6      	bcc.n	8003c5c <CopyDataInit>
	ldr	r2, =_sbss
 8003c6e:	4a0b      	ldr	r2, [pc, #44]	; (8003c9c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003c70:	e002      	b.n	8003c78 <LoopFillZerobss>

08003c72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003c72:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003c74:	f842 3b04 	str.w	r3, [r2], #4

08003c78 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003c78:	4b09      	ldr	r3, [pc, #36]	; (8003ca0 <LoopForever+0x16>)
	cmp	r2, r3
 8003c7a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003c7c:	d3f9      	bcc.n	8003c72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003c7e:	f7ff ffb3 	bl	8003be8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c82:	f000 f817 	bl	8003cb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003c86:	f7ff fc67 	bl	8003558 <main>

08003c8a <LoopForever>:

LoopForever:
    b LoopForever
 8003c8a:	e7fe      	b.n	8003c8a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003c8c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003c90:	08004be4 	.word	0x08004be4
	ldr	r0, =_sdata
 8003c94:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003c98:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8003c9c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8003ca0:	20000148 	.word	0x20000148

08003ca4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ca4:	e7fe      	b.n	8003ca4 <ADC1_2_IRQHandler>
	...

08003ca8 <__errno>:
 8003ca8:	4b01      	ldr	r3, [pc, #4]	; (8003cb0 <__errno+0x8>)
 8003caa:	6818      	ldr	r0, [r3, #0]
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	2000000c 	.word	0x2000000c

08003cb4 <__libc_init_array>:
 8003cb4:	b570      	push	{r4, r5, r6, lr}
 8003cb6:	4e0d      	ldr	r6, [pc, #52]	; (8003cec <__libc_init_array+0x38>)
 8003cb8:	4c0d      	ldr	r4, [pc, #52]	; (8003cf0 <__libc_init_array+0x3c>)
 8003cba:	1ba4      	subs	r4, r4, r6
 8003cbc:	10a4      	asrs	r4, r4, #2
 8003cbe:	2500      	movs	r5, #0
 8003cc0:	42a5      	cmp	r5, r4
 8003cc2:	d109      	bne.n	8003cd8 <__libc_init_array+0x24>
 8003cc4:	4e0b      	ldr	r6, [pc, #44]	; (8003cf4 <__libc_init_array+0x40>)
 8003cc6:	4c0c      	ldr	r4, [pc, #48]	; (8003cf8 <__libc_init_array+0x44>)
 8003cc8:	f000 ff04 	bl	8004ad4 <_init>
 8003ccc:	1ba4      	subs	r4, r4, r6
 8003cce:	10a4      	asrs	r4, r4, #2
 8003cd0:	2500      	movs	r5, #0
 8003cd2:	42a5      	cmp	r5, r4
 8003cd4:	d105      	bne.n	8003ce2 <__libc_init_array+0x2e>
 8003cd6:	bd70      	pop	{r4, r5, r6, pc}
 8003cd8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cdc:	4798      	blx	r3
 8003cde:	3501      	adds	r5, #1
 8003ce0:	e7ee      	b.n	8003cc0 <__libc_init_array+0xc>
 8003ce2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ce6:	4798      	blx	r3
 8003ce8:	3501      	adds	r5, #1
 8003cea:	e7f2      	b.n	8003cd2 <__libc_init_array+0x1e>
 8003cec:	08004bdc 	.word	0x08004bdc
 8003cf0:	08004bdc 	.word	0x08004bdc
 8003cf4:	08004bdc 	.word	0x08004bdc
 8003cf8:	08004be0 	.word	0x08004be0

08003cfc <memset>:
 8003cfc:	4402      	add	r2, r0
 8003cfe:	4603      	mov	r3, r0
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d100      	bne.n	8003d06 <memset+0xa>
 8003d04:	4770      	bx	lr
 8003d06:	f803 1b01 	strb.w	r1, [r3], #1
 8003d0a:	e7f9      	b.n	8003d00 <memset+0x4>

08003d0c <iprintf>:
 8003d0c:	b40f      	push	{r0, r1, r2, r3}
 8003d0e:	4b0a      	ldr	r3, [pc, #40]	; (8003d38 <iprintf+0x2c>)
 8003d10:	b513      	push	{r0, r1, r4, lr}
 8003d12:	681c      	ldr	r4, [r3, #0]
 8003d14:	b124      	cbz	r4, 8003d20 <iprintf+0x14>
 8003d16:	69a3      	ldr	r3, [r4, #24]
 8003d18:	b913      	cbnz	r3, 8003d20 <iprintf+0x14>
 8003d1a:	4620      	mov	r0, r4
 8003d1c:	f000 f84e 	bl	8003dbc <__sinit>
 8003d20:	ab05      	add	r3, sp, #20
 8003d22:	9a04      	ldr	r2, [sp, #16]
 8003d24:	68a1      	ldr	r1, [r4, #8]
 8003d26:	9301      	str	r3, [sp, #4]
 8003d28:	4620      	mov	r0, r4
 8003d2a:	f000 f955 	bl	8003fd8 <_vfiprintf_r>
 8003d2e:	b002      	add	sp, #8
 8003d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d34:	b004      	add	sp, #16
 8003d36:	4770      	bx	lr
 8003d38:	2000000c 	.word	0x2000000c

08003d3c <std>:
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	b510      	push	{r4, lr}
 8003d40:	4604      	mov	r4, r0
 8003d42:	e9c0 3300 	strd	r3, r3, [r0]
 8003d46:	6083      	str	r3, [r0, #8]
 8003d48:	8181      	strh	r1, [r0, #12]
 8003d4a:	6643      	str	r3, [r0, #100]	; 0x64
 8003d4c:	81c2      	strh	r2, [r0, #14]
 8003d4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d52:	6183      	str	r3, [r0, #24]
 8003d54:	4619      	mov	r1, r3
 8003d56:	2208      	movs	r2, #8
 8003d58:	305c      	adds	r0, #92	; 0x5c
 8003d5a:	f7ff ffcf 	bl	8003cfc <memset>
 8003d5e:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <std+0x38>)
 8003d60:	6263      	str	r3, [r4, #36]	; 0x24
 8003d62:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <std+0x3c>)
 8003d64:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d66:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <std+0x40>)
 8003d68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d6a:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <std+0x44>)
 8003d6c:	6224      	str	r4, [r4, #32]
 8003d6e:	6323      	str	r3, [r4, #48]	; 0x30
 8003d70:	bd10      	pop	{r4, pc}
 8003d72:	bf00      	nop
 8003d74:	08004535 	.word	0x08004535
 8003d78:	08004557 	.word	0x08004557
 8003d7c:	0800458f 	.word	0x0800458f
 8003d80:	080045b3 	.word	0x080045b3

08003d84 <_cleanup_r>:
 8003d84:	4901      	ldr	r1, [pc, #4]	; (8003d8c <_cleanup_r+0x8>)
 8003d86:	f000 b885 	b.w	8003e94 <_fwalk_reent>
 8003d8a:	bf00      	nop
 8003d8c:	0800488d 	.word	0x0800488d

08003d90 <__sfmoreglue>:
 8003d90:	b570      	push	{r4, r5, r6, lr}
 8003d92:	1e4a      	subs	r2, r1, #1
 8003d94:	2568      	movs	r5, #104	; 0x68
 8003d96:	4355      	muls	r5, r2
 8003d98:	460e      	mov	r6, r1
 8003d9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003d9e:	f000 f897 	bl	8003ed0 <_malloc_r>
 8003da2:	4604      	mov	r4, r0
 8003da4:	b140      	cbz	r0, 8003db8 <__sfmoreglue+0x28>
 8003da6:	2100      	movs	r1, #0
 8003da8:	e9c0 1600 	strd	r1, r6, [r0]
 8003dac:	300c      	adds	r0, #12
 8003dae:	60a0      	str	r0, [r4, #8]
 8003db0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003db4:	f7ff ffa2 	bl	8003cfc <memset>
 8003db8:	4620      	mov	r0, r4
 8003dba:	bd70      	pop	{r4, r5, r6, pc}

08003dbc <__sinit>:
 8003dbc:	6983      	ldr	r3, [r0, #24]
 8003dbe:	b510      	push	{r4, lr}
 8003dc0:	4604      	mov	r4, r0
 8003dc2:	bb33      	cbnz	r3, 8003e12 <__sinit+0x56>
 8003dc4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003dc8:	6503      	str	r3, [r0, #80]	; 0x50
 8003dca:	4b12      	ldr	r3, [pc, #72]	; (8003e14 <__sinit+0x58>)
 8003dcc:	4a12      	ldr	r2, [pc, #72]	; (8003e18 <__sinit+0x5c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6282      	str	r2, [r0, #40]	; 0x28
 8003dd2:	4298      	cmp	r0, r3
 8003dd4:	bf04      	itt	eq
 8003dd6:	2301      	moveq	r3, #1
 8003dd8:	6183      	streq	r3, [r0, #24]
 8003dda:	f000 f81f 	bl	8003e1c <__sfp>
 8003dde:	6060      	str	r0, [r4, #4]
 8003de0:	4620      	mov	r0, r4
 8003de2:	f000 f81b 	bl	8003e1c <__sfp>
 8003de6:	60a0      	str	r0, [r4, #8]
 8003de8:	4620      	mov	r0, r4
 8003dea:	f000 f817 	bl	8003e1c <__sfp>
 8003dee:	2200      	movs	r2, #0
 8003df0:	60e0      	str	r0, [r4, #12]
 8003df2:	2104      	movs	r1, #4
 8003df4:	6860      	ldr	r0, [r4, #4]
 8003df6:	f7ff ffa1 	bl	8003d3c <std>
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	2109      	movs	r1, #9
 8003dfe:	68a0      	ldr	r0, [r4, #8]
 8003e00:	f7ff ff9c 	bl	8003d3c <std>
 8003e04:	2202      	movs	r2, #2
 8003e06:	2112      	movs	r1, #18
 8003e08:	68e0      	ldr	r0, [r4, #12]
 8003e0a:	f7ff ff97 	bl	8003d3c <std>
 8003e0e:	2301      	movs	r3, #1
 8003e10:	61a3      	str	r3, [r4, #24]
 8003e12:	bd10      	pop	{r4, pc}
 8003e14:	08004b3c 	.word	0x08004b3c
 8003e18:	08003d85 	.word	0x08003d85

08003e1c <__sfp>:
 8003e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e1e:	4b1b      	ldr	r3, [pc, #108]	; (8003e8c <__sfp+0x70>)
 8003e20:	681e      	ldr	r6, [r3, #0]
 8003e22:	69b3      	ldr	r3, [r6, #24]
 8003e24:	4607      	mov	r7, r0
 8003e26:	b913      	cbnz	r3, 8003e2e <__sfp+0x12>
 8003e28:	4630      	mov	r0, r6
 8003e2a:	f7ff ffc7 	bl	8003dbc <__sinit>
 8003e2e:	3648      	adds	r6, #72	; 0x48
 8003e30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003e34:	3b01      	subs	r3, #1
 8003e36:	d503      	bpl.n	8003e40 <__sfp+0x24>
 8003e38:	6833      	ldr	r3, [r6, #0]
 8003e3a:	b133      	cbz	r3, 8003e4a <__sfp+0x2e>
 8003e3c:	6836      	ldr	r6, [r6, #0]
 8003e3e:	e7f7      	b.n	8003e30 <__sfp+0x14>
 8003e40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003e44:	b16d      	cbz	r5, 8003e62 <__sfp+0x46>
 8003e46:	3468      	adds	r4, #104	; 0x68
 8003e48:	e7f4      	b.n	8003e34 <__sfp+0x18>
 8003e4a:	2104      	movs	r1, #4
 8003e4c:	4638      	mov	r0, r7
 8003e4e:	f7ff ff9f 	bl	8003d90 <__sfmoreglue>
 8003e52:	6030      	str	r0, [r6, #0]
 8003e54:	2800      	cmp	r0, #0
 8003e56:	d1f1      	bne.n	8003e3c <__sfp+0x20>
 8003e58:	230c      	movs	r3, #12
 8003e5a:	603b      	str	r3, [r7, #0]
 8003e5c:	4604      	mov	r4, r0
 8003e5e:	4620      	mov	r0, r4
 8003e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e62:	4b0b      	ldr	r3, [pc, #44]	; (8003e90 <__sfp+0x74>)
 8003e64:	6665      	str	r5, [r4, #100]	; 0x64
 8003e66:	e9c4 5500 	strd	r5, r5, [r4]
 8003e6a:	60a5      	str	r5, [r4, #8]
 8003e6c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003e70:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003e74:	2208      	movs	r2, #8
 8003e76:	4629      	mov	r1, r5
 8003e78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003e7c:	f7ff ff3e 	bl	8003cfc <memset>
 8003e80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003e84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003e88:	e7e9      	b.n	8003e5e <__sfp+0x42>
 8003e8a:	bf00      	nop
 8003e8c:	08004b3c 	.word	0x08004b3c
 8003e90:	ffff0001 	.word	0xffff0001

08003e94 <_fwalk_reent>:
 8003e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e98:	4680      	mov	r8, r0
 8003e9a:	4689      	mov	r9, r1
 8003e9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003ea0:	2600      	movs	r6, #0
 8003ea2:	b914      	cbnz	r4, 8003eaa <_fwalk_reent+0x16>
 8003ea4:	4630      	mov	r0, r6
 8003ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003eaa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003eae:	3f01      	subs	r7, #1
 8003eb0:	d501      	bpl.n	8003eb6 <_fwalk_reent+0x22>
 8003eb2:	6824      	ldr	r4, [r4, #0]
 8003eb4:	e7f5      	b.n	8003ea2 <_fwalk_reent+0xe>
 8003eb6:	89ab      	ldrh	r3, [r5, #12]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d907      	bls.n	8003ecc <_fwalk_reent+0x38>
 8003ebc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	d003      	beq.n	8003ecc <_fwalk_reent+0x38>
 8003ec4:	4629      	mov	r1, r5
 8003ec6:	4640      	mov	r0, r8
 8003ec8:	47c8      	blx	r9
 8003eca:	4306      	orrs	r6, r0
 8003ecc:	3568      	adds	r5, #104	; 0x68
 8003ece:	e7ee      	b.n	8003eae <_fwalk_reent+0x1a>

08003ed0 <_malloc_r>:
 8003ed0:	b570      	push	{r4, r5, r6, lr}
 8003ed2:	1ccd      	adds	r5, r1, #3
 8003ed4:	f025 0503 	bic.w	r5, r5, #3
 8003ed8:	3508      	adds	r5, #8
 8003eda:	2d0c      	cmp	r5, #12
 8003edc:	bf38      	it	cc
 8003ede:	250c      	movcc	r5, #12
 8003ee0:	2d00      	cmp	r5, #0
 8003ee2:	4606      	mov	r6, r0
 8003ee4:	db01      	blt.n	8003eea <_malloc_r+0x1a>
 8003ee6:	42a9      	cmp	r1, r5
 8003ee8:	d903      	bls.n	8003ef2 <_malloc_r+0x22>
 8003eea:	230c      	movs	r3, #12
 8003eec:	6033      	str	r3, [r6, #0]
 8003eee:	2000      	movs	r0, #0
 8003ef0:	bd70      	pop	{r4, r5, r6, pc}
 8003ef2:	f000 fd6b 	bl	80049cc <__malloc_lock>
 8003ef6:	4a21      	ldr	r2, [pc, #132]	; (8003f7c <_malloc_r+0xac>)
 8003ef8:	6814      	ldr	r4, [r2, #0]
 8003efa:	4621      	mov	r1, r4
 8003efc:	b991      	cbnz	r1, 8003f24 <_malloc_r+0x54>
 8003efe:	4c20      	ldr	r4, [pc, #128]	; (8003f80 <_malloc_r+0xb0>)
 8003f00:	6823      	ldr	r3, [r4, #0]
 8003f02:	b91b      	cbnz	r3, 8003f0c <_malloc_r+0x3c>
 8003f04:	4630      	mov	r0, r6
 8003f06:	f000 fb05 	bl	8004514 <_sbrk_r>
 8003f0a:	6020      	str	r0, [r4, #0]
 8003f0c:	4629      	mov	r1, r5
 8003f0e:	4630      	mov	r0, r6
 8003f10:	f000 fb00 	bl	8004514 <_sbrk_r>
 8003f14:	1c43      	adds	r3, r0, #1
 8003f16:	d124      	bne.n	8003f62 <_malloc_r+0x92>
 8003f18:	230c      	movs	r3, #12
 8003f1a:	6033      	str	r3, [r6, #0]
 8003f1c:	4630      	mov	r0, r6
 8003f1e:	f000 fd56 	bl	80049ce <__malloc_unlock>
 8003f22:	e7e4      	b.n	8003eee <_malloc_r+0x1e>
 8003f24:	680b      	ldr	r3, [r1, #0]
 8003f26:	1b5b      	subs	r3, r3, r5
 8003f28:	d418      	bmi.n	8003f5c <_malloc_r+0x8c>
 8003f2a:	2b0b      	cmp	r3, #11
 8003f2c:	d90f      	bls.n	8003f4e <_malloc_r+0x7e>
 8003f2e:	600b      	str	r3, [r1, #0]
 8003f30:	50cd      	str	r5, [r1, r3]
 8003f32:	18cc      	adds	r4, r1, r3
 8003f34:	4630      	mov	r0, r6
 8003f36:	f000 fd4a 	bl	80049ce <__malloc_unlock>
 8003f3a:	f104 000b 	add.w	r0, r4, #11
 8003f3e:	1d23      	adds	r3, r4, #4
 8003f40:	f020 0007 	bic.w	r0, r0, #7
 8003f44:	1ac3      	subs	r3, r0, r3
 8003f46:	d0d3      	beq.n	8003ef0 <_malloc_r+0x20>
 8003f48:	425a      	negs	r2, r3
 8003f4a:	50e2      	str	r2, [r4, r3]
 8003f4c:	e7d0      	b.n	8003ef0 <_malloc_r+0x20>
 8003f4e:	428c      	cmp	r4, r1
 8003f50:	684b      	ldr	r3, [r1, #4]
 8003f52:	bf16      	itet	ne
 8003f54:	6063      	strne	r3, [r4, #4]
 8003f56:	6013      	streq	r3, [r2, #0]
 8003f58:	460c      	movne	r4, r1
 8003f5a:	e7eb      	b.n	8003f34 <_malloc_r+0x64>
 8003f5c:	460c      	mov	r4, r1
 8003f5e:	6849      	ldr	r1, [r1, #4]
 8003f60:	e7cc      	b.n	8003efc <_malloc_r+0x2c>
 8003f62:	1cc4      	adds	r4, r0, #3
 8003f64:	f024 0403 	bic.w	r4, r4, #3
 8003f68:	42a0      	cmp	r0, r4
 8003f6a:	d005      	beq.n	8003f78 <_malloc_r+0xa8>
 8003f6c:	1a21      	subs	r1, r4, r0
 8003f6e:	4630      	mov	r0, r6
 8003f70:	f000 fad0 	bl	8004514 <_sbrk_r>
 8003f74:	3001      	adds	r0, #1
 8003f76:	d0cf      	beq.n	8003f18 <_malloc_r+0x48>
 8003f78:	6025      	str	r5, [r4, #0]
 8003f7a:	e7db      	b.n	8003f34 <_malloc_r+0x64>
 8003f7c:	20000090 	.word	0x20000090
 8003f80:	20000094 	.word	0x20000094

08003f84 <__sfputc_r>:
 8003f84:	6893      	ldr	r3, [r2, #8]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	b410      	push	{r4}
 8003f8c:	6093      	str	r3, [r2, #8]
 8003f8e:	da08      	bge.n	8003fa2 <__sfputc_r+0x1e>
 8003f90:	6994      	ldr	r4, [r2, #24]
 8003f92:	42a3      	cmp	r3, r4
 8003f94:	db01      	blt.n	8003f9a <__sfputc_r+0x16>
 8003f96:	290a      	cmp	r1, #10
 8003f98:	d103      	bne.n	8003fa2 <__sfputc_r+0x1e>
 8003f9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f9e:	f000 bb0d 	b.w	80045bc <__swbuf_r>
 8003fa2:	6813      	ldr	r3, [r2, #0]
 8003fa4:	1c58      	adds	r0, r3, #1
 8003fa6:	6010      	str	r0, [r2, #0]
 8003fa8:	7019      	strb	r1, [r3, #0]
 8003faa:	4608      	mov	r0, r1
 8003fac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <__sfputs_r>:
 8003fb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fb4:	4606      	mov	r6, r0
 8003fb6:	460f      	mov	r7, r1
 8003fb8:	4614      	mov	r4, r2
 8003fba:	18d5      	adds	r5, r2, r3
 8003fbc:	42ac      	cmp	r4, r5
 8003fbe:	d101      	bne.n	8003fc4 <__sfputs_r+0x12>
 8003fc0:	2000      	movs	r0, #0
 8003fc2:	e007      	b.n	8003fd4 <__sfputs_r+0x22>
 8003fc4:	463a      	mov	r2, r7
 8003fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fca:	4630      	mov	r0, r6
 8003fcc:	f7ff ffda 	bl	8003f84 <__sfputc_r>
 8003fd0:	1c43      	adds	r3, r0, #1
 8003fd2:	d1f3      	bne.n	8003fbc <__sfputs_r+0xa>
 8003fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003fd8 <_vfiprintf_r>:
 8003fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fdc:	460c      	mov	r4, r1
 8003fde:	b09d      	sub	sp, #116	; 0x74
 8003fe0:	4617      	mov	r7, r2
 8003fe2:	461d      	mov	r5, r3
 8003fe4:	4606      	mov	r6, r0
 8003fe6:	b118      	cbz	r0, 8003ff0 <_vfiprintf_r+0x18>
 8003fe8:	6983      	ldr	r3, [r0, #24]
 8003fea:	b90b      	cbnz	r3, 8003ff0 <_vfiprintf_r+0x18>
 8003fec:	f7ff fee6 	bl	8003dbc <__sinit>
 8003ff0:	4b7c      	ldr	r3, [pc, #496]	; (80041e4 <_vfiprintf_r+0x20c>)
 8003ff2:	429c      	cmp	r4, r3
 8003ff4:	d158      	bne.n	80040a8 <_vfiprintf_r+0xd0>
 8003ff6:	6874      	ldr	r4, [r6, #4]
 8003ff8:	89a3      	ldrh	r3, [r4, #12]
 8003ffa:	0718      	lsls	r0, r3, #28
 8003ffc:	d55e      	bpl.n	80040bc <_vfiprintf_r+0xe4>
 8003ffe:	6923      	ldr	r3, [r4, #16]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d05b      	beq.n	80040bc <_vfiprintf_r+0xe4>
 8004004:	2300      	movs	r3, #0
 8004006:	9309      	str	r3, [sp, #36]	; 0x24
 8004008:	2320      	movs	r3, #32
 800400a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800400e:	2330      	movs	r3, #48	; 0x30
 8004010:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004014:	9503      	str	r5, [sp, #12]
 8004016:	f04f 0b01 	mov.w	fp, #1
 800401a:	46b8      	mov	r8, r7
 800401c:	4645      	mov	r5, r8
 800401e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004022:	b10b      	cbz	r3, 8004028 <_vfiprintf_r+0x50>
 8004024:	2b25      	cmp	r3, #37	; 0x25
 8004026:	d154      	bne.n	80040d2 <_vfiprintf_r+0xfa>
 8004028:	ebb8 0a07 	subs.w	sl, r8, r7
 800402c:	d00b      	beq.n	8004046 <_vfiprintf_r+0x6e>
 800402e:	4653      	mov	r3, sl
 8004030:	463a      	mov	r2, r7
 8004032:	4621      	mov	r1, r4
 8004034:	4630      	mov	r0, r6
 8004036:	f7ff ffbc 	bl	8003fb2 <__sfputs_r>
 800403a:	3001      	adds	r0, #1
 800403c:	f000 80c2 	beq.w	80041c4 <_vfiprintf_r+0x1ec>
 8004040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004042:	4453      	add	r3, sl
 8004044:	9309      	str	r3, [sp, #36]	; 0x24
 8004046:	f898 3000 	ldrb.w	r3, [r8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 80ba 	beq.w	80041c4 <_vfiprintf_r+0x1ec>
 8004050:	2300      	movs	r3, #0
 8004052:	f04f 32ff 	mov.w	r2, #4294967295
 8004056:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800405a:	9304      	str	r3, [sp, #16]
 800405c:	9307      	str	r3, [sp, #28]
 800405e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004062:	931a      	str	r3, [sp, #104]	; 0x68
 8004064:	46a8      	mov	r8, r5
 8004066:	2205      	movs	r2, #5
 8004068:	f818 1b01 	ldrb.w	r1, [r8], #1
 800406c:	485e      	ldr	r0, [pc, #376]	; (80041e8 <_vfiprintf_r+0x210>)
 800406e:	f7fc f8af 	bl	80001d0 <memchr>
 8004072:	9b04      	ldr	r3, [sp, #16]
 8004074:	bb78      	cbnz	r0, 80040d6 <_vfiprintf_r+0xfe>
 8004076:	06d9      	lsls	r1, r3, #27
 8004078:	bf44      	itt	mi
 800407a:	2220      	movmi	r2, #32
 800407c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004080:	071a      	lsls	r2, r3, #28
 8004082:	bf44      	itt	mi
 8004084:	222b      	movmi	r2, #43	; 0x2b
 8004086:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800408a:	782a      	ldrb	r2, [r5, #0]
 800408c:	2a2a      	cmp	r2, #42	; 0x2a
 800408e:	d02a      	beq.n	80040e6 <_vfiprintf_r+0x10e>
 8004090:	9a07      	ldr	r2, [sp, #28]
 8004092:	46a8      	mov	r8, r5
 8004094:	2000      	movs	r0, #0
 8004096:	250a      	movs	r5, #10
 8004098:	4641      	mov	r1, r8
 800409a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800409e:	3b30      	subs	r3, #48	; 0x30
 80040a0:	2b09      	cmp	r3, #9
 80040a2:	d969      	bls.n	8004178 <_vfiprintf_r+0x1a0>
 80040a4:	b360      	cbz	r0, 8004100 <_vfiprintf_r+0x128>
 80040a6:	e024      	b.n	80040f2 <_vfiprintf_r+0x11a>
 80040a8:	4b50      	ldr	r3, [pc, #320]	; (80041ec <_vfiprintf_r+0x214>)
 80040aa:	429c      	cmp	r4, r3
 80040ac:	d101      	bne.n	80040b2 <_vfiprintf_r+0xda>
 80040ae:	68b4      	ldr	r4, [r6, #8]
 80040b0:	e7a2      	b.n	8003ff8 <_vfiprintf_r+0x20>
 80040b2:	4b4f      	ldr	r3, [pc, #316]	; (80041f0 <_vfiprintf_r+0x218>)
 80040b4:	429c      	cmp	r4, r3
 80040b6:	bf08      	it	eq
 80040b8:	68f4      	ldreq	r4, [r6, #12]
 80040ba:	e79d      	b.n	8003ff8 <_vfiprintf_r+0x20>
 80040bc:	4621      	mov	r1, r4
 80040be:	4630      	mov	r0, r6
 80040c0:	f000 fae0 	bl	8004684 <__swsetup_r>
 80040c4:	2800      	cmp	r0, #0
 80040c6:	d09d      	beq.n	8004004 <_vfiprintf_r+0x2c>
 80040c8:	f04f 30ff 	mov.w	r0, #4294967295
 80040cc:	b01d      	add	sp, #116	; 0x74
 80040ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040d2:	46a8      	mov	r8, r5
 80040d4:	e7a2      	b.n	800401c <_vfiprintf_r+0x44>
 80040d6:	4a44      	ldr	r2, [pc, #272]	; (80041e8 <_vfiprintf_r+0x210>)
 80040d8:	1a80      	subs	r0, r0, r2
 80040da:	fa0b f000 	lsl.w	r0, fp, r0
 80040de:	4318      	orrs	r0, r3
 80040e0:	9004      	str	r0, [sp, #16]
 80040e2:	4645      	mov	r5, r8
 80040e4:	e7be      	b.n	8004064 <_vfiprintf_r+0x8c>
 80040e6:	9a03      	ldr	r2, [sp, #12]
 80040e8:	1d11      	adds	r1, r2, #4
 80040ea:	6812      	ldr	r2, [r2, #0]
 80040ec:	9103      	str	r1, [sp, #12]
 80040ee:	2a00      	cmp	r2, #0
 80040f0:	db01      	blt.n	80040f6 <_vfiprintf_r+0x11e>
 80040f2:	9207      	str	r2, [sp, #28]
 80040f4:	e004      	b.n	8004100 <_vfiprintf_r+0x128>
 80040f6:	4252      	negs	r2, r2
 80040f8:	f043 0302 	orr.w	r3, r3, #2
 80040fc:	9207      	str	r2, [sp, #28]
 80040fe:	9304      	str	r3, [sp, #16]
 8004100:	f898 3000 	ldrb.w	r3, [r8]
 8004104:	2b2e      	cmp	r3, #46	; 0x2e
 8004106:	d10e      	bne.n	8004126 <_vfiprintf_r+0x14e>
 8004108:	f898 3001 	ldrb.w	r3, [r8, #1]
 800410c:	2b2a      	cmp	r3, #42	; 0x2a
 800410e:	d138      	bne.n	8004182 <_vfiprintf_r+0x1aa>
 8004110:	9b03      	ldr	r3, [sp, #12]
 8004112:	1d1a      	adds	r2, r3, #4
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	9203      	str	r2, [sp, #12]
 8004118:	2b00      	cmp	r3, #0
 800411a:	bfb8      	it	lt
 800411c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004120:	f108 0802 	add.w	r8, r8, #2
 8004124:	9305      	str	r3, [sp, #20]
 8004126:	4d33      	ldr	r5, [pc, #204]	; (80041f4 <_vfiprintf_r+0x21c>)
 8004128:	f898 1000 	ldrb.w	r1, [r8]
 800412c:	2203      	movs	r2, #3
 800412e:	4628      	mov	r0, r5
 8004130:	f7fc f84e 	bl	80001d0 <memchr>
 8004134:	b140      	cbz	r0, 8004148 <_vfiprintf_r+0x170>
 8004136:	2340      	movs	r3, #64	; 0x40
 8004138:	1b40      	subs	r0, r0, r5
 800413a:	fa03 f000 	lsl.w	r0, r3, r0
 800413e:	9b04      	ldr	r3, [sp, #16]
 8004140:	4303      	orrs	r3, r0
 8004142:	f108 0801 	add.w	r8, r8, #1
 8004146:	9304      	str	r3, [sp, #16]
 8004148:	f898 1000 	ldrb.w	r1, [r8]
 800414c:	482a      	ldr	r0, [pc, #168]	; (80041f8 <_vfiprintf_r+0x220>)
 800414e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004152:	2206      	movs	r2, #6
 8004154:	f108 0701 	add.w	r7, r8, #1
 8004158:	f7fc f83a 	bl	80001d0 <memchr>
 800415c:	2800      	cmp	r0, #0
 800415e:	d037      	beq.n	80041d0 <_vfiprintf_r+0x1f8>
 8004160:	4b26      	ldr	r3, [pc, #152]	; (80041fc <_vfiprintf_r+0x224>)
 8004162:	bb1b      	cbnz	r3, 80041ac <_vfiprintf_r+0x1d4>
 8004164:	9b03      	ldr	r3, [sp, #12]
 8004166:	3307      	adds	r3, #7
 8004168:	f023 0307 	bic.w	r3, r3, #7
 800416c:	3308      	adds	r3, #8
 800416e:	9303      	str	r3, [sp, #12]
 8004170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004172:	444b      	add	r3, r9
 8004174:	9309      	str	r3, [sp, #36]	; 0x24
 8004176:	e750      	b.n	800401a <_vfiprintf_r+0x42>
 8004178:	fb05 3202 	mla	r2, r5, r2, r3
 800417c:	2001      	movs	r0, #1
 800417e:	4688      	mov	r8, r1
 8004180:	e78a      	b.n	8004098 <_vfiprintf_r+0xc0>
 8004182:	2300      	movs	r3, #0
 8004184:	f108 0801 	add.w	r8, r8, #1
 8004188:	9305      	str	r3, [sp, #20]
 800418a:	4619      	mov	r1, r3
 800418c:	250a      	movs	r5, #10
 800418e:	4640      	mov	r0, r8
 8004190:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004194:	3a30      	subs	r2, #48	; 0x30
 8004196:	2a09      	cmp	r2, #9
 8004198:	d903      	bls.n	80041a2 <_vfiprintf_r+0x1ca>
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0c3      	beq.n	8004126 <_vfiprintf_r+0x14e>
 800419e:	9105      	str	r1, [sp, #20]
 80041a0:	e7c1      	b.n	8004126 <_vfiprintf_r+0x14e>
 80041a2:	fb05 2101 	mla	r1, r5, r1, r2
 80041a6:	2301      	movs	r3, #1
 80041a8:	4680      	mov	r8, r0
 80041aa:	e7f0      	b.n	800418e <_vfiprintf_r+0x1b6>
 80041ac:	ab03      	add	r3, sp, #12
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	4622      	mov	r2, r4
 80041b2:	4b13      	ldr	r3, [pc, #76]	; (8004200 <_vfiprintf_r+0x228>)
 80041b4:	a904      	add	r1, sp, #16
 80041b6:	4630      	mov	r0, r6
 80041b8:	f3af 8000 	nop.w
 80041bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80041c0:	4681      	mov	r9, r0
 80041c2:	d1d5      	bne.n	8004170 <_vfiprintf_r+0x198>
 80041c4:	89a3      	ldrh	r3, [r4, #12]
 80041c6:	065b      	lsls	r3, r3, #25
 80041c8:	f53f af7e 	bmi.w	80040c8 <_vfiprintf_r+0xf0>
 80041cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041ce:	e77d      	b.n	80040cc <_vfiprintf_r+0xf4>
 80041d0:	ab03      	add	r3, sp, #12
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	4622      	mov	r2, r4
 80041d6:	4b0a      	ldr	r3, [pc, #40]	; (8004200 <_vfiprintf_r+0x228>)
 80041d8:	a904      	add	r1, sp, #16
 80041da:	4630      	mov	r0, r6
 80041dc:	f000 f888 	bl	80042f0 <_printf_i>
 80041e0:	e7ec      	b.n	80041bc <_vfiprintf_r+0x1e4>
 80041e2:	bf00      	nop
 80041e4:	08004b60 	.word	0x08004b60
 80041e8:	08004ba0 	.word	0x08004ba0
 80041ec:	08004b80 	.word	0x08004b80
 80041f0:	08004b40 	.word	0x08004b40
 80041f4:	08004ba6 	.word	0x08004ba6
 80041f8:	08004baa 	.word	0x08004baa
 80041fc:	00000000 	.word	0x00000000
 8004200:	08003fb3 	.word	0x08003fb3

08004204 <_printf_common>:
 8004204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004208:	4691      	mov	r9, r2
 800420a:	461f      	mov	r7, r3
 800420c:	688a      	ldr	r2, [r1, #8]
 800420e:	690b      	ldr	r3, [r1, #16]
 8004210:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004214:	4293      	cmp	r3, r2
 8004216:	bfb8      	it	lt
 8004218:	4613      	movlt	r3, r2
 800421a:	f8c9 3000 	str.w	r3, [r9]
 800421e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004222:	4606      	mov	r6, r0
 8004224:	460c      	mov	r4, r1
 8004226:	b112      	cbz	r2, 800422e <_printf_common+0x2a>
 8004228:	3301      	adds	r3, #1
 800422a:	f8c9 3000 	str.w	r3, [r9]
 800422e:	6823      	ldr	r3, [r4, #0]
 8004230:	0699      	lsls	r1, r3, #26
 8004232:	bf42      	ittt	mi
 8004234:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004238:	3302      	addmi	r3, #2
 800423a:	f8c9 3000 	strmi.w	r3, [r9]
 800423e:	6825      	ldr	r5, [r4, #0]
 8004240:	f015 0506 	ands.w	r5, r5, #6
 8004244:	d107      	bne.n	8004256 <_printf_common+0x52>
 8004246:	f104 0a19 	add.w	sl, r4, #25
 800424a:	68e3      	ldr	r3, [r4, #12]
 800424c:	f8d9 2000 	ldr.w	r2, [r9]
 8004250:	1a9b      	subs	r3, r3, r2
 8004252:	42ab      	cmp	r3, r5
 8004254:	dc28      	bgt.n	80042a8 <_printf_common+0xa4>
 8004256:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800425a:	6822      	ldr	r2, [r4, #0]
 800425c:	3300      	adds	r3, #0
 800425e:	bf18      	it	ne
 8004260:	2301      	movne	r3, #1
 8004262:	0692      	lsls	r2, r2, #26
 8004264:	d42d      	bmi.n	80042c2 <_printf_common+0xbe>
 8004266:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800426a:	4639      	mov	r1, r7
 800426c:	4630      	mov	r0, r6
 800426e:	47c0      	blx	r8
 8004270:	3001      	adds	r0, #1
 8004272:	d020      	beq.n	80042b6 <_printf_common+0xb2>
 8004274:	6823      	ldr	r3, [r4, #0]
 8004276:	68e5      	ldr	r5, [r4, #12]
 8004278:	f8d9 2000 	ldr.w	r2, [r9]
 800427c:	f003 0306 	and.w	r3, r3, #6
 8004280:	2b04      	cmp	r3, #4
 8004282:	bf08      	it	eq
 8004284:	1aad      	subeq	r5, r5, r2
 8004286:	68a3      	ldr	r3, [r4, #8]
 8004288:	6922      	ldr	r2, [r4, #16]
 800428a:	bf0c      	ite	eq
 800428c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004290:	2500      	movne	r5, #0
 8004292:	4293      	cmp	r3, r2
 8004294:	bfc4      	itt	gt
 8004296:	1a9b      	subgt	r3, r3, r2
 8004298:	18ed      	addgt	r5, r5, r3
 800429a:	f04f 0900 	mov.w	r9, #0
 800429e:	341a      	adds	r4, #26
 80042a0:	454d      	cmp	r5, r9
 80042a2:	d11a      	bne.n	80042da <_printf_common+0xd6>
 80042a4:	2000      	movs	r0, #0
 80042a6:	e008      	b.n	80042ba <_printf_common+0xb6>
 80042a8:	2301      	movs	r3, #1
 80042aa:	4652      	mov	r2, sl
 80042ac:	4639      	mov	r1, r7
 80042ae:	4630      	mov	r0, r6
 80042b0:	47c0      	blx	r8
 80042b2:	3001      	adds	r0, #1
 80042b4:	d103      	bne.n	80042be <_printf_common+0xba>
 80042b6:	f04f 30ff 	mov.w	r0, #4294967295
 80042ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042be:	3501      	adds	r5, #1
 80042c0:	e7c3      	b.n	800424a <_printf_common+0x46>
 80042c2:	18e1      	adds	r1, r4, r3
 80042c4:	1c5a      	adds	r2, r3, #1
 80042c6:	2030      	movs	r0, #48	; 0x30
 80042c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042cc:	4422      	add	r2, r4
 80042ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042d6:	3302      	adds	r3, #2
 80042d8:	e7c5      	b.n	8004266 <_printf_common+0x62>
 80042da:	2301      	movs	r3, #1
 80042dc:	4622      	mov	r2, r4
 80042de:	4639      	mov	r1, r7
 80042e0:	4630      	mov	r0, r6
 80042e2:	47c0      	blx	r8
 80042e4:	3001      	adds	r0, #1
 80042e6:	d0e6      	beq.n	80042b6 <_printf_common+0xb2>
 80042e8:	f109 0901 	add.w	r9, r9, #1
 80042ec:	e7d8      	b.n	80042a0 <_printf_common+0x9c>
	...

080042f0 <_printf_i>:
 80042f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80042f4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80042f8:	460c      	mov	r4, r1
 80042fa:	7e09      	ldrb	r1, [r1, #24]
 80042fc:	b085      	sub	sp, #20
 80042fe:	296e      	cmp	r1, #110	; 0x6e
 8004300:	4617      	mov	r7, r2
 8004302:	4606      	mov	r6, r0
 8004304:	4698      	mov	r8, r3
 8004306:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004308:	f000 80b3 	beq.w	8004472 <_printf_i+0x182>
 800430c:	d822      	bhi.n	8004354 <_printf_i+0x64>
 800430e:	2963      	cmp	r1, #99	; 0x63
 8004310:	d036      	beq.n	8004380 <_printf_i+0x90>
 8004312:	d80a      	bhi.n	800432a <_printf_i+0x3a>
 8004314:	2900      	cmp	r1, #0
 8004316:	f000 80b9 	beq.w	800448c <_printf_i+0x19c>
 800431a:	2958      	cmp	r1, #88	; 0x58
 800431c:	f000 8083 	beq.w	8004426 <_printf_i+0x136>
 8004320:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004324:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004328:	e032      	b.n	8004390 <_printf_i+0xa0>
 800432a:	2964      	cmp	r1, #100	; 0x64
 800432c:	d001      	beq.n	8004332 <_printf_i+0x42>
 800432e:	2969      	cmp	r1, #105	; 0x69
 8004330:	d1f6      	bne.n	8004320 <_printf_i+0x30>
 8004332:	6820      	ldr	r0, [r4, #0]
 8004334:	6813      	ldr	r3, [r2, #0]
 8004336:	0605      	lsls	r5, r0, #24
 8004338:	f103 0104 	add.w	r1, r3, #4
 800433c:	d52a      	bpl.n	8004394 <_printf_i+0xa4>
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6011      	str	r1, [r2, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	da03      	bge.n	800434e <_printf_i+0x5e>
 8004346:	222d      	movs	r2, #45	; 0x2d
 8004348:	425b      	negs	r3, r3
 800434a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800434e:	486f      	ldr	r0, [pc, #444]	; (800450c <_printf_i+0x21c>)
 8004350:	220a      	movs	r2, #10
 8004352:	e039      	b.n	80043c8 <_printf_i+0xd8>
 8004354:	2973      	cmp	r1, #115	; 0x73
 8004356:	f000 809d 	beq.w	8004494 <_printf_i+0x1a4>
 800435a:	d808      	bhi.n	800436e <_printf_i+0x7e>
 800435c:	296f      	cmp	r1, #111	; 0x6f
 800435e:	d020      	beq.n	80043a2 <_printf_i+0xb2>
 8004360:	2970      	cmp	r1, #112	; 0x70
 8004362:	d1dd      	bne.n	8004320 <_printf_i+0x30>
 8004364:	6823      	ldr	r3, [r4, #0]
 8004366:	f043 0320 	orr.w	r3, r3, #32
 800436a:	6023      	str	r3, [r4, #0]
 800436c:	e003      	b.n	8004376 <_printf_i+0x86>
 800436e:	2975      	cmp	r1, #117	; 0x75
 8004370:	d017      	beq.n	80043a2 <_printf_i+0xb2>
 8004372:	2978      	cmp	r1, #120	; 0x78
 8004374:	d1d4      	bne.n	8004320 <_printf_i+0x30>
 8004376:	2378      	movs	r3, #120	; 0x78
 8004378:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800437c:	4864      	ldr	r0, [pc, #400]	; (8004510 <_printf_i+0x220>)
 800437e:	e055      	b.n	800442c <_printf_i+0x13c>
 8004380:	6813      	ldr	r3, [r2, #0]
 8004382:	1d19      	adds	r1, r3, #4
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	6011      	str	r1, [r2, #0]
 8004388:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800438c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004390:	2301      	movs	r3, #1
 8004392:	e08c      	b.n	80044ae <_printf_i+0x1be>
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6011      	str	r1, [r2, #0]
 8004398:	f010 0f40 	tst.w	r0, #64	; 0x40
 800439c:	bf18      	it	ne
 800439e:	b21b      	sxthne	r3, r3
 80043a0:	e7cf      	b.n	8004342 <_printf_i+0x52>
 80043a2:	6813      	ldr	r3, [r2, #0]
 80043a4:	6825      	ldr	r5, [r4, #0]
 80043a6:	1d18      	adds	r0, r3, #4
 80043a8:	6010      	str	r0, [r2, #0]
 80043aa:	0628      	lsls	r0, r5, #24
 80043ac:	d501      	bpl.n	80043b2 <_printf_i+0xc2>
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	e002      	b.n	80043b8 <_printf_i+0xc8>
 80043b2:	0668      	lsls	r0, r5, #25
 80043b4:	d5fb      	bpl.n	80043ae <_printf_i+0xbe>
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	4854      	ldr	r0, [pc, #336]	; (800450c <_printf_i+0x21c>)
 80043ba:	296f      	cmp	r1, #111	; 0x6f
 80043bc:	bf14      	ite	ne
 80043be:	220a      	movne	r2, #10
 80043c0:	2208      	moveq	r2, #8
 80043c2:	2100      	movs	r1, #0
 80043c4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043c8:	6865      	ldr	r5, [r4, #4]
 80043ca:	60a5      	str	r5, [r4, #8]
 80043cc:	2d00      	cmp	r5, #0
 80043ce:	f2c0 8095 	blt.w	80044fc <_printf_i+0x20c>
 80043d2:	6821      	ldr	r1, [r4, #0]
 80043d4:	f021 0104 	bic.w	r1, r1, #4
 80043d8:	6021      	str	r1, [r4, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d13d      	bne.n	800445a <_printf_i+0x16a>
 80043de:	2d00      	cmp	r5, #0
 80043e0:	f040 808e 	bne.w	8004500 <_printf_i+0x210>
 80043e4:	4665      	mov	r5, ip
 80043e6:	2a08      	cmp	r2, #8
 80043e8:	d10b      	bne.n	8004402 <_printf_i+0x112>
 80043ea:	6823      	ldr	r3, [r4, #0]
 80043ec:	07db      	lsls	r3, r3, #31
 80043ee:	d508      	bpl.n	8004402 <_printf_i+0x112>
 80043f0:	6923      	ldr	r3, [r4, #16]
 80043f2:	6862      	ldr	r2, [r4, #4]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	bfde      	ittt	le
 80043f8:	2330      	movle	r3, #48	; 0x30
 80043fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80043fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004402:	ebac 0305 	sub.w	r3, ip, r5
 8004406:	6123      	str	r3, [r4, #16]
 8004408:	f8cd 8000 	str.w	r8, [sp]
 800440c:	463b      	mov	r3, r7
 800440e:	aa03      	add	r2, sp, #12
 8004410:	4621      	mov	r1, r4
 8004412:	4630      	mov	r0, r6
 8004414:	f7ff fef6 	bl	8004204 <_printf_common>
 8004418:	3001      	adds	r0, #1
 800441a:	d14d      	bne.n	80044b8 <_printf_i+0x1c8>
 800441c:	f04f 30ff 	mov.w	r0, #4294967295
 8004420:	b005      	add	sp, #20
 8004422:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004426:	4839      	ldr	r0, [pc, #228]	; (800450c <_printf_i+0x21c>)
 8004428:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800442c:	6813      	ldr	r3, [r2, #0]
 800442e:	6821      	ldr	r1, [r4, #0]
 8004430:	1d1d      	adds	r5, r3, #4
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6015      	str	r5, [r2, #0]
 8004436:	060a      	lsls	r2, r1, #24
 8004438:	d50b      	bpl.n	8004452 <_printf_i+0x162>
 800443a:	07ca      	lsls	r2, r1, #31
 800443c:	bf44      	itt	mi
 800443e:	f041 0120 	orrmi.w	r1, r1, #32
 8004442:	6021      	strmi	r1, [r4, #0]
 8004444:	b91b      	cbnz	r3, 800444e <_printf_i+0x15e>
 8004446:	6822      	ldr	r2, [r4, #0]
 8004448:	f022 0220 	bic.w	r2, r2, #32
 800444c:	6022      	str	r2, [r4, #0]
 800444e:	2210      	movs	r2, #16
 8004450:	e7b7      	b.n	80043c2 <_printf_i+0xd2>
 8004452:	064d      	lsls	r5, r1, #25
 8004454:	bf48      	it	mi
 8004456:	b29b      	uxthmi	r3, r3
 8004458:	e7ef      	b.n	800443a <_printf_i+0x14a>
 800445a:	4665      	mov	r5, ip
 800445c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004460:	fb02 3311 	mls	r3, r2, r1, r3
 8004464:	5cc3      	ldrb	r3, [r0, r3]
 8004466:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800446a:	460b      	mov	r3, r1
 800446c:	2900      	cmp	r1, #0
 800446e:	d1f5      	bne.n	800445c <_printf_i+0x16c>
 8004470:	e7b9      	b.n	80043e6 <_printf_i+0xf6>
 8004472:	6813      	ldr	r3, [r2, #0]
 8004474:	6825      	ldr	r5, [r4, #0]
 8004476:	6961      	ldr	r1, [r4, #20]
 8004478:	1d18      	adds	r0, r3, #4
 800447a:	6010      	str	r0, [r2, #0]
 800447c:	0628      	lsls	r0, r5, #24
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	d501      	bpl.n	8004486 <_printf_i+0x196>
 8004482:	6019      	str	r1, [r3, #0]
 8004484:	e002      	b.n	800448c <_printf_i+0x19c>
 8004486:	066a      	lsls	r2, r5, #25
 8004488:	d5fb      	bpl.n	8004482 <_printf_i+0x192>
 800448a:	8019      	strh	r1, [r3, #0]
 800448c:	2300      	movs	r3, #0
 800448e:	6123      	str	r3, [r4, #16]
 8004490:	4665      	mov	r5, ip
 8004492:	e7b9      	b.n	8004408 <_printf_i+0x118>
 8004494:	6813      	ldr	r3, [r2, #0]
 8004496:	1d19      	adds	r1, r3, #4
 8004498:	6011      	str	r1, [r2, #0]
 800449a:	681d      	ldr	r5, [r3, #0]
 800449c:	6862      	ldr	r2, [r4, #4]
 800449e:	2100      	movs	r1, #0
 80044a0:	4628      	mov	r0, r5
 80044a2:	f7fb fe95 	bl	80001d0 <memchr>
 80044a6:	b108      	cbz	r0, 80044ac <_printf_i+0x1bc>
 80044a8:	1b40      	subs	r0, r0, r5
 80044aa:	6060      	str	r0, [r4, #4]
 80044ac:	6863      	ldr	r3, [r4, #4]
 80044ae:	6123      	str	r3, [r4, #16]
 80044b0:	2300      	movs	r3, #0
 80044b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044b6:	e7a7      	b.n	8004408 <_printf_i+0x118>
 80044b8:	6923      	ldr	r3, [r4, #16]
 80044ba:	462a      	mov	r2, r5
 80044bc:	4639      	mov	r1, r7
 80044be:	4630      	mov	r0, r6
 80044c0:	47c0      	blx	r8
 80044c2:	3001      	adds	r0, #1
 80044c4:	d0aa      	beq.n	800441c <_printf_i+0x12c>
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	079b      	lsls	r3, r3, #30
 80044ca:	d413      	bmi.n	80044f4 <_printf_i+0x204>
 80044cc:	68e0      	ldr	r0, [r4, #12]
 80044ce:	9b03      	ldr	r3, [sp, #12]
 80044d0:	4298      	cmp	r0, r3
 80044d2:	bfb8      	it	lt
 80044d4:	4618      	movlt	r0, r3
 80044d6:	e7a3      	b.n	8004420 <_printf_i+0x130>
 80044d8:	2301      	movs	r3, #1
 80044da:	464a      	mov	r2, r9
 80044dc:	4639      	mov	r1, r7
 80044de:	4630      	mov	r0, r6
 80044e0:	47c0      	blx	r8
 80044e2:	3001      	adds	r0, #1
 80044e4:	d09a      	beq.n	800441c <_printf_i+0x12c>
 80044e6:	3501      	adds	r5, #1
 80044e8:	68e3      	ldr	r3, [r4, #12]
 80044ea:	9a03      	ldr	r2, [sp, #12]
 80044ec:	1a9b      	subs	r3, r3, r2
 80044ee:	42ab      	cmp	r3, r5
 80044f0:	dcf2      	bgt.n	80044d8 <_printf_i+0x1e8>
 80044f2:	e7eb      	b.n	80044cc <_printf_i+0x1dc>
 80044f4:	2500      	movs	r5, #0
 80044f6:	f104 0919 	add.w	r9, r4, #25
 80044fa:	e7f5      	b.n	80044e8 <_printf_i+0x1f8>
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1ac      	bne.n	800445a <_printf_i+0x16a>
 8004500:	7803      	ldrb	r3, [r0, #0]
 8004502:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004506:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800450a:	e76c      	b.n	80043e6 <_printf_i+0xf6>
 800450c:	08004bb1 	.word	0x08004bb1
 8004510:	08004bc2 	.word	0x08004bc2

08004514 <_sbrk_r>:
 8004514:	b538      	push	{r3, r4, r5, lr}
 8004516:	4c06      	ldr	r4, [pc, #24]	; (8004530 <_sbrk_r+0x1c>)
 8004518:	2300      	movs	r3, #0
 800451a:	4605      	mov	r5, r0
 800451c:	4608      	mov	r0, r1
 800451e:	6023      	str	r3, [r4, #0]
 8004520:	f7ff fb36 	bl	8003b90 <_sbrk>
 8004524:	1c43      	adds	r3, r0, #1
 8004526:	d102      	bne.n	800452e <_sbrk_r+0x1a>
 8004528:	6823      	ldr	r3, [r4, #0]
 800452a:	b103      	cbz	r3, 800452e <_sbrk_r+0x1a>
 800452c:	602b      	str	r3, [r5, #0]
 800452e:	bd38      	pop	{r3, r4, r5, pc}
 8004530:	20000144 	.word	0x20000144

08004534 <__sread>:
 8004534:	b510      	push	{r4, lr}
 8004536:	460c      	mov	r4, r1
 8004538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800453c:	f000 fa96 	bl	8004a6c <_read_r>
 8004540:	2800      	cmp	r0, #0
 8004542:	bfab      	itete	ge
 8004544:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004546:	89a3      	ldrhlt	r3, [r4, #12]
 8004548:	181b      	addge	r3, r3, r0
 800454a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800454e:	bfac      	ite	ge
 8004550:	6563      	strge	r3, [r4, #84]	; 0x54
 8004552:	81a3      	strhlt	r3, [r4, #12]
 8004554:	bd10      	pop	{r4, pc}

08004556 <__swrite>:
 8004556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800455a:	461f      	mov	r7, r3
 800455c:	898b      	ldrh	r3, [r1, #12]
 800455e:	05db      	lsls	r3, r3, #23
 8004560:	4605      	mov	r5, r0
 8004562:	460c      	mov	r4, r1
 8004564:	4616      	mov	r6, r2
 8004566:	d505      	bpl.n	8004574 <__swrite+0x1e>
 8004568:	2302      	movs	r3, #2
 800456a:	2200      	movs	r2, #0
 800456c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004570:	f000 f9b6 	bl	80048e0 <_lseek_r>
 8004574:	89a3      	ldrh	r3, [r4, #12]
 8004576:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800457a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800457e:	81a3      	strh	r3, [r4, #12]
 8004580:	4632      	mov	r2, r6
 8004582:	463b      	mov	r3, r7
 8004584:	4628      	mov	r0, r5
 8004586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800458a:	f000 b869 	b.w	8004660 <_write_r>

0800458e <__sseek>:
 800458e:	b510      	push	{r4, lr}
 8004590:	460c      	mov	r4, r1
 8004592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004596:	f000 f9a3 	bl	80048e0 <_lseek_r>
 800459a:	1c43      	adds	r3, r0, #1
 800459c:	89a3      	ldrh	r3, [r4, #12]
 800459e:	bf15      	itete	ne
 80045a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80045a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80045a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80045aa:	81a3      	strheq	r3, [r4, #12]
 80045ac:	bf18      	it	ne
 80045ae:	81a3      	strhne	r3, [r4, #12]
 80045b0:	bd10      	pop	{r4, pc}

080045b2 <__sclose>:
 80045b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045b6:	f000 b8d3 	b.w	8004760 <_close_r>
	...

080045bc <__swbuf_r>:
 80045bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045be:	460e      	mov	r6, r1
 80045c0:	4614      	mov	r4, r2
 80045c2:	4605      	mov	r5, r0
 80045c4:	b118      	cbz	r0, 80045ce <__swbuf_r+0x12>
 80045c6:	6983      	ldr	r3, [r0, #24]
 80045c8:	b90b      	cbnz	r3, 80045ce <__swbuf_r+0x12>
 80045ca:	f7ff fbf7 	bl	8003dbc <__sinit>
 80045ce:	4b21      	ldr	r3, [pc, #132]	; (8004654 <__swbuf_r+0x98>)
 80045d0:	429c      	cmp	r4, r3
 80045d2:	d12a      	bne.n	800462a <__swbuf_r+0x6e>
 80045d4:	686c      	ldr	r4, [r5, #4]
 80045d6:	69a3      	ldr	r3, [r4, #24]
 80045d8:	60a3      	str	r3, [r4, #8]
 80045da:	89a3      	ldrh	r3, [r4, #12]
 80045dc:	071a      	lsls	r2, r3, #28
 80045de:	d52e      	bpl.n	800463e <__swbuf_r+0x82>
 80045e0:	6923      	ldr	r3, [r4, #16]
 80045e2:	b363      	cbz	r3, 800463e <__swbuf_r+0x82>
 80045e4:	6923      	ldr	r3, [r4, #16]
 80045e6:	6820      	ldr	r0, [r4, #0]
 80045e8:	1ac0      	subs	r0, r0, r3
 80045ea:	6963      	ldr	r3, [r4, #20]
 80045ec:	b2f6      	uxtb	r6, r6
 80045ee:	4283      	cmp	r3, r0
 80045f0:	4637      	mov	r7, r6
 80045f2:	dc04      	bgt.n	80045fe <__swbuf_r+0x42>
 80045f4:	4621      	mov	r1, r4
 80045f6:	4628      	mov	r0, r5
 80045f8:	f000 f948 	bl	800488c <_fflush_r>
 80045fc:	bb28      	cbnz	r0, 800464a <__swbuf_r+0x8e>
 80045fe:	68a3      	ldr	r3, [r4, #8]
 8004600:	3b01      	subs	r3, #1
 8004602:	60a3      	str	r3, [r4, #8]
 8004604:	6823      	ldr	r3, [r4, #0]
 8004606:	1c5a      	adds	r2, r3, #1
 8004608:	6022      	str	r2, [r4, #0]
 800460a:	701e      	strb	r6, [r3, #0]
 800460c:	6963      	ldr	r3, [r4, #20]
 800460e:	3001      	adds	r0, #1
 8004610:	4283      	cmp	r3, r0
 8004612:	d004      	beq.n	800461e <__swbuf_r+0x62>
 8004614:	89a3      	ldrh	r3, [r4, #12]
 8004616:	07db      	lsls	r3, r3, #31
 8004618:	d519      	bpl.n	800464e <__swbuf_r+0x92>
 800461a:	2e0a      	cmp	r6, #10
 800461c:	d117      	bne.n	800464e <__swbuf_r+0x92>
 800461e:	4621      	mov	r1, r4
 8004620:	4628      	mov	r0, r5
 8004622:	f000 f933 	bl	800488c <_fflush_r>
 8004626:	b190      	cbz	r0, 800464e <__swbuf_r+0x92>
 8004628:	e00f      	b.n	800464a <__swbuf_r+0x8e>
 800462a:	4b0b      	ldr	r3, [pc, #44]	; (8004658 <__swbuf_r+0x9c>)
 800462c:	429c      	cmp	r4, r3
 800462e:	d101      	bne.n	8004634 <__swbuf_r+0x78>
 8004630:	68ac      	ldr	r4, [r5, #8]
 8004632:	e7d0      	b.n	80045d6 <__swbuf_r+0x1a>
 8004634:	4b09      	ldr	r3, [pc, #36]	; (800465c <__swbuf_r+0xa0>)
 8004636:	429c      	cmp	r4, r3
 8004638:	bf08      	it	eq
 800463a:	68ec      	ldreq	r4, [r5, #12]
 800463c:	e7cb      	b.n	80045d6 <__swbuf_r+0x1a>
 800463e:	4621      	mov	r1, r4
 8004640:	4628      	mov	r0, r5
 8004642:	f000 f81f 	bl	8004684 <__swsetup_r>
 8004646:	2800      	cmp	r0, #0
 8004648:	d0cc      	beq.n	80045e4 <__swbuf_r+0x28>
 800464a:	f04f 37ff 	mov.w	r7, #4294967295
 800464e:	4638      	mov	r0, r7
 8004650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004652:	bf00      	nop
 8004654:	08004b60 	.word	0x08004b60
 8004658:	08004b80 	.word	0x08004b80
 800465c:	08004b40 	.word	0x08004b40

08004660 <_write_r>:
 8004660:	b538      	push	{r3, r4, r5, lr}
 8004662:	4c07      	ldr	r4, [pc, #28]	; (8004680 <_write_r+0x20>)
 8004664:	4605      	mov	r5, r0
 8004666:	4608      	mov	r0, r1
 8004668:	4611      	mov	r1, r2
 800466a:	2200      	movs	r2, #0
 800466c:	6022      	str	r2, [r4, #0]
 800466e:	461a      	mov	r2, r3
 8004670:	f7ff fa3d 	bl	8003aee <_write>
 8004674:	1c43      	adds	r3, r0, #1
 8004676:	d102      	bne.n	800467e <_write_r+0x1e>
 8004678:	6823      	ldr	r3, [r4, #0]
 800467a:	b103      	cbz	r3, 800467e <_write_r+0x1e>
 800467c:	602b      	str	r3, [r5, #0]
 800467e:	bd38      	pop	{r3, r4, r5, pc}
 8004680:	20000144 	.word	0x20000144

08004684 <__swsetup_r>:
 8004684:	4b32      	ldr	r3, [pc, #200]	; (8004750 <__swsetup_r+0xcc>)
 8004686:	b570      	push	{r4, r5, r6, lr}
 8004688:	681d      	ldr	r5, [r3, #0]
 800468a:	4606      	mov	r6, r0
 800468c:	460c      	mov	r4, r1
 800468e:	b125      	cbz	r5, 800469a <__swsetup_r+0x16>
 8004690:	69ab      	ldr	r3, [r5, #24]
 8004692:	b913      	cbnz	r3, 800469a <__swsetup_r+0x16>
 8004694:	4628      	mov	r0, r5
 8004696:	f7ff fb91 	bl	8003dbc <__sinit>
 800469a:	4b2e      	ldr	r3, [pc, #184]	; (8004754 <__swsetup_r+0xd0>)
 800469c:	429c      	cmp	r4, r3
 800469e:	d10f      	bne.n	80046c0 <__swsetup_r+0x3c>
 80046a0:	686c      	ldr	r4, [r5, #4]
 80046a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	0715      	lsls	r5, r2, #28
 80046aa:	d42c      	bmi.n	8004706 <__swsetup_r+0x82>
 80046ac:	06d0      	lsls	r0, r2, #27
 80046ae:	d411      	bmi.n	80046d4 <__swsetup_r+0x50>
 80046b0:	2209      	movs	r2, #9
 80046b2:	6032      	str	r2, [r6, #0]
 80046b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046b8:	81a3      	strh	r3, [r4, #12]
 80046ba:	f04f 30ff 	mov.w	r0, #4294967295
 80046be:	e03e      	b.n	800473e <__swsetup_r+0xba>
 80046c0:	4b25      	ldr	r3, [pc, #148]	; (8004758 <__swsetup_r+0xd4>)
 80046c2:	429c      	cmp	r4, r3
 80046c4:	d101      	bne.n	80046ca <__swsetup_r+0x46>
 80046c6:	68ac      	ldr	r4, [r5, #8]
 80046c8:	e7eb      	b.n	80046a2 <__swsetup_r+0x1e>
 80046ca:	4b24      	ldr	r3, [pc, #144]	; (800475c <__swsetup_r+0xd8>)
 80046cc:	429c      	cmp	r4, r3
 80046ce:	bf08      	it	eq
 80046d0:	68ec      	ldreq	r4, [r5, #12]
 80046d2:	e7e6      	b.n	80046a2 <__swsetup_r+0x1e>
 80046d4:	0751      	lsls	r1, r2, #29
 80046d6:	d512      	bpl.n	80046fe <__swsetup_r+0x7a>
 80046d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046da:	b141      	cbz	r1, 80046ee <__swsetup_r+0x6a>
 80046dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046e0:	4299      	cmp	r1, r3
 80046e2:	d002      	beq.n	80046ea <__swsetup_r+0x66>
 80046e4:	4630      	mov	r0, r6
 80046e6:	f000 f973 	bl	80049d0 <_free_r>
 80046ea:	2300      	movs	r3, #0
 80046ec:	6363      	str	r3, [r4, #52]	; 0x34
 80046ee:	89a3      	ldrh	r3, [r4, #12]
 80046f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80046f4:	81a3      	strh	r3, [r4, #12]
 80046f6:	2300      	movs	r3, #0
 80046f8:	6063      	str	r3, [r4, #4]
 80046fa:	6923      	ldr	r3, [r4, #16]
 80046fc:	6023      	str	r3, [r4, #0]
 80046fe:	89a3      	ldrh	r3, [r4, #12]
 8004700:	f043 0308 	orr.w	r3, r3, #8
 8004704:	81a3      	strh	r3, [r4, #12]
 8004706:	6923      	ldr	r3, [r4, #16]
 8004708:	b94b      	cbnz	r3, 800471e <__swsetup_r+0x9a>
 800470a:	89a3      	ldrh	r3, [r4, #12]
 800470c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004714:	d003      	beq.n	800471e <__swsetup_r+0x9a>
 8004716:	4621      	mov	r1, r4
 8004718:	4630      	mov	r0, r6
 800471a:	f000 f917 	bl	800494c <__smakebuf_r>
 800471e:	89a2      	ldrh	r2, [r4, #12]
 8004720:	f012 0301 	ands.w	r3, r2, #1
 8004724:	d00c      	beq.n	8004740 <__swsetup_r+0xbc>
 8004726:	2300      	movs	r3, #0
 8004728:	60a3      	str	r3, [r4, #8]
 800472a:	6963      	ldr	r3, [r4, #20]
 800472c:	425b      	negs	r3, r3
 800472e:	61a3      	str	r3, [r4, #24]
 8004730:	6923      	ldr	r3, [r4, #16]
 8004732:	b953      	cbnz	r3, 800474a <__swsetup_r+0xc6>
 8004734:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004738:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800473c:	d1ba      	bne.n	80046b4 <__swsetup_r+0x30>
 800473e:	bd70      	pop	{r4, r5, r6, pc}
 8004740:	0792      	lsls	r2, r2, #30
 8004742:	bf58      	it	pl
 8004744:	6963      	ldrpl	r3, [r4, #20]
 8004746:	60a3      	str	r3, [r4, #8]
 8004748:	e7f2      	b.n	8004730 <__swsetup_r+0xac>
 800474a:	2000      	movs	r0, #0
 800474c:	e7f7      	b.n	800473e <__swsetup_r+0xba>
 800474e:	bf00      	nop
 8004750:	2000000c 	.word	0x2000000c
 8004754:	08004b60 	.word	0x08004b60
 8004758:	08004b80 	.word	0x08004b80
 800475c:	08004b40 	.word	0x08004b40

08004760 <_close_r>:
 8004760:	b538      	push	{r3, r4, r5, lr}
 8004762:	4c06      	ldr	r4, [pc, #24]	; (800477c <_close_r+0x1c>)
 8004764:	2300      	movs	r3, #0
 8004766:	4605      	mov	r5, r0
 8004768:	4608      	mov	r0, r1
 800476a:	6023      	str	r3, [r4, #0]
 800476c:	f7ff f9db 	bl	8003b26 <_close>
 8004770:	1c43      	adds	r3, r0, #1
 8004772:	d102      	bne.n	800477a <_close_r+0x1a>
 8004774:	6823      	ldr	r3, [r4, #0]
 8004776:	b103      	cbz	r3, 800477a <_close_r+0x1a>
 8004778:	602b      	str	r3, [r5, #0]
 800477a:	bd38      	pop	{r3, r4, r5, pc}
 800477c:	20000144 	.word	0x20000144

08004780 <__sflush_r>:
 8004780:	898a      	ldrh	r2, [r1, #12]
 8004782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004786:	4605      	mov	r5, r0
 8004788:	0710      	lsls	r0, r2, #28
 800478a:	460c      	mov	r4, r1
 800478c:	d458      	bmi.n	8004840 <__sflush_r+0xc0>
 800478e:	684b      	ldr	r3, [r1, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	dc05      	bgt.n	80047a0 <__sflush_r+0x20>
 8004794:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004796:	2b00      	cmp	r3, #0
 8004798:	dc02      	bgt.n	80047a0 <__sflush_r+0x20>
 800479a:	2000      	movs	r0, #0
 800479c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047a2:	2e00      	cmp	r6, #0
 80047a4:	d0f9      	beq.n	800479a <__sflush_r+0x1a>
 80047a6:	2300      	movs	r3, #0
 80047a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80047ac:	682f      	ldr	r7, [r5, #0]
 80047ae:	6a21      	ldr	r1, [r4, #32]
 80047b0:	602b      	str	r3, [r5, #0]
 80047b2:	d032      	beq.n	800481a <__sflush_r+0x9a>
 80047b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047b6:	89a3      	ldrh	r3, [r4, #12]
 80047b8:	075a      	lsls	r2, r3, #29
 80047ba:	d505      	bpl.n	80047c8 <__sflush_r+0x48>
 80047bc:	6863      	ldr	r3, [r4, #4]
 80047be:	1ac0      	subs	r0, r0, r3
 80047c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047c2:	b10b      	cbz	r3, 80047c8 <__sflush_r+0x48>
 80047c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047c6:	1ac0      	subs	r0, r0, r3
 80047c8:	2300      	movs	r3, #0
 80047ca:	4602      	mov	r2, r0
 80047cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047ce:	6a21      	ldr	r1, [r4, #32]
 80047d0:	4628      	mov	r0, r5
 80047d2:	47b0      	blx	r6
 80047d4:	1c43      	adds	r3, r0, #1
 80047d6:	89a3      	ldrh	r3, [r4, #12]
 80047d8:	d106      	bne.n	80047e8 <__sflush_r+0x68>
 80047da:	6829      	ldr	r1, [r5, #0]
 80047dc:	291d      	cmp	r1, #29
 80047de:	d848      	bhi.n	8004872 <__sflush_r+0xf2>
 80047e0:	4a29      	ldr	r2, [pc, #164]	; (8004888 <__sflush_r+0x108>)
 80047e2:	40ca      	lsrs	r2, r1
 80047e4:	07d6      	lsls	r6, r2, #31
 80047e6:	d544      	bpl.n	8004872 <__sflush_r+0xf2>
 80047e8:	2200      	movs	r2, #0
 80047ea:	6062      	str	r2, [r4, #4]
 80047ec:	04d9      	lsls	r1, r3, #19
 80047ee:	6922      	ldr	r2, [r4, #16]
 80047f0:	6022      	str	r2, [r4, #0]
 80047f2:	d504      	bpl.n	80047fe <__sflush_r+0x7e>
 80047f4:	1c42      	adds	r2, r0, #1
 80047f6:	d101      	bne.n	80047fc <__sflush_r+0x7c>
 80047f8:	682b      	ldr	r3, [r5, #0]
 80047fa:	b903      	cbnz	r3, 80047fe <__sflush_r+0x7e>
 80047fc:	6560      	str	r0, [r4, #84]	; 0x54
 80047fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004800:	602f      	str	r7, [r5, #0]
 8004802:	2900      	cmp	r1, #0
 8004804:	d0c9      	beq.n	800479a <__sflush_r+0x1a>
 8004806:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800480a:	4299      	cmp	r1, r3
 800480c:	d002      	beq.n	8004814 <__sflush_r+0x94>
 800480e:	4628      	mov	r0, r5
 8004810:	f000 f8de 	bl	80049d0 <_free_r>
 8004814:	2000      	movs	r0, #0
 8004816:	6360      	str	r0, [r4, #52]	; 0x34
 8004818:	e7c0      	b.n	800479c <__sflush_r+0x1c>
 800481a:	2301      	movs	r3, #1
 800481c:	4628      	mov	r0, r5
 800481e:	47b0      	blx	r6
 8004820:	1c41      	adds	r1, r0, #1
 8004822:	d1c8      	bne.n	80047b6 <__sflush_r+0x36>
 8004824:	682b      	ldr	r3, [r5, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0c5      	beq.n	80047b6 <__sflush_r+0x36>
 800482a:	2b1d      	cmp	r3, #29
 800482c:	d001      	beq.n	8004832 <__sflush_r+0xb2>
 800482e:	2b16      	cmp	r3, #22
 8004830:	d101      	bne.n	8004836 <__sflush_r+0xb6>
 8004832:	602f      	str	r7, [r5, #0]
 8004834:	e7b1      	b.n	800479a <__sflush_r+0x1a>
 8004836:	89a3      	ldrh	r3, [r4, #12]
 8004838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800483c:	81a3      	strh	r3, [r4, #12]
 800483e:	e7ad      	b.n	800479c <__sflush_r+0x1c>
 8004840:	690f      	ldr	r7, [r1, #16]
 8004842:	2f00      	cmp	r7, #0
 8004844:	d0a9      	beq.n	800479a <__sflush_r+0x1a>
 8004846:	0793      	lsls	r3, r2, #30
 8004848:	680e      	ldr	r6, [r1, #0]
 800484a:	bf08      	it	eq
 800484c:	694b      	ldreq	r3, [r1, #20]
 800484e:	600f      	str	r7, [r1, #0]
 8004850:	bf18      	it	ne
 8004852:	2300      	movne	r3, #0
 8004854:	eba6 0807 	sub.w	r8, r6, r7
 8004858:	608b      	str	r3, [r1, #8]
 800485a:	f1b8 0f00 	cmp.w	r8, #0
 800485e:	dd9c      	ble.n	800479a <__sflush_r+0x1a>
 8004860:	4643      	mov	r3, r8
 8004862:	463a      	mov	r2, r7
 8004864:	6a21      	ldr	r1, [r4, #32]
 8004866:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004868:	4628      	mov	r0, r5
 800486a:	47b0      	blx	r6
 800486c:	2800      	cmp	r0, #0
 800486e:	dc06      	bgt.n	800487e <__sflush_r+0xfe>
 8004870:	89a3      	ldrh	r3, [r4, #12]
 8004872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004876:	81a3      	strh	r3, [r4, #12]
 8004878:	f04f 30ff 	mov.w	r0, #4294967295
 800487c:	e78e      	b.n	800479c <__sflush_r+0x1c>
 800487e:	4407      	add	r7, r0
 8004880:	eba8 0800 	sub.w	r8, r8, r0
 8004884:	e7e9      	b.n	800485a <__sflush_r+0xda>
 8004886:	bf00      	nop
 8004888:	20400001 	.word	0x20400001

0800488c <_fflush_r>:
 800488c:	b538      	push	{r3, r4, r5, lr}
 800488e:	690b      	ldr	r3, [r1, #16]
 8004890:	4605      	mov	r5, r0
 8004892:	460c      	mov	r4, r1
 8004894:	b1db      	cbz	r3, 80048ce <_fflush_r+0x42>
 8004896:	b118      	cbz	r0, 80048a0 <_fflush_r+0x14>
 8004898:	6983      	ldr	r3, [r0, #24]
 800489a:	b90b      	cbnz	r3, 80048a0 <_fflush_r+0x14>
 800489c:	f7ff fa8e 	bl	8003dbc <__sinit>
 80048a0:	4b0c      	ldr	r3, [pc, #48]	; (80048d4 <_fflush_r+0x48>)
 80048a2:	429c      	cmp	r4, r3
 80048a4:	d109      	bne.n	80048ba <_fflush_r+0x2e>
 80048a6:	686c      	ldr	r4, [r5, #4]
 80048a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048ac:	b17b      	cbz	r3, 80048ce <_fflush_r+0x42>
 80048ae:	4621      	mov	r1, r4
 80048b0:	4628      	mov	r0, r5
 80048b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048b6:	f7ff bf63 	b.w	8004780 <__sflush_r>
 80048ba:	4b07      	ldr	r3, [pc, #28]	; (80048d8 <_fflush_r+0x4c>)
 80048bc:	429c      	cmp	r4, r3
 80048be:	d101      	bne.n	80048c4 <_fflush_r+0x38>
 80048c0:	68ac      	ldr	r4, [r5, #8]
 80048c2:	e7f1      	b.n	80048a8 <_fflush_r+0x1c>
 80048c4:	4b05      	ldr	r3, [pc, #20]	; (80048dc <_fflush_r+0x50>)
 80048c6:	429c      	cmp	r4, r3
 80048c8:	bf08      	it	eq
 80048ca:	68ec      	ldreq	r4, [r5, #12]
 80048cc:	e7ec      	b.n	80048a8 <_fflush_r+0x1c>
 80048ce:	2000      	movs	r0, #0
 80048d0:	bd38      	pop	{r3, r4, r5, pc}
 80048d2:	bf00      	nop
 80048d4:	08004b60 	.word	0x08004b60
 80048d8:	08004b80 	.word	0x08004b80
 80048dc:	08004b40 	.word	0x08004b40

080048e0 <_lseek_r>:
 80048e0:	b538      	push	{r3, r4, r5, lr}
 80048e2:	4c07      	ldr	r4, [pc, #28]	; (8004900 <_lseek_r+0x20>)
 80048e4:	4605      	mov	r5, r0
 80048e6:	4608      	mov	r0, r1
 80048e8:	4611      	mov	r1, r2
 80048ea:	2200      	movs	r2, #0
 80048ec:	6022      	str	r2, [r4, #0]
 80048ee:	461a      	mov	r2, r3
 80048f0:	f7ff f940 	bl	8003b74 <_lseek>
 80048f4:	1c43      	adds	r3, r0, #1
 80048f6:	d102      	bne.n	80048fe <_lseek_r+0x1e>
 80048f8:	6823      	ldr	r3, [r4, #0]
 80048fa:	b103      	cbz	r3, 80048fe <_lseek_r+0x1e>
 80048fc:	602b      	str	r3, [r5, #0]
 80048fe:	bd38      	pop	{r3, r4, r5, pc}
 8004900:	20000144 	.word	0x20000144

08004904 <__swhatbuf_r>:
 8004904:	b570      	push	{r4, r5, r6, lr}
 8004906:	460e      	mov	r6, r1
 8004908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800490c:	2900      	cmp	r1, #0
 800490e:	b096      	sub	sp, #88	; 0x58
 8004910:	4614      	mov	r4, r2
 8004912:	461d      	mov	r5, r3
 8004914:	da07      	bge.n	8004926 <__swhatbuf_r+0x22>
 8004916:	2300      	movs	r3, #0
 8004918:	602b      	str	r3, [r5, #0]
 800491a:	89b3      	ldrh	r3, [r6, #12]
 800491c:	061a      	lsls	r2, r3, #24
 800491e:	d410      	bmi.n	8004942 <__swhatbuf_r+0x3e>
 8004920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004924:	e00e      	b.n	8004944 <__swhatbuf_r+0x40>
 8004926:	466a      	mov	r2, sp
 8004928:	f000 f8b2 	bl	8004a90 <_fstat_r>
 800492c:	2800      	cmp	r0, #0
 800492e:	dbf2      	blt.n	8004916 <__swhatbuf_r+0x12>
 8004930:	9a01      	ldr	r2, [sp, #4]
 8004932:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004936:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800493a:	425a      	negs	r2, r3
 800493c:	415a      	adcs	r2, r3
 800493e:	602a      	str	r2, [r5, #0]
 8004940:	e7ee      	b.n	8004920 <__swhatbuf_r+0x1c>
 8004942:	2340      	movs	r3, #64	; 0x40
 8004944:	2000      	movs	r0, #0
 8004946:	6023      	str	r3, [r4, #0]
 8004948:	b016      	add	sp, #88	; 0x58
 800494a:	bd70      	pop	{r4, r5, r6, pc}

0800494c <__smakebuf_r>:
 800494c:	898b      	ldrh	r3, [r1, #12]
 800494e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004950:	079d      	lsls	r5, r3, #30
 8004952:	4606      	mov	r6, r0
 8004954:	460c      	mov	r4, r1
 8004956:	d507      	bpl.n	8004968 <__smakebuf_r+0x1c>
 8004958:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800495c:	6023      	str	r3, [r4, #0]
 800495e:	6123      	str	r3, [r4, #16]
 8004960:	2301      	movs	r3, #1
 8004962:	6163      	str	r3, [r4, #20]
 8004964:	b002      	add	sp, #8
 8004966:	bd70      	pop	{r4, r5, r6, pc}
 8004968:	ab01      	add	r3, sp, #4
 800496a:	466a      	mov	r2, sp
 800496c:	f7ff ffca 	bl	8004904 <__swhatbuf_r>
 8004970:	9900      	ldr	r1, [sp, #0]
 8004972:	4605      	mov	r5, r0
 8004974:	4630      	mov	r0, r6
 8004976:	f7ff faab 	bl	8003ed0 <_malloc_r>
 800497a:	b948      	cbnz	r0, 8004990 <__smakebuf_r+0x44>
 800497c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004980:	059a      	lsls	r2, r3, #22
 8004982:	d4ef      	bmi.n	8004964 <__smakebuf_r+0x18>
 8004984:	f023 0303 	bic.w	r3, r3, #3
 8004988:	f043 0302 	orr.w	r3, r3, #2
 800498c:	81a3      	strh	r3, [r4, #12]
 800498e:	e7e3      	b.n	8004958 <__smakebuf_r+0xc>
 8004990:	4b0d      	ldr	r3, [pc, #52]	; (80049c8 <__smakebuf_r+0x7c>)
 8004992:	62b3      	str	r3, [r6, #40]	; 0x28
 8004994:	89a3      	ldrh	r3, [r4, #12]
 8004996:	6020      	str	r0, [r4, #0]
 8004998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800499c:	81a3      	strh	r3, [r4, #12]
 800499e:	9b00      	ldr	r3, [sp, #0]
 80049a0:	6163      	str	r3, [r4, #20]
 80049a2:	9b01      	ldr	r3, [sp, #4]
 80049a4:	6120      	str	r0, [r4, #16]
 80049a6:	b15b      	cbz	r3, 80049c0 <__smakebuf_r+0x74>
 80049a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049ac:	4630      	mov	r0, r6
 80049ae:	f000 f881 	bl	8004ab4 <_isatty_r>
 80049b2:	b128      	cbz	r0, 80049c0 <__smakebuf_r+0x74>
 80049b4:	89a3      	ldrh	r3, [r4, #12]
 80049b6:	f023 0303 	bic.w	r3, r3, #3
 80049ba:	f043 0301 	orr.w	r3, r3, #1
 80049be:	81a3      	strh	r3, [r4, #12]
 80049c0:	89a3      	ldrh	r3, [r4, #12]
 80049c2:	431d      	orrs	r5, r3
 80049c4:	81a5      	strh	r5, [r4, #12]
 80049c6:	e7cd      	b.n	8004964 <__smakebuf_r+0x18>
 80049c8:	08003d85 	.word	0x08003d85

080049cc <__malloc_lock>:
 80049cc:	4770      	bx	lr

080049ce <__malloc_unlock>:
 80049ce:	4770      	bx	lr

080049d0 <_free_r>:
 80049d0:	b538      	push	{r3, r4, r5, lr}
 80049d2:	4605      	mov	r5, r0
 80049d4:	2900      	cmp	r1, #0
 80049d6:	d045      	beq.n	8004a64 <_free_r+0x94>
 80049d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049dc:	1f0c      	subs	r4, r1, #4
 80049de:	2b00      	cmp	r3, #0
 80049e0:	bfb8      	it	lt
 80049e2:	18e4      	addlt	r4, r4, r3
 80049e4:	f7ff fff2 	bl	80049cc <__malloc_lock>
 80049e8:	4a1f      	ldr	r2, [pc, #124]	; (8004a68 <_free_r+0x98>)
 80049ea:	6813      	ldr	r3, [r2, #0]
 80049ec:	4610      	mov	r0, r2
 80049ee:	b933      	cbnz	r3, 80049fe <_free_r+0x2e>
 80049f0:	6063      	str	r3, [r4, #4]
 80049f2:	6014      	str	r4, [r2, #0]
 80049f4:	4628      	mov	r0, r5
 80049f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049fa:	f7ff bfe8 	b.w	80049ce <__malloc_unlock>
 80049fe:	42a3      	cmp	r3, r4
 8004a00:	d90c      	bls.n	8004a1c <_free_r+0x4c>
 8004a02:	6821      	ldr	r1, [r4, #0]
 8004a04:	1862      	adds	r2, r4, r1
 8004a06:	4293      	cmp	r3, r2
 8004a08:	bf04      	itt	eq
 8004a0a:	681a      	ldreq	r2, [r3, #0]
 8004a0c:	685b      	ldreq	r3, [r3, #4]
 8004a0e:	6063      	str	r3, [r4, #4]
 8004a10:	bf04      	itt	eq
 8004a12:	1852      	addeq	r2, r2, r1
 8004a14:	6022      	streq	r2, [r4, #0]
 8004a16:	6004      	str	r4, [r0, #0]
 8004a18:	e7ec      	b.n	80049f4 <_free_r+0x24>
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	b10a      	cbz	r2, 8004a24 <_free_r+0x54>
 8004a20:	42a2      	cmp	r2, r4
 8004a22:	d9fa      	bls.n	8004a1a <_free_r+0x4a>
 8004a24:	6819      	ldr	r1, [r3, #0]
 8004a26:	1858      	adds	r0, r3, r1
 8004a28:	42a0      	cmp	r0, r4
 8004a2a:	d10b      	bne.n	8004a44 <_free_r+0x74>
 8004a2c:	6820      	ldr	r0, [r4, #0]
 8004a2e:	4401      	add	r1, r0
 8004a30:	1858      	adds	r0, r3, r1
 8004a32:	4282      	cmp	r2, r0
 8004a34:	6019      	str	r1, [r3, #0]
 8004a36:	d1dd      	bne.n	80049f4 <_free_r+0x24>
 8004a38:	6810      	ldr	r0, [r2, #0]
 8004a3a:	6852      	ldr	r2, [r2, #4]
 8004a3c:	605a      	str	r2, [r3, #4]
 8004a3e:	4401      	add	r1, r0
 8004a40:	6019      	str	r1, [r3, #0]
 8004a42:	e7d7      	b.n	80049f4 <_free_r+0x24>
 8004a44:	d902      	bls.n	8004a4c <_free_r+0x7c>
 8004a46:	230c      	movs	r3, #12
 8004a48:	602b      	str	r3, [r5, #0]
 8004a4a:	e7d3      	b.n	80049f4 <_free_r+0x24>
 8004a4c:	6820      	ldr	r0, [r4, #0]
 8004a4e:	1821      	adds	r1, r4, r0
 8004a50:	428a      	cmp	r2, r1
 8004a52:	bf04      	itt	eq
 8004a54:	6811      	ldreq	r1, [r2, #0]
 8004a56:	6852      	ldreq	r2, [r2, #4]
 8004a58:	6062      	str	r2, [r4, #4]
 8004a5a:	bf04      	itt	eq
 8004a5c:	1809      	addeq	r1, r1, r0
 8004a5e:	6021      	streq	r1, [r4, #0]
 8004a60:	605c      	str	r4, [r3, #4]
 8004a62:	e7c7      	b.n	80049f4 <_free_r+0x24>
 8004a64:	bd38      	pop	{r3, r4, r5, pc}
 8004a66:	bf00      	nop
 8004a68:	20000090 	.word	0x20000090

08004a6c <_read_r>:
 8004a6c:	b538      	push	{r3, r4, r5, lr}
 8004a6e:	4c07      	ldr	r4, [pc, #28]	; (8004a8c <_read_r+0x20>)
 8004a70:	4605      	mov	r5, r0
 8004a72:	4608      	mov	r0, r1
 8004a74:	4611      	mov	r1, r2
 8004a76:	2200      	movs	r2, #0
 8004a78:	6022      	str	r2, [r4, #0]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	f7ff f81a 	bl	8003ab4 <_read>
 8004a80:	1c43      	adds	r3, r0, #1
 8004a82:	d102      	bne.n	8004a8a <_read_r+0x1e>
 8004a84:	6823      	ldr	r3, [r4, #0]
 8004a86:	b103      	cbz	r3, 8004a8a <_read_r+0x1e>
 8004a88:	602b      	str	r3, [r5, #0]
 8004a8a:	bd38      	pop	{r3, r4, r5, pc}
 8004a8c:	20000144 	.word	0x20000144

08004a90 <_fstat_r>:
 8004a90:	b538      	push	{r3, r4, r5, lr}
 8004a92:	4c07      	ldr	r4, [pc, #28]	; (8004ab0 <_fstat_r+0x20>)
 8004a94:	2300      	movs	r3, #0
 8004a96:	4605      	mov	r5, r0
 8004a98:	4608      	mov	r0, r1
 8004a9a:	4611      	mov	r1, r2
 8004a9c:	6023      	str	r3, [r4, #0]
 8004a9e:	f7ff f84e 	bl	8003b3e <_fstat>
 8004aa2:	1c43      	adds	r3, r0, #1
 8004aa4:	d102      	bne.n	8004aac <_fstat_r+0x1c>
 8004aa6:	6823      	ldr	r3, [r4, #0]
 8004aa8:	b103      	cbz	r3, 8004aac <_fstat_r+0x1c>
 8004aaa:	602b      	str	r3, [r5, #0]
 8004aac:	bd38      	pop	{r3, r4, r5, pc}
 8004aae:	bf00      	nop
 8004ab0:	20000144 	.word	0x20000144

08004ab4 <_isatty_r>:
 8004ab4:	b538      	push	{r3, r4, r5, lr}
 8004ab6:	4c06      	ldr	r4, [pc, #24]	; (8004ad0 <_isatty_r+0x1c>)
 8004ab8:	2300      	movs	r3, #0
 8004aba:	4605      	mov	r5, r0
 8004abc:	4608      	mov	r0, r1
 8004abe:	6023      	str	r3, [r4, #0]
 8004ac0:	f7ff f84d 	bl	8003b5e <_isatty>
 8004ac4:	1c43      	adds	r3, r0, #1
 8004ac6:	d102      	bne.n	8004ace <_isatty_r+0x1a>
 8004ac8:	6823      	ldr	r3, [r4, #0]
 8004aca:	b103      	cbz	r3, 8004ace <_isatty_r+0x1a>
 8004acc:	602b      	str	r3, [r5, #0]
 8004ace:	bd38      	pop	{r3, r4, r5, pc}
 8004ad0:	20000144 	.word	0x20000144

08004ad4 <_init>:
 8004ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad6:	bf00      	nop
 8004ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ada:	bc08      	pop	{r3}
 8004adc:	469e      	mov	lr, r3
 8004ade:	4770      	bx	lr

08004ae0 <_fini>:
 8004ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae2:	bf00      	nop
 8004ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ae6:	bc08      	pop	{r3}
 8004ae8:	469e      	mov	lr, r3
 8004aea:	4770      	bx	lr
