
CANLoopbackTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043c8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08004550  08004550  00014550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800460c  0800460c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800460c  0800460c  0001460c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004614  08004614  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004614  08004614  00014614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004618  08004618  00014618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800461c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000070  0800468c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  0800468c  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c430  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001da5  00000000  00000000  0002c4d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000aa0  00000000  00000000  0002e278  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009a8  00000000  00000000  0002ed18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026e2a  00000000  00000000  0002f6c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008ce0  00000000  00000000  000564ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ec001  00000000  00000000  0005f1ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014b1cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000303c  00000000  00000000  0014b248  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004538 	.word	0x08004538

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08004538 	.word	0x08004538

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004ce:	2300      	movs	r3, #0
 80004d0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004d2:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <HAL_Init+0x3c>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a0b      	ldr	r2, [pc, #44]	; (8000504 <HAL_Init+0x3c>)
 80004d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004dc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004de:	2003      	movs	r0, #3
 80004e0:	f000 fd60 	bl	8000fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004e4:	2000      	movs	r0, #0
 80004e6:	f000 f80f 	bl	8000508 <HAL_InitTick>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d002      	beq.n	80004f6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80004f0:	2301      	movs	r3, #1
 80004f2:	71fb      	strb	r3, [r7, #7]
 80004f4:	e001      	b.n	80004fa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004f6:	f003 f9b3 	bl	8003860 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004fa:	79fb      	ldrb	r3, [r7, #7]
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40022000 	.word	0x40022000

08000508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000510:	2300      	movs	r3, #0
 8000512:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000514:	4b16      	ldr	r3, [pc, #88]	; (8000570 <HAL_InitTick+0x68>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d022      	beq.n	8000562 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800051c:	4b15      	ldr	r3, [pc, #84]	; (8000574 <HAL_InitTick+0x6c>)
 800051e:	681a      	ldr	r2, [r3, #0]
 8000520:	4b13      	ldr	r3, [pc, #76]	; (8000570 <HAL_InitTick+0x68>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000528:	fbb1 f3f3 	udiv	r3, r1, r3
 800052c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000530:	4618      	mov	r0, r3
 8000532:	f000 fd5e 	bl	8000ff2 <HAL_SYSTICK_Config>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d10f      	bne.n	800055c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2b0f      	cmp	r3, #15
 8000540:	d809      	bhi.n	8000556 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000542:	2200      	movs	r2, #0
 8000544:	6879      	ldr	r1, [r7, #4]
 8000546:	f04f 30ff 	mov.w	r0, #4294967295
 800054a:	f000 fd36 	bl	8000fba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800054e:	4a0a      	ldr	r2, [pc, #40]	; (8000578 <HAL_InitTick+0x70>)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	6013      	str	r3, [r2, #0]
 8000554:	e007      	b.n	8000566 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000556:	2301      	movs	r3, #1
 8000558:	73fb      	strb	r3, [r7, #15]
 800055a:	e004      	b.n	8000566 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800055c:	2301      	movs	r3, #1
 800055e:	73fb      	strb	r3, [r7, #15]
 8000560:	e001      	b.n	8000566 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000562:	2301      	movs	r3, #1
 8000564:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000566:	7bfb      	ldrb	r3, [r7, #15]
}
 8000568:	4618      	mov	r0, r3
 800056a:	3710      	adds	r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000004 	.word	0x20000004
 8000574:	20000008 	.word	0x20000008
 8000578:	20000000 	.word	0x20000000

0800057c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000580:	4b05      	ldr	r3, [pc, #20]	; (8000598 <HAL_IncTick+0x1c>)
 8000582:	681a      	ldr	r2, [r3, #0]
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <HAL_IncTick+0x20>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4413      	add	r3, r2
 800058a:	4a03      	ldr	r2, [pc, #12]	; (8000598 <HAL_IncTick+0x1c>)
 800058c:	6013      	str	r3, [r2, #0]
}
 800058e:	bf00      	nop
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	20000098 	.word	0x20000098
 800059c:	20000004 	.word	0x20000004

080005a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  return uwTick;
 80005a4:	4b03      	ldr	r3, [pc, #12]	; (80005b4 <HAL_GetTick+0x14>)
 80005a6:	681b      	ldr	r3, [r3, #0]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000098 	.word	0x20000098

080005b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d101      	bne.n	80005ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80005c6:	2301      	movs	r3, #1
 80005c8:	e0ed      	b.n	80007a6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d102      	bne.n	80005dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f003 f966 	bl	80038a8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f022 0202 	bic.w	r2, r2, #2
 80005ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80005ec:	f7ff ffd8 	bl	80005a0 <HAL_GetTick>
 80005f0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80005f2:	e012      	b.n	800061a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80005f4:	f7ff ffd4 	bl	80005a0 <HAL_GetTick>
 80005f8:	4602      	mov	r2, r0
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	2b0a      	cmp	r3, #10
 8000600:	d90b      	bls.n	800061a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000606:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2205      	movs	r2, #5
 8000612:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000616:	2301      	movs	r3, #1
 8000618:	e0c5      	b.n	80007a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	f003 0302 	and.w	r3, r3, #2
 8000624:	2b00      	cmp	r3, #0
 8000626:	d1e5      	bne.n	80005f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f042 0201 	orr.w	r2, r2, #1
 8000636:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000638:	f7ff ffb2 	bl	80005a0 <HAL_GetTick>
 800063c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800063e:	e012      	b.n	8000666 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000640:	f7ff ffae 	bl	80005a0 <HAL_GetTick>
 8000644:	4602      	mov	r2, r0
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	2b0a      	cmp	r3, #10
 800064c:	d90b      	bls.n	8000666 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000652:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2205      	movs	r2, #5
 800065e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000662:	2301      	movs	r3, #1
 8000664:	e09f      	b.n	80007a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	f003 0301 	and.w	r3, r3, #1
 8000670:	2b00      	cmp	r3, #0
 8000672:	d0e5      	beq.n	8000640 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	7e1b      	ldrb	r3, [r3, #24]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d108      	bne.n	800068e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	e007      	b.n	800069e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800069c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	7e5b      	ldrb	r3, [r3, #25]
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d108      	bne.n	80006b8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	e007      	b.n	80006c8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80006c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	7e9b      	ldrb	r3, [r3, #26]
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d108      	bne.n	80006e2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f042 0220 	orr.w	r2, r2, #32
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	e007      	b.n	80006f2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f022 0220 	bic.w	r2, r2, #32
 80006f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	7edb      	ldrb	r3, [r3, #27]
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d108      	bne.n	800070c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f022 0210 	bic.w	r2, r2, #16
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	e007      	b.n	800071c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f042 0210 	orr.w	r2, r2, #16
 800071a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	7f1b      	ldrb	r3, [r3, #28]
 8000720:	2b01      	cmp	r3, #1
 8000722:	d108      	bne.n	8000736 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	f042 0208 	orr.w	r2, r2, #8
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	e007      	b.n	8000746 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f022 0208 	bic.w	r2, r2, #8
 8000744:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	7f5b      	ldrb	r3, [r3, #29]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d108      	bne.n	8000760 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f042 0204 	orr.w	r2, r2, #4
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	e007      	b.n	8000770 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f022 0204 	bic.w	r2, r2, #4
 800076e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	689a      	ldr	r2, [r3, #8]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	431a      	orrs	r2, r3
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	691b      	ldr	r3, [r3, #16]
 800077e:	431a      	orrs	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	695b      	ldr	r3, [r3, #20]
 8000784:	ea42 0103 	orr.w	r1, r2, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	1e5a      	subs	r2, r3, #1
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	430a      	orrs	r2, r1
 8000794:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2200      	movs	r2, #0
 800079a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2201      	movs	r2, #1
 80007a0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80007a4:	2300      	movs	r3, #0
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80007ae:	b480      	push	{r7}
 80007b0:	b087      	sub	sp, #28
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
 80007b6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007c4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80007c6:	7cfb      	ldrb	r3, [r7, #19]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d003      	beq.n	80007d4 <HAL_CAN_ConfigFilter+0x26>
 80007cc:	7cfb      	ldrb	r3, [r7, #19]
 80007ce:	2b02      	cmp	r3, #2
 80007d0:	f040 80aa 	bne.w	8000928 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80007da:	f043 0201 	orr.w	r2, r3, #1
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	695b      	ldr	r3, [r3, #20]
 80007e8:	f003 031f 	and.w	r3, r3, #31
 80007ec:	2201      	movs	r2, #1
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	43db      	mvns	r3, r3
 80007fe:	401a      	ands	r2, r3
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	69db      	ldr	r3, [r3, #28]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d123      	bne.n	8000856 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	43db      	mvns	r3, r3
 8000818:	401a      	ands	r2, r3
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800082c:	683a      	ldr	r2, [r7, #0]
 800082e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000830:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	3248      	adds	r2, #72	; 0x48
 8000836:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	689b      	ldr	r3, [r3, #8]
 800083e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800084a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800084c:	6979      	ldr	r1, [r7, #20]
 800084e:	3348      	adds	r3, #72	; 0x48
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	440b      	add	r3, r1
 8000854:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	69db      	ldr	r3, [r3, #28]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d122      	bne.n	80008a4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	431a      	orrs	r2, r3
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800087a:	683a      	ldr	r2, [r7, #0]
 800087c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800087e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	3248      	adds	r2, #72	; 0x48
 8000884:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	689b      	ldr	r3, [r3, #8]
 800088c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	68db      	ldr	r3, [r3, #12]
 8000892:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000898:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800089a:	6979      	ldr	r1, [r7, #20]
 800089c:	3348      	adds	r3, #72	; 0x48
 800089e:	00db      	lsls	r3, r3, #3
 80008a0:	440b      	add	r3, r1
 80008a2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d109      	bne.n	80008c0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	43db      	mvns	r3, r3
 80008b6:	401a      	ands	r2, r3
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80008be:	e007      	b.n	80008d0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	431a      	orrs	r2, r3
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	691b      	ldr	r3, [r3, #16]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d109      	bne.n	80008ec <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	43db      	mvns	r3, r3
 80008e2:	401a      	ands	r2, r3
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80008ea:	e007      	b.n	80008fc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	431a      	orrs	r2, r3
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	6a1b      	ldr	r3, [r3, #32]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d107      	bne.n	8000914 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	431a      	orrs	r2, r3
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800091a:	f023 0201 	bic.w	r2, r3, #1
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000924:	2300      	movs	r3, #0
 8000926:	e006      	b.n	8000936 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800092c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000934:	2301      	movs	r3, #1
  }
}
 8000936:	4618      	mov	r0, r3
 8000938:	371c      	adds	r7, #28
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b084      	sub	sp, #16
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	2b01      	cmp	r3, #1
 8000954:	d12e      	bne.n	80009b4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2202      	movs	r2, #2
 800095a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f022 0201 	bic.w	r2, r2, #1
 800096c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800096e:	f7ff fe17 	bl	80005a0 <HAL_GetTick>
 8000972:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000974:	e012      	b.n	800099c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000976:	f7ff fe13 	bl	80005a0 <HAL_GetTick>
 800097a:	4602      	mov	r2, r0
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	1ad3      	subs	r3, r2, r3
 8000980:	2b0a      	cmp	r3, #10
 8000982:	d90b      	bls.n	800099c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000988:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2205      	movs	r2, #5
 8000994:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000998:	2301      	movs	r3, #1
 800099a:	e012      	b.n	80009c2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d1e5      	bne.n	8000976 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2200      	movs	r2, #0
 80009ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80009b0:	2300      	movs	r3, #0
 80009b2:	e006      	b.n	80009c2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80009c0:	2301      	movs	r3, #1
  }
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80009ca:	b480      	push	{r7}
 80009cc:	b089      	sub	sp, #36	; 0x24
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	60f8      	str	r0, [r7, #12]
 80009d2:	60b9      	str	r1, [r7, #8]
 80009d4:	607a      	str	r2, [r7, #4]
 80009d6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009de:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	689b      	ldr	r3, [r3, #8]
 80009e6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80009e8:	7ffb      	ldrb	r3, [r7, #31]
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d003      	beq.n	80009f6 <HAL_CAN_AddTxMessage+0x2c>
 80009ee:	7ffb      	ldrb	r3, [r7, #31]
 80009f0:	2b02      	cmp	r3, #2
 80009f2:	f040 80b8 	bne.w	8000b66 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80009f6:	69bb      	ldr	r3, [r7, #24]
 80009f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d10a      	bne.n	8000a16 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d105      	bne.n	8000a16 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000a0a:	69bb      	ldr	r3, [r7, #24]
 8000a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	f000 80a0 	beq.w	8000b56 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000a16:	69bb      	ldr	r3, [r7, #24]
 8000a18:	0e1b      	lsrs	r3, r3, #24
 8000a1a:	f003 0303 	and.w	r3, r3, #3
 8000a1e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	2b02      	cmp	r3, #2
 8000a24:	d907      	bls.n	8000a36 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a2a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
 8000a34:	e09e      	b.n	8000b74 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000a36:	2201      	movs	r2, #1
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	409a      	lsls	r2, r3
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d10d      	bne.n	8000a64 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000a52:	68f9      	ldr	r1, [r7, #12]
 8000a54:	6809      	ldr	r1, [r1, #0]
 8000a56:	431a      	orrs	r2, r3
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	3318      	adds	r3, #24
 8000a5c:	011b      	lsls	r3, r3, #4
 8000a5e:	440b      	add	r3, r1
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	e00f      	b.n	8000a84 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a6e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a74:	68f9      	ldr	r1, [r7, #12]
 8000a76:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000a78:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	3318      	adds	r3, #24
 8000a7e:	011b      	lsls	r3, r3, #4
 8000a80:	440b      	add	r3, r1
 8000a82:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	6819      	ldr	r1, [r3, #0]
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	691a      	ldr	r2, [r3, #16]
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	3318      	adds	r3, #24
 8000a90:	011b      	lsls	r3, r3, #4
 8000a92:	440b      	add	r3, r1
 8000a94:	3304      	adds	r3, #4
 8000a96:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	7d1b      	ldrb	r3, [r3, #20]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d111      	bne.n	8000ac4 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	3318      	adds	r3, #24
 8000aa8:	011b      	lsls	r3, r3, #4
 8000aaa:	4413      	add	r3, r2
 8000aac:	3304      	adds	r3, #4
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	68fa      	ldr	r2, [r7, #12]
 8000ab2:	6811      	ldr	r1, [r2, #0]
 8000ab4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	3318      	adds	r3, #24
 8000abc:	011b      	lsls	r3, r3, #4
 8000abe:	440b      	add	r3, r1
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3307      	adds	r3, #7
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	061a      	lsls	r2, r3, #24
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3306      	adds	r3, #6
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	041b      	lsls	r3, r3, #16
 8000ad4:	431a      	orrs	r2, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	3305      	adds	r3, #5
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	021b      	lsls	r3, r3, #8
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	3204      	adds	r2, #4
 8000ae4:	7812      	ldrb	r2, [r2, #0]
 8000ae6:	4610      	mov	r0, r2
 8000ae8:	68fa      	ldr	r2, [r7, #12]
 8000aea:	6811      	ldr	r1, [r2, #0]
 8000aec:	ea43 0200 	orr.w	r2, r3, r0
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	011b      	lsls	r3, r3, #4
 8000af4:	440b      	add	r3, r1
 8000af6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000afa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3303      	adds	r3, #3
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	061a      	lsls	r2, r3, #24
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3302      	adds	r3, #2
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	041b      	lsls	r3, r3, #16
 8000b0c:	431a      	orrs	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	3301      	adds	r3, #1
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	021b      	lsls	r3, r3, #8
 8000b16:	4313      	orrs	r3, r2
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	7812      	ldrb	r2, [r2, #0]
 8000b1c:	4610      	mov	r0, r2
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	6811      	ldr	r1, [r2, #0]
 8000b22:	ea43 0200 	orr.w	r2, r3, r0
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	011b      	lsls	r3, r3, #4
 8000b2a:	440b      	add	r3, r1
 8000b2c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000b30:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	3318      	adds	r3, #24
 8000b3a:	011b      	lsls	r3, r3, #4
 8000b3c:	4413      	add	r3, r2
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	68fa      	ldr	r2, [r7, #12]
 8000b42:	6811      	ldr	r1, [r2, #0]
 8000b44:	f043 0201 	orr.w	r2, r3, #1
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	3318      	adds	r3, #24
 8000b4c:	011b      	lsls	r3, r3, #4
 8000b4e:	440b      	add	r3, r1
 8000b50:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000b52:	2300      	movs	r3, #0
 8000b54:	e00e      	b.n	8000b74 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b5a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	e006      	b.n	8000b74 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b6a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
  }
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3724      	adds	r7, #36	; 0x24
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b94:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8000b96:	7afb      	ldrb	r3, [r7, #11]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d002      	beq.n	8000ba2 <HAL_CAN_IsTxMessagePending+0x22>
 8000b9c:	7afb      	ldrb	r3, [r7, #11]
 8000b9e:	2b02      	cmp	r3, #2
 8000ba0:	d10b      	bne.n	8000bba <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	689a      	ldr	r2, [r3, #8]
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	069b      	lsls	r3, r3, #26
 8000bac:	401a      	ands	r2, r3
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	069b      	lsls	r3, r3, #26
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d001      	beq.n	8000bba <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8000bba:	68fb      	ldr	r3, [r7, #12]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b087      	sub	sp, #28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
 8000bd4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bdc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000bde:	7dfb      	ldrb	r3, [r7, #23]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d003      	beq.n	8000bec <HAL_CAN_GetRxMessage+0x24>
 8000be4:	7dfb      	ldrb	r3, [r7, #23]
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	f040 80f4 	bne.w	8000dd4 <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d10e      	bne.n	8000c10 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	f003 0303 	and.w	r3, r3, #3
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d116      	bne.n	8000c2e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c04:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e0e8      	b.n	8000de2 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	691b      	ldr	r3, [r3, #16]
 8000c16:	f003 0303 	and.w	r3, r3, #3
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d107      	bne.n	8000c2e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e0d9      	b.n	8000de2 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	331b      	adds	r3, #27
 8000c36:	011b      	lsls	r3, r3, #4
 8000c38:	4413      	add	r3, r2
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f003 0204 	and.w	r2, r3, #4
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d10c      	bne.n	8000c66 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	331b      	adds	r3, #27
 8000c54:	011b      	lsls	r3, r3, #4
 8000c56:	4413      	add	r3, r2
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	0d5b      	lsrs	r3, r3, #21
 8000c5c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	e00b      	b.n	8000c7e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	331b      	adds	r3, #27
 8000c6e:	011b      	lsls	r3, r3, #4
 8000c70:	4413      	add	r3, r2
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	08db      	lsrs	r3, r3, #3
 8000c76:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	331b      	adds	r3, #27
 8000c86:	011b      	lsls	r3, r3, #4
 8000c88:	4413      	add	r3, r2
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	085b      	lsrs	r3, r3, #1
 8000c8e:	f003 0201 	and.w	r2, r3, #1
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	331b      	adds	r3, #27
 8000c9e:	011b      	lsls	r3, r3, #4
 8000ca0:	4413      	add	r3, r2
 8000ca2:	3304      	adds	r3, #4
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f003 020f 	and.w	r2, r3, #15
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	331b      	adds	r3, #27
 8000cb6:	011b      	lsls	r3, r3, #4
 8000cb8:	4413      	add	r3, r2
 8000cba:	3304      	adds	r3, #4
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	0a1b      	lsrs	r3, r3, #8
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	331b      	adds	r3, #27
 8000cce:	011b      	lsls	r3, r3, #4
 8000cd0:	4413      	add	r3, r2
 8000cd2:	3304      	adds	r3, #4
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	0c1b      	lsrs	r3, r3, #16
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	011b      	lsls	r3, r3, #4
 8000ce6:	4413      	add	r3, r2
 8000ce8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	011b      	lsls	r3, r3, #4
 8000cfc:	4413      	add	r3, r2
 8000cfe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	0a1a      	lsrs	r2, r3, #8
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	011b      	lsls	r3, r3, #4
 8000d16:	4413      	add	r3, r2
 8000d18:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	0c1a      	lsrs	r2, r3, #16
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	3302      	adds	r3, #2
 8000d24:	b2d2      	uxtb	r2, r2
 8000d26:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	011b      	lsls	r3, r3, #4
 8000d30:	4413      	add	r3, r2
 8000d32:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	0e1a      	lsrs	r2, r3, #24
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	3303      	adds	r3, #3
 8000d3e:	b2d2      	uxtb	r2, r2
 8000d40:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	011b      	lsls	r3, r3, #4
 8000d4a:	4413      	add	r3, r2
 8000d4c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	3304      	adds	r3, #4
 8000d56:	b2d2      	uxtb	r2, r2
 8000d58:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	011b      	lsls	r3, r3, #4
 8000d62:	4413      	add	r3, r2
 8000d64:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	0a1a      	lsrs	r2, r3, #8
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	3305      	adds	r3, #5
 8000d70:	b2d2      	uxtb	r2, r2
 8000d72:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	011b      	lsls	r3, r3, #4
 8000d7c:	4413      	add	r3, r2
 8000d7e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	0c1a      	lsrs	r2, r3, #16
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	3306      	adds	r3, #6
 8000d8a:	b2d2      	uxtb	r2, r2
 8000d8c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	011b      	lsls	r3, r3, #4
 8000d96:	4413      	add	r3, r2
 8000d98:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	0e1a      	lsrs	r2, r3, #24
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	3307      	adds	r3, #7
 8000da4:	b2d2      	uxtb	r2, r2
 8000da6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d108      	bne.n	8000dc0 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	68da      	ldr	r2, [r3, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f042 0220 	orr.w	r2, r2, #32
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	e007      	b.n	8000dd0 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	691a      	ldr	r2, [r3, #16]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f042 0220 	orr.w	r2, r2, #32
 8000dce:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e006      	b.n	8000de2 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
  }
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	371c      	adds	r7, #28
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <HAL_CAN_GetState>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL state
  */
HAL_CAN_StateTypeDef HAL_CAN_GetState(CAN_HandleTypeDef *hcan)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b085      	sub	sp, #20
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dfc:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_CAN_STATE_READY) ||
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d002      	beq.n	8000e0a <HAL_CAN_GetState+0x1c>
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d112      	bne.n	8000e30 <HAL_CAN_GetState+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check sleep mode acknowledge flag */
    if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 0302 	and.w	r3, r3, #2
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d002      	beq.n	8000e1e <HAL_CAN_GetState+0x30>
    {
      /* Sleep mode is active */
      state = HAL_CAN_STATE_SLEEP_ACTIVE;
 8000e18:	2304      	movs	r3, #4
 8000e1a:	73fb      	strb	r3, [r7, #15]
 8000e1c:	e008      	b.n	8000e30 <HAL_CAN_GetState+0x42>
    }
    /* Check sleep mode request flag */
    else if ((hcan->Instance->MCR & CAN_MCR_SLEEP) != 0U)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f003 0302 	and.w	r3, r3, #2
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <HAL_CAN_GetState+0x42>
    {
      /* Sleep mode request is pending */
      state = HAL_CAN_STATE_SLEEP_PENDING;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	73fb      	strb	r3, [r7, #15]
      /* Neither sleep mode request nor sleep mode acknowledge */
    }
  }

  /* Return CAN state */
  return state;
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
	...

08000e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e72:	4a04      	ldr	r2, [pc, #16]	; (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	60d3      	str	r3, [r2, #12]
}
 8000e78:	bf00      	nop
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	0a1b      	lsrs	r3, r3, #8
 8000e92:	f003 0307 	and.w	r3, r3, #7
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	6039      	str	r1, [r7, #0]
 8000eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	db0a      	blt.n	8000ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	490c      	ldr	r1, [pc, #48]	; (8000ef0 <__NVIC_SetPriority+0x4c>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	0112      	lsls	r2, r2, #4
 8000ec4:	b2d2      	uxtb	r2, r2
 8000ec6:	440b      	add	r3, r1
 8000ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ecc:	e00a      	b.n	8000ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4908      	ldr	r1, [pc, #32]	; (8000ef4 <__NVIC_SetPriority+0x50>)
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	f003 030f 	and.w	r3, r3, #15
 8000eda:	3b04      	subs	r3, #4
 8000edc:	0112      	lsls	r2, r2, #4
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	440b      	add	r3, r1
 8000ee2:	761a      	strb	r2, [r3, #24]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000e100 	.word	0xe000e100
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	; 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f1c3 0307 	rsb	r3, r3, #7
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	bf28      	it	cs
 8000f16:	2304      	movcs	r3, #4
 8000f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	2b06      	cmp	r3, #6
 8000f20:	d902      	bls.n	8000f28 <NVIC_EncodePriority+0x30>
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3b03      	subs	r3, #3
 8000f26:	e000      	b.n	8000f2a <NVIC_EncodePriority+0x32>
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43da      	mvns	r2, r3
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f40:	f04f 31ff 	mov.w	r1, #4294967295
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4a:	43d9      	mvns	r1, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	4313      	orrs	r3, r2
         );
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3724      	adds	r7, #36	; 0x24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f70:	d301      	bcc.n	8000f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00f      	b.n	8000f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f76:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <SysTick_Config+0x40>)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f7e:	210f      	movs	r1, #15
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295
 8000f84:	f7ff ff8e 	bl	8000ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <SysTick_Config+0x40>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f8e:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <SysTick_Config+0x40>)
 8000f90:	2207      	movs	r2, #7
 8000f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	e000e010 	.word	0xe000e010

08000fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff ff47 	bl	8000e40 <__NVIC_SetPriorityGrouping>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b086      	sub	sp, #24
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	607a      	str	r2, [r7, #4]
 8000fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fcc:	f7ff ff5c 	bl	8000e88 <__NVIC_GetPriorityGrouping>
 8000fd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	68b9      	ldr	r1, [r7, #8]
 8000fd6:	6978      	ldr	r0, [r7, #20]
 8000fd8:	f7ff ff8e 	bl	8000ef8 <NVIC_EncodePriority>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff5d 	bl	8000ea4 <__NVIC_SetPriority>
}
 8000fea:	bf00      	nop
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff ffb0 	bl	8000f60 <SysTick_Config>
 8001000:	4603      	mov	r3, r0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800100c:	b480      	push	{r7}
 800100e:	b087      	sub	sp, #28
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800101a:	e17f      	b.n	800131c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	2101      	movs	r1, #1
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	fa01 f303 	lsl.w	r3, r1, r3
 8001028:	4013      	ands	r3, r2
 800102a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2b00      	cmp	r3, #0
 8001030:	f000 8171 	beq.w	8001316 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	2b02      	cmp	r3, #2
 800103a:	d003      	beq.n	8001044 <HAL_GPIO_Init+0x38>
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	2b12      	cmp	r3, #18
 8001042:	d123      	bne.n	800108c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	08da      	lsrs	r2, r3, #3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3208      	adds	r2, #8
 800104c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	f003 0307 	and.w	r3, r3, #7
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	220f      	movs	r2, #15
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4013      	ands	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	691a      	ldr	r2, [r3, #16]
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	08da      	lsrs	r2, r3, #3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3208      	adds	r2, #8
 8001086:	6939      	ldr	r1, [r7, #16]
 8001088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2203      	movs	r2, #3
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0203 	and.w	r2, r3, #3
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d00b      	beq.n	80010e0 <HAL_GPIO_Init+0xd4>
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d007      	beq.n	80010e0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010d4:	2b11      	cmp	r3, #17
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2b12      	cmp	r3, #18
 80010de:	d130      	bne.n	8001142 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	2203      	movs	r2, #3
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4013      	ands	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	68da      	ldr	r2, [r3, #12]
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4313      	orrs	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001116:	2201      	movs	r2, #1
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	091b      	lsrs	r3, r3, #4
 800112c:	f003 0201 	and.w	r2, r3, #1
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f003 0303 	and.w	r3, r3, #3
 800114a:	2b03      	cmp	r3, #3
 800114c:	d118      	bne.n	8001180 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001152:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001154:	2201      	movs	r2, #1
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	08db      	lsrs	r3, r3, #3
 800116a:	f003 0201 	and.w	r2, r3, #1
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4313      	orrs	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	2203      	movs	r2, #3
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f000 80ac 	beq.w	8001316 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011be:	4b5e      	ldr	r3, [pc, #376]	; (8001338 <HAL_GPIO_Init+0x32c>)
 80011c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c2:	4a5d      	ldr	r2, [pc, #372]	; (8001338 <HAL_GPIO_Init+0x32c>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6613      	str	r3, [r2, #96]	; 0x60
 80011ca:	4b5b      	ldr	r3, [pc, #364]	; (8001338 <HAL_GPIO_Init+0x32c>)
 80011cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011d6:	4a59      	ldr	r2, [pc, #356]	; (800133c <HAL_GPIO_Init+0x330>)
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	089b      	lsrs	r3, r3, #2
 80011dc:	3302      	adds	r3, #2
 80011de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	f003 0303 	and.w	r3, r3, #3
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	220f      	movs	r2, #15
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	4013      	ands	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001200:	d025      	beq.n	800124e <HAL_GPIO_Init+0x242>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4e      	ldr	r2, [pc, #312]	; (8001340 <HAL_GPIO_Init+0x334>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d01f      	beq.n	800124a <HAL_GPIO_Init+0x23e>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a4d      	ldr	r2, [pc, #308]	; (8001344 <HAL_GPIO_Init+0x338>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d019      	beq.n	8001246 <HAL_GPIO_Init+0x23a>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a4c      	ldr	r2, [pc, #304]	; (8001348 <HAL_GPIO_Init+0x33c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d013      	beq.n	8001242 <HAL_GPIO_Init+0x236>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a4b      	ldr	r2, [pc, #300]	; (800134c <HAL_GPIO_Init+0x340>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d00d      	beq.n	800123e <HAL_GPIO_Init+0x232>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a4a      	ldr	r2, [pc, #296]	; (8001350 <HAL_GPIO_Init+0x344>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d007      	beq.n	800123a <HAL_GPIO_Init+0x22e>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a49      	ldr	r2, [pc, #292]	; (8001354 <HAL_GPIO_Init+0x348>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d101      	bne.n	8001236 <HAL_GPIO_Init+0x22a>
 8001232:	2306      	movs	r3, #6
 8001234:	e00c      	b.n	8001250 <HAL_GPIO_Init+0x244>
 8001236:	2307      	movs	r3, #7
 8001238:	e00a      	b.n	8001250 <HAL_GPIO_Init+0x244>
 800123a:	2305      	movs	r3, #5
 800123c:	e008      	b.n	8001250 <HAL_GPIO_Init+0x244>
 800123e:	2304      	movs	r3, #4
 8001240:	e006      	b.n	8001250 <HAL_GPIO_Init+0x244>
 8001242:	2303      	movs	r3, #3
 8001244:	e004      	b.n	8001250 <HAL_GPIO_Init+0x244>
 8001246:	2302      	movs	r3, #2
 8001248:	e002      	b.n	8001250 <HAL_GPIO_Init+0x244>
 800124a:	2301      	movs	r3, #1
 800124c:	e000      	b.n	8001250 <HAL_GPIO_Init+0x244>
 800124e:	2300      	movs	r3, #0
 8001250:	697a      	ldr	r2, [r7, #20]
 8001252:	f002 0203 	and.w	r2, r2, #3
 8001256:	0092      	lsls	r2, r2, #2
 8001258:	4093      	lsls	r3, r2
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001260:	4936      	ldr	r1, [pc, #216]	; (800133c <HAL_GPIO_Init+0x330>)
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	089b      	lsrs	r3, r3, #2
 8001266:	3302      	adds	r3, #2
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800126e:	4b3a      	ldr	r3, [pc, #232]	; (8001358 <HAL_GPIO_Init+0x34c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	43db      	mvns	r3, r3
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	4013      	ands	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d003      	beq.n	8001292 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4313      	orrs	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001292:	4a31      	ldr	r2, [pc, #196]	; (8001358 <HAL_GPIO_Init+0x34c>)
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001298:	4b2f      	ldr	r3, [pc, #188]	; (8001358 <HAL_GPIO_Init+0x34c>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	43db      	mvns	r3, r3
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4013      	ands	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d003      	beq.n	80012bc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012bc:	4a26      	ldr	r2, [pc, #152]	; (8001358 <HAL_GPIO_Init+0x34c>)
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012c2:	4b25      	ldr	r3, [pc, #148]	; (8001358 <HAL_GPIO_Init+0x34c>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	43db      	mvns	r3, r3
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	4013      	ands	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012e6:	4a1c      	ldr	r2, [pc, #112]	; (8001358 <HAL_GPIO_Init+0x34c>)
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012ec:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <HAL_GPIO_Init+0x34c>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	43db      	mvns	r3, r3
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d003      	beq.n	8001310 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	4313      	orrs	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001310:	4a11      	ldr	r2, [pc, #68]	; (8001358 <HAL_GPIO_Init+0x34c>)
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	3301      	adds	r3, #1
 800131a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	fa22 f303 	lsr.w	r3, r2, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	f47f ae78 	bne.w	800101c <HAL_GPIO_Init+0x10>
  }
}
 800132c:	bf00      	nop
 800132e:	371c      	adds	r7, #28
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	40021000 	.word	0x40021000
 800133c:	40010000 	.word	0x40010000
 8001340:	48000400 	.word	0x48000400
 8001344:	48000800 	.word	0x48000800
 8001348:	48000c00 	.word	0x48000c00
 800134c:	48001000 	.word	0x48001000
 8001350:	48001400 	.word	0x48001400
 8001354:	48001800 	.word	0x48001800
 8001358:	40010400 	.word	0x40010400

0800135c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	460b      	mov	r3, r1
 8001366:	807b      	strh	r3, [r7, #2]
 8001368:	4613      	mov	r3, r2
 800136a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800136c:	787b      	ldrb	r3, [r7, #1]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001372:	887a      	ldrh	r2, [r7, #2]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001378:	e002      	b.n	8001380 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800137a:	887a      	ldrh	r2, [r7, #2]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001390:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001398:	4618      	mov	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40007000 	.word	0x40007000

080013a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013b6:	d130      	bne.n	800141a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80013b8:	4b23      	ldr	r3, [pc, #140]	; (8001448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013c4:	d038      	beq.n	8001438 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013c6:	4b20      	ldr	r3, [pc, #128]	; (8001448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013ce:	4a1e      	ldr	r2, [pc, #120]	; (8001448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013d6:	4b1d      	ldr	r3, [pc, #116]	; (800144c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2232      	movs	r2, #50	; 0x32
 80013dc:	fb02 f303 	mul.w	r3, r2, r3
 80013e0:	4a1b      	ldr	r2, [pc, #108]	; (8001450 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013e2:	fba2 2303 	umull	r2, r3, r2, r3
 80013e6:	0c9b      	lsrs	r3, r3, #18
 80013e8:	3301      	adds	r3, #1
 80013ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013ec:	e002      	b.n	80013f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	3b01      	subs	r3, #1
 80013f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013f4:	4b14      	ldr	r3, [pc, #80]	; (8001448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001400:	d102      	bne.n	8001408 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1f2      	bne.n	80013ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001408:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800140a:	695b      	ldr	r3, [r3, #20]
 800140c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001414:	d110      	bne.n	8001438 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e00f      	b.n	800143a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800141a:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001426:	d007      	beq.n	8001438 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001428:	4b07      	ldr	r3, [pc, #28]	; (8001448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001430:	4a05      	ldr	r2, [pc, #20]	; (8001448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001432:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001436:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	40007000 	.word	0x40007000
 800144c:	20000008 	.word	0x20000008
 8001450:	431bde83 	.word	0x431bde83

08001454 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b088      	sub	sp, #32
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e39d      	b.n	8001ba2 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001466:	4ba4      	ldr	r3, [pc, #656]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f003 030c 	and.w	r3, r3, #12
 800146e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001470:	4ba1      	ldr	r3, [pc, #644]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	f003 0303 	and.w	r3, r3, #3
 8001478:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0310 	and.w	r3, r3, #16
 8001482:	2b00      	cmp	r3, #0
 8001484:	f000 80e1 	beq.w	800164a <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d007      	beq.n	800149e <HAL_RCC_OscConfig+0x4a>
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	2b0c      	cmp	r3, #12
 8001492:	f040 8088 	bne.w	80015a6 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	2b01      	cmp	r3, #1
 800149a:	f040 8084 	bne.w	80015a6 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800149e:	4b96      	ldr	r3, [pc, #600]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d005      	beq.n	80014b6 <HAL_RCC_OscConfig+0x62>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d101      	bne.n	80014b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e375      	b.n	8001ba2 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a1a      	ldr	r2, [r3, #32]
 80014ba:	4b8f      	ldr	r3, [pc, #572]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0308 	and.w	r3, r3, #8
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d004      	beq.n	80014d0 <HAL_RCC_OscConfig+0x7c>
 80014c6:	4b8c      	ldr	r3, [pc, #560]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014ce:	e005      	b.n	80014dc <HAL_RCC_OscConfig+0x88>
 80014d0:	4b89      	ldr	r3, [pc, #548]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 80014d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014d6:	091b      	lsrs	r3, r3, #4
 80014d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014dc:	4293      	cmp	r3, r2
 80014de:	d223      	bcs.n	8001528 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a1b      	ldr	r3, [r3, #32]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f000 fd09 	bl	8001efc <RCC_SetFlashLatencyFromMSIRange>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e356      	b.n	8001ba2 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014f4:	4b80      	ldr	r3, [pc, #512]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a7f      	ldr	r2, [pc, #508]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 80014fa:	f043 0308 	orr.w	r3, r3, #8
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	4b7d      	ldr	r3, [pc, #500]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	497a      	ldr	r1, [pc, #488]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 800150e:	4313      	orrs	r3, r2
 8001510:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001512:	4b79      	ldr	r3, [pc, #484]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	021b      	lsls	r3, r3, #8
 8001520:	4975      	ldr	r1, [pc, #468]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 8001522:	4313      	orrs	r3, r2
 8001524:	604b      	str	r3, [r1, #4]
 8001526:	e022      	b.n	800156e <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001528:	4b73      	ldr	r3, [pc, #460]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a72      	ldr	r2, [pc, #456]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 800152e:	f043 0308 	orr.w	r3, r3, #8
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	4b70      	ldr	r3, [pc, #448]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	496d      	ldr	r1, [pc, #436]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 8001542:	4313      	orrs	r3, r2
 8001544:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001546:	4b6c      	ldr	r3, [pc, #432]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	4968      	ldr	r1, [pc, #416]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 8001556:	4313      	orrs	r3, r2
 8001558:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a1b      	ldr	r3, [r3, #32]
 800155e:	4618      	mov	r0, r3
 8001560:	f000 fccc 	bl	8001efc <RCC_SetFlashLatencyFromMSIRange>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e319      	b.n	8001ba2 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800156e:	f000 fc03 	bl	8001d78 <HAL_RCC_GetSysClockFreq>
 8001572:	4601      	mov	r1, r0
 8001574:	4b60      	ldr	r3, [pc, #384]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	091b      	lsrs	r3, r3, #4
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	4a5f      	ldr	r2, [pc, #380]	; (80016fc <HAL_RCC_OscConfig+0x2a8>)
 8001580:	5cd3      	ldrb	r3, [r2, r3]
 8001582:	f003 031f 	and.w	r3, r3, #31
 8001586:	fa21 f303 	lsr.w	r3, r1, r3
 800158a:	4a5d      	ldr	r2, [pc, #372]	; (8001700 <HAL_RCC_OscConfig+0x2ac>)
 800158c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800158e:	4b5d      	ldr	r3, [pc, #372]	; (8001704 <HAL_RCC_OscConfig+0x2b0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f7fe ffb8 	bl	8000508 <HAL_InitTick>
 8001598:	4603      	mov	r3, r0
 800159a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d052      	beq.n	8001648 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	e2fd      	b.n	8001ba2 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d032      	beq.n	8001614 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015ae:	4b52      	ldr	r3, [pc, #328]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a51      	ldr	r2, [pc, #324]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015ba:	f7fe fff1 	bl	80005a0 <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015c2:	f7fe ffed 	bl	80005a0 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e2e6      	b.n	8001ba2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015d4:	4b48      	ldr	r3, [pc, #288]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0f0      	beq.n	80015c2 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015e0:	4b45      	ldr	r3, [pc, #276]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a44      	ldr	r2, [pc, #272]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 80015e6:	f043 0308 	orr.w	r3, r3, #8
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	4b42      	ldr	r3, [pc, #264]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	493f      	ldr	r1, [pc, #252]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015fe:	4b3e      	ldr	r3, [pc, #248]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	021b      	lsls	r3, r3, #8
 800160c:	493a      	ldr	r1, [pc, #232]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 800160e:	4313      	orrs	r3, r2
 8001610:	604b      	str	r3, [r1, #4]
 8001612:	e01a      	b.n	800164a <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001614:	4b38      	ldr	r3, [pc, #224]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a37      	ldr	r2, [pc, #220]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 800161a:	f023 0301 	bic.w	r3, r3, #1
 800161e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001620:	f7fe ffbe 	bl	80005a0 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001628:	f7fe ffba 	bl	80005a0 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e2b3      	b.n	8001ba2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800163a:	4b2f      	ldr	r3, [pc, #188]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f0      	bne.n	8001628 <HAL_RCC_OscConfig+0x1d4>
 8001646:	e000      	b.n	800164a <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001648:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b00      	cmp	r3, #0
 8001654:	d074      	beq.n	8001740 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	2b08      	cmp	r3, #8
 800165a:	d005      	beq.n	8001668 <HAL_RCC_OscConfig+0x214>
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	2b0c      	cmp	r3, #12
 8001660:	d10e      	bne.n	8001680 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	2b03      	cmp	r3, #3
 8001666:	d10b      	bne.n	8001680 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001668:	4b23      	ldr	r3, [pc, #140]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d064      	beq.n	800173e <HAL_RCC_OscConfig+0x2ea>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d160      	bne.n	800173e <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e290      	b.n	8001ba2 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001688:	d106      	bne.n	8001698 <HAL_RCC_OscConfig+0x244>
 800168a:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a1a      	ldr	r2, [pc, #104]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 8001690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	e01d      	b.n	80016d4 <HAL_RCC_OscConfig+0x280>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016a0:	d10c      	bne.n	80016bc <HAL_RCC_OscConfig+0x268>
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a14      	ldr	r2, [pc, #80]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 80016a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016ac:	6013      	str	r3, [r2, #0]
 80016ae:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a11      	ldr	r2, [pc, #68]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 80016b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	e00b      	b.n	80016d4 <HAL_RCC_OscConfig+0x280>
 80016bc:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a0d      	ldr	r2, [pc, #52]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 80016c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 80016ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d01c      	beq.n	8001716 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016dc:	f7fe ff60 	bl	80005a0 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016e2:	e011      	b.n	8001708 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016e4:	f7fe ff5c 	bl	80005a0 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b64      	cmp	r3, #100	; 0x64
 80016f0:	d90a      	bls.n	8001708 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e255      	b.n	8001ba2 <HAL_RCC_OscConfig+0x74e>
 80016f6:	bf00      	nop
 80016f8:	40021000 	.word	0x40021000
 80016fc:	08004560 	.word	0x08004560
 8001700:	20000008 	.word	0x20000008
 8001704:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001708:	4bae      	ldr	r3, [pc, #696]	; (80019c4 <HAL_RCC_OscConfig+0x570>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0e7      	beq.n	80016e4 <HAL_RCC_OscConfig+0x290>
 8001714:	e014      	b.n	8001740 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001716:	f7fe ff43 	bl	80005a0 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800171e:	f7fe ff3f 	bl	80005a0 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b64      	cmp	r3, #100	; 0x64
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e238      	b.n	8001ba2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001730:	4ba4      	ldr	r3, [pc, #656]	; (80019c4 <HAL_RCC_OscConfig+0x570>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1f0      	bne.n	800171e <HAL_RCC_OscConfig+0x2ca>
 800173c:	e000      	b.n	8001740 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800173e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d060      	beq.n	800180e <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	2b04      	cmp	r3, #4
 8001750:	d005      	beq.n	800175e <HAL_RCC_OscConfig+0x30a>
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	2b0c      	cmp	r3, #12
 8001756:	d119      	bne.n	800178c <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	2b02      	cmp	r3, #2
 800175c:	d116      	bne.n	800178c <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800175e:	4b99      	ldr	r3, [pc, #612]	; (80019c4 <HAL_RCC_OscConfig+0x570>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001766:	2b00      	cmp	r3, #0
 8001768:	d005      	beq.n	8001776 <HAL_RCC_OscConfig+0x322>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e215      	b.n	8001ba2 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001776:	4b93      	ldr	r3, [pc, #588]	; (80019c4 <HAL_RCC_OscConfig+0x570>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	061b      	lsls	r3, r3, #24
 8001784:	498f      	ldr	r1, [pc, #572]	; (80019c4 <HAL_RCC_OscConfig+0x570>)
 8001786:	4313      	orrs	r3, r2
 8001788:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800178a:	e040      	b.n	800180e <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d023      	beq.n	80017dc <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001794:	4b8b      	ldr	r3, [pc, #556]	; (80019c4 <HAL_RCC_OscConfig+0x570>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a8a      	ldr	r2, [pc, #552]	; (80019c4 <HAL_RCC_OscConfig+0x570>)
 800179a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800179e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a0:	f7fe fefe 	bl	80005a0 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a8:	f7fe fefa 	bl	80005a0 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e1f3      	b.n	8001ba2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017ba:	4b82      	ldr	r3, [pc, #520]	; (80019c4 <HAL_RCC_OscConfig+0x570>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0f0      	beq.n	80017a8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c6:	4b7f      	ldr	r3, [pc, #508]	; (80019c4 <HAL_RCC_OscConfig+0x570>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	061b      	lsls	r3, r3, #24
 80017d4:	497b      	ldr	r1, [pc, #492]	; (80019c4 <HAL_RCC_OscConfig+0x570>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	604b      	str	r3, [r1, #4]
 80017da:	e018      	b.n	800180e <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017dc:	4b79      	ldr	r3, [pc, #484]	; (80019c4 <HAL_RCC_OscConfig+0x570>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a78      	ldr	r2, [pc, #480]	; (80019c4 <HAL_RCC_OscConfig+0x570>)
 80017e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e8:	f7fe feda 	bl	80005a0 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017f0:	f7fe fed6 	bl	80005a0 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e1cf      	b.n	8001ba2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001802:	4b70      	ldr	r3, [pc, #448]	; (80019c4 <HAL_RCC_OscConfig+0x570>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0308 	and.w	r3, r3, #8
 8001816:	2b00      	cmp	r3, #0
 8001818:	d03c      	beq.n	8001894 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d01c      	beq.n	800185c <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001822:	4b68      	ldr	r3, [pc, #416]	; (80019c4 <HAL_RCC_OscConfig+0x570>)
 8001824:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001828:	4a66      	ldr	r2, [pc, #408]	; (80019c4 <HAL_RCC_OscConfig+0x570>)
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001832:	f7fe feb5 	bl	80005a0 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800183a:	f7fe feb1 	bl	80005a0 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e1aa      	b.n	8001ba2 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800184c:	4b5d      	ldr	r3, [pc, #372]	; (80019c4 <HAL_RCC_OscConfig+0x570>)
 800184e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d0ef      	beq.n	800183a <HAL_RCC_OscConfig+0x3e6>
 800185a:	e01b      	b.n	8001894 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800185c:	4b59      	ldr	r3, [pc, #356]	; (80019c4 <HAL_RCC_OscConfig+0x570>)
 800185e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001862:	4a58      	ldr	r2, [pc, #352]	; (80019c4 <HAL_RCC_OscConfig+0x570>)
 8001864:	f023 0301 	bic.w	r3, r3, #1
 8001868:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800186c:	f7fe fe98 	bl	80005a0 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001874:	f7fe fe94 	bl	80005a0 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e18d      	b.n	8001ba2 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001886:	4b4f      	ldr	r3, [pc, #316]	; (80019c4 <HAL_RCC_OscConfig+0x570>)
 8001888:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1ef      	bne.n	8001874 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b00      	cmp	r3, #0
 800189e:	f000 80a5 	beq.w	80019ec <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018a2:	2300      	movs	r3, #0
 80018a4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80018a6:	4b47      	ldr	r3, [pc, #284]	; (80019c4 <HAL_RCC_OscConfig+0x570>)
 80018a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10d      	bne.n	80018ce <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018b2:	4b44      	ldr	r3, [pc, #272]	; (80019c4 <HAL_RCC_OscConfig+0x570>)
 80018b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b6:	4a43      	ldr	r2, [pc, #268]	; (80019c4 <HAL_RCC_OscConfig+0x570>)
 80018b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018bc:	6593      	str	r3, [r2, #88]	; 0x58
 80018be:	4b41      	ldr	r3, [pc, #260]	; (80019c4 <HAL_RCC_OscConfig+0x570>)
 80018c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018ca:	2301      	movs	r3, #1
 80018cc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018ce:	4b3e      	ldr	r3, [pc, #248]	; (80019c8 <HAL_RCC_OscConfig+0x574>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d118      	bne.n	800190c <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018da:	4b3b      	ldr	r3, [pc, #236]	; (80019c8 <HAL_RCC_OscConfig+0x574>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a3a      	ldr	r2, [pc, #232]	; (80019c8 <HAL_RCC_OscConfig+0x574>)
 80018e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018e6:	f7fe fe5b 	bl	80005a0 <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018ec:	e008      	b.n	8001900 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ee:	f7fe fe57 	bl	80005a0 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e150      	b.n	8001ba2 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001900:	4b31      	ldr	r3, [pc, #196]	; (80019c8 <HAL_RCC_OscConfig+0x574>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001908:	2b00      	cmp	r3, #0
 800190a:	d0f0      	beq.n	80018ee <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d108      	bne.n	8001926 <HAL_RCC_OscConfig+0x4d2>
 8001914:	4b2b      	ldr	r3, [pc, #172]	; (80019c4 <HAL_RCC_OscConfig+0x570>)
 8001916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800191a:	4a2a      	ldr	r2, [pc, #168]	; (80019c4 <HAL_RCC_OscConfig+0x570>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001924:	e024      	b.n	8001970 <HAL_RCC_OscConfig+0x51c>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	2b05      	cmp	r3, #5
 800192c:	d110      	bne.n	8001950 <HAL_RCC_OscConfig+0x4fc>
 800192e:	4b25      	ldr	r3, [pc, #148]	; (80019c4 <HAL_RCC_OscConfig+0x570>)
 8001930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001934:	4a23      	ldr	r2, [pc, #140]	; (80019c4 <HAL_RCC_OscConfig+0x570>)
 8001936:	f043 0304 	orr.w	r3, r3, #4
 800193a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800193e:	4b21      	ldr	r3, [pc, #132]	; (80019c4 <HAL_RCC_OscConfig+0x570>)
 8001940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001944:	4a1f      	ldr	r2, [pc, #124]	; (80019c4 <HAL_RCC_OscConfig+0x570>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800194e:	e00f      	b.n	8001970 <HAL_RCC_OscConfig+0x51c>
 8001950:	4b1c      	ldr	r3, [pc, #112]	; (80019c4 <HAL_RCC_OscConfig+0x570>)
 8001952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001956:	4a1b      	ldr	r2, [pc, #108]	; (80019c4 <HAL_RCC_OscConfig+0x570>)
 8001958:	f023 0301 	bic.w	r3, r3, #1
 800195c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001960:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <HAL_RCC_OscConfig+0x570>)
 8001962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001966:	4a17      	ldr	r2, [pc, #92]	; (80019c4 <HAL_RCC_OscConfig+0x570>)
 8001968:	f023 0304 	bic.w	r3, r3, #4
 800196c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d016      	beq.n	80019a6 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001978:	f7fe fe12 	bl	80005a0 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800197e:	e00a      	b.n	8001996 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001980:	f7fe fe0e 	bl	80005a0 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	f241 3288 	movw	r2, #5000	; 0x1388
 800198e:	4293      	cmp	r3, r2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e105      	b.n	8001ba2 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001996:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <HAL_RCC_OscConfig+0x570>)
 8001998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0ed      	beq.n	8001980 <HAL_RCC_OscConfig+0x52c>
 80019a4:	e019      	b.n	80019da <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a6:	f7fe fdfb 	bl	80005a0 <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019ac:	e00e      	b.n	80019cc <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ae:	f7fe fdf7 	bl	80005a0 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019bc:	4293      	cmp	r3, r2
 80019be:	d905      	bls.n	80019cc <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e0ee      	b.n	8001ba2 <HAL_RCC_OscConfig+0x74e>
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019cc:	4b77      	ldr	r3, [pc, #476]	; (8001bac <HAL_RCC_OscConfig+0x758>)
 80019ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1e9      	bne.n	80019ae <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019da:	7ffb      	ldrb	r3, [r7, #31]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d105      	bne.n	80019ec <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019e0:	4b72      	ldr	r3, [pc, #456]	; (8001bac <HAL_RCC_OscConfig+0x758>)
 80019e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e4:	4a71      	ldr	r2, [pc, #452]	; (8001bac <HAL_RCC_OscConfig+0x758>)
 80019e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019ea:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 80d5 	beq.w	8001ba0 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	2b0c      	cmp	r3, #12
 80019fa:	f000 808e 	beq.w	8001b1a <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d15b      	bne.n	8001abe <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a06:	4b69      	ldr	r3, [pc, #420]	; (8001bac <HAL_RCC_OscConfig+0x758>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a68      	ldr	r2, [pc, #416]	; (8001bac <HAL_RCC_OscConfig+0x758>)
 8001a0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a12:	f7fe fdc5 	bl	80005a0 <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a1a:	f7fe fdc1 	bl	80005a0 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e0ba      	b.n	8001ba2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a2c:	4b5f      	ldr	r3, [pc, #380]	; (8001bac <HAL_RCC_OscConfig+0x758>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1f0      	bne.n	8001a1a <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a38:	4b5c      	ldr	r3, [pc, #368]	; (8001bac <HAL_RCC_OscConfig+0x758>)
 8001a3a:	68da      	ldr	r2, [r3, #12]
 8001a3c:	4b5c      	ldr	r3, [pc, #368]	; (8001bb0 <HAL_RCC_OscConfig+0x75c>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a48:	3a01      	subs	r2, #1
 8001a4a:	0112      	lsls	r2, r2, #4
 8001a4c:	4311      	orrs	r1, r2
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a52:	0212      	lsls	r2, r2, #8
 8001a54:	4311      	orrs	r1, r2
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a5a:	0852      	lsrs	r2, r2, #1
 8001a5c:	3a01      	subs	r2, #1
 8001a5e:	0552      	lsls	r2, r2, #21
 8001a60:	4311      	orrs	r1, r2
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a66:	0852      	lsrs	r2, r2, #1
 8001a68:	3a01      	subs	r2, #1
 8001a6a:	0652      	lsls	r2, r2, #25
 8001a6c:	4311      	orrs	r1, r2
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a72:	0912      	lsrs	r2, r2, #4
 8001a74:	0452      	lsls	r2, r2, #17
 8001a76:	430a      	orrs	r2, r1
 8001a78:	494c      	ldr	r1, [pc, #304]	; (8001bac <HAL_RCC_OscConfig+0x758>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a7e:	4b4b      	ldr	r3, [pc, #300]	; (8001bac <HAL_RCC_OscConfig+0x758>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a4a      	ldr	r2, [pc, #296]	; (8001bac <HAL_RCC_OscConfig+0x758>)
 8001a84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a88:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a8a:	4b48      	ldr	r3, [pc, #288]	; (8001bac <HAL_RCC_OscConfig+0x758>)
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	4a47      	ldr	r2, [pc, #284]	; (8001bac <HAL_RCC_OscConfig+0x758>)
 8001a90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a94:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a96:	f7fe fd83 	bl	80005a0 <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9e:	f7fe fd7f 	bl	80005a0 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e078      	b.n	8001ba2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ab0:	4b3e      	ldr	r3, [pc, #248]	; (8001bac <HAL_RCC_OscConfig+0x758>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d0f0      	beq.n	8001a9e <HAL_RCC_OscConfig+0x64a>
 8001abc:	e070      	b.n	8001ba0 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001abe:	4b3b      	ldr	r3, [pc, #236]	; (8001bac <HAL_RCC_OscConfig+0x758>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a3a      	ldr	r2, [pc, #232]	; (8001bac <HAL_RCC_OscConfig+0x758>)
 8001ac4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ac8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001aca:	4b38      	ldr	r3, [pc, #224]	; (8001bac <HAL_RCC_OscConfig+0x758>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d105      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ad6:	4b35      	ldr	r3, [pc, #212]	; (8001bac <HAL_RCC_OscConfig+0x758>)
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	4a34      	ldr	r2, [pc, #208]	; (8001bac <HAL_RCC_OscConfig+0x758>)
 8001adc:	f023 0303 	bic.w	r3, r3, #3
 8001ae0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ae2:	4b32      	ldr	r3, [pc, #200]	; (8001bac <HAL_RCC_OscConfig+0x758>)
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	4a31      	ldr	r2, [pc, #196]	; (8001bac <HAL_RCC_OscConfig+0x758>)
 8001ae8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001aec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af2:	f7fe fd55 	bl	80005a0 <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001afa:	f7fe fd51 	bl	80005a0 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e04a      	b.n	8001ba2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b0c:	4b27      	ldr	r3, [pc, #156]	; (8001bac <HAL_RCC_OscConfig+0x758>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1f0      	bne.n	8001afa <HAL_RCC_OscConfig+0x6a6>
 8001b18:	e042      	b.n	8001ba0 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d101      	bne.n	8001b26 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e03d      	b.n	8001ba2 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001b26:	4b21      	ldr	r3, [pc, #132]	; (8001bac <HAL_RCC_OscConfig+0x758>)
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	f003 0203 	and.w	r2, r3, #3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d130      	bne.n	8001b9c <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b44:	3b01      	subs	r3, #1
 8001b46:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d127      	bne.n	8001b9c <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b56:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d11f      	bne.n	8001b9c <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b66:	2a07      	cmp	r2, #7
 8001b68:	bf14      	ite	ne
 8001b6a:	2201      	movne	r2, #1
 8001b6c:	2200      	moveq	r2, #0
 8001b6e:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d113      	bne.n	8001b9c <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7e:	085b      	lsrs	r3, r3, #1
 8001b80:	3b01      	subs	r3, #1
 8001b82:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d109      	bne.n	8001b9c <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	085b      	lsrs	r3, r3, #1
 8001b94:	3b01      	subs	r3, #1
 8001b96:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d001      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e000      	b.n	8001ba2 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3720      	adds	r7, #32
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	f99d808c 	.word	0xf99d808c

08001bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e0c8      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc8:	4b66      	ldr	r3, [pc, #408]	; (8001d64 <HAL_RCC_ClockConfig+0x1b0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d910      	bls.n	8001bf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd6:	4b63      	ldr	r3, [pc, #396]	; (8001d64 <HAL_RCC_ClockConfig+0x1b0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f023 0207 	bic.w	r2, r3, #7
 8001bde:	4961      	ldr	r1, [pc, #388]	; (8001d64 <HAL_RCC_ClockConfig+0x1b0>)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be6:	4b5f      	ldr	r3, [pc, #380]	; (8001d64 <HAL_RCC_ClockConfig+0x1b0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d001      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e0b0      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d04c      	beq.n	8001c9e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b03      	cmp	r3, #3
 8001c0a:	d107      	bne.n	8001c1c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c0c:	4b56      	ldr	r3, [pc, #344]	; (8001d68 <HAL_RCC_ClockConfig+0x1b4>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d121      	bne.n	8001c5c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e09e      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d107      	bne.n	8001c34 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c24:	4b50      	ldr	r3, [pc, #320]	; (8001d68 <HAL_RCC_ClockConfig+0x1b4>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d115      	bne.n	8001c5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e092      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d107      	bne.n	8001c4c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c3c:	4b4a      	ldr	r3, [pc, #296]	; (8001d68 <HAL_RCC_ClockConfig+0x1b4>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d109      	bne.n	8001c5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e086      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c4c:	4b46      	ldr	r3, [pc, #280]	; (8001d68 <HAL_RCC_ClockConfig+0x1b4>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e07e      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c5c:	4b42      	ldr	r3, [pc, #264]	; (8001d68 <HAL_RCC_ClockConfig+0x1b4>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f023 0203 	bic.w	r2, r3, #3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	493f      	ldr	r1, [pc, #252]	; (8001d68 <HAL_RCC_ClockConfig+0x1b4>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c6e:	f7fe fc97 	bl	80005a0 <HAL_GetTick>
 8001c72:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c74:	e00a      	b.n	8001c8c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c76:	f7fe fc93 	bl	80005a0 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e066      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c8c:	4b36      	ldr	r3, [pc, #216]	; (8001d68 <HAL_RCC_ClockConfig+0x1b4>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 020c 	and.w	r2, r3, #12
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d1eb      	bne.n	8001c76 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d008      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001caa:	4b2f      	ldr	r3, [pc, #188]	; (8001d68 <HAL_RCC_ClockConfig+0x1b4>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	492c      	ldr	r1, [pc, #176]	; (8001d68 <HAL_RCC_ClockConfig+0x1b4>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cbc:	4b29      	ldr	r3, [pc, #164]	; (8001d64 <HAL_RCC_ClockConfig+0x1b0>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d210      	bcs.n	8001cec <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cca:	4b26      	ldr	r3, [pc, #152]	; (8001d64 <HAL_RCC_ClockConfig+0x1b0>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f023 0207 	bic.w	r2, r3, #7
 8001cd2:	4924      	ldr	r1, [pc, #144]	; (8001d64 <HAL_RCC_ClockConfig+0x1b0>)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cda:	4b22      	ldr	r3, [pc, #136]	; (8001d64 <HAL_RCC_ClockConfig+0x1b0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d001      	beq.n	8001cec <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e036      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d008      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cf8:	4b1b      	ldr	r3, [pc, #108]	; (8001d68 <HAL_RCC_ClockConfig+0x1b4>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	4918      	ldr	r1, [pc, #96]	; (8001d68 <HAL_RCC_ClockConfig+0x1b4>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d009      	beq.n	8001d2a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d16:	4b14      	ldr	r3, [pc, #80]	; (8001d68 <HAL_RCC_ClockConfig+0x1b4>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	4910      	ldr	r1, [pc, #64]	; (8001d68 <HAL_RCC_ClockConfig+0x1b4>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d2a:	f000 f825 	bl	8001d78 <HAL_RCC_GetSysClockFreq>
 8001d2e:	4601      	mov	r1, r0
 8001d30:	4b0d      	ldr	r3, [pc, #52]	; (8001d68 <HAL_RCC_ClockConfig+0x1b4>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	091b      	lsrs	r3, r3, #4
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	4a0c      	ldr	r2, [pc, #48]	; (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001d3c:	5cd3      	ldrb	r3, [r2, r3]
 8001d3e:	f003 031f 	and.w	r3, r3, #31
 8001d42:	fa21 f303 	lsr.w	r3, r1, r3
 8001d46:	4a0a      	ldr	r2, [pc, #40]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <HAL_RCC_ClockConfig+0x1c0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe fbda 	bl	8000508 <HAL_InitTick>
 8001d54:	4603      	mov	r3, r0
 8001d56:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d58:	7afb      	ldrb	r3, [r7, #11]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40022000 	.word	0x40022000
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	08004560 	.word	0x08004560
 8001d70:	20000008 	.word	0x20000008
 8001d74:	20000000 	.word	0x20000000

08001d78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b089      	sub	sp, #36	; 0x24
 8001d7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61fb      	str	r3, [r7, #28]
 8001d82:	2300      	movs	r3, #0
 8001d84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d86:	4b3d      	ldr	r3, [pc, #244]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x104>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
 8001d8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d90:	4b3a      	ldr	r3, [pc, #232]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x104>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d005      	beq.n	8001dac <HAL_RCC_GetSysClockFreq+0x34>
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	2b0c      	cmp	r3, #12
 8001da4:	d121      	bne.n	8001dea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d11e      	bne.n	8001dea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001dac:	4b33      	ldr	r3, [pc, #204]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x104>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0308 	and.w	r3, r3, #8
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d107      	bne.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001db8:	4b30      	ldr	r3, [pc, #192]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x104>)
 8001dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dbe:	0a1b      	lsrs	r3, r3, #8
 8001dc0:	f003 030f 	and.w	r3, r3, #15
 8001dc4:	61fb      	str	r3, [r7, #28]
 8001dc6:	e005      	b.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001dc8:	4b2c      	ldr	r3, [pc, #176]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x104>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	091b      	lsrs	r3, r3, #4
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001dd4:	4a2a      	ldr	r2, [pc, #168]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ddc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d10d      	bne.n	8001e00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001de8:	e00a      	b.n	8001e00 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	2b04      	cmp	r3, #4
 8001dee:	d102      	bne.n	8001df6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001df0:	4b24      	ldr	r3, [pc, #144]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001df2:	61bb      	str	r3, [r7, #24]
 8001df4:	e004      	b.n	8001e00 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	d101      	bne.n	8001e00 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001dfc:	4b22      	ldr	r3, [pc, #136]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x110>)
 8001dfe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	2b0c      	cmp	r3, #12
 8001e04:	d133      	bne.n	8001e6e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e06:	4b1d      	ldr	r3, [pc, #116]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x104>)
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d002      	beq.n	8001e1c <HAL_RCC_GetSysClockFreq+0xa4>
 8001e16:	2b03      	cmp	r3, #3
 8001e18:	d003      	beq.n	8001e22 <HAL_RCC_GetSysClockFreq+0xaa>
 8001e1a:	e005      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e1c:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e1e:	617b      	str	r3, [r7, #20]
      break;
 8001e20:	e005      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e22:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e24:	617b      	str	r3, [r7, #20]
      break;
 8001e26:	e002      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	617b      	str	r3, [r7, #20]
      break;
 8001e2c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e2e:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x104>)
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	091b      	lsrs	r3, r3, #4
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	3301      	adds	r3, #1
 8001e3a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e3c:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x104>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	0a1b      	lsrs	r3, r3, #8
 8001e42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	fb02 f203 	mul.w	r2, r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e52:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e54:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x104>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	0e5b      	lsrs	r3, r3, #25
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	3301      	adds	r3, #1
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e6e:	69bb      	ldr	r3, [r7, #24]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3724      	adds	r7, #36	; 0x24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	08004578 	.word	0x08004578
 8001e84:	00f42400 	.word	0x00f42400
 8001e88:	007a1200 	.word	0x007a1200

08001e8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e90:	4b03      	ldr	r3, [pc, #12]	; (8001ea0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e92:	681b      	ldr	r3, [r3, #0]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	20000008 	.word	0x20000008

08001ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ea8:	f7ff fff0 	bl	8001e8c <HAL_RCC_GetHCLKFreq>
 8001eac:	4601      	mov	r1, r0
 8001eae:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	0a1b      	lsrs	r3, r3, #8
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	4a04      	ldr	r2, [pc, #16]	; (8001ecc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001eba:	5cd3      	ldrb	r3, [r2, r3]
 8001ebc:	f003 031f 	and.w	r3, r3, #31
 8001ec0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	08004570 	.word	0x08004570

08001ed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ed4:	f7ff ffda 	bl	8001e8c <HAL_RCC_GetHCLKFreq>
 8001ed8:	4601      	mov	r1, r0
 8001eda:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	0adb      	lsrs	r3, r3, #11
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	4a04      	ldr	r2, [pc, #16]	; (8001ef8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ee6:	5cd3      	ldrb	r3, [r2, r3]
 8001ee8:	f003 031f 	and.w	r3, r3, #31
 8001eec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	08004570 	.word	0x08004570

08001efc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f04:	2300      	movs	r3, #0
 8001f06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f08:	4b2a      	ldr	r3, [pc, #168]	; (8001fb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f14:	f7ff fa3a 	bl	800138c <HAL_PWREx_GetVoltageRange>
 8001f18:	6178      	str	r0, [r7, #20]
 8001f1a:	e014      	b.n	8001f46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f1c:	4b25      	ldr	r3, [pc, #148]	; (8001fb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f20:	4a24      	ldr	r2, [pc, #144]	; (8001fb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f26:	6593      	str	r3, [r2, #88]	; 0x58
 8001f28:	4b22      	ldr	r3, [pc, #136]	; (8001fb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f34:	f7ff fa2a 	bl	800138c <HAL_PWREx_GetVoltageRange>
 8001f38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f3a:	4b1e      	ldr	r3, [pc, #120]	; (8001fb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3e:	4a1d      	ldr	r2, [pc, #116]	; (8001fb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f44:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f4c:	d10b      	bne.n	8001f66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b80      	cmp	r3, #128	; 0x80
 8001f52:	d919      	bls.n	8001f88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2ba0      	cmp	r3, #160	; 0xa0
 8001f58:	d902      	bls.n	8001f60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	613b      	str	r3, [r7, #16]
 8001f5e:	e013      	b.n	8001f88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f60:	2301      	movs	r3, #1
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	e010      	b.n	8001f88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b80      	cmp	r3, #128	; 0x80
 8001f6a:	d902      	bls.n	8001f72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	e00a      	b.n	8001f88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b80      	cmp	r3, #128	; 0x80
 8001f76:	d102      	bne.n	8001f7e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f78:	2302      	movs	r3, #2
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	e004      	b.n	8001f88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b70      	cmp	r3, #112	; 0x70
 8001f82:	d101      	bne.n	8001f88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f84:	2301      	movs	r3, #1
 8001f86:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f023 0207 	bic.w	r2, r3, #7
 8001f90:	4909      	ldr	r1, [pc, #36]	; (8001fb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f98:	4b07      	ldr	r3, [pc, #28]	; (8001fb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d001      	beq.n	8001faa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40022000 	.word	0x40022000

08001fbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fc8:	2300      	movs	r3, #0
 8001fca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d03f      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fe0:	d01c      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001fe2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fe6:	d802      	bhi.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00e      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001fec:	e01f      	b.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001fee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ff2:	d003      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001ff4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ff8:	d01c      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001ffa:	e018      	b.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ffc:	4b85      	ldr	r3, [pc, #532]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	4a84      	ldr	r2, [pc, #528]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002006:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002008:	e015      	b.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3304      	adds	r3, #4
 800200e:	2100      	movs	r1, #0
 8002010:	4618      	mov	r0, r3
 8002012:	f000 fab9 	bl	8002588 <RCCEx_PLLSAI1_Config>
 8002016:	4603      	mov	r3, r0
 8002018:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800201a:	e00c      	b.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3320      	adds	r3, #32
 8002020:	2100      	movs	r1, #0
 8002022:	4618      	mov	r0, r3
 8002024:	f000 fba0 	bl	8002768 <RCCEx_PLLSAI2_Config>
 8002028:	4603      	mov	r3, r0
 800202a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800202c:	e003      	b.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	74fb      	strb	r3, [r7, #19]
      break;
 8002032:	e000      	b.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002034:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002036:	7cfb      	ldrb	r3, [r7, #19]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10b      	bne.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800203c:	4b75      	ldr	r3, [pc, #468]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800203e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002042:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800204a:	4972      	ldr	r1, [pc, #456]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800204c:	4313      	orrs	r3, r2
 800204e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002052:	e001      	b.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002054:	7cfb      	ldrb	r3, [r7, #19]
 8002056:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d03f      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002068:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800206c:	d01c      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800206e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002072:	d802      	bhi.n	800207a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00e      	beq.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002078:	e01f      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800207a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800207e:	d003      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002080:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002084:	d01c      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002086:	e018      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002088:	4b62      	ldr	r3, [pc, #392]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	4a61      	ldr	r2, [pc, #388]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800208e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002092:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002094:	e015      	b.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3304      	adds	r3, #4
 800209a:	2100      	movs	r1, #0
 800209c:	4618      	mov	r0, r3
 800209e:	f000 fa73 	bl	8002588 <RCCEx_PLLSAI1_Config>
 80020a2:	4603      	mov	r3, r0
 80020a4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020a6:	e00c      	b.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3320      	adds	r3, #32
 80020ac:	2100      	movs	r1, #0
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 fb5a 	bl	8002768 <RCCEx_PLLSAI2_Config>
 80020b4:	4603      	mov	r3, r0
 80020b6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020b8:	e003      	b.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	74fb      	strb	r3, [r7, #19]
      break;
 80020be:	e000      	b.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80020c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020c2:	7cfb      	ldrb	r3, [r7, #19]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d10b      	bne.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020c8:	4b52      	ldr	r3, [pc, #328]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020d6:	494f      	ldr	r1, [pc, #316]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020de:	e001      	b.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020e0:	7cfb      	ldrb	r3, [r7, #19]
 80020e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 80a0 	beq.w	8002232 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020f2:	2300      	movs	r3, #0
 80020f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020f6:	4b47      	ldr	r3, [pc, #284]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002106:	2300      	movs	r3, #0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00d      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800210c:	4b41      	ldr	r3, [pc, #260]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800210e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002110:	4a40      	ldr	r2, [pc, #256]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002112:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002116:	6593      	str	r3, [r2, #88]	; 0x58
 8002118:	4b3e      	ldr	r3, [pc, #248]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800211a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002124:	2301      	movs	r3, #1
 8002126:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002128:	4b3b      	ldr	r3, [pc, #236]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a3a      	ldr	r2, [pc, #232]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800212e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002132:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002134:	f7fe fa34 	bl	80005a0 <HAL_GetTick>
 8002138:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800213a:	e009      	b.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800213c:	f7fe fa30 	bl	80005a0 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d902      	bls.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	74fb      	strb	r3, [r7, #19]
        break;
 800214e:	e005      	b.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002150:	4b31      	ldr	r3, [pc, #196]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0ef      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 800215c:	7cfb      	ldrb	r3, [r7, #19]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d15c      	bne.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002162:	4b2c      	ldr	r3, [pc, #176]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002168:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800216c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d01f      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	429a      	cmp	r2, r3
 800217e:	d019      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002180:	4b24      	ldr	r3, [pc, #144]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800218a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800218c:	4b21      	ldr	r3, [pc, #132]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800218e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002192:	4a20      	ldr	r2, [pc, #128]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002198:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800219c:	4b1d      	ldr	r3, [pc, #116]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800219e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a2:	4a1c      	ldr	r2, [pc, #112]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021ac:	4a19      	ldr	r2, [pc, #100]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d016      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021be:	f7fe f9ef 	bl	80005a0 <HAL_GetTick>
 80021c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021c4:	e00b      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c6:	f7fe f9eb 	bl	80005a0 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d902      	bls.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	74fb      	strb	r3, [r7, #19]
            break;
 80021dc:	e006      	b.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021de:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0ec      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80021ec:	7cfb      	ldrb	r3, [r7, #19]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10c      	bne.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021f2:	4b08      	ldr	r3, [pc, #32]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002202:	4904      	ldr	r1, [pc, #16]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002204:	4313      	orrs	r3, r2
 8002206:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800220a:	e009      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800220c:	7cfb      	ldrb	r3, [r7, #19]
 800220e:	74bb      	strb	r3, [r7, #18]
 8002210:	e006      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002212:	bf00      	nop
 8002214:	40021000 	.word	0x40021000
 8002218:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800221c:	7cfb      	ldrb	r3, [r7, #19]
 800221e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002220:	7c7b      	ldrb	r3, [r7, #17]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d105      	bne.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002226:	4b9e      	ldr	r3, [pc, #632]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222a:	4a9d      	ldr	r2, [pc, #628]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800222c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002230:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00a      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800223e:	4b98      	ldr	r3, [pc, #608]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002244:	f023 0203 	bic.w	r2, r3, #3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800224c:	4994      	ldr	r1, [pc, #592]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800224e:	4313      	orrs	r3, r2
 8002250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00a      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002260:	4b8f      	ldr	r3, [pc, #572]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002266:	f023 020c 	bic.w	r2, r3, #12
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226e:	498c      	ldr	r1, [pc, #560]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002270:	4313      	orrs	r3, r2
 8002272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0304 	and.w	r3, r3, #4
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00a      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002282:	4b87      	ldr	r3, [pc, #540]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002288:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	4983      	ldr	r1, [pc, #524]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002292:	4313      	orrs	r3, r2
 8002294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0308 	and.w	r3, r3, #8
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00a      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022a4:	4b7e      	ldr	r3, [pc, #504]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b2:	497b      	ldr	r1, [pc, #492]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0310 	and.w	r3, r3, #16
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00a      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022c6:	4b76      	ldr	r3, [pc, #472]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022d4:	4972      	ldr	r1, [pc, #456]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0320 	and.w	r3, r3, #32
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00a      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022e8:	4b6d      	ldr	r3, [pc, #436]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f6:	496a      	ldr	r1, [pc, #424]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00a      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800230a:	4b65      	ldr	r3, [pc, #404]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800230c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002310:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002318:	4961      	ldr	r1, [pc, #388]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800231a:	4313      	orrs	r3, r2
 800231c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00a      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800232c:	4b5c      	ldr	r3, [pc, #368]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800232e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002332:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800233a:	4959      	ldr	r1, [pc, #356]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800233c:	4313      	orrs	r3, r2
 800233e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00a      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800234e:	4b54      	ldr	r3, [pc, #336]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002354:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800235c:	4950      	ldr	r1, [pc, #320]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800235e:	4313      	orrs	r3, r2
 8002360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00a      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002370:	4b4b      	ldr	r3, [pc, #300]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002376:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237e:	4948      	ldr	r1, [pc, #288]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002380:	4313      	orrs	r3, r2
 8002382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00a      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002392:	4b43      	ldr	r3, [pc, #268]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002398:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a0:	493f      	ldr	r1, [pc, #252]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d028      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023b4:	4b3a      	ldr	r3, [pc, #232]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023c2:	4937      	ldr	r1, [pc, #220]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023d2:	d106      	bne.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023d4:	4b32      	ldr	r3, [pc, #200]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	4a31      	ldr	r2, [pc, #196]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023de:	60d3      	str	r3, [r2, #12]
 80023e0:	e011      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023ea:	d10c      	bne.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3304      	adds	r3, #4
 80023f0:	2101      	movs	r1, #1
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 f8c8 	bl	8002588 <RCCEx_PLLSAI1_Config>
 80023f8:	4603      	mov	r3, r0
 80023fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80023fc:	7cfb      	ldrb	r3, [r7, #19]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002402:	7cfb      	ldrb	r3, [r7, #19]
 8002404:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d028      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002412:	4b23      	ldr	r3, [pc, #140]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002418:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002420:	491f      	ldr	r1, [pc, #124]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002422:	4313      	orrs	r3, r2
 8002424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002430:	d106      	bne.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002432:	4b1b      	ldr	r3, [pc, #108]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	4a1a      	ldr	r2, [pc, #104]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002438:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800243c:	60d3      	str	r3, [r2, #12]
 800243e:	e011      	b.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002444:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002448:	d10c      	bne.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3304      	adds	r3, #4
 800244e:	2101      	movs	r1, #1
 8002450:	4618      	mov	r0, r3
 8002452:	f000 f899 	bl	8002588 <RCCEx_PLLSAI1_Config>
 8002456:	4603      	mov	r3, r0
 8002458:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800245a:	7cfb      	ldrb	r3, [r7, #19]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002460:	7cfb      	ldrb	r3, [r7, #19]
 8002462:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d02b      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002470:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002476:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800247e:	4908      	ldr	r1, [pc, #32]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002480:	4313      	orrs	r3, r2
 8002482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800248a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800248e:	d109      	bne.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002490:	4b03      	ldr	r3, [pc, #12]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	4a02      	ldr	r2, [pc, #8]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002496:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800249a:	60d3      	str	r3, [r2, #12]
 800249c:	e014      	b.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800249e:	bf00      	nop
 80024a0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024ac:	d10c      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3304      	adds	r3, #4
 80024b2:	2101      	movs	r1, #1
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 f867 	bl	8002588 <RCCEx_PLLSAI1_Config>
 80024ba:	4603      	mov	r3, r0
 80024bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024be:	7cfb      	ldrb	r3, [r7, #19]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80024c4:	7cfb      	ldrb	r3, [r7, #19]
 80024c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d02f      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024d4:	4b2b      	ldr	r3, [pc, #172]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024e2:	4928      	ldr	r1, [pc, #160]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024f2:	d10d      	bne.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3304      	adds	r3, #4
 80024f8:	2102      	movs	r1, #2
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 f844 	bl	8002588 <RCCEx_PLLSAI1_Config>
 8002500:	4603      	mov	r3, r0
 8002502:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002504:	7cfb      	ldrb	r3, [r7, #19]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d014      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800250a:	7cfb      	ldrb	r3, [r7, #19]
 800250c:	74bb      	strb	r3, [r7, #18]
 800250e:	e011      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002514:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002518:	d10c      	bne.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	3320      	adds	r3, #32
 800251e:	2102      	movs	r1, #2
 8002520:	4618      	mov	r0, r3
 8002522:	f000 f921 	bl	8002768 <RCCEx_PLLSAI2_Config>
 8002526:	4603      	mov	r3, r0
 8002528:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800252a:	7cfb      	ldrb	r3, [r7, #19]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002530:	7cfb      	ldrb	r3, [r7, #19]
 8002532:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00a      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002540:	4b10      	ldr	r3, [pc, #64]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002546:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800254e:	490d      	ldr	r1, [pc, #52]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002550:	4313      	orrs	r3, r2
 8002552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00b      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002562:	4b08      	ldr	r3, [pc, #32]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002568:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002572:	4904      	ldr	r1, [pc, #16]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002574:	4313      	orrs	r3, r2
 8002576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800257a:	7cbb      	ldrb	r3, [r7, #18]
}
 800257c:	4618      	mov	r0, r3
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40021000 	.word	0x40021000

08002588 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002592:	2300      	movs	r3, #0
 8002594:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002596:	4b73      	ldr	r3, [pc, #460]	; (8002764 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d018      	beq.n	80025d4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80025a2:	4b70      	ldr	r3, [pc, #448]	; (8002764 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f003 0203 	and.w	r2, r3, #3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d10d      	bne.n	80025ce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
       ||
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d009      	beq.n	80025ce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025ba:	4b6a      	ldr	r3, [pc, #424]	; (8002764 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	091b      	lsrs	r3, r3, #4
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	1c5a      	adds	r2, r3, #1
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
       ||
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d044      	beq.n	8002658 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	73fb      	strb	r3, [r7, #15]
 80025d2:	e041      	b.n	8002658 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d00c      	beq.n	80025f6 <RCCEx_PLLSAI1_Config+0x6e>
 80025dc:	2b03      	cmp	r3, #3
 80025de:	d013      	beq.n	8002608 <RCCEx_PLLSAI1_Config+0x80>
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d120      	bne.n	8002626 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025e4:	4b5f      	ldr	r3, [pc, #380]	; (8002764 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d11d      	bne.n	800262c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025f4:	e01a      	b.n	800262c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025f6:	4b5b      	ldr	r3, [pc, #364]	; (8002764 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d116      	bne.n	8002630 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002606:	e013      	b.n	8002630 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002608:	4b56      	ldr	r3, [pc, #344]	; (8002764 <RCCEx_PLLSAI1_Config+0x1dc>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10f      	bne.n	8002634 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002614:	4b53      	ldr	r3, [pc, #332]	; (8002764 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d109      	bne.n	8002634 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002624:	e006      	b.n	8002634 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	73fb      	strb	r3, [r7, #15]
      break;
 800262a:	e004      	b.n	8002636 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800262c:	bf00      	nop
 800262e:	e002      	b.n	8002636 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002630:	bf00      	nop
 8002632:	e000      	b.n	8002636 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002634:	bf00      	nop
    }

    if(status == HAL_OK)
 8002636:	7bfb      	ldrb	r3, [r7, #15]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d10d      	bne.n	8002658 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800263c:	4b49      	ldr	r3, [pc, #292]	; (8002764 <RCCEx_PLLSAI1_Config+0x1dc>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6819      	ldr	r1, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	3b01      	subs	r3, #1
 800264e:	011b      	lsls	r3, r3, #4
 8002650:	430b      	orrs	r3, r1
 8002652:	4944      	ldr	r1, [pc, #272]	; (8002764 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002654:	4313      	orrs	r3, r2
 8002656:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002658:	7bfb      	ldrb	r3, [r7, #15]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d17d      	bne.n	800275a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800265e:	4b41      	ldr	r3, [pc, #260]	; (8002764 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a40      	ldr	r2, [pc, #256]	; (8002764 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002664:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002668:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800266a:	f7fd ff99 	bl	80005a0 <HAL_GetTick>
 800266e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002670:	e009      	b.n	8002686 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002672:	f7fd ff95 	bl	80005a0 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d902      	bls.n	8002686 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	73fb      	strb	r3, [r7, #15]
        break;
 8002684:	e005      	b.n	8002692 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002686:	4b37      	ldr	r3, [pc, #220]	; (8002764 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1ef      	bne.n	8002672 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002692:	7bfb      	ldrb	r3, [r7, #15]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d160      	bne.n	800275a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d111      	bne.n	80026c2 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800269e:	4b31      	ldr	r3, [pc, #196]	; (8002764 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80026a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	6892      	ldr	r2, [r2, #8]
 80026ae:	0211      	lsls	r1, r2, #8
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	68d2      	ldr	r2, [r2, #12]
 80026b4:	0912      	lsrs	r2, r2, #4
 80026b6:	0452      	lsls	r2, r2, #17
 80026b8:	430a      	orrs	r2, r1
 80026ba:	492a      	ldr	r1, [pc, #168]	; (8002764 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	610b      	str	r3, [r1, #16]
 80026c0:	e027      	b.n	8002712 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d112      	bne.n	80026ee <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026c8:	4b26      	ldr	r3, [pc, #152]	; (8002764 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80026d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6892      	ldr	r2, [r2, #8]
 80026d8:	0211      	lsls	r1, r2, #8
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6912      	ldr	r2, [r2, #16]
 80026de:	0852      	lsrs	r2, r2, #1
 80026e0:	3a01      	subs	r2, #1
 80026e2:	0552      	lsls	r2, r2, #21
 80026e4:	430a      	orrs	r2, r1
 80026e6:	491f      	ldr	r1, [pc, #124]	; (8002764 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	610b      	str	r3, [r1, #16]
 80026ec:	e011      	b.n	8002712 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026ee:	4b1d      	ldr	r3, [pc, #116]	; (8002764 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6892      	ldr	r2, [r2, #8]
 80026fe:	0211      	lsls	r1, r2, #8
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6952      	ldr	r2, [r2, #20]
 8002704:	0852      	lsrs	r2, r2, #1
 8002706:	3a01      	subs	r2, #1
 8002708:	0652      	lsls	r2, r2, #25
 800270a:	430a      	orrs	r2, r1
 800270c:	4915      	ldr	r1, [pc, #84]	; (8002764 <RCCEx_PLLSAI1_Config+0x1dc>)
 800270e:	4313      	orrs	r3, r2
 8002710:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002712:	4b14      	ldr	r3, [pc, #80]	; (8002764 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a13      	ldr	r2, [pc, #76]	; (8002764 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002718:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800271c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271e:	f7fd ff3f 	bl	80005a0 <HAL_GetTick>
 8002722:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002724:	e009      	b.n	800273a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002726:	f7fd ff3b 	bl	80005a0 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d902      	bls.n	800273a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	73fb      	strb	r3, [r7, #15]
          break;
 8002738:	e005      	b.n	8002746 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800273a:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <RCCEx_PLLSAI1_Config+0x1dc>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0ef      	beq.n	8002726 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002746:	7bfb      	ldrb	r3, [r7, #15]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d106      	bne.n	800275a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800274c:	4b05      	ldr	r3, [pc, #20]	; (8002764 <RCCEx_PLLSAI1_Config+0x1dc>)
 800274e:	691a      	ldr	r2, [r3, #16]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	4903      	ldr	r1, [pc, #12]	; (8002764 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002756:	4313      	orrs	r3, r2
 8002758:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800275a:	7bfb      	ldrb	r3, [r7, #15]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40021000 	.word	0x40021000

08002768 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002772:	2300      	movs	r3, #0
 8002774:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002776:	4b68      	ldr	r3, [pc, #416]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d018      	beq.n	80027b4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002782:	4b65      	ldr	r3, [pc, #404]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f003 0203 	and.w	r2, r3, #3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	429a      	cmp	r2, r3
 8002790:	d10d      	bne.n	80027ae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
       ||
 8002796:	2b00      	cmp	r3, #0
 8002798:	d009      	beq.n	80027ae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800279a:	4b5f      	ldr	r3, [pc, #380]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b0>)
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	091b      	lsrs	r3, r3, #4
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	1c5a      	adds	r2, r3, #1
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
       ||
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d044      	beq.n	8002838 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	73fb      	strb	r3, [r7, #15]
 80027b2:	e041      	b.n	8002838 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d00c      	beq.n	80027d6 <RCCEx_PLLSAI2_Config+0x6e>
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d013      	beq.n	80027e8 <RCCEx_PLLSAI2_Config+0x80>
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d120      	bne.n	8002806 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027c4:	4b54      	ldr	r3, [pc, #336]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d11d      	bne.n	800280c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027d4:	e01a      	b.n	800280c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027d6:	4b50      	ldr	r3, [pc, #320]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d116      	bne.n	8002810 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027e6:	e013      	b.n	8002810 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027e8:	4b4b      	ldr	r3, [pc, #300]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10f      	bne.n	8002814 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027f4:	4b48      	ldr	r3, [pc, #288]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d109      	bne.n	8002814 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002804:	e006      	b.n	8002814 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	73fb      	strb	r3, [r7, #15]
      break;
 800280a:	e004      	b.n	8002816 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800280c:	bf00      	nop
 800280e:	e002      	b.n	8002816 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002810:	bf00      	nop
 8002812:	e000      	b.n	8002816 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002814:	bf00      	nop
    }

    if(status == HAL_OK)
 8002816:	7bfb      	ldrb	r3, [r7, #15]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10d      	bne.n	8002838 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800281c:	4b3e      	ldr	r3, [pc, #248]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b0>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6819      	ldr	r1, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	3b01      	subs	r3, #1
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	430b      	orrs	r3, r1
 8002832:	4939      	ldr	r1, [pc, #228]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002834:	4313      	orrs	r3, r2
 8002836:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002838:	7bfb      	ldrb	r3, [r7, #15]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d167      	bne.n	800290e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800283e:	4b36      	ldr	r3, [pc, #216]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a35      	ldr	r2, [pc, #212]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002844:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002848:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800284a:	f7fd fea9 	bl	80005a0 <HAL_GetTick>
 800284e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002850:	e009      	b.n	8002866 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002852:	f7fd fea5 	bl	80005a0 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d902      	bls.n	8002866 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	73fb      	strb	r3, [r7, #15]
        break;
 8002864:	e005      	b.n	8002872 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002866:	4b2c      	ldr	r3, [pc, #176]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1ef      	bne.n	8002852 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002872:	7bfb      	ldrb	r3, [r7, #15]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d14a      	bne.n	800290e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d111      	bne.n	80028a2 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800287e:	4b26      	ldr	r3, [pc, #152]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	6892      	ldr	r2, [r2, #8]
 800288e:	0211      	lsls	r1, r2, #8
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	68d2      	ldr	r2, [r2, #12]
 8002894:	0912      	lsrs	r2, r2, #4
 8002896:	0452      	lsls	r2, r2, #17
 8002898:	430a      	orrs	r2, r1
 800289a:	491f      	ldr	r1, [pc, #124]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b0>)
 800289c:	4313      	orrs	r3, r2
 800289e:	614b      	str	r3, [r1, #20]
 80028a0:	e011      	b.n	80028c6 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028a2:	4b1d      	ldr	r3, [pc, #116]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6892      	ldr	r2, [r2, #8]
 80028b2:	0211      	lsls	r1, r2, #8
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6912      	ldr	r2, [r2, #16]
 80028b8:	0852      	lsrs	r2, r2, #1
 80028ba:	3a01      	subs	r2, #1
 80028bc:	0652      	lsls	r2, r2, #25
 80028be:	430a      	orrs	r2, r1
 80028c0:	4915      	ldr	r1, [pc, #84]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80028c6:	4b14      	ldr	r3, [pc, #80]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a13      	ldr	r2, [pc, #76]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d2:	f7fd fe65 	bl	80005a0 <HAL_GetTick>
 80028d6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028d8:	e009      	b.n	80028ee <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028da:	f7fd fe61 	bl	80005a0 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d902      	bls.n	80028ee <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	73fb      	strb	r3, [r7, #15]
          break;
 80028ec:	e005      	b.n	80028fa <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028ee:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0ef      	beq.n	80028da <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80028fa:	7bfb      	ldrb	r3, [r7, #15]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d106      	bne.n	800290e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002900:	4b05      	ldr	r3, [pc, #20]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002902:	695a      	ldr	r2, [r3, #20]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	4903      	ldr	r1, [pc, #12]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b0>)
 800290a:	4313      	orrs	r3, r2
 800290c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800290e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002910:	4618      	mov	r0, r3
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40021000 	.word	0x40021000

0800291c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e040      	b.n	80029b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 fff6 	bl	8003930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2224      	movs	r2, #36	; 0x24
 8002948:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 0201 	bic.w	r2, r2, #1
 8002958:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f8c0 	bl	8002ae0 <UART_SetConfig>
 8002960:	4603      	mov	r3, r0
 8002962:	2b01      	cmp	r3, #1
 8002964:	d101      	bne.n	800296a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e022      	b.n	80029b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	2b00      	cmp	r3, #0
 8002970:	d002      	beq.n	8002978 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 fbfc 	bl	8003170 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002986:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689a      	ldr	r2, [r3, #8]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002996:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 0201 	orr.w	r2, r2, #1
 80029a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 fc83 	bl	80032b4 <UART_CheckIdleState>
 80029ae:	4603      	mov	r3, r0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08a      	sub	sp, #40	; 0x28
 80029bc:	af02      	add	r7, sp, #8
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	603b      	str	r3, [r7, #0]
 80029c4:	4613      	mov	r3, r2
 80029c6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029cc:	2b20      	cmp	r3, #32
 80029ce:	f040 8081 	bne.w	8002ad4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d002      	beq.n	80029de <HAL_UART_Transmit+0x26>
 80029d8:	88fb      	ldrh	r3, [r7, #6]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e079      	b.n	8002ad6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <HAL_UART_Transmit+0x38>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e072      	b.n	8002ad6 <HAL_UART_Transmit+0x11e>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2221      	movs	r2, #33	; 0x21
 8002a02:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002a04:	f7fd fdcc 	bl	80005a0 <HAL_GetTick>
 8002a08:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	88fa      	ldrh	r2, [r7, #6]
 8002a0e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	88fa      	ldrh	r2, [r7, #6]
 8002a16:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a22:	d108      	bne.n	8002a36 <HAL_UART_Transmit+0x7e>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d104      	bne.n	8002a36 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	61bb      	str	r3, [r7, #24]
 8002a34:	e003      	b.n	8002a3e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a3e:	e02d      	b.n	8002a9c <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	2200      	movs	r2, #0
 8002a48:	2180      	movs	r1, #128	; 0x80
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 fc77 	bl	800333e <UART_WaitOnFlagUntilTimeout>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e03d      	b.n	8002ad6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10b      	bne.n	8002a78 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	881a      	ldrh	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a6c:	b292      	uxth	r2, r2
 8002a6e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	3302      	adds	r3, #2
 8002a74:	61bb      	str	r3, [r7, #24]
 8002a76:	e008      	b.n	8002a8a <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	781a      	ldrb	r2, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	b292      	uxth	r2, r2
 8002a82:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	3301      	adds	r3, #1
 8002a88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	3b01      	subs	r3, #1
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1cb      	bne.n	8002a40 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	2140      	movs	r1, #64	; 0x40
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 fc43 	bl	800333e <UART_WaitOnFlagUntilTimeout>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e009      	b.n	8002ad6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	e000      	b.n	8002ad6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002ad4:	2302      	movs	r3, #2
  }
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3720      	adds	r7, #32
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
	...

08002ae0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ae0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002ae4:	b088      	sub	sp, #32
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002aee:	2300      	movs	r3, #0
 8002af0:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	431a      	orrs	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4bac      	ldr	r3, [pc, #688]	; (8002dc8 <UART_SetConfig+0x2e8>)
 8002b16:	4013      	ands	r3, r2
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6812      	ldr	r2, [r2, #0]
 8002b1c:	69f9      	ldr	r1, [r7, #28]
 8002b1e:	430b      	orrs	r3, r1
 8002b20:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68da      	ldr	r2, [r3, #12]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4aa2      	ldr	r2, [pc, #648]	; (8002dcc <UART_SetConfig+0x2ec>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d004      	beq.n	8002b52 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	69fa      	ldr	r2, [r7, #28]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	69fa      	ldr	r2, [r7, #28]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a99      	ldr	r2, [pc, #612]	; (8002dd0 <UART_SetConfig+0x2f0>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d121      	bne.n	8002bb4 <UART_SetConfig+0xd4>
 8002b70:	4b98      	ldr	r3, [pc, #608]	; (8002dd4 <UART_SetConfig+0x2f4>)
 8002b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	2b03      	cmp	r3, #3
 8002b7c:	d816      	bhi.n	8002bac <UART_SetConfig+0xcc>
 8002b7e:	a201      	add	r2, pc, #4	; (adr r2, 8002b84 <UART_SetConfig+0xa4>)
 8002b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b84:	08002b95 	.word	0x08002b95
 8002b88:	08002ba1 	.word	0x08002ba1
 8002b8c:	08002b9b 	.word	0x08002b9b
 8002b90:	08002ba7 	.word	0x08002ba7
 8002b94:	2301      	movs	r3, #1
 8002b96:	76fb      	strb	r3, [r7, #27]
 8002b98:	e0e8      	b.n	8002d6c <UART_SetConfig+0x28c>
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	76fb      	strb	r3, [r7, #27]
 8002b9e:	e0e5      	b.n	8002d6c <UART_SetConfig+0x28c>
 8002ba0:	2304      	movs	r3, #4
 8002ba2:	76fb      	strb	r3, [r7, #27]
 8002ba4:	e0e2      	b.n	8002d6c <UART_SetConfig+0x28c>
 8002ba6:	2308      	movs	r3, #8
 8002ba8:	76fb      	strb	r3, [r7, #27]
 8002baa:	e0df      	b.n	8002d6c <UART_SetConfig+0x28c>
 8002bac:	2310      	movs	r3, #16
 8002bae:	76fb      	strb	r3, [r7, #27]
 8002bb0:	bf00      	nop
 8002bb2:	e0db      	b.n	8002d6c <UART_SetConfig+0x28c>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a87      	ldr	r2, [pc, #540]	; (8002dd8 <UART_SetConfig+0x2f8>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d134      	bne.n	8002c28 <UART_SetConfig+0x148>
 8002bbe:	4b85      	ldr	r3, [pc, #532]	; (8002dd4 <UART_SetConfig+0x2f4>)
 8002bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc4:	f003 030c 	and.w	r3, r3, #12
 8002bc8:	2b0c      	cmp	r3, #12
 8002bca:	d829      	bhi.n	8002c20 <UART_SetConfig+0x140>
 8002bcc:	a201      	add	r2, pc, #4	; (adr r2, 8002bd4 <UART_SetConfig+0xf4>)
 8002bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd2:	bf00      	nop
 8002bd4:	08002c09 	.word	0x08002c09
 8002bd8:	08002c21 	.word	0x08002c21
 8002bdc:	08002c21 	.word	0x08002c21
 8002be0:	08002c21 	.word	0x08002c21
 8002be4:	08002c15 	.word	0x08002c15
 8002be8:	08002c21 	.word	0x08002c21
 8002bec:	08002c21 	.word	0x08002c21
 8002bf0:	08002c21 	.word	0x08002c21
 8002bf4:	08002c0f 	.word	0x08002c0f
 8002bf8:	08002c21 	.word	0x08002c21
 8002bfc:	08002c21 	.word	0x08002c21
 8002c00:	08002c21 	.word	0x08002c21
 8002c04:	08002c1b 	.word	0x08002c1b
 8002c08:	2300      	movs	r3, #0
 8002c0a:	76fb      	strb	r3, [r7, #27]
 8002c0c:	e0ae      	b.n	8002d6c <UART_SetConfig+0x28c>
 8002c0e:	2302      	movs	r3, #2
 8002c10:	76fb      	strb	r3, [r7, #27]
 8002c12:	e0ab      	b.n	8002d6c <UART_SetConfig+0x28c>
 8002c14:	2304      	movs	r3, #4
 8002c16:	76fb      	strb	r3, [r7, #27]
 8002c18:	e0a8      	b.n	8002d6c <UART_SetConfig+0x28c>
 8002c1a:	2308      	movs	r3, #8
 8002c1c:	76fb      	strb	r3, [r7, #27]
 8002c1e:	e0a5      	b.n	8002d6c <UART_SetConfig+0x28c>
 8002c20:	2310      	movs	r3, #16
 8002c22:	76fb      	strb	r3, [r7, #27]
 8002c24:	bf00      	nop
 8002c26:	e0a1      	b.n	8002d6c <UART_SetConfig+0x28c>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a6b      	ldr	r2, [pc, #428]	; (8002ddc <UART_SetConfig+0x2fc>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d120      	bne.n	8002c74 <UART_SetConfig+0x194>
 8002c32:	4b68      	ldr	r3, [pc, #416]	; (8002dd4 <UART_SetConfig+0x2f4>)
 8002c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c38:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002c3c:	2b10      	cmp	r3, #16
 8002c3e:	d00f      	beq.n	8002c60 <UART_SetConfig+0x180>
 8002c40:	2b10      	cmp	r3, #16
 8002c42:	d802      	bhi.n	8002c4a <UART_SetConfig+0x16a>
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d005      	beq.n	8002c54 <UART_SetConfig+0x174>
 8002c48:	e010      	b.n	8002c6c <UART_SetConfig+0x18c>
 8002c4a:	2b20      	cmp	r3, #32
 8002c4c:	d005      	beq.n	8002c5a <UART_SetConfig+0x17a>
 8002c4e:	2b30      	cmp	r3, #48	; 0x30
 8002c50:	d009      	beq.n	8002c66 <UART_SetConfig+0x186>
 8002c52:	e00b      	b.n	8002c6c <UART_SetConfig+0x18c>
 8002c54:	2300      	movs	r3, #0
 8002c56:	76fb      	strb	r3, [r7, #27]
 8002c58:	e088      	b.n	8002d6c <UART_SetConfig+0x28c>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	76fb      	strb	r3, [r7, #27]
 8002c5e:	e085      	b.n	8002d6c <UART_SetConfig+0x28c>
 8002c60:	2304      	movs	r3, #4
 8002c62:	76fb      	strb	r3, [r7, #27]
 8002c64:	e082      	b.n	8002d6c <UART_SetConfig+0x28c>
 8002c66:	2308      	movs	r3, #8
 8002c68:	76fb      	strb	r3, [r7, #27]
 8002c6a:	e07f      	b.n	8002d6c <UART_SetConfig+0x28c>
 8002c6c:	2310      	movs	r3, #16
 8002c6e:	76fb      	strb	r3, [r7, #27]
 8002c70:	bf00      	nop
 8002c72:	e07b      	b.n	8002d6c <UART_SetConfig+0x28c>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a59      	ldr	r2, [pc, #356]	; (8002de0 <UART_SetConfig+0x300>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d120      	bne.n	8002cc0 <UART_SetConfig+0x1e0>
 8002c7e:	4b55      	ldr	r3, [pc, #340]	; (8002dd4 <UART_SetConfig+0x2f4>)
 8002c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c84:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002c88:	2b40      	cmp	r3, #64	; 0x40
 8002c8a:	d00f      	beq.n	8002cac <UART_SetConfig+0x1cc>
 8002c8c:	2b40      	cmp	r3, #64	; 0x40
 8002c8e:	d802      	bhi.n	8002c96 <UART_SetConfig+0x1b6>
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d005      	beq.n	8002ca0 <UART_SetConfig+0x1c0>
 8002c94:	e010      	b.n	8002cb8 <UART_SetConfig+0x1d8>
 8002c96:	2b80      	cmp	r3, #128	; 0x80
 8002c98:	d005      	beq.n	8002ca6 <UART_SetConfig+0x1c6>
 8002c9a:	2bc0      	cmp	r3, #192	; 0xc0
 8002c9c:	d009      	beq.n	8002cb2 <UART_SetConfig+0x1d2>
 8002c9e:	e00b      	b.n	8002cb8 <UART_SetConfig+0x1d8>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	76fb      	strb	r3, [r7, #27]
 8002ca4:	e062      	b.n	8002d6c <UART_SetConfig+0x28c>
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	76fb      	strb	r3, [r7, #27]
 8002caa:	e05f      	b.n	8002d6c <UART_SetConfig+0x28c>
 8002cac:	2304      	movs	r3, #4
 8002cae:	76fb      	strb	r3, [r7, #27]
 8002cb0:	e05c      	b.n	8002d6c <UART_SetConfig+0x28c>
 8002cb2:	2308      	movs	r3, #8
 8002cb4:	76fb      	strb	r3, [r7, #27]
 8002cb6:	e059      	b.n	8002d6c <UART_SetConfig+0x28c>
 8002cb8:	2310      	movs	r3, #16
 8002cba:	76fb      	strb	r3, [r7, #27]
 8002cbc:	bf00      	nop
 8002cbe:	e055      	b.n	8002d6c <UART_SetConfig+0x28c>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a47      	ldr	r2, [pc, #284]	; (8002de4 <UART_SetConfig+0x304>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d124      	bne.n	8002d14 <UART_SetConfig+0x234>
 8002cca:	4b42      	ldr	r3, [pc, #264]	; (8002dd4 <UART_SetConfig+0x2f4>)
 8002ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cd8:	d012      	beq.n	8002d00 <UART_SetConfig+0x220>
 8002cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cde:	d802      	bhi.n	8002ce6 <UART_SetConfig+0x206>
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d007      	beq.n	8002cf4 <UART_SetConfig+0x214>
 8002ce4:	e012      	b.n	8002d0c <UART_SetConfig+0x22c>
 8002ce6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cea:	d006      	beq.n	8002cfa <UART_SetConfig+0x21a>
 8002cec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cf0:	d009      	beq.n	8002d06 <UART_SetConfig+0x226>
 8002cf2:	e00b      	b.n	8002d0c <UART_SetConfig+0x22c>
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	76fb      	strb	r3, [r7, #27]
 8002cf8:	e038      	b.n	8002d6c <UART_SetConfig+0x28c>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	76fb      	strb	r3, [r7, #27]
 8002cfe:	e035      	b.n	8002d6c <UART_SetConfig+0x28c>
 8002d00:	2304      	movs	r3, #4
 8002d02:	76fb      	strb	r3, [r7, #27]
 8002d04:	e032      	b.n	8002d6c <UART_SetConfig+0x28c>
 8002d06:	2308      	movs	r3, #8
 8002d08:	76fb      	strb	r3, [r7, #27]
 8002d0a:	e02f      	b.n	8002d6c <UART_SetConfig+0x28c>
 8002d0c:	2310      	movs	r3, #16
 8002d0e:	76fb      	strb	r3, [r7, #27]
 8002d10:	bf00      	nop
 8002d12:	e02b      	b.n	8002d6c <UART_SetConfig+0x28c>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a2c      	ldr	r2, [pc, #176]	; (8002dcc <UART_SetConfig+0x2ec>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d124      	bne.n	8002d68 <UART_SetConfig+0x288>
 8002d1e:	4b2d      	ldr	r3, [pc, #180]	; (8002dd4 <UART_SetConfig+0x2f4>)
 8002d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d2c:	d012      	beq.n	8002d54 <UART_SetConfig+0x274>
 8002d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d32:	d802      	bhi.n	8002d3a <UART_SetConfig+0x25a>
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d007      	beq.n	8002d48 <UART_SetConfig+0x268>
 8002d38:	e012      	b.n	8002d60 <UART_SetConfig+0x280>
 8002d3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d3e:	d006      	beq.n	8002d4e <UART_SetConfig+0x26e>
 8002d40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d44:	d009      	beq.n	8002d5a <UART_SetConfig+0x27a>
 8002d46:	e00b      	b.n	8002d60 <UART_SetConfig+0x280>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	76fb      	strb	r3, [r7, #27]
 8002d4c:	e00e      	b.n	8002d6c <UART_SetConfig+0x28c>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	76fb      	strb	r3, [r7, #27]
 8002d52:	e00b      	b.n	8002d6c <UART_SetConfig+0x28c>
 8002d54:	2304      	movs	r3, #4
 8002d56:	76fb      	strb	r3, [r7, #27]
 8002d58:	e008      	b.n	8002d6c <UART_SetConfig+0x28c>
 8002d5a:	2308      	movs	r3, #8
 8002d5c:	76fb      	strb	r3, [r7, #27]
 8002d5e:	e005      	b.n	8002d6c <UART_SetConfig+0x28c>
 8002d60:	2310      	movs	r3, #16
 8002d62:	76fb      	strb	r3, [r7, #27]
 8002d64:	bf00      	nop
 8002d66:	e001      	b.n	8002d6c <UART_SetConfig+0x28c>
 8002d68:	2310      	movs	r3, #16
 8002d6a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a16      	ldr	r2, [pc, #88]	; (8002dcc <UART_SetConfig+0x2ec>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	f040 80fa 	bne.w	8002f6c <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002d78:	7efb      	ldrb	r3, [r7, #27]
 8002d7a:	2b08      	cmp	r3, #8
 8002d7c:	d836      	bhi.n	8002dec <UART_SetConfig+0x30c>
 8002d7e:	a201      	add	r2, pc, #4	; (adr r2, 8002d84 <UART_SetConfig+0x2a4>)
 8002d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d84:	08002da9 	.word	0x08002da9
 8002d88:	08002ded 	.word	0x08002ded
 8002d8c:	08002db1 	.word	0x08002db1
 8002d90:	08002ded 	.word	0x08002ded
 8002d94:	08002db7 	.word	0x08002db7
 8002d98:	08002ded 	.word	0x08002ded
 8002d9c:	08002ded 	.word	0x08002ded
 8002da0:	08002ded 	.word	0x08002ded
 8002da4:	08002dbf 	.word	0x08002dbf
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002da8:	f7ff f87c 	bl	8001ea4 <HAL_RCC_GetPCLK1Freq>
 8002dac:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002dae:	e020      	b.n	8002df2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002db0:	4b0d      	ldr	r3, [pc, #52]	; (8002de8 <UART_SetConfig+0x308>)
 8002db2:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002db4:	e01d      	b.n	8002df2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002db6:	f7fe ffdf 	bl	8001d78 <HAL_RCC_GetSysClockFreq>
 8002dba:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002dbc:	e019      	b.n	8002df2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002dbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dc2:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002dc4:	e015      	b.n	8002df2 <UART_SetConfig+0x312>
 8002dc6:	bf00      	nop
 8002dc8:	efff69f3 	.word	0xefff69f3
 8002dcc:	40008000 	.word	0x40008000
 8002dd0:	40013800 	.word	0x40013800
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	40004400 	.word	0x40004400
 8002ddc:	40004800 	.word	0x40004800
 8002de0:	40004c00 	.word	0x40004c00
 8002de4:	40005000 	.word	0x40005000
 8002de8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	74fb      	strb	r3, [r7, #19]
        break;
 8002df0:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 81ac 	beq.w	8003152 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	4413      	add	r3, r2
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d305      	bcc.n	8002e16 <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d902      	bls.n	8002e1c <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	74fb      	strb	r3, [r7, #19]
 8002e1a:	e19a      	b.n	8003152 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8002e1c:	7efb      	ldrb	r3, [r7, #27]
 8002e1e:	2b08      	cmp	r3, #8
 8002e20:	f200 8091 	bhi.w	8002f46 <UART_SetConfig+0x466>
 8002e24:	a201      	add	r2, pc, #4	; (adr r2, 8002e2c <UART_SetConfig+0x34c>)
 8002e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2a:	bf00      	nop
 8002e2c:	08002e51 	.word	0x08002e51
 8002e30:	08002f47 	.word	0x08002f47
 8002e34:	08002e9d 	.word	0x08002e9d
 8002e38:	08002f47 	.word	0x08002f47
 8002e3c:	08002ed1 	.word	0x08002ed1
 8002e40:	08002f47 	.word	0x08002f47
 8002e44:	08002f47 	.word	0x08002f47
 8002e48:	08002f47 	.word	0x08002f47
 8002e4c:	08002f1d 	.word	0x08002f1d
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002e50:	f7ff f828 	bl	8001ea4 <HAL_RCC_GetPCLK1Freq>
 8002e54:	4603      	mov	r3, r0
 8002e56:	4619      	mov	r1, r3
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	f04f 0300 	mov.w	r3, #0
 8002e60:	f04f 0400 	mov.w	r4, #0
 8002e64:	0214      	lsls	r4, r2, #8
 8002e66:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002e6a:	020b      	lsls	r3, r1, #8
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6852      	ldr	r2, [r2, #4]
 8002e70:	0852      	lsrs	r2, r2, #1
 8002e72:	4611      	mov	r1, r2
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	eb13 0b01 	adds.w	fp, r3, r1
 8002e7c:	eb44 0c02 	adc.w	ip, r4, r2
 8002e80:	4658      	mov	r0, fp
 8002e82:	4661      	mov	r1, ip
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f04f 0400 	mov.w	r4, #0
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	4623      	mov	r3, r4
 8002e90:	f7fd f99a 	bl	80001c8 <__aeabi_uldivmod>
 8002e94:	4603      	mov	r3, r0
 8002e96:	460c      	mov	r4, r1
 8002e98:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002e9a:	e057      	b.n	8002f4c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	085b      	lsrs	r3, r3, #1
 8002ea2:	f04f 0400 	mov.w	r4, #0
 8002ea6:	49b1      	ldr	r1, [pc, #708]	; (800316c <UART_SetConfig+0x68c>)
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	eb13 0b01 	adds.w	fp, r3, r1
 8002eb0:	eb44 0c02 	adc.w	ip, r4, r2
 8002eb4:	4658      	mov	r0, fp
 8002eb6:	4661      	mov	r1, ip
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f04f 0400 	mov.w	r4, #0
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	4623      	mov	r3, r4
 8002ec4:	f7fd f980 	bl	80001c8 <__aeabi_uldivmod>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	460c      	mov	r4, r1
 8002ecc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002ece:	e03d      	b.n	8002f4c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002ed0:	f7fe ff52 	bl	8001d78 <HAL_RCC_GetSysClockFreq>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	f04f 0200 	mov.w	r2, #0
 8002edc:	f04f 0300 	mov.w	r3, #0
 8002ee0:	f04f 0400 	mov.w	r4, #0
 8002ee4:	0214      	lsls	r4, r2, #8
 8002ee6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002eea:	020b      	lsls	r3, r1, #8
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	6852      	ldr	r2, [r2, #4]
 8002ef0:	0852      	lsrs	r2, r2, #1
 8002ef2:	4611      	mov	r1, r2
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	eb13 0b01 	adds.w	fp, r3, r1
 8002efc:	eb44 0c02 	adc.w	ip, r4, r2
 8002f00:	4658      	mov	r0, fp
 8002f02:	4661      	mov	r1, ip
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f04f 0400 	mov.w	r4, #0
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	4623      	mov	r3, r4
 8002f10:	f7fd f95a 	bl	80001c8 <__aeabi_uldivmod>
 8002f14:	4603      	mov	r3, r0
 8002f16:	460c      	mov	r4, r1
 8002f18:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002f1a:	e017      	b.n	8002f4c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	085b      	lsrs	r3, r3, #1
 8002f22:	f04f 0400 	mov.w	r4, #0
 8002f26:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8002f2a:	f144 0100 	adc.w	r1, r4, #0
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f04f 0400 	mov.w	r4, #0
 8002f36:	461a      	mov	r2, r3
 8002f38:	4623      	mov	r3, r4
 8002f3a:	f7fd f945 	bl	80001c8 <__aeabi_uldivmod>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	460c      	mov	r4, r1
 8002f42:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002f44:	e002      	b.n	8002f4c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	74fb      	strb	r3, [r7, #19]
            break;
 8002f4a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f52:	d308      	bcc.n	8002f66 <UART_SetConfig+0x486>
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f5a:	d204      	bcs.n	8002f66 <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	60da      	str	r2, [r3, #12]
 8002f64:	e0f5      	b.n	8003152 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	74fb      	strb	r3, [r7, #19]
 8002f6a:	e0f2      	b.n	8003152 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f74:	d17f      	bne.n	8003076 <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8002f76:	7efb      	ldrb	r3, [r7, #27]
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	d85c      	bhi.n	8003036 <UART_SetConfig+0x556>
 8002f7c:	a201      	add	r2, pc, #4	; (adr r2, 8002f84 <UART_SetConfig+0x4a4>)
 8002f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f82:	bf00      	nop
 8002f84:	08002fa9 	.word	0x08002fa9
 8002f88:	08002fc7 	.word	0x08002fc7
 8002f8c:	08002fe5 	.word	0x08002fe5
 8002f90:	08003037 	.word	0x08003037
 8002f94:	08003001 	.word	0x08003001
 8002f98:	08003037 	.word	0x08003037
 8002f9c:	08003037 	.word	0x08003037
 8002fa0:	08003037 	.word	0x08003037
 8002fa4:	0800301f 	.word	0x0800301f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002fa8:	f7fe ff7c 	bl	8001ea4 <HAL_RCC_GetPCLK1Freq>
 8002fac:	4603      	mov	r3, r0
 8002fae:	005a      	lsls	r2, r3, #1
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	085b      	lsrs	r3, r3, #1
 8002fb6:	441a      	add	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002fc4:	e03a      	b.n	800303c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002fc6:	f7fe ff83 	bl	8001ed0 <HAL_RCC_GetPCLK2Freq>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	005a      	lsls	r2, r3, #1
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	085b      	lsrs	r3, r3, #1
 8002fd4:	441a      	add	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002fe2:	e02b      	b.n	800303c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	085b      	lsrs	r3, r3, #1
 8002fea:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002fee:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	6852      	ldr	r2, [r2, #4]
 8002ff6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002ffe:	e01d      	b.n	800303c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003000:	f7fe feba 	bl	8001d78 <HAL_RCC_GetSysClockFreq>
 8003004:	4603      	mov	r3, r0
 8003006:	005a      	lsls	r2, r3, #1
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	085b      	lsrs	r3, r3, #1
 800300e:	441a      	add	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	fbb2 f3f3 	udiv	r3, r2, r3
 8003018:	b29b      	uxth	r3, r3
 800301a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800301c:	e00e      	b.n	800303c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	085b      	lsrs	r3, r3, #1
 8003024:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003030:	b29b      	uxth	r3, r3
 8003032:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003034:	e002      	b.n	800303c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	74fb      	strb	r3, [r7, #19]
        break;
 800303a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	2b0f      	cmp	r3, #15
 8003040:	d916      	bls.n	8003070 <UART_SetConfig+0x590>
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003048:	d212      	bcs.n	8003070 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	b29b      	uxth	r3, r3
 800304e:	f023 030f 	bic.w	r3, r3, #15
 8003052:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	085b      	lsrs	r3, r3, #1
 8003058:	b29b      	uxth	r3, r3
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	b29a      	uxth	r2, r3
 8003060:	897b      	ldrh	r3, [r7, #10]
 8003062:	4313      	orrs	r3, r2
 8003064:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	897a      	ldrh	r2, [r7, #10]
 800306c:	60da      	str	r2, [r3, #12]
 800306e:	e070      	b.n	8003152 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	74fb      	strb	r3, [r7, #19]
 8003074:	e06d      	b.n	8003152 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8003076:	7efb      	ldrb	r3, [r7, #27]
 8003078:	2b08      	cmp	r3, #8
 800307a:	d859      	bhi.n	8003130 <UART_SetConfig+0x650>
 800307c:	a201      	add	r2, pc, #4	; (adr r2, 8003084 <UART_SetConfig+0x5a4>)
 800307e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003082:	bf00      	nop
 8003084:	080030a9 	.word	0x080030a9
 8003088:	080030c5 	.word	0x080030c5
 800308c:	080030e1 	.word	0x080030e1
 8003090:	08003131 	.word	0x08003131
 8003094:	080030fd 	.word	0x080030fd
 8003098:	08003131 	.word	0x08003131
 800309c:	08003131 	.word	0x08003131
 80030a0:	08003131 	.word	0x08003131
 80030a4:	08003119 	.word	0x08003119
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80030a8:	f7fe fefc 	bl	8001ea4 <HAL_RCC_GetPCLK1Freq>
 80030ac:	4602      	mov	r2, r0
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	085b      	lsrs	r3, r3, #1
 80030b4:	441a      	add	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80030be:	b29b      	uxth	r3, r3
 80030c0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80030c2:	e038      	b.n	8003136 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80030c4:	f7fe ff04 	bl	8001ed0 <HAL_RCC_GetPCLK2Freq>
 80030c8:	4602      	mov	r2, r0
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	085b      	lsrs	r3, r3, #1
 80030d0:	441a      	add	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030da:	b29b      	uxth	r3, r3
 80030dc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80030de:	e02a      	b.n	8003136 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	085b      	lsrs	r3, r3, #1
 80030e6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80030ea:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	6852      	ldr	r2, [r2, #4]
 80030f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80030fa:	e01c      	b.n	8003136 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80030fc:	f7fe fe3c 	bl	8001d78 <HAL_RCC_GetSysClockFreq>
 8003100:	4602      	mov	r2, r0
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	085b      	lsrs	r3, r3, #1
 8003108:	441a      	add	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003112:	b29b      	uxth	r3, r3
 8003114:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003116:	e00e      	b.n	8003136 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	085b      	lsrs	r3, r3, #1
 800311e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	fbb2 f3f3 	udiv	r3, r2, r3
 800312a:	b29b      	uxth	r3, r3
 800312c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800312e:	e002      	b.n	8003136 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	74fb      	strb	r3, [r7, #19]
        break;
 8003134:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2b0f      	cmp	r3, #15
 800313a:	d908      	bls.n	800314e <UART_SetConfig+0x66e>
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003142:	d204      	bcs.n	800314e <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	60da      	str	r2, [r3, #12]
 800314c:	e001      	b.n	8003152 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800315e:	7cfb      	ldrb	r3, [r7, #19]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3720      	adds	r7, #32
 8003164:	46bd      	mov	sp, r7
 8003166:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800316a:	bf00      	nop
 800316c:	f4240000 	.word	0xf4240000

08003170 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00a      	beq.n	800319a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00a      	beq.n	80031de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00a      	beq.n	8003200 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	f003 0310 	and.w	r3, r3, #16
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00a      	beq.n	8003222 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	f003 0320 	and.w	r3, r3, #32
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00a      	beq.n	8003244 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800324c:	2b00      	cmp	r3, #0
 800324e:	d01a      	beq.n	8003286 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800326e:	d10a      	bne.n	8003286 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00a      	beq.n	80032a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	605a      	str	r2, [r3, #4]
  }
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af02      	add	r7, sp, #8
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80032c2:	f7fd f96d 	bl	80005a0 <HAL_GetTick>
 80032c6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0308 	and.w	r3, r3, #8
 80032d2:	2b08      	cmp	r3, #8
 80032d4:	d10e      	bne.n	80032f4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f82a 	bl	800333e <UART_WaitOnFlagUntilTimeout>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e020      	b.n	8003336 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0304 	and.w	r3, r3, #4
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d10e      	bne.n	8003320 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003302:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 f814 	bl	800333e <UART_WaitOnFlagUntilTimeout>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e00a      	b.n	8003336 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2220      	movs	r2, #32
 8003324:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2220      	movs	r2, #32
 800332a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b084      	sub	sp, #16
 8003342:	af00      	add	r7, sp, #0
 8003344:	60f8      	str	r0, [r7, #12]
 8003346:	60b9      	str	r1, [r7, #8]
 8003348:	603b      	str	r3, [r7, #0]
 800334a:	4613      	mov	r3, r2
 800334c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800334e:	e02a      	b.n	80033a6 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003356:	d026      	beq.n	80033a6 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003358:	f7fd f922 	bl	80005a0 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	429a      	cmp	r2, r3
 8003366:	d302      	bcc.n	800336e <UART_WaitOnFlagUntilTimeout+0x30>
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d11b      	bne.n	80033a6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800337c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 0201 	bic.w	r2, r2, #1
 800338c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2220      	movs	r2, #32
 8003392:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2220      	movs	r2, #32
 8003398:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e00f      	b.n	80033c6 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	69da      	ldr	r2, [r3, #28]
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	4013      	ands	r3, r2
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	bf0c      	ite	eq
 80033b6:	2301      	moveq	r3, #1
 80033b8:	2300      	movne	r3, #0
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	461a      	mov	r2, r3
 80033be:	79fb      	ldrb	r3, [r7, #7]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d0c5      	beq.n	8003350 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <generateTXHeader>:
 */

#include "can.h"

CAN_TxHeaderTypeDef generateTXHeader(uint32_t StdId, uint32_t ExtId, uint32_t IDE,
		uint32_t RTR, uint32_t DLC, FunctionalState TimeTransmit) {
 80033ce:	b4b0      	push	{r4, r5, r7}
 80033d0:	b08b      	sub	sp, #44	; 0x2c
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	60f8      	str	r0, [r7, #12]
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
 80033da:	603b      	str	r3, [r7, #0]
	CAN_TxHeaderTypeDef txHeader;
	txHeader.StdId = StdId;
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	613b      	str	r3, [r7, #16]
	txHeader.ExtId = ExtId;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	617b      	str	r3, [r7, #20]
	txHeader.IDE = IDE;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	61bb      	str	r3, [r7, #24]
	txHeader.RTR = RTR;
 80033e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ea:	61fb      	str	r3, [r7, #28]
	txHeader.DLC = DLC;
 80033ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ee:	623b      	str	r3, [r7, #32]
	txHeader.TransmitGlobalTime = DISABLE;
 80033f0:	2300      	movs	r3, #0
 80033f2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	return txHeader;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	461d      	mov	r5, r3
 80033fa:	f107 0410 	add.w	r4, r7, #16
 80033fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003402:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003406:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	372c      	adds	r7, #44	; 0x2c
 800340e:	46bd      	mov	sp, r7
 8003410:	bcb0      	pop	{r4, r5, r7}
 8003412:	4770      	bx	lr

08003414 <writeToCAN>:

/**
 * Writes to the CAN Transmit Line and returns the amount of data written (approximately)
 *
 */
uint32_t writeToCAN(CAN_HandleTypeDef *hcan, uint8_t data[], uint8_t dataSize) {
 8003414:	b580      	push	{r7, lr}
 8003416:	b090      	sub	sp, #64	; 0x40
 8003418:	af04      	add	r7, sp, #16
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	4613      	mov	r3, r2
 8003420:	71fb      	strb	r3, [r7, #7]
	CAN_TxHeaderTypeDef txHeader = generateTXHeader(CAN_ID, CAN_EXT_ID,
 8003422:	79fb      	ldrb	r3, [r7, #7]
 8003424:	f107 0018 	add.w	r0, r7, #24
 8003428:	2200      	movs	r2, #0
 800342a:	9202      	str	r2, [sp, #8]
 800342c:	9301      	str	r3, [sp, #4]
 800342e:	2300      	movs	r3, #0
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	2300      	movs	r3, #0
 8003434:	2200      	movs	r2, #0
 8003436:	2101      	movs	r1, #1
 8003438:	f7ff ffc9 	bl	80033ce <generateTXHeader>
			CAN_IS_EXT, CAN_RTR_DATA, dataSize, DISABLE);
	uint32_t mailbox = CAN_TX_MAILBOX0;
 800343c:	2301      	movs	r3, #1
 800343e:	617b      	str	r3, [r7, #20]

	if (HAL_CAN_AddTxMessage(hcan, &txHeader, data, &mailbox) != HAL_OK) {
 8003440:	f107 0314 	add.w	r3, r7, #20
 8003444:	f107 0118 	add.w	r1, r7, #24
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f7fd fabd 	bl	80009ca <HAL_CAN_AddTxMessage>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d002      	beq.n	800345c <writeToCAN+0x48>
		return -1;
 8003456:	f04f 33ff 	mov.w	r3, #4294967295
 800345a:	e009      	b.n	8003470 <writeToCAN+0x5c>
	}
	while (HAL_CAN_IsTxMessagePending(hcan, mailbox));
 800345c:	bf00      	nop
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	4619      	mov	r1, r3
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f7fd fb8c 	bl	8000b80 <HAL_CAN_IsTxMessagePending>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f7      	bne.n	800345e <writeToCAN+0x4a>
	return dataSize;
 800346e:	79fb      	ldrb	r3, [r7, #7]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3730      	adds	r7, #48	; 0x30
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003478:	b580      	push	{r7, lr}
 800347a:	b08c      	sub	sp, #48	; 0x30
 800347c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800347e:	f7fd f823 	bl	80004c8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003482:	f000 f86b 	bl	800355c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003486:	f000 f965 	bl	8003754 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800348a:	f000 f933 	bl	80036f4 <MX_USART2_UART_Init>
	MX_CAN1_Init();
 800348e:	f000 f8db 	bl	8003648 <MX_CAN1_Init>
	/* USER CODE BEGIN 2 */
	int i = 0;
 8003492:	2300      	movs	r3, #0
 8003494:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
 8003496:	2200      	movs	r2, #0
 8003498:	2120      	movs	r1, #32
 800349a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800349e:	f7fd ff5d 	bl	800135c <HAL_GPIO_WritePin>

		uint8_t data[6] = { 'H', 'A', 'L', 'O', 'K', '\n'};
 80034a2:	4a2b      	ldr	r2, [pc, #172]	; (8003550 <main+0xd8>)
 80034a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034ac:	6018      	str	r0, [r3, #0]
 80034ae:	3304      	adds	r3, #4
 80034b0:	8019      	strh	r1, [r3, #0]
		uint8_t dataResult[6];
		HAL_StatusTypeDef start = HAL_CAN_Start(&hcan1);
 80034b2:	4828      	ldr	r0, [pc, #160]	; (8003554 <main+0xdc>)
 80034b4:	f7fd fa45 	bl	8000942 <HAL_CAN_Start>
 80034b8:	4603      	mov	r3, r0
 80034ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		if(writeToCAN(&hcan1, data, 6) == -1) {
 80034be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034c2:	2206      	movs	r2, #6
 80034c4:	4619      	mov	r1, r3
 80034c6:	4823      	ldr	r0, [pc, #140]	; (8003554 <main+0xdc>)
 80034c8:	f7ff ffa4 	bl	8003414 <writeToCAN>
 80034cc:	4603      	mov	r3, r0
 80034ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d2:	d101      	bne.n	80034d8 <main+0x60>
			Error_Handler();
 80034d4:	f000 f9bc 	bl	8003850 <Error_Handler>
		}

		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, SET);
 80034d8:	2201      	movs	r2, #1
 80034da:	2120      	movs	r1, #32
 80034dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034e0:	f7fd ff3c 	bl	800135c <HAL_GPIO_WritePin>

		CAN_RxHeaderTypeDef pHeader2;
		pHeader2.StdId = 15;
 80034e4:	230f      	movs	r3, #15
 80034e6:	603b      	str	r3, [r7, #0]
		pHeader2.IDE = CAN_ID_STD;
 80034e8:	2300      	movs	r3, #0
 80034ea:	60bb      	str	r3, [r7, #8]
		pHeader2.RTR = CAN_RTR_DATA;
 80034ec:	2300      	movs	r3, #0
 80034ee:	60fb      	str	r3, [r7, #12]
		pHeader2.DLC = 6;
 80034f0:	2306      	movs	r3, #6
 80034f2:	613b      	str	r3, [r7, #16]
		if(HAL_CAN_Start(&hcan1) != HAL_OK) {
 80034f4:	4817      	ldr	r0, [pc, #92]	; (8003554 <main+0xdc>)
 80034f6:	f7fd fa24 	bl	8000942 <HAL_CAN_Start>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <main+0x8c>
			Error_Handler();
 8003500:	f000 f9a6 	bl	8003850 <Error_Handler>
		}

		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &pHeader2, dataResult) != HAL_OK) {
 8003504:	f107 031c 	add.w	r3, r7, #28
 8003508:	463a      	mov	r2, r7
 800350a:	2100      	movs	r1, #0
 800350c:	4811      	ldr	r0, [pc, #68]	; (8003554 <main+0xdc>)
 800350e:	f7fd fb5b 	bl	8000bc8 <HAL_CAN_GetRxMessage>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d007      	beq.n	8003528 <main+0xb0>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
 8003518:	2200      	movs	r2, #0
 800351a:	2120      	movs	r1, #32
 800351c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003520:	f7fd ff1c 	bl	800135c <HAL_GPIO_WritePin>
			Error_Handler();
 8003524:	f000 f994 	bl	8003850 <Error_Handler>
		}
		HAL_CAN_StateTypeDef state = HAL_CAN_GetState(&hcan1);
 8003528:	480a      	ldr	r0, [pc, #40]	; (8003554 <main+0xdc>)
 800352a:	f7fd fc60 	bl	8000dee <HAL_CAN_GetState>
 800352e:	4603      	mov	r3, r0
 8003530:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

		_write(0, (char*)dataResult, 6);
 8003534:	f107 031c 	add.w	r3, r7, #28
 8003538:	2206      	movs	r2, #6
 800353a:	4619      	mov	r1, r3
 800353c:	2000      	movs	r0, #0
 800353e:	f000 fa84 	bl	8003a4a <_write>
		printf("pizza\n");
 8003542:	4805      	ldr	r0, [pc, #20]	; (8003558 <main+0xe0>)
 8003544:	f000 fbec 	bl	8003d20 <puts>
		i++;
 8003548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354a:	3301      	adds	r3, #1
 800354c:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (1) {
 800354e:	e7a2      	b.n	8003496 <main+0x1e>
 8003550:	08004558 	.word	0x08004558
 8003554:	2000011c 	.word	0x2000011c
 8003558:	08004550 	.word	0x08004550

0800355c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800355c:	b580      	push	{r7, lr}
 800355e:	b0b8      	sub	sp, #224	; 0xe0
 8003560:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003562:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003566:	2244      	movs	r2, #68	; 0x44
 8003568:	2100      	movs	r1, #0
 800356a:	4618      	mov	r0, r3
 800356c:	f000 fb74 	bl	8003c58 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003570:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	605a      	str	r2, [r3, #4]
 800357a:	609a      	str	r2, [r3, #8]
 800357c:	60da      	str	r2, [r3, #12]
 800357e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8003580:	463b      	mov	r3, r7
 8003582:	2288      	movs	r2, #136	; 0x88
 8003584:	2100      	movs	r1, #0
 8003586:	4618      	mov	r0, r3
 8003588:	f000 fb66 	bl	8003c58 <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800358c:	2302      	movs	r3, #2
 800358e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003592:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003596:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800359a:	2310      	movs	r3, #16
 800359c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035a0:	2302      	movs	r3, #2
 80035a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80035a6:	2302      	movs	r3, #2
 80035a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 1;
 80035ac:	2301      	movs	r3, #1
 80035ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 10;
 80035b2:	230a      	movs	r3, #10
 80035b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80035b8:	2307      	movs	r3, #7
 80035ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80035be:	2302      	movs	r3, #2
 80035c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80035c4:	2302      	movs	r3, #2
 80035c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80035ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fd ff40 	bl	8001454 <HAL_RCC_OscConfig>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <SystemClock_Config+0x82>
		Error_Handler();
 80035da:	f000 f939 	bl	8003850 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80035de:	230f      	movs	r3, #15
 80035e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035e4:	2303      	movs	r3, #3
 80035e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035ea:	2300      	movs	r3, #0
 80035ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80035f0:	2300      	movs	r3, #0
 80035f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80035f6:	2300      	movs	r3, #0
 80035f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80035fc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003600:	2104      	movs	r1, #4
 8003602:	4618      	mov	r0, r3
 8003604:	f7fe fad6 	bl	8001bb4 <HAL_RCC_ClockConfig>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <SystemClock_Config+0xb6>
		Error_Handler();
 800360e:	f000 f91f 	bl	8003850 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003612:	2302      	movs	r3, #2
 8003614:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003616:	2300      	movs	r3, #0
 8003618:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800361a:	463b      	mov	r3, r7
 800361c:	4618      	mov	r0, r3
 800361e:	f7fe fccd 	bl	8001fbc <HAL_RCCEx_PeriphCLKConfig>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <SystemClock_Config+0xd0>
		Error_Handler();
 8003628:	f000 f912 	bl	8003850 <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 800362c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003630:	f7fd feba 	bl	80013a8 <HAL_PWREx_ControlVoltageScaling>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <SystemClock_Config+0xe2>
			!= HAL_OK) {
		Error_Handler();
 800363a:	f000 f909 	bl	8003850 <Error_Handler>
	}
}
 800363e:	bf00      	nop
 8003640:	37e0      	adds	r7, #224	; 0xe0
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
	...

08003648 <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 8003648:	b580      	push	{r7, lr}
 800364a:	b08a      	sub	sp, #40	; 0x28
 800364c:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 800364e:	4b27      	ldr	r3, [pc, #156]	; (80036ec <MX_CAN1_Init+0xa4>)
 8003650:	4a27      	ldr	r2, [pc, #156]	; (80036f0 <MX_CAN1_Init+0xa8>)
 8003652:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 10;
 8003654:	4b25      	ldr	r3, [pc, #148]	; (80036ec <MX_CAN1_Init+0xa4>)
 8003656:	220a      	movs	r2, #10
 8003658:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_SILENT_LOOPBACK;
 800365a:	4b24      	ldr	r3, [pc, #144]	; (80036ec <MX_CAN1_Init+0xa4>)
 800365c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8003660:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003662:	4b22      	ldr	r3, [pc, #136]	; (80036ec <MX_CAN1_Init+0xa4>)
 8003664:	2200      	movs	r2, #0
 8003666:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8003668:	4b20      	ldr	r3, [pc, #128]	; (80036ec <MX_CAN1_Init+0xa4>)
 800366a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800366e:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS1_2TQ;
 8003670:	4b1e      	ldr	r3, [pc, #120]	; (80036ec <MX_CAN1_Init+0xa4>)
 8003672:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003676:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8003678:	4b1c      	ldr	r3, [pc, #112]	; (80036ec <MX_CAN1_Init+0xa4>)
 800367a:	2200      	movs	r2, #0
 800367c:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 800367e:	4b1b      	ldr	r3, [pc, #108]	; (80036ec <MX_CAN1_Init+0xa4>)
 8003680:	2200      	movs	r2, #0
 8003682:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8003684:	4b19      	ldr	r3, [pc, #100]	; (80036ec <MX_CAN1_Init+0xa4>)
 8003686:	2200      	movs	r2, #0
 8003688:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = ENABLE;
 800368a:	4b18      	ldr	r3, [pc, #96]	; (80036ec <MX_CAN1_Init+0xa4>)
 800368c:	2201      	movs	r2, #1
 800368e:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003690:	4b16      	ldr	r3, [pc, #88]	; (80036ec <MX_CAN1_Init+0xa4>)
 8003692:	2200      	movs	r2, #0
 8003694:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8003696:	4b15      	ldr	r3, [pc, #84]	; (80036ec <MX_CAN1_Init+0xa4>)
 8003698:	2200      	movs	r2, #0
 800369a:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 800369c:	4813      	ldr	r0, [pc, #76]	; (80036ec <MX_CAN1_Init+0xa4>)
 800369e:	f7fc ff8b 	bl	80005b8 <HAL_CAN_Init>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <MX_CAN1_Init+0x64>
		Error_Handler();
 80036a8:	f000 f8d2 	bl	8003850 <Error_Handler>
	 * Found Id = 0xXXXXXXXX
	 * Masked = (0x00000000) & 0xXXXXXXXX = 0x00000000
	 * Expected = 0x00000000
	 */
	CAN_FilterTypeDef filterParams;
	filterParams.FilterBank = 0; // Does this matter?
 80036ac:	2300      	movs	r3, #0
 80036ae:	617b      	str	r3, [r7, #20]
	filterParams.FilterFIFOAssignment = CAN_RX_FIFO0;
 80036b0:	2300      	movs	r3, #0
 80036b2:	613b      	str	r3, [r7, #16]
	filterParams.FilterMode = CAN_FILTERMODE_IDMASK;
 80036b4:	2300      	movs	r3, #0
 80036b6:	61bb      	str	r3, [r7, #24]
	filterParams.FilterScale = CAN_FILTERSCALE_32BIT;
 80036b8:	2301      	movs	r3, #1
 80036ba:	61fb      	str	r3, [r7, #28]
	filterParams.FilterIdHigh = 0x0000;
 80036bc:	2300      	movs	r3, #0
 80036be:	603b      	str	r3, [r7, #0]
	filterParams.FilterIdLow = 0x0000;
 80036c0:	2300      	movs	r3, #0
 80036c2:	607b      	str	r3, [r7, #4]
	filterParams.FilterMaskIdHigh = 0x0000;
 80036c4:	2300      	movs	r3, #0
 80036c6:	60bb      	str	r3, [r7, #8]
	filterParams.FilterMaskIdLow = 0x0000;
 80036c8:	2300      	movs	r3, #0
 80036ca:	60fb      	str	r3, [r7, #12]
	filterParams.FilterActivation = CAN_FILTER_ENABLE;
 80036cc:	2301      	movs	r3, #1
 80036ce:	623b      	str	r3, [r7, #32]

	if(HAL_CAN_ConfigFilter(&hcan1, &filterParams) != HAL_OK) {
 80036d0:	463b      	mov	r3, r7
 80036d2:	4619      	mov	r1, r3
 80036d4:	4805      	ldr	r0, [pc, #20]	; (80036ec <MX_CAN1_Init+0xa4>)
 80036d6:	f7fd f86a 	bl	80007ae <HAL_CAN_ConfigFilter>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <MX_CAN1_Init+0x9c>
		Error_Handler();
 80036e0:	f000 f8b6 	bl	8003850 <Error_Handler>
	}

	/* USER CODE END CAN1_Init 2 */

}
 80036e4:	bf00      	nop
 80036e6:	3728      	adds	r7, #40	; 0x28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	2000011c 	.word	0x2000011c
 80036f0:	40006400 	.word	0x40006400

080036f4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80036f8:	4b14      	ldr	r3, [pc, #80]	; (800374c <MX_USART2_UART_Init+0x58>)
 80036fa:	4a15      	ldr	r2, [pc, #84]	; (8003750 <MX_USART2_UART_Init+0x5c>)
 80036fc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80036fe:	4b13      	ldr	r3, [pc, #76]	; (800374c <MX_USART2_UART_Init+0x58>)
 8003700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003704:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003706:	4b11      	ldr	r3, [pc, #68]	; (800374c <MX_USART2_UART_Init+0x58>)
 8003708:	2200      	movs	r2, #0
 800370a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800370c:	4b0f      	ldr	r3, [pc, #60]	; (800374c <MX_USART2_UART_Init+0x58>)
 800370e:	2200      	movs	r2, #0
 8003710:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8003712:	4b0e      	ldr	r3, [pc, #56]	; (800374c <MX_USART2_UART_Init+0x58>)
 8003714:	2200      	movs	r2, #0
 8003716:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003718:	4b0c      	ldr	r3, [pc, #48]	; (800374c <MX_USART2_UART_Init+0x58>)
 800371a:	220c      	movs	r2, #12
 800371c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800371e:	4b0b      	ldr	r3, [pc, #44]	; (800374c <MX_USART2_UART_Init+0x58>)
 8003720:	2200      	movs	r2, #0
 8003722:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003724:	4b09      	ldr	r3, [pc, #36]	; (800374c <MX_USART2_UART_Init+0x58>)
 8003726:	2200      	movs	r2, #0
 8003728:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800372a:	4b08      	ldr	r3, [pc, #32]	; (800374c <MX_USART2_UART_Init+0x58>)
 800372c:	2200      	movs	r2, #0
 800372e:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003730:	4b06      	ldr	r3, [pc, #24]	; (800374c <MX_USART2_UART_Init+0x58>)
 8003732:	2200      	movs	r2, #0
 8003734:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8003736:	4805      	ldr	r0, [pc, #20]	; (800374c <MX_USART2_UART_Init+0x58>)
 8003738:	f7ff f8f0 	bl	800291c <HAL_UART_Init>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8003742:	f000 f885 	bl	8003850 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8003746:	bf00      	nop
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	2000009c 	.word	0x2000009c
 8003750:	40004400 	.word	0x40004400

08003754 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003754:	b580      	push	{r7, lr}
 8003756:	b08a      	sub	sp, #40	; 0x28
 8003758:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800375a:	f107 0314 	add.w	r3, r7, #20
 800375e:	2200      	movs	r2, #0
 8003760:	601a      	str	r2, [r3, #0]
 8003762:	605a      	str	r2, [r3, #4]
 8003764:	609a      	str	r2, [r3, #8]
 8003766:	60da      	str	r2, [r3, #12]
 8003768:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 800376a:	4b2b      	ldr	r3, [pc, #172]	; (8003818 <MX_GPIO_Init+0xc4>)
 800376c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800376e:	4a2a      	ldr	r2, [pc, #168]	; (8003818 <MX_GPIO_Init+0xc4>)
 8003770:	f043 0304 	orr.w	r3, r3, #4
 8003774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003776:	4b28      	ldr	r3, [pc, #160]	; (8003818 <MX_GPIO_Init+0xc4>)
 8003778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800377a:	f003 0304 	and.w	r3, r3, #4
 800377e:	613b      	str	r3, [r7, #16]
 8003780:	693b      	ldr	r3, [r7, #16]
	;
	__HAL_RCC_GPIOH_CLK_ENABLE()
 8003782:	4b25      	ldr	r3, [pc, #148]	; (8003818 <MX_GPIO_Init+0xc4>)
 8003784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003786:	4a24      	ldr	r2, [pc, #144]	; (8003818 <MX_GPIO_Init+0xc4>)
 8003788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800378c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800378e:	4b22      	ldr	r3, [pc, #136]	; (8003818 <MX_GPIO_Init+0xc4>)
 8003790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003796:	60fb      	str	r3, [r7, #12]
 8003798:	68fb      	ldr	r3, [r7, #12]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800379a:	4b1f      	ldr	r3, [pc, #124]	; (8003818 <MX_GPIO_Init+0xc4>)
 800379c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800379e:	4a1e      	ldr	r2, [pc, #120]	; (8003818 <MX_GPIO_Init+0xc4>)
 80037a0:	f043 0301 	orr.w	r3, r3, #1
 80037a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037a6:	4b1c      	ldr	r3, [pc, #112]	; (8003818 <MX_GPIO_Init+0xc4>)
 80037a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	60bb      	str	r3, [r7, #8]
 80037b0:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 80037b2:	4b19      	ldr	r3, [pc, #100]	; (8003818 <MX_GPIO_Init+0xc4>)
 80037b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b6:	4a18      	ldr	r2, [pc, #96]	; (8003818 <MX_GPIO_Init+0xc4>)
 80037b8:	f043 0302 	orr.w	r3, r3, #2
 80037bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037be:	4b16      	ldr	r3, [pc, #88]	; (8003818 <MX_GPIO_Init+0xc4>)
 80037c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	607b      	str	r3, [r7, #4]
 80037c8:	687b      	ldr	r3, [r7, #4]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80037ca:	2200      	movs	r2, #0
 80037cc:	2120      	movs	r1, #32
 80037ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037d2:	f7fd fdc3 	bl	800135c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80037d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037da:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80037dc:	4b0f      	ldr	r3, [pc, #60]	; (800381c <MX_GPIO_Init+0xc8>)
 80037de:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e0:	2300      	movs	r3, #0
 80037e2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80037e4:	f107 0314 	add.w	r3, r7, #20
 80037e8:	4619      	mov	r1, r3
 80037ea:	480d      	ldr	r0, [pc, #52]	; (8003820 <MX_GPIO_Init+0xcc>)
 80037ec:	f7fd fc0e 	bl	800100c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80037f0:	2320      	movs	r3, #32
 80037f2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037f4:	2301      	movs	r3, #1
 80037f6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f8:	2300      	movs	r3, #0
 80037fa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037fc:	2300      	movs	r3, #0
 80037fe:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003800:	f107 0314 	add.w	r3, r7, #20
 8003804:	4619      	mov	r1, r3
 8003806:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800380a:	f7fd fbff 	bl	800100c <HAL_GPIO_Init>

}
 800380e:	bf00      	nop
 8003810:	3728      	adds	r7, #40	; 0x28
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	40021000 	.word	0x40021000
 800381c:	10210000 	.word	0x10210000
 8003820:	48000800 	.word	0x48000800

08003824 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	b2db      	uxtb	r3, r3
 8003830:	733b      	strb	r3, [r7, #12]
 HAL_UART_Transmit(&huart2, &*c, 1, 10);
 8003832:	f107 010c 	add.w	r1, r7, #12
 8003836:	230a      	movs	r3, #10
 8003838:	2201      	movs	r2, #1
 800383a:	4804      	ldr	r0, [pc, #16]	; (800384c <__io_putchar+0x28>)
 800383c:	f7ff f8bc 	bl	80029b8 <HAL_UART_Transmit>
 return ch;
 8003840:	687b      	ldr	r3, [r7, #4]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	2000009c 	.word	0x2000009c

08003850 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
//	_write(0, "Error Caught", strlen("Error Caught"));
	/* USER CODE END Error_Handler_Debug */
}
 8003854:	bf00      	nop
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
	...

08003860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003866:	4b0f      	ldr	r3, [pc, #60]	; (80038a4 <HAL_MspInit+0x44>)
 8003868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800386a:	4a0e      	ldr	r2, [pc, #56]	; (80038a4 <HAL_MspInit+0x44>)
 800386c:	f043 0301 	orr.w	r3, r3, #1
 8003870:	6613      	str	r3, [r2, #96]	; 0x60
 8003872:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <HAL_MspInit+0x44>)
 8003874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	607b      	str	r3, [r7, #4]
 800387c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800387e:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <HAL_MspInit+0x44>)
 8003880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003882:	4a08      	ldr	r2, [pc, #32]	; (80038a4 <HAL_MspInit+0x44>)
 8003884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003888:	6593      	str	r3, [r2, #88]	; 0x58
 800388a:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <HAL_MspInit+0x44>)
 800388c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003892:	603b      	str	r3, [r7, #0]
 8003894:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	40021000 	.word	0x40021000

080038a8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b08a      	sub	sp, #40	; 0x28
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038b0:	f107 0314 	add.w	r3, r7, #20
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	605a      	str	r2, [r3, #4]
 80038ba:	609a      	str	r2, [r3, #8]
 80038bc:	60da      	str	r2, [r3, #12]
 80038be:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a18      	ldr	r2, [pc, #96]	; (8003928 <HAL_CAN_MspInit+0x80>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d129      	bne.n	800391e <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80038ca:	4b18      	ldr	r3, [pc, #96]	; (800392c <HAL_CAN_MspInit+0x84>)
 80038cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ce:	4a17      	ldr	r2, [pc, #92]	; (800392c <HAL_CAN_MspInit+0x84>)
 80038d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038d4:	6593      	str	r3, [r2, #88]	; 0x58
 80038d6:	4b15      	ldr	r3, [pc, #84]	; (800392c <HAL_CAN_MspInit+0x84>)
 80038d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038de:	613b      	str	r3, [r7, #16]
 80038e0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038e2:	4b12      	ldr	r3, [pc, #72]	; (800392c <HAL_CAN_MspInit+0x84>)
 80038e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e6:	4a11      	ldr	r2, [pc, #68]	; (800392c <HAL_CAN_MspInit+0x84>)
 80038e8:	f043 0301 	orr.w	r3, r3, #1
 80038ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038ee:	4b0f      	ldr	r3, [pc, #60]	; (800392c <HAL_CAN_MspInit+0x84>)
 80038f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80038fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80038fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003900:	2302      	movs	r3, #2
 8003902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003904:	2300      	movs	r3, #0
 8003906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003908:	2303      	movs	r3, #3
 800390a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800390c:	2309      	movs	r3, #9
 800390e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003910:	f107 0314 	add.w	r3, r7, #20
 8003914:	4619      	mov	r1, r3
 8003916:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800391a:	f7fd fb77 	bl	800100c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800391e:	bf00      	nop
 8003920:	3728      	adds	r7, #40	; 0x28
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	40006400 	.word	0x40006400
 800392c:	40021000 	.word	0x40021000

08003930 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b08a      	sub	sp, #40	; 0x28
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003938:	f107 0314 	add.w	r3, r7, #20
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	605a      	str	r2, [r3, #4]
 8003942:	609a      	str	r2, [r3, #8]
 8003944:	60da      	str	r2, [r3, #12]
 8003946:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a17      	ldr	r2, [pc, #92]	; (80039ac <HAL_UART_MspInit+0x7c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d128      	bne.n	80039a4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003952:	4b17      	ldr	r3, [pc, #92]	; (80039b0 <HAL_UART_MspInit+0x80>)
 8003954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003956:	4a16      	ldr	r2, [pc, #88]	; (80039b0 <HAL_UART_MspInit+0x80>)
 8003958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800395c:	6593      	str	r3, [r2, #88]	; 0x58
 800395e:	4b14      	ldr	r3, [pc, #80]	; (80039b0 <HAL_UART_MspInit+0x80>)
 8003960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003966:	613b      	str	r3, [r7, #16]
 8003968:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800396a:	4b11      	ldr	r3, [pc, #68]	; (80039b0 <HAL_UART_MspInit+0x80>)
 800396c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800396e:	4a10      	ldr	r2, [pc, #64]	; (80039b0 <HAL_UART_MspInit+0x80>)
 8003970:	f043 0301 	orr.w	r3, r3, #1
 8003974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003976:	4b0e      	ldr	r3, [pc, #56]	; (80039b0 <HAL_UART_MspInit+0x80>)
 8003978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003982:	230c      	movs	r3, #12
 8003984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003986:	2302      	movs	r3, #2
 8003988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398a:	2300      	movs	r3, #0
 800398c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800398e:	2303      	movs	r3, #3
 8003990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003992:	2307      	movs	r3, #7
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003996:	f107 0314 	add.w	r3, r7, #20
 800399a:	4619      	mov	r1, r3
 800399c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039a0:	f7fd fb34 	bl	800100c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80039a4:	bf00      	nop
 80039a6:	3728      	adds	r7, #40	; 0x28
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	40004400 	.word	0x40004400
 80039b0:	40021000 	.word	0x40021000

080039b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80039b8:	bf00      	nop
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039c2:	b480      	push	{r7}
 80039c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039c6:	e7fe      	b.n	80039c6 <HardFault_Handler+0x4>

080039c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039cc:	e7fe      	b.n	80039cc <MemManage_Handler+0x4>

080039ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039ce:	b480      	push	{r7}
 80039d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039d2:	e7fe      	b.n	80039d2 <BusFault_Handler+0x4>

080039d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039d8:	e7fe      	b.n	80039d8 <UsageFault_Handler+0x4>

080039da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039da:	b480      	push	{r7}
 80039dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039de:	bf00      	nop
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039ec:	bf00      	nop
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039f6:	b480      	push	{r7}
 80039f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039fa:	bf00      	nop
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a08:	f7fc fdb8 	bl	800057c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a0c:	bf00      	nop
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	617b      	str	r3, [r7, #20]
 8003a20:	e00a      	b.n	8003a38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003a22:	f3af 8000 	nop.w
 8003a26:	4601      	mov	r1, r0
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	1c5a      	adds	r2, r3, #1
 8003a2c:	60ba      	str	r2, [r7, #8]
 8003a2e:	b2ca      	uxtb	r2, r1
 8003a30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	3301      	adds	r3, #1
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	dbf0      	blt.n	8003a22 <_read+0x12>
	}

return len;
 8003a40:	687b      	ldr	r3, [r7, #4]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b086      	sub	sp, #24
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	60f8      	str	r0, [r7, #12]
 8003a52:	60b9      	str	r1, [r7, #8]
 8003a54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a56:	2300      	movs	r3, #0
 8003a58:	617b      	str	r3, [r7, #20]
 8003a5a:	e009      	b.n	8003a70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	1c5a      	adds	r2, r3, #1
 8003a60:	60ba      	str	r2, [r7, #8]
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff fedd 	bl	8003824 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	617b      	str	r3, [r7, #20]
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	dbf1      	blt.n	8003a5c <_write+0x12>
	}
	return len;
 8003a78:	687b      	ldr	r3, [r7, #4]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <_close>:

int _close(int file)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
	return -1;
 8003a8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
 8003aa2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003aaa:	605a      	str	r2, [r3, #4]
	return 0;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <_isatty>:

int _isatty(int file)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b083      	sub	sp, #12
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
	return 1;
 8003ac2:	2301      	movs	r3, #1
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
	return 0;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
	...

08003aec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003af4:	4b11      	ldr	r3, [pc, #68]	; (8003b3c <_sbrk+0x50>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d102      	bne.n	8003b02 <_sbrk+0x16>
		heap_end = &end;
 8003afc:	4b0f      	ldr	r3, [pc, #60]	; (8003b3c <_sbrk+0x50>)
 8003afe:	4a10      	ldr	r2, [pc, #64]	; (8003b40 <_sbrk+0x54>)
 8003b00:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003b02:	4b0e      	ldr	r3, [pc, #56]	; (8003b3c <_sbrk+0x50>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003b08:	4b0c      	ldr	r3, [pc, #48]	; (8003b3c <_sbrk+0x50>)
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4413      	add	r3, r2
 8003b10:	466a      	mov	r2, sp
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d907      	bls.n	8003b26 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003b16:	f000 f875 	bl	8003c04 <__errno>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	230c      	movs	r3, #12
 8003b1e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003b20:	f04f 33ff 	mov.w	r3, #4294967295
 8003b24:	e006      	b.n	8003b34 <_sbrk+0x48>
	}

	heap_end += incr;
 8003b26:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <_sbrk+0x50>)
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	4a03      	ldr	r2, [pc, #12]	; (8003b3c <_sbrk+0x50>)
 8003b30:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003b32:	68fb      	ldr	r3, [r7, #12]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	2000008c 	.word	0x2000008c
 8003b40:	20000148 	.word	0x20000148

08003b44 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b48:	4b17      	ldr	r3, [pc, #92]	; (8003ba8 <SystemInit+0x64>)
 8003b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b4e:	4a16      	ldr	r2, [pc, #88]	; (8003ba8 <SystemInit+0x64>)
 8003b50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003b58:	4b14      	ldr	r3, [pc, #80]	; (8003bac <SystemInit+0x68>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a13      	ldr	r2, [pc, #76]	; (8003bac <SystemInit+0x68>)
 8003b5e:	f043 0301 	orr.w	r3, r3, #1
 8003b62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003b64:	4b11      	ldr	r3, [pc, #68]	; (8003bac <SystemInit+0x68>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003b6a:	4b10      	ldr	r3, [pc, #64]	; (8003bac <SystemInit+0x68>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a0f      	ldr	r2, [pc, #60]	; (8003bac <SystemInit+0x68>)
 8003b70:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003b74:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003b78:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003b7a:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <SystemInit+0x68>)
 8003b7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b80:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003b82:	4b0a      	ldr	r3, [pc, #40]	; (8003bac <SystemInit+0x68>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a09      	ldr	r2, [pc, #36]	; (8003bac <SystemInit+0x68>)
 8003b88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b8c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003b8e:	4b07      	ldr	r3, [pc, #28]	; (8003bac <SystemInit+0x68>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003b94:	4b04      	ldr	r3, [pc, #16]	; (8003ba8 <SystemInit+0x64>)
 8003b96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b9a:	609a      	str	r2, [r3, #8]
#endif
}
 8003b9c:	bf00      	nop
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	e000ed00 	.word	0xe000ed00
 8003bac:	40021000 	.word	0x40021000

08003bb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003be8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003bb4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003bb6:	e003      	b.n	8003bc0 <LoopCopyDataInit>

08003bb8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003bb8:	4b0c      	ldr	r3, [pc, #48]	; (8003bec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003bba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003bbc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003bbe:	3104      	adds	r1, #4

08003bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003bc0:	480b      	ldr	r0, [pc, #44]	; (8003bf0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003bc2:	4b0c      	ldr	r3, [pc, #48]	; (8003bf4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003bc4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003bc6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003bc8:	d3f6      	bcc.n	8003bb8 <CopyDataInit>
	ldr	r2, =_sbss
 8003bca:	4a0b      	ldr	r2, [pc, #44]	; (8003bf8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003bcc:	e002      	b.n	8003bd4 <LoopFillZerobss>

08003bce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003bce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003bd0:	f842 3b04 	str.w	r3, [r2], #4

08003bd4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003bd4:	4b09      	ldr	r3, [pc, #36]	; (8003bfc <LoopForever+0x16>)
	cmp	r2, r3
 8003bd6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003bd8:	d3f9      	bcc.n	8003bce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003bda:	f7ff ffb3 	bl	8003b44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003bde:	f000 f817 	bl	8003c10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003be2:	f7ff fc49 	bl	8003478 <main>

08003be6 <LoopForever>:

LoopForever:
    b LoopForever
 8003be6:	e7fe      	b.n	8003be6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003be8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003bec:	0800461c 	.word	0x0800461c
	ldr	r0, =_sdata
 8003bf0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003bf4:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8003bf8:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8003bfc:	20000148 	.word	0x20000148

08003c00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003c00:	e7fe      	b.n	8003c00 <ADC1_2_IRQHandler>
	...

08003c04 <__errno>:
 8003c04:	4b01      	ldr	r3, [pc, #4]	; (8003c0c <__errno+0x8>)
 8003c06:	6818      	ldr	r0, [r3, #0]
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	2000000c 	.word	0x2000000c

08003c10 <__libc_init_array>:
 8003c10:	b570      	push	{r4, r5, r6, lr}
 8003c12:	4e0d      	ldr	r6, [pc, #52]	; (8003c48 <__libc_init_array+0x38>)
 8003c14:	4c0d      	ldr	r4, [pc, #52]	; (8003c4c <__libc_init_array+0x3c>)
 8003c16:	1ba4      	subs	r4, r4, r6
 8003c18:	10a4      	asrs	r4, r4, #2
 8003c1a:	2500      	movs	r5, #0
 8003c1c:	42a5      	cmp	r5, r4
 8003c1e:	d109      	bne.n	8003c34 <__libc_init_array+0x24>
 8003c20:	4e0b      	ldr	r6, [pc, #44]	; (8003c50 <__libc_init_array+0x40>)
 8003c22:	4c0c      	ldr	r4, [pc, #48]	; (8003c54 <__libc_init_array+0x44>)
 8003c24:	f000 fc88 	bl	8004538 <_init>
 8003c28:	1ba4      	subs	r4, r4, r6
 8003c2a:	10a4      	asrs	r4, r4, #2
 8003c2c:	2500      	movs	r5, #0
 8003c2e:	42a5      	cmp	r5, r4
 8003c30:	d105      	bne.n	8003c3e <__libc_init_array+0x2e>
 8003c32:	bd70      	pop	{r4, r5, r6, pc}
 8003c34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c38:	4798      	blx	r3
 8003c3a:	3501      	adds	r5, #1
 8003c3c:	e7ee      	b.n	8003c1c <__libc_init_array+0xc>
 8003c3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c42:	4798      	blx	r3
 8003c44:	3501      	adds	r5, #1
 8003c46:	e7f2      	b.n	8003c2e <__libc_init_array+0x1e>
 8003c48:	08004614 	.word	0x08004614
 8003c4c:	08004614 	.word	0x08004614
 8003c50:	08004614 	.word	0x08004614
 8003c54:	08004618 	.word	0x08004618

08003c58 <memset>:
 8003c58:	4402      	add	r2, r0
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d100      	bne.n	8003c62 <memset+0xa>
 8003c60:	4770      	bx	lr
 8003c62:	f803 1b01 	strb.w	r1, [r3], #1
 8003c66:	e7f9      	b.n	8003c5c <memset+0x4>

08003c68 <_puts_r>:
 8003c68:	b570      	push	{r4, r5, r6, lr}
 8003c6a:	460e      	mov	r6, r1
 8003c6c:	4605      	mov	r5, r0
 8003c6e:	b118      	cbz	r0, 8003c78 <_puts_r+0x10>
 8003c70:	6983      	ldr	r3, [r0, #24]
 8003c72:	b90b      	cbnz	r3, 8003c78 <_puts_r+0x10>
 8003c74:	f000 fa0c 	bl	8004090 <__sinit>
 8003c78:	69ab      	ldr	r3, [r5, #24]
 8003c7a:	68ac      	ldr	r4, [r5, #8]
 8003c7c:	b913      	cbnz	r3, 8003c84 <_puts_r+0x1c>
 8003c7e:	4628      	mov	r0, r5
 8003c80:	f000 fa06 	bl	8004090 <__sinit>
 8003c84:	4b23      	ldr	r3, [pc, #140]	; (8003d14 <_puts_r+0xac>)
 8003c86:	429c      	cmp	r4, r3
 8003c88:	d117      	bne.n	8003cba <_puts_r+0x52>
 8003c8a:	686c      	ldr	r4, [r5, #4]
 8003c8c:	89a3      	ldrh	r3, [r4, #12]
 8003c8e:	071b      	lsls	r3, r3, #28
 8003c90:	d51d      	bpl.n	8003cce <_puts_r+0x66>
 8003c92:	6923      	ldr	r3, [r4, #16]
 8003c94:	b1db      	cbz	r3, 8003cce <_puts_r+0x66>
 8003c96:	3e01      	subs	r6, #1
 8003c98:	68a3      	ldr	r3, [r4, #8]
 8003c9a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	60a3      	str	r3, [r4, #8]
 8003ca2:	b9e9      	cbnz	r1, 8003ce0 <_puts_r+0x78>
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	da2e      	bge.n	8003d06 <_puts_r+0x9e>
 8003ca8:	4622      	mov	r2, r4
 8003caa:	210a      	movs	r1, #10
 8003cac:	4628      	mov	r0, r5
 8003cae:	f000 f83f 	bl	8003d30 <__swbuf_r>
 8003cb2:	3001      	adds	r0, #1
 8003cb4:	d011      	beq.n	8003cda <_puts_r+0x72>
 8003cb6:	200a      	movs	r0, #10
 8003cb8:	e011      	b.n	8003cde <_puts_r+0x76>
 8003cba:	4b17      	ldr	r3, [pc, #92]	; (8003d18 <_puts_r+0xb0>)
 8003cbc:	429c      	cmp	r4, r3
 8003cbe:	d101      	bne.n	8003cc4 <_puts_r+0x5c>
 8003cc0:	68ac      	ldr	r4, [r5, #8]
 8003cc2:	e7e3      	b.n	8003c8c <_puts_r+0x24>
 8003cc4:	4b15      	ldr	r3, [pc, #84]	; (8003d1c <_puts_r+0xb4>)
 8003cc6:	429c      	cmp	r4, r3
 8003cc8:	bf08      	it	eq
 8003cca:	68ec      	ldreq	r4, [r5, #12]
 8003ccc:	e7de      	b.n	8003c8c <_puts_r+0x24>
 8003cce:	4621      	mov	r1, r4
 8003cd0:	4628      	mov	r0, r5
 8003cd2:	f000 f87f 	bl	8003dd4 <__swsetup_r>
 8003cd6:	2800      	cmp	r0, #0
 8003cd8:	d0dd      	beq.n	8003c96 <_puts_r+0x2e>
 8003cda:	f04f 30ff 	mov.w	r0, #4294967295
 8003cde:	bd70      	pop	{r4, r5, r6, pc}
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	da04      	bge.n	8003cee <_puts_r+0x86>
 8003ce4:	69a2      	ldr	r2, [r4, #24]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	dc06      	bgt.n	8003cf8 <_puts_r+0x90>
 8003cea:	290a      	cmp	r1, #10
 8003cec:	d004      	beq.n	8003cf8 <_puts_r+0x90>
 8003cee:	6823      	ldr	r3, [r4, #0]
 8003cf0:	1c5a      	adds	r2, r3, #1
 8003cf2:	6022      	str	r2, [r4, #0]
 8003cf4:	7019      	strb	r1, [r3, #0]
 8003cf6:	e7cf      	b.n	8003c98 <_puts_r+0x30>
 8003cf8:	4622      	mov	r2, r4
 8003cfa:	4628      	mov	r0, r5
 8003cfc:	f000 f818 	bl	8003d30 <__swbuf_r>
 8003d00:	3001      	adds	r0, #1
 8003d02:	d1c9      	bne.n	8003c98 <_puts_r+0x30>
 8003d04:	e7e9      	b.n	8003cda <_puts_r+0x72>
 8003d06:	6823      	ldr	r3, [r4, #0]
 8003d08:	200a      	movs	r0, #10
 8003d0a:	1c5a      	adds	r2, r3, #1
 8003d0c:	6022      	str	r2, [r4, #0]
 8003d0e:	7018      	strb	r0, [r3, #0]
 8003d10:	e7e5      	b.n	8003cde <_puts_r+0x76>
 8003d12:	bf00      	nop
 8003d14:	080045cc 	.word	0x080045cc
 8003d18:	080045ec 	.word	0x080045ec
 8003d1c:	080045ac 	.word	0x080045ac

08003d20 <puts>:
 8003d20:	4b02      	ldr	r3, [pc, #8]	; (8003d2c <puts+0xc>)
 8003d22:	4601      	mov	r1, r0
 8003d24:	6818      	ldr	r0, [r3, #0]
 8003d26:	f7ff bf9f 	b.w	8003c68 <_puts_r>
 8003d2a:	bf00      	nop
 8003d2c:	2000000c 	.word	0x2000000c

08003d30 <__swbuf_r>:
 8003d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d32:	460e      	mov	r6, r1
 8003d34:	4614      	mov	r4, r2
 8003d36:	4605      	mov	r5, r0
 8003d38:	b118      	cbz	r0, 8003d42 <__swbuf_r+0x12>
 8003d3a:	6983      	ldr	r3, [r0, #24]
 8003d3c:	b90b      	cbnz	r3, 8003d42 <__swbuf_r+0x12>
 8003d3e:	f000 f9a7 	bl	8004090 <__sinit>
 8003d42:	4b21      	ldr	r3, [pc, #132]	; (8003dc8 <__swbuf_r+0x98>)
 8003d44:	429c      	cmp	r4, r3
 8003d46:	d12a      	bne.n	8003d9e <__swbuf_r+0x6e>
 8003d48:	686c      	ldr	r4, [r5, #4]
 8003d4a:	69a3      	ldr	r3, [r4, #24]
 8003d4c:	60a3      	str	r3, [r4, #8]
 8003d4e:	89a3      	ldrh	r3, [r4, #12]
 8003d50:	071a      	lsls	r2, r3, #28
 8003d52:	d52e      	bpl.n	8003db2 <__swbuf_r+0x82>
 8003d54:	6923      	ldr	r3, [r4, #16]
 8003d56:	b363      	cbz	r3, 8003db2 <__swbuf_r+0x82>
 8003d58:	6923      	ldr	r3, [r4, #16]
 8003d5a:	6820      	ldr	r0, [r4, #0]
 8003d5c:	1ac0      	subs	r0, r0, r3
 8003d5e:	6963      	ldr	r3, [r4, #20]
 8003d60:	b2f6      	uxtb	r6, r6
 8003d62:	4283      	cmp	r3, r0
 8003d64:	4637      	mov	r7, r6
 8003d66:	dc04      	bgt.n	8003d72 <__swbuf_r+0x42>
 8003d68:	4621      	mov	r1, r4
 8003d6a:	4628      	mov	r0, r5
 8003d6c:	f000 f926 	bl	8003fbc <_fflush_r>
 8003d70:	bb28      	cbnz	r0, 8003dbe <__swbuf_r+0x8e>
 8003d72:	68a3      	ldr	r3, [r4, #8]
 8003d74:	3b01      	subs	r3, #1
 8003d76:	60a3      	str	r3, [r4, #8]
 8003d78:	6823      	ldr	r3, [r4, #0]
 8003d7a:	1c5a      	adds	r2, r3, #1
 8003d7c:	6022      	str	r2, [r4, #0]
 8003d7e:	701e      	strb	r6, [r3, #0]
 8003d80:	6963      	ldr	r3, [r4, #20]
 8003d82:	3001      	adds	r0, #1
 8003d84:	4283      	cmp	r3, r0
 8003d86:	d004      	beq.n	8003d92 <__swbuf_r+0x62>
 8003d88:	89a3      	ldrh	r3, [r4, #12]
 8003d8a:	07db      	lsls	r3, r3, #31
 8003d8c:	d519      	bpl.n	8003dc2 <__swbuf_r+0x92>
 8003d8e:	2e0a      	cmp	r6, #10
 8003d90:	d117      	bne.n	8003dc2 <__swbuf_r+0x92>
 8003d92:	4621      	mov	r1, r4
 8003d94:	4628      	mov	r0, r5
 8003d96:	f000 f911 	bl	8003fbc <_fflush_r>
 8003d9a:	b190      	cbz	r0, 8003dc2 <__swbuf_r+0x92>
 8003d9c:	e00f      	b.n	8003dbe <__swbuf_r+0x8e>
 8003d9e:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <__swbuf_r+0x9c>)
 8003da0:	429c      	cmp	r4, r3
 8003da2:	d101      	bne.n	8003da8 <__swbuf_r+0x78>
 8003da4:	68ac      	ldr	r4, [r5, #8]
 8003da6:	e7d0      	b.n	8003d4a <__swbuf_r+0x1a>
 8003da8:	4b09      	ldr	r3, [pc, #36]	; (8003dd0 <__swbuf_r+0xa0>)
 8003daa:	429c      	cmp	r4, r3
 8003dac:	bf08      	it	eq
 8003dae:	68ec      	ldreq	r4, [r5, #12]
 8003db0:	e7cb      	b.n	8003d4a <__swbuf_r+0x1a>
 8003db2:	4621      	mov	r1, r4
 8003db4:	4628      	mov	r0, r5
 8003db6:	f000 f80d 	bl	8003dd4 <__swsetup_r>
 8003dba:	2800      	cmp	r0, #0
 8003dbc:	d0cc      	beq.n	8003d58 <__swbuf_r+0x28>
 8003dbe:	f04f 37ff 	mov.w	r7, #4294967295
 8003dc2:	4638      	mov	r0, r7
 8003dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	080045cc 	.word	0x080045cc
 8003dcc:	080045ec 	.word	0x080045ec
 8003dd0:	080045ac 	.word	0x080045ac

08003dd4 <__swsetup_r>:
 8003dd4:	4b32      	ldr	r3, [pc, #200]	; (8003ea0 <__swsetup_r+0xcc>)
 8003dd6:	b570      	push	{r4, r5, r6, lr}
 8003dd8:	681d      	ldr	r5, [r3, #0]
 8003dda:	4606      	mov	r6, r0
 8003ddc:	460c      	mov	r4, r1
 8003dde:	b125      	cbz	r5, 8003dea <__swsetup_r+0x16>
 8003de0:	69ab      	ldr	r3, [r5, #24]
 8003de2:	b913      	cbnz	r3, 8003dea <__swsetup_r+0x16>
 8003de4:	4628      	mov	r0, r5
 8003de6:	f000 f953 	bl	8004090 <__sinit>
 8003dea:	4b2e      	ldr	r3, [pc, #184]	; (8003ea4 <__swsetup_r+0xd0>)
 8003dec:	429c      	cmp	r4, r3
 8003dee:	d10f      	bne.n	8003e10 <__swsetup_r+0x3c>
 8003df0:	686c      	ldr	r4, [r5, #4]
 8003df2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	0715      	lsls	r5, r2, #28
 8003dfa:	d42c      	bmi.n	8003e56 <__swsetup_r+0x82>
 8003dfc:	06d0      	lsls	r0, r2, #27
 8003dfe:	d411      	bmi.n	8003e24 <__swsetup_r+0x50>
 8003e00:	2209      	movs	r2, #9
 8003e02:	6032      	str	r2, [r6, #0]
 8003e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e08:	81a3      	strh	r3, [r4, #12]
 8003e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e0e:	e03e      	b.n	8003e8e <__swsetup_r+0xba>
 8003e10:	4b25      	ldr	r3, [pc, #148]	; (8003ea8 <__swsetup_r+0xd4>)
 8003e12:	429c      	cmp	r4, r3
 8003e14:	d101      	bne.n	8003e1a <__swsetup_r+0x46>
 8003e16:	68ac      	ldr	r4, [r5, #8]
 8003e18:	e7eb      	b.n	8003df2 <__swsetup_r+0x1e>
 8003e1a:	4b24      	ldr	r3, [pc, #144]	; (8003eac <__swsetup_r+0xd8>)
 8003e1c:	429c      	cmp	r4, r3
 8003e1e:	bf08      	it	eq
 8003e20:	68ec      	ldreq	r4, [r5, #12]
 8003e22:	e7e6      	b.n	8003df2 <__swsetup_r+0x1e>
 8003e24:	0751      	lsls	r1, r2, #29
 8003e26:	d512      	bpl.n	8003e4e <__swsetup_r+0x7a>
 8003e28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e2a:	b141      	cbz	r1, 8003e3e <__swsetup_r+0x6a>
 8003e2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e30:	4299      	cmp	r1, r3
 8003e32:	d002      	beq.n	8003e3a <__swsetup_r+0x66>
 8003e34:	4630      	mov	r0, r6
 8003e36:	f000 fa19 	bl	800426c <_free_r>
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	6363      	str	r3, [r4, #52]	; 0x34
 8003e3e:	89a3      	ldrh	r3, [r4, #12]
 8003e40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003e44:	81a3      	strh	r3, [r4, #12]
 8003e46:	2300      	movs	r3, #0
 8003e48:	6063      	str	r3, [r4, #4]
 8003e4a:	6923      	ldr	r3, [r4, #16]
 8003e4c:	6023      	str	r3, [r4, #0]
 8003e4e:	89a3      	ldrh	r3, [r4, #12]
 8003e50:	f043 0308 	orr.w	r3, r3, #8
 8003e54:	81a3      	strh	r3, [r4, #12]
 8003e56:	6923      	ldr	r3, [r4, #16]
 8003e58:	b94b      	cbnz	r3, 8003e6e <__swsetup_r+0x9a>
 8003e5a:	89a3      	ldrh	r3, [r4, #12]
 8003e5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e64:	d003      	beq.n	8003e6e <__swsetup_r+0x9a>
 8003e66:	4621      	mov	r1, r4
 8003e68:	4630      	mov	r0, r6
 8003e6a:	f000 f9bf 	bl	80041ec <__smakebuf_r>
 8003e6e:	89a2      	ldrh	r2, [r4, #12]
 8003e70:	f012 0301 	ands.w	r3, r2, #1
 8003e74:	d00c      	beq.n	8003e90 <__swsetup_r+0xbc>
 8003e76:	2300      	movs	r3, #0
 8003e78:	60a3      	str	r3, [r4, #8]
 8003e7a:	6963      	ldr	r3, [r4, #20]
 8003e7c:	425b      	negs	r3, r3
 8003e7e:	61a3      	str	r3, [r4, #24]
 8003e80:	6923      	ldr	r3, [r4, #16]
 8003e82:	b953      	cbnz	r3, 8003e9a <__swsetup_r+0xc6>
 8003e84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e88:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003e8c:	d1ba      	bne.n	8003e04 <__swsetup_r+0x30>
 8003e8e:	bd70      	pop	{r4, r5, r6, pc}
 8003e90:	0792      	lsls	r2, r2, #30
 8003e92:	bf58      	it	pl
 8003e94:	6963      	ldrpl	r3, [r4, #20]
 8003e96:	60a3      	str	r3, [r4, #8]
 8003e98:	e7f2      	b.n	8003e80 <__swsetup_r+0xac>
 8003e9a:	2000      	movs	r0, #0
 8003e9c:	e7f7      	b.n	8003e8e <__swsetup_r+0xba>
 8003e9e:	bf00      	nop
 8003ea0:	2000000c 	.word	0x2000000c
 8003ea4:	080045cc 	.word	0x080045cc
 8003ea8:	080045ec 	.word	0x080045ec
 8003eac:	080045ac 	.word	0x080045ac

08003eb0 <__sflush_r>:
 8003eb0:	898a      	ldrh	r2, [r1, #12]
 8003eb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eb6:	4605      	mov	r5, r0
 8003eb8:	0710      	lsls	r0, r2, #28
 8003eba:	460c      	mov	r4, r1
 8003ebc:	d458      	bmi.n	8003f70 <__sflush_r+0xc0>
 8003ebe:	684b      	ldr	r3, [r1, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	dc05      	bgt.n	8003ed0 <__sflush_r+0x20>
 8003ec4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	dc02      	bgt.n	8003ed0 <__sflush_r+0x20>
 8003eca:	2000      	movs	r0, #0
 8003ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ed0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ed2:	2e00      	cmp	r6, #0
 8003ed4:	d0f9      	beq.n	8003eca <__sflush_r+0x1a>
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003edc:	682f      	ldr	r7, [r5, #0]
 8003ede:	6a21      	ldr	r1, [r4, #32]
 8003ee0:	602b      	str	r3, [r5, #0]
 8003ee2:	d032      	beq.n	8003f4a <__sflush_r+0x9a>
 8003ee4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003ee6:	89a3      	ldrh	r3, [r4, #12]
 8003ee8:	075a      	lsls	r2, r3, #29
 8003eea:	d505      	bpl.n	8003ef8 <__sflush_r+0x48>
 8003eec:	6863      	ldr	r3, [r4, #4]
 8003eee:	1ac0      	subs	r0, r0, r3
 8003ef0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ef2:	b10b      	cbz	r3, 8003ef8 <__sflush_r+0x48>
 8003ef4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ef6:	1ac0      	subs	r0, r0, r3
 8003ef8:	2300      	movs	r3, #0
 8003efa:	4602      	mov	r2, r0
 8003efc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003efe:	6a21      	ldr	r1, [r4, #32]
 8003f00:	4628      	mov	r0, r5
 8003f02:	47b0      	blx	r6
 8003f04:	1c43      	adds	r3, r0, #1
 8003f06:	89a3      	ldrh	r3, [r4, #12]
 8003f08:	d106      	bne.n	8003f18 <__sflush_r+0x68>
 8003f0a:	6829      	ldr	r1, [r5, #0]
 8003f0c:	291d      	cmp	r1, #29
 8003f0e:	d848      	bhi.n	8003fa2 <__sflush_r+0xf2>
 8003f10:	4a29      	ldr	r2, [pc, #164]	; (8003fb8 <__sflush_r+0x108>)
 8003f12:	40ca      	lsrs	r2, r1
 8003f14:	07d6      	lsls	r6, r2, #31
 8003f16:	d544      	bpl.n	8003fa2 <__sflush_r+0xf2>
 8003f18:	2200      	movs	r2, #0
 8003f1a:	6062      	str	r2, [r4, #4]
 8003f1c:	04d9      	lsls	r1, r3, #19
 8003f1e:	6922      	ldr	r2, [r4, #16]
 8003f20:	6022      	str	r2, [r4, #0]
 8003f22:	d504      	bpl.n	8003f2e <__sflush_r+0x7e>
 8003f24:	1c42      	adds	r2, r0, #1
 8003f26:	d101      	bne.n	8003f2c <__sflush_r+0x7c>
 8003f28:	682b      	ldr	r3, [r5, #0]
 8003f2a:	b903      	cbnz	r3, 8003f2e <__sflush_r+0x7e>
 8003f2c:	6560      	str	r0, [r4, #84]	; 0x54
 8003f2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f30:	602f      	str	r7, [r5, #0]
 8003f32:	2900      	cmp	r1, #0
 8003f34:	d0c9      	beq.n	8003eca <__sflush_r+0x1a>
 8003f36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f3a:	4299      	cmp	r1, r3
 8003f3c:	d002      	beq.n	8003f44 <__sflush_r+0x94>
 8003f3e:	4628      	mov	r0, r5
 8003f40:	f000 f994 	bl	800426c <_free_r>
 8003f44:	2000      	movs	r0, #0
 8003f46:	6360      	str	r0, [r4, #52]	; 0x34
 8003f48:	e7c0      	b.n	8003ecc <__sflush_r+0x1c>
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	4628      	mov	r0, r5
 8003f4e:	47b0      	blx	r6
 8003f50:	1c41      	adds	r1, r0, #1
 8003f52:	d1c8      	bne.n	8003ee6 <__sflush_r+0x36>
 8003f54:	682b      	ldr	r3, [r5, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d0c5      	beq.n	8003ee6 <__sflush_r+0x36>
 8003f5a:	2b1d      	cmp	r3, #29
 8003f5c:	d001      	beq.n	8003f62 <__sflush_r+0xb2>
 8003f5e:	2b16      	cmp	r3, #22
 8003f60:	d101      	bne.n	8003f66 <__sflush_r+0xb6>
 8003f62:	602f      	str	r7, [r5, #0]
 8003f64:	e7b1      	b.n	8003eca <__sflush_r+0x1a>
 8003f66:	89a3      	ldrh	r3, [r4, #12]
 8003f68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f6c:	81a3      	strh	r3, [r4, #12]
 8003f6e:	e7ad      	b.n	8003ecc <__sflush_r+0x1c>
 8003f70:	690f      	ldr	r7, [r1, #16]
 8003f72:	2f00      	cmp	r7, #0
 8003f74:	d0a9      	beq.n	8003eca <__sflush_r+0x1a>
 8003f76:	0793      	lsls	r3, r2, #30
 8003f78:	680e      	ldr	r6, [r1, #0]
 8003f7a:	bf08      	it	eq
 8003f7c:	694b      	ldreq	r3, [r1, #20]
 8003f7e:	600f      	str	r7, [r1, #0]
 8003f80:	bf18      	it	ne
 8003f82:	2300      	movne	r3, #0
 8003f84:	eba6 0807 	sub.w	r8, r6, r7
 8003f88:	608b      	str	r3, [r1, #8]
 8003f8a:	f1b8 0f00 	cmp.w	r8, #0
 8003f8e:	dd9c      	ble.n	8003eca <__sflush_r+0x1a>
 8003f90:	4643      	mov	r3, r8
 8003f92:	463a      	mov	r2, r7
 8003f94:	6a21      	ldr	r1, [r4, #32]
 8003f96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003f98:	4628      	mov	r0, r5
 8003f9a:	47b0      	blx	r6
 8003f9c:	2800      	cmp	r0, #0
 8003f9e:	dc06      	bgt.n	8003fae <__sflush_r+0xfe>
 8003fa0:	89a3      	ldrh	r3, [r4, #12]
 8003fa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fa6:	81a3      	strh	r3, [r4, #12]
 8003fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fac:	e78e      	b.n	8003ecc <__sflush_r+0x1c>
 8003fae:	4407      	add	r7, r0
 8003fb0:	eba8 0800 	sub.w	r8, r8, r0
 8003fb4:	e7e9      	b.n	8003f8a <__sflush_r+0xda>
 8003fb6:	bf00      	nop
 8003fb8:	20400001 	.word	0x20400001

08003fbc <_fflush_r>:
 8003fbc:	b538      	push	{r3, r4, r5, lr}
 8003fbe:	690b      	ldr	r3, [r1, #16]
 8003fc0:	4605      	mov	r5, r0
 8003fc2:	460c      	mov	r4, r1
 8003fc4:	b1db      	cbz	r3, 8003ffe <_fflush_r+0x42>
 8003fc6:	b118      	cbz	r0, 8003fd0 <_fflush_r+0x14>
 8003fc8:	6983      	ldr	r3, [r0, #24]
 8003fca:	b90b      	cbnz	r3, 8003fd0 <_fflush_r+0x14>
 8003fcc:	f000 f860 	bl	8004090 <__sinit>
 8003fd0:	4b0c      	ldr	r3, [pc, #48]	; (8004004 <_fflush_r+0x48>)
 8003fd2:	429c      	cmp	r4, r3
 8003fd4:	d109      	bne.n	8003fea <_fflush_r+0x2e>
 8003fd6:	686c      	ldr	r4, [r5, #4]
 8003fd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fdc:	b17b      	cbz	r3, 8003ffe <_fflush_r+0x42>
 8003fde:	4621      	mov	r1, r4
 8003fe0:	4628      	mov	r0, r5
 8003fe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fe6:	f7ff bf63 	b.w	8003eb0 <__sflush_r>
 8003fea:	4b07      	ldr	r3, [pc, #28]	; (8004008 <_fflush_r+0x4c>)
 8003fec:	429c      	cmp	r4, r3
 8003fee:	d101      	bne.n	8003ff4 <_fflush_r+0x38>
 8003ff0:	68ac      	ldr	r4, [r5, #8]
 8003ff2:	e7f1      	b.n	8003fd8 <_fflush_r+0x1c>
 8003ff4:	4b05      	ldr	r3, [pc, #20]	; (800400c <_fflush_r+0x50>)
 8003ff6:	429c      	cmp	r4, r3
 8003ff8:	bf08      	it	eq
 8003ffa:	68ec      	ldreq	r4, [r5, #12]
 8003ffc:	e7ec      	b.n	8003fd8 <_fflush_r+0x1c>
 8003ffe:	2000      	movs	r0, #0
 8004000:	bd38      	pop	{r3, r4, r5, pc}
 8004002:	bf00      	nop
 8004004:	080045cc 	.word	0x080045cc
 8004008:	080045ec 	.word	0x080045ec
 800400c:	080045ac 	.word	0x080045ac

08004010 <std>:
 8004010:	2300      	movs	r3, #0
 8004012:	b510      	push	{r4, lr}
 8004014:	4604      	mov	r4, r0
 8004016:	e9c0 3300 	strd	r3, r3, [r0]
 800401a:	6083      	str	r3, [r0, #8]
 800401c:	8181      	strh	r1, [r0, #12]
 800401e:	6643      	str	r3, [r0, #100]	; 0x64
 8004020:	81c2      	strh	r2, [r0, #14]
 8004022:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004026:	6183      	str	r3, [r0, #24]
 8004028:	4619      	mov	r1, r3
 800402a:	2208      	movs	r2, #8
 800402c:	305c      	adds	r0, #92	; 0x5c
 800402e:	f7ff fe13 	bl	8003c58 <memset>
 8004032:	4b05      	ldr	r3, [pc, #20]	; (8004048 <std+0x38>)
 8004034:	6263      	str	r3, [r4, #36]	; 0x24
 8004036:	4b05      	ldr	r3, [pc, #20]	; (800404c <std+0x3c>)
 8004038:	62a3      	str	r3, [r4, #40]	; 0x28
 800403a:	4b05      	ldr	r3, [pc, #20]	; (8004050 <std+0x40>)
 800403c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800403e:	4b05      	ldr	r3, [pc, #20]	; (8004054 <std+0x44>)
 8004040:	6224      	str	r4, [r4, #32]
 8004042:	6323      	str	r3, [r4, #48]	; 0x30
 8004044:	bd10      	pop	{r4, pc}
 8004046:	bf00      	nop
 8004048:	080043dd 	.word	0x080043dd
 800404c:	080043ff 	.word	0x080043ff
 8004050:	08004437 	.word	0x08004437
 8004054:	0800445b 	.word	0x0800445b

08004058 <_cleanup_r>:
 8004058:	4901      	ldr	r1, [pc, #4]	; (8004060 <_cleanup_r+0x8>)
 800405a:	f000 b885 	b.w	8004168 <_fwalk_reent>
 800405e:	bf00      	nop
 8004060:	08003fbd 	.word	0x08003fbd

08004064 <__sfmoreglue>:
 8004064:	b570      	push	{r4, r5, r6, lr}
 8004066:	1e4a      	subs	r2, r1, #1
 8004068:	2568      	movs	r5, #104	; 0x68
 800406a:	4355      	muls	r5, r2
 800406c:	460e      	mov	r6, r1
 800406e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004072:	f000 f949 	bl	8004308 <_malloc_r>
 8004076:	4604      	mov	r4, r0
 8004078:	b140      	cbz	r0, 800408c <__sfmoreglue+0x28>
 800407a:	2100      	movs	r1, #0
 800407c:	e9c0 1600 	strd	r1, r6, [r0]
 8004080:	300c      	adds	r0, #12
 8004082:	60a0      	str	r0, [r4, #8]
 8004084:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004088:	f7ff fde6 	bl	8003c58 <memset>
 800408c:	4620      	mov	r0, r4
 800408e:	bd70      	pop	{r4, r5, r6, pc}

08004090 <__sinit>:
 8004090:	6983      	ldr	r3, [r0, #24]
 8004092:	b510      	push	{r4, lr}
 8004094:	4604      	mov	r4, r0
 8004096:	bb33      	cbnz	r3, 80040e6 <__sinit+0x56>
 8004098:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800409c:	6503      	str	r3, [r0, #80]	; 0x50
 800409e:	4b12      	ldr	r3, [pc, #72]	; (80040e8 <__sinit+0x58>)
 80040a0:	4a12      	ldr	r2, [pc, #72]	; (80040ec <__sinit+0x5c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6282      	str	r2, [r0, #40]	; 0x28
 80040a6:	4298      	cmp	r0, r3
 80040a8:	bf04      	itt	eq
 80040aa:	2301      	moveq	r3, #1
 80040ac:	6183      	streq	r3, [r0, #24]
 80040ae:	f000 f81f 	bl	80040f0 <__sfp>
 80040b2:	6060      	str	r0, [r4, #4]
 80040b4:	4620      	mov	r0, r4
 80040b6:	f000 f81b 	bl	80040f0 <__sfp>
 80040ba:	60a0      	str	r0, [r4, #8]
 80040bc:	4620      	mov	r0, r4
 80040be:	f000 f817 	bl	80040f0 <__sfp>
 80040c2:	2200      	movs	r2, #0
 80040c4:	60e0      	str	r0, [r4, #12]
 80040c6:	2104      	movs	r1, #4
 80040c8:	6860      	ldr	r0, [r4, #4]
 80040ca:	f7ff ffa1 	bl	8004010 <std>
 80040ce:	2201      	movs	r2, #1
 80040d0:	2109      	movs	r1, #9
 80040d2:	68a0      	ldr	r0, [r4, #8]
 80040d4:	f7ff ff9c 	bl	8004010 <std>
 80040d8:	2202      	movs	r2, #2
 80040da:	2112      	movs	r1, #18
 80040dc:	68e0      	ldr	r0, [r4, #12]
 80040de:	f7ff ff97 	bl	8004010 <std>
 80040e2:	2301      	movs	r3, #1
 80040e4:	61a3      	str	r3, [r4, #24]
 80040e6:	bd10      	pop	{r4, pc}
 80040e8:	080045a8 	.word	0x080045a8
 80040ec:	08004059 	.word	0x08004059

080040f0 <__sfp>:
 80040f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040f2:	4b1b      	ldr	r3, [pc, #108]	; (8004160 <__sfp+0x70>)
 80040f4:	681e      	ldr	r6, [r3, #0]
 80040f6:	69b3      	ldr	r3, [r6, #24]
 80040f8:	4607      	mov	r7, r0
 80040fa:	b913      	cbnz	r3, 8004102 <__sfp+0x12>
 80040fc:	4630      	mov	r0, r6
 80040fe:	f7ff ffc7 	bl	8004090 <__sinit>
 8004102:	3648      	adds	r6, #72	; 0x48
 8004104:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004108:	3b01      	subs	r3, #1
 800410a:	d503      	bpl.n	8004114 <__sfp+0x24>
 800410c:	6833      	ldr	r3, [r6, #0]
 800410e:	b133      	cbz	r3, 800411e <__sfp+0x2e>
 8004110:	6836      	ldr	r6, [r6, #0]
 8004112:	e7f7      	b.n	8004104 <__sfp+0x14>
 8004114:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004118:	b16d      	cbz	r5, 8004136 <__sfp+0x46>
 800411a:	3468      	adds	r4, #104	; 0x68
 800411c:	e7f4      	b.n	8004108 <__sfp+0x18>
 800411e:	2104      	movs	r1, #4
 8004120:	4638      	mov	r0, r7
 8004122:	f7ff ff9f 	bl	8004064 <__sfmoreglue>
 8004126:	6030      	str	r0, [r6, #0]
 8004128:	2800      	cmp	r0, #0
 800412a:	d1f1      	bne.n	8004110 <__sfp+0x20>
 800412c:	230c      	movs	r3, #12
 800412e:	603b      	str	r3, [r7, #0]
 8004130:	4604      	mov	r4, r0
 8004132:	4620      	mov	r0, r4
 8004134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004136:	4b0b      	ldr	r3, [pc, #44]	; (8004164 <__sfp+0x74>)
 8004138:	6665      	str	r5, [r4, #100]	; 0x64
 800413a:	e9c4 5500 	strd	r5, r5, [r4]
 800413e:	60a5      	str	r5, [r4, #8]
 8004140:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004144:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004148:	2208      	movs	r2, #8
 800414a:	4629      	mov	r1, r5
 800414c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004150:	f7ff fd82 	bl	8003c58 <memset>
 8004154:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004158:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800415c:	e7e9      	b.n	8004132 <__sfp+0x42>
 800415e:	bf00      	nop
 8004160:	080045a8 	.word	0x080045a8
 8004164:	ffff0001 	.word	0xffff0001

08004168 <_fwalk_reent>:
 8004168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800416c:	4680      	mov	r8, r0
 800416e:	4689      	mov	r9, r1
 8004170:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004174:	2600      	movs	r6, #0
 8004176:	b914      	cbnz	r4, 800417e <_fwalk_reent+0x16>
 8004178:	4630      	mov	r0, r6
 800417a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800417e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004182:	3f01      	subs	r7, #1
 8004184:	d501      	bpl.n	800418a <_fwalk_reent+0x22>
 8004186:	6824      	ldr	r4, [r4, #0]
 8004188:	e7f5      	b.n	8004176 <_fwalk_reent+0xe>
 800418a:	89ab      	ldrh	r3, [r5, #12]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d907      	bls.n	80041a0 <_fwalk_reent+0x38>
 8004190:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004194:	3301      	adds	r3, #1
 8004196:	d003      	beq.n	80041a0 <_fwalk_reent+0x38>
 8004198:	4629      	mov	r1, r5
 800419a:	4640      	mov	r0, r8
 800419c:	47c8      	blx	r9
 800419e:	4306      	orrs	r6, r0
 80041a0:	3568      	adds	r5, #104	; 0x68
 80041a2:	e7ee      	b.n	8004182 <_fwalk_reent+0x1a>

080041a4 <__swhatbuf_r>:
 80041a4:	b570      	push	{r4, r5, r6, lr}
 80041a6:	460e      	mov	r6, r1
 80041a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041ac:	2900      	cmp	r1, #0
 80041ae:	b096      	sub	sp, #88	; 0x58
 80041b0:	4614      	mov	r4, r2
 80041b2:	461d      	mov	r5, r3
 80041b4:	da07      	bge.n	80041c6 <__swhatbuf_r+0x22>
 80041b6:	2300      	movs	r3, #0
 80041b8:	602b      	str	r3, [r5, #0]
 80041ba:	89b3      	ldrh	r3, [r6, #12]
 80041bc:	061a      	lsls	r2, r3, #24
 80041be:	d410      	bmi.n	80041e2 <__swhatbuf_r+0x3e>
 80041c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041c4:	e00e      	b.n	80041e4 <__swhatbuf_r+0x40>
 80041c6:	466a      	mov	r2, sp
 80041c8:	f000 f96e 	bl	80044a8 <_fstat_r>
 80041cc:	2800      	cmp	r0, #0
 80041ce:	dbf2      	blt.n	80041b6 <__swhatbuf_r+0x12>
 80041d0:	9a01      	ldr	r2, [sp, #4]
 80041d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80041d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80041da:	425a      	negs	r2, r3
 80041dc:	415a      	adcs	r2, r3
 80041de:	602a      	str	r2, [r5, #0]
 80041e0:	e7ee      	b.n	80041c0 <__swhatbuf_r+0x1c>
 80041e2:	2340      	movs	r3, #64	; 0x40
 80041e4:	2000      	movs	r0, #0
 80041e6:	6023      	str	r3, [r4, #0]
 80041e8:	b016      	add	sp, #88	; 0x58
 80041ea:	bd70      	pop	{r4, r5, r6, pc}

080041ec <__smakebuf_r>:
 80041ec:	898b      	ldrh	r3, [r1, #12]
 80041ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80041f0:	079d      	lsls	r5, r3, #30
 80041f2:	4606      	mov	r6, r0
 80041f4:	460c      	mov	r4, r1
 80041f6:	d507      	bpl.n	8004208 <__smakebuf_r+0x1c>
 80041f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80041fc:	6023      	str	r3, [r4, #0]
 80041fe:	6123      	str	r3, [r4, #16]
 8004200:	2301      	movs	r3, #1
 8004202:	6163      	str	r3, [r4, #20]
 8004204:	b002      	add	sp, #8
 8004206:	bd70      	pop	{r4, r5, r6, pc}
 8004208:	ab01      	add	r3, sp, #4
 800420a:	466a      	mov	r2, sp
 800420c:	f7ff ffca 	bl	80041a4 <__swhatbuf_r>
 8004210:	9900      	ldr	r1, [sp, #0]
 8004212:	4605      	mov	r5, r0
 8004214:	4630      	mov	r0, r6
 8004216:	f000 f877 	bl	8004308 <_malloc_r>
 800421a:	b948      	cbnz	r0, 8004230 <__smakebuf_r+0x44>
 800421c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004220:	059a      	lsls	r2, r3, #22
 8004222:	d4ef      	bmi.n	8004204 <__smakebuf_r+0x18>
 8004224:	f023 0303 	bic.w	r3, r3, #3
 8004228:	f043 0302 	orr.w	r3, r3, #2
 800422c:	81a3      	strh	r3, [r4, #12]
 800422e:	e7e3      	b.n	80041f8 <__smakebuf_r+0xc>
 8004230:	4b0d      	ldr	r3, [pc, #52]	; (8004268 <__smakebuf_r+0x7c>)
 8004232:	62b3      	str	r3, [r6, #40]	; 0x28
 8004234:	89a3      	ldrh	r3, [r4, #12]
 8004236:	6020      	str	r0, [r4, #0]
 8004238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800423c:	81a3      	strh	r3, [r4, #12]
 800423e:	9b00      	ldr	r3, [sp, #0]
 8004240:	6163      	str	r3, [r4, #20]
 8004242:	9b01      	ldr	r3, [sp, #4]
 8004244:	6120      	str	r0, [r4, #16]
 8004246:	b15b      	cbz	r3, 8004260 <__smakebuf_r+0x74>
 8004248:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800424c:	4630      	mov	r0, r6
 800424e:	f000 f93d 	bl	80044cc <_isatty_r>
 8004252:	b128      	cbz	r0, 8004260 <__smakebuf_r+0x74>
 8004254:	89a3      	ldrh	r3, [r4, #12]
 8004256:	f023 0303 	bic.w	r3, r3, #3
 800425a:	f043 0301 	orr.w	r3, r3, #1
 800425e:	81a3      	strh	r3, [r4, #12]
 8004260:	89a3      	ldrh	r3, [r4, #12]
 8004262:	431d      	orrs	r5, r3
 8004264:	81a5      	strh	r5, [r4, #12]
 8004266:	e7cd      	b.n	8004204 <__smakebuf_r+0x18>
 8004268:	08004059 	.word	0x08004059

0800426c <_free_r>:
 800426c:	b538      	push	{r3, r4, r5, lr}
 800426e:	4605      	mov	r5, r0
 8004270:	2900      	cmp	r1, #0
 8004272:	d045      	beq.n	8004300 <_free_r+0x94>
 8004274:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004278:	1f0c      	subs	r4, r1, #4
 800427a:	2b00      	cmp	r3, #0
 800427c:	bfb8      	it	lt
 800427e:	18e4      	addlt	r4, r4, r3
 8004280:	f000 f946 	bl	8004510 <__malloc_lock>
 8004284:	4a1f      	ldr	r2, [pc, #124]	; (8004304 <_free_r+0x98>)
 8004286:	6813      	ldr	r3, [r2, #0]
 8004288:	4610      	mov	r0, r2
 800428a:	b933      	cbnz	r3, 800429a <_free_r+0x2e>
 800428c:	6063      	str	r3, [r4, #4]
 800428e:	6014      	str	r4, [r2, #0]
 8004290:	4628      	mov	r0, r5
 8004292:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004296:	f000 b93c 	b.w	8004512 <__malloc_unlock>
 800429a:	42a3      	cmp	r3, r4
 800429c:	d90c      	bls.n	80042b8 <_free_r+0x4c>
 800429e:	6821      	ldr	r1, [r4, #0]
 80042a0:	1862      	adds	r2, r4, r1
 80042a2:	4293      	cmp	r3, r2
 80042a4:	bf04      	itt	eq
 80042a6:	681a      	ldreq	r2, [r3, #0]
 80042a8:	685b      	ldreq	r3, [r3, #4]
 80042aa:	6063      	str	r3, [r4, #4]
 80042ac:	bf04      	itt	eq
 80042ae:	1852      	addeq	r2, r2, r1
 80042b0:	6022      	streq	r2, [r4, #0]
 80042b2:	6004      	str	r4, [r0, #0]
 80042b4:	e7ec      	b.n	8004290 <_free_r+0x24>
 80042b6:	4613      	mov	r3, r2
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	b10a      	cbz	r2, 80042c0 <_free_r+0x54>
 80042bc:	42a2      	cmp	r2, r4
 80042be:	d9fa      	bls.n	80042b6 <_free_r+0x4a>
 80042c0:	6819      	ldr	r1, [r3, #0]
 80042c2:	1858      	adds	r0, r3, r1
 80042c4:	42a0      	cmp	r0, r4
 80042c6:	d10b      	bne.n	80042e0 <_free_r+0x74>
 80042c8:	6820      	ldr	r0, [r4, #0]
 80042ca:	4401      	add	r1, r0
 80042cc:	1858      	adds	r0, r3, r1
 80042ce:	4282      	cmp	r2, r0
 80042d0:	6019      	str	r1, [r3, #0]
 80042d2:	d1dd      	bne.n	8004290 <_free_r+0x24>
 80042d4:	6810      	ldr	r0, [r2, #0]
 80042d6:	6852      	ldr	r2, [r2, #4]
 80042d8:	605a      	str	r2, [r3, #4]
 80042da:	4401      	add	r1, r0
 80042dc:	6019      	str	r1, [r3, #0]
 80042de:	e7d7      	b.n	8004290 <_free_r+0x24>
 80042e0:	d902      	bls.n	80042e8 <_free_r+0x7c>
 80042e2:	230c      	movs	r3, #12
 80042e4:	602b      	str	r3, [r5, #0]
 80042e6:	e7d3      	b.n	8004290 <_free_r+0x24>
 80042e8:	6820      	ldr	r0, [r4, #0]
 80042ea:	1821      	adds	r1, r4, r0
 80042ec:	428a      	cmp	r2, r1
 80042ee:	bf04      	itt	eq
 80042f0:	6811      	ldreq	r1, [r2, #0]
 80042f2:	6852      	ldreq	r2, [r2, #4]
 80042f4:	6062      	str	r2, [r4, #4]
 80042f6:	bf04      	itt	eq
 80042f8:	1809      	addeq	r1, r1, r0
 80042fa:	6021      	streq	r1, [r4, #0]
 80042fc:	605c      	str	r4, [r3, #4]
 80042fe:	e7c7      	b.n	8004290 <_free_r+0x24>
 8004300:	bd38      	pop	{r3, r4, r5, pc}
 8004302:	bf00      	nop
 8004304:	20000090 	.word	0x20000090

08004308 <_malloc_r>:
 8004308:	b570      	push	{r4, r5, r6, lr}
 800430a:	1ccd      	adds	r5, r1, #3
 800430c:	f025 0503 	bic.w	r5, r5, #3
 8004310:	3508      	adds	r5, #8
 8004312:	2d0c      	cmp	r5, #12
 8004314:	bf38      	it	cc
 8004316:	250c      	movcc	r5, #12
 8004318:	2d00      	cmp	r5, #0
 800431a:	4606      	mov	r6, r0
 800431c:	db01      	blt.n	8004322 <_malloc_r+0x1a>
 800431e:	42a9      	cmp	r1, r5
 8004320:	d903      	bls.n	800432a <_malloc_r+0x22>
 8004322:	230c      	movs	r3, #12
 8004324:	6033      	str	r3, [r6, #0]
 8004326:	2000      	movs	r0, #0
 8004328:	bd70      	pop	{r4, r5, r6, pc}
 800432a:	f000 f8f1 	bl	8004510 <__malloc_lock>
 800432e:	4a21      	ldr	r2, [pc, #132]	; (80043b4 <_malloc_r+0xac>)
 8004330:	6814      	ldr	r4, [r2, #0]
 8004332:	4621      	mov	r1, r4
 8004334:	b991      	cbnz	r1, 800435c <_malloc_r+0x54>
 8004336:	4c20      	ldr	r4, [pc, #128]	; (80043b8 <_malloc_r+0xb0>)
 8004338:	6823      	ldr	r3, [r4, #0]
 800433a:	b91b      	cbnz	r3, 8004344 <_malloc_r+0x3c>
 800433c:	4630      	mov	r0, r6
 800433e:	f000 f83d 	bl	80043bc <_sbrk_r>
 8004342:	6020      	str	r0, [r4, #0]
 8004344:	4629      	mov	r1, r5
 8004346:	4630      	mov	r0, r6
 8004348:	f000 f838 	bl	80043bc <_sbrk_r>
 800434c:	1c43      	adds	r3, r0, #1
 800434e:	d124      	bne.n	800439a <_malloc_r+0x92>
 8004350:	230c      	movs	r3, #12
 8004352:	6033      	str	r3, [r6, #0]
 8004354:	4630      	mov	r0, r6
 8004356:	f000 f8dc 	bl	8004512 <__malloc_unlock>
 800435a:	e7e4      	b.n	8004326 <_malloc_r+0x1e>
 800435c:	680b      	ldr	r3, [r1, #0]
 800435e:	1b5b      	subs	r3, r3, r5
 8004360:	d418      	bmi.n	8004394 <_malloc_r+0x8c>
 8004362:	2b0b      	cmp	r3, #11
 8004364:	d90f      	bls.n	8004386 <_malloc_r+0x7e>
 8004366:	600b      	str	r3, [r1, #0]
 8004368:	50cd      	str	r5, [r1, r3]
 800436a:	18cc      	adds	r4, r1, r3
 800436c:	4630      	mov	r0, r6
 800436e:	f000 f8d0 	bl	8004512 <__malloc_unlock>
 8004372:	f104 000b 	add.w	r0, r4, #11
 8004376:	1d23      	adds	r3, r4, #4
 8004378:	f020 0007 	bic.w	r0, r0, #7
 800437c:	1ac3      	subs	r3, r0, r3
 800437e:	d0d3      	beq.n	8004328 <_malloc_r+0x20>
 8004380:	425a      	negs	r2, r3
 8004382:	50e2      	str	r2, [r4, r3]
 8004384:	e7d0      	b.n	8004328 <_malloc_r+0x20>
 8004386:	428c      	cmp	r4, r1
 8004388:	684b      	ldr	r3, [r1, #4]
 800438a:	bf16      	itet	ne
 800438c:	6063      	strne	r3, [r4, #4]
 800438e:	6013      	streq	r3, [r2, #0]
 8004390:	460c      	movne	r4, r1
 8004392:	e7eb      	b.n	800436c <_malloc_r+0x64>
 8004394:	460c      	mov	r4, r1
 8004396:	6849      	ldr	r1, [r1, #4]
 8004398:	e7cc      	b.n	8004334 <_malloc_r+0x2c>
 800439a:	1cc4      	adds	r4, r0, #3
 800439c:	f024 0403 	bic.w	r4, r4, #3
 80043a0:	42a0      	cmp	r0, r4
 80043a2:	d005      	beq.n	80043b0 <_malloc_r+0xa8>
 80043a4:	1a21      	subs	r1, r4, r0
 80043a6:	4630      	mov	r0, r6
 80043a8:	f000 f808 	bl	80043bc <_sbrk_r>
 80043ac:	3001      	adds	r0, #1
 80043ae:	d0cf      	beq.n	8004350 <_malloc_r+0x48>
 80043b0:	6025      	str	r5, [r4, #0]
 80043b2:	e7db      	b.n	800436c <_malloc_r+0x64>
 80043b4:	20000090 	.word	0x20000090
 80043b8:	20000094 	.word	0x20000094

080043bc <_sbrk_r>:
 80043bc:	b538      	push	{r3, r4, r5, lr}
 80043be:	4c06      	ldr	r4, [pc, #24]	; (80043d8 <_sbrk_r+0x1c>)
 80043c0:	2300      	movs	r3, #0
 80043c2:	4605      	mov	r5, r0
 80043c4:	4608      	mov	r0, r1
 80043c6:	6023      	str	r3, [r4, #0]
 80043c8:	f7ff fb90 	bl	8003aec <_sbrk>
 80043cc:	1c43      	adds	r3, r0, #1
 80043ce:	d102      	bne.n	80043d6 <_sbrk_r+0x1a>
 80043d0:	6823      	ldr	r3, [r4, #0]
 80043d2:	b103      	cbz	r3, 80043d6 <_sbrk_r+0x1a>
 80043d4:	602b      	str	r3, [r5, #0]
 80043d6:	bd38      	pop	{r3, r4, r5, pc}
 80043d8:	20000144 	.word	0x20000144

080043dc <__sread>:
 80043dc:	b510      	push	{r4, lr}
 80043de:	460c      	mov	r4, r1
 80043e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043e4:	f000 f896 	bl	8004514 <_read_r>
 80043e8:	2800      	cmp	r0, #0
 80043ea:	bfab      	itete	ge
 80043ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80043ee:	89a3      	ldrhlt	r3, [r4, #12]
 80043f0:	181b      	addge	r3, r3, r0
 80043f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80043f6:	bfac      	ite	ge
 80043f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80043fa:	81a3      	strhlt	r3, [r4, #12]
 80043fc:	bd10      	pop	{r4, pc}

080043fe <__swrite>:
 80043fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004402:	461f      	mov	r7, r3
 8004404:	898b      	ldrh	r3, [r1, #12]
 8004406:	05db      	lsls	r3, r3, #23
 8004408:	4605      	mov	r5, r0
 800440a:	460c      	mov	r4, r1
 800440c:	4616      	mov	r6, r2
 800440e:	d505      	bpl.n	800441c <__swrite+0x1e>
 8004410:	2302      	movs	r3, #2
 8004412:	2200      	movs	r2, #0
 8004414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004418:	f000 f868 	bl	80044ec <_lseek_r>
 800441c:	89a3      	ldrh	r3, [r4, #12]
 800441e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004422:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004426:	81a3      	strh	r3, [r4, #12]
 8004428:	4632      	mov	r2, r6
 800442a:	463b      	mov	r3, r7
 800442c:	4628      	mov	r0, r5
 800442e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004432:	f000 b817 	b.w	8004464 <_write_r>

08004436 <__sseek>:
 8004436:	b510      	push	{r4, lr}
 8004438:	460c      	mov	r4, r1
 800443a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800443e:	f000 f855 	bl	80044ec <_lseek_r>
 8004442:	1c43      	adds	r3, r0, #1
 8004444:	89a3      	ldrh	r3, [r4, #12]
 8004446:	bf15      	itete	ne
 8004448:	6560      	strne	r0, [r4, #84]	; 0x54
 800444a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800444e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004452:	81a3      	strheq	r3, [r4, #12]
 8004454:	bf18      	it	ne
 8004456:	81a3      	strhne	r3, [r4, #12]
 8004458:	bd10      	pop	{r4, pc}

0800445a <__sclose>:
 800445a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800445e:	f000 b813 	b.w	8004488 <_close_r>
	...

08004464 <_write_r>:
 8004464:	b538      	push	{r3, r4, r5, lr}
 8004466:	4c07      	ldr	r4, [pc, #28]	; (8004484 <_write_r+0x20>)
 8004468:	4605      	mov	r5, r0
 800446a:	4608      	mov	r0, r1
 800446c:	4611      	mov	r1, r2
 800446e:	2200      	movs	r2, #0
 8004470:	6022      	str	r2, [r4, #0]
 8004472:	461a      	mov	r2, r3
 8004474:	f7ff fae9 	bl	8003a4a <_write>
 8004478:	1c43      	adds	r3, r0, #1
 800447a:	d102      	bne.n	8004482 <_write_r+0x1e>
 800447c:	6823      	ldr	r3, [r4, #0]
 800447e:	b103      	cbz	r3, 8004482 <_write_r+0x1e>
 8004480:	602b      	str	r3, [r5, #0]
 8004482:	bd38      	pop	{r3, r4, r5, pc}
 8004484:	20000144 	.word	0x20000144

08004488 <_close_r>:
 8004488:	b538      	push	{r3, r4, r5, lr}
 800448a:	4c06      	ldr	r4, [pc, #24]	; (80044a4 <_close_r+0x1c>)
 800448c:	2300      	movs	r3, #0
 800448e:	4605      	mov	r5, r0
 8004490:	4608      	mov	r0, r1
 8004492:	6023      	str	r3, [r4, #0]
 8004494:	f7ff faf5 	bl	8003a82 <_close>
 8004498:	1c43      	adds	r3, r0, #1
 800449a:	d102      	bne.n	80044a2 <_close_r+0x1a>
 800449c:	6823      	ldr	r3, [r4, #0]
 800449e:	b103      	cbz	r3, 80044a2 <_close_r+0x1a>
 80044a0:	602b      	str	r3, [r5, #0]
 80044a2:	bd38      	pop	{r3, r4, r5, pc}
 80044a4:	20000144 	.word	0x20000144

080044a8 <_fstat_r>:
 80044a8:	b538      	push	{r3, r4, r5, lr}
 80044aa:	4c07      	ldr	r4, [pc, #28]	; (80044c8 <_fstat_r+0x20>)
 80044ac:	2300      	movs	r3, #0
 80044ae:	4605      	mov	r5, r0
 80044b0:	4608      	mov	r0, r1
 80044b2:	4611      	mov	r1, r2
 80044b4:	6023      	str	r3, [r4, #0]
 80044b6:	f7ff faf0 	bl	8003a9a <_fstat>
 80044ba:	1c43      	adds	r3, r0, #1
 80044bc:	d102      	bne.n	80044c4 <_fstat_r+0x1c>
 80044be:	6823      	ldr	r3, [r4, #0]
 80044c0:	b103      	cbz	r3, 80044c4 <_fstat_r+0x1c>
 80044c2:	602b      	str	r3, [r5, #0]
 80044c4:	bd38      	pop	{r3, r4, r5, pc}
 80044c6:	bf00      	nop
 80044c8:	20000144 	.word	0x20000144

080044cc <_isatty_r>:
 80044cc:	b538      	push	{r3, r4, r5, lr}
 80044ce:	4c06      	ldr	r4, [pc, #24]	; (80044e8 <_isatty_r+0x1c>)
 80044d0:	2300      	movs	r3, #0
 80044d2:	4605      	mov	r5, r0
 80044d4:	4608      	mov	r0, r1
 80044d6:	6023      	str	r3, [r4, #0]
 80044d8:	f7ff faef 	bl	8003aba <_isatty>
 80044dc:	1c43      	adds	r3, r0, #1
 80044de:	d102      	bne.n	80044e6 <_isatty_r+0x1a>
 80044e0:	6823      	ldr	r3, [r4, #0]
 80044e2:	b103      	cbz	r3, 80044e6 <_isatty_r+0x1a>
 80044e4:	602b      	str	r3, [r5, #0]
 80044e6:	bd38      	pop	{r3, r4, r5, pc}
 80044e8:	20000144 	.word	0x20000144

080044ec <_lseek_r>:
 80044ec:	b538      	push	{r3, r4, r5, lr}
 80044ee:	4c07      	ldr	r4, [pc, #28]	; (800450c <_lseek_r+0x20>)
 80044f0:	4605      	mov	r5, r0
 80044f2:	4608      	mov	r0, r1
 80044f4:	4611      	mov	r1, r2
 80044f6:	2200      	movs	r2, #0
 80044f8:	6022      	str	r2, [r4, #0]
 80044fa:	461a      	mov	r2, r3
 80044fc:	f7ff fae8 	bl	8003ad0 <_lseek>
 8004500:	1c43      	adds	r3, r0, #1
 8004502:	d102      	bne.n	800450a <_lseek_r+0x1e>
 8004504:	6823      	ldr	r3, [r4, #0]
 8004506:	b103      	cbz	r3, 800450a <_lseek_r+0x1e>
 8004508:	602b      	str	r3, [r5, #0]
 800450a:	bd38      	pop	{r3, r4, r5, pc}
 800450c:	20000144 	.word	0x20000144

08004510 <__malloc_lock>:
 8004510:	4770      	bx	lr

08004512 <__malloc_unlock>:
 8004512:	4770      	bx	lr

08004514 <_read_r>:
 8004514:	b538      	push	{r3, r4, r5, lr}
 8004516:	4c07      	ldr	r4, [pc, #28]	; (8004534 <_read_r+0x20>)
 8004518:	4605      	mov	r5, r0
 800451a:	4608      	mov	r0, r1
 800451c:	4611      	mov	r1, r2
 800451e:	2200      	movs	r2, #0
 8004520:	6022      	str	r2, [r4, #0]
 8004522:	461a      	mov	r2, r3
 8004524:	f7ff fa74 	bl	8003a10 <_read>
 8004528:	1c43      	adds	r3, r0, #1
 800452a:	d102      	bne.n	8004532 <_read_r+0x1e>
 800452c:	6823      	ldr	r3, [r4, #0]
 800452e:	b103      	cbz	r3, 8004532 <_read_r+0x1e>
 8004530:	602b      	str	r3, [r5, #0]
 8004532:	bd38      	pop	{r3, r4, r5, pc}
 8004534:	20000144 	.word	0x20000144

08004538 <_init>:
 8004538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453a:	bf00      	nop
 800453c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800453e:	bc08      	pop	{r3}
 8004540:	469e      	mov	lr, r3
 8004542:	4770      	bx	lr

08004544 <_fini>:
 8004544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004546:	bf00      	nop
 8004548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800454a:	bc08      	pop	{r3}
 800454c:	469e      	mov	lr, r3
 800454e:	4770      	bx	lr
