
ComboLock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001128  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080012b0  080012b0  000112b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080012f0  080012f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080012f0  080012f0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080012f0  080012f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012f0  080012f0  000112f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080012f4  080012f4  000112f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080012f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001304  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001304  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000463b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000d8a  00000000  00000000  00024677  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000518  00000000  00000000  00025408  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000490  00000000  00000000  00025920  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000240a7  00000000  00000000  00025db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000042f2  00000000  00000000  00049e57  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dea26  00000000  00000000  0004e149  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012cb6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000012a0  00000000  00000000  0012cbec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001298 	.word	0x08001298

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001298 	.word	0x08001298

080001c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80001ce:	2300      	movs	r3, #0
 80001d0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d2:	2003      	movs	r0, #3
 80001d4:	f000 f91a 	bl	800040c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001d8:	2000      	movs	r0, #0
 80001da:	f000 f80d 	bl	80001f8 <HAL_InitTick>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d002      	beq.n	80001ea <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80001e4:	2301      	movs	r3, #1
 80001e6:	71fb      	strb	r3, [r7, #7]
 80001e8:	e001      	b.n	80001ee <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80001ea:	f000 ff77 	bl	80010dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001ee:	79fb      	ldrb	r3, [r7, #7]
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	3708      	adds	r7, #8
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}

080001f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000200:	2300      	movs	r3, #0
 8000202:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000204:	4b16      	ldr	r3, [pc, #88]	; (8000260 <HAL_InitTick+0x68>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d022      	beq.n	8000252 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800020c:	4b15      	ldr	r3, [pc, #84]	; (8000264 <HAL_InitTick+0x6c>)
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	4b13      	ldr	r3, [pc, #76]	; (8000260 <HAL_InitTick+0x68>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000218:	fbb1 f3f3 	udiv	r3, r1, r3
 800021c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000220:	4618      	mov	r0, r3
 8000222:	f000 f91a 	bl	800045a <HAL_SYSTICK_Config>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d10f      	bne.n	800024c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	2b0f      	cmp	r3, #15
 8000230:	d809      	bhi.n	8000246 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000232:	2200      	movs	r2, #0
 8000234:	6879      	ldr	r1, [r7, #4]
 8000236:	f04f 30ff 	mov.w	r0, #4294967295
 800023a:	f000 f8f2 	bl	8000422 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800023e:	4a0a      	ldr	r2, [pc, #40]	; (8000268 <HAL_InitTick+0x70>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	6013      	str	r3, [r2, #0]
 8000244:	e007      	b.n	8000256 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000246:	2301      	movs	r3, #1
 8000248:	73fb      	strb	r3, [r7, #15]
 800024a:	e004      	b.n	8000256 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800024c:	2301      	movs	r3, #1
 800024e:	73fb      	strb	r3, [r7, #15]
 8000250:	e001      	b.n	8000256 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000252:	2301      	movs	r3, #1
 8000254:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000256:	7bfb      	ldrb	r3, [r7, #15]
}
 8000258:	4618      	mov	r0, r3
 800025a:	3710      	adds	r7, #16
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	20000004 	.word	0x20000004
 8000264:	20000008 	.word	0x20000008
 8000268:	20000000 	.word	0x20000000

0800026c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000270:	4b05      	ldr	r3, [pc, #20]	; (8000288 <HAL_IncTick+0x1c>)
 8000272:	681a      	ldr	r2, [r3, #0]
 8000274:	4b05      	ldr	r3, [pc, #20]	; (800028c <HAL_IncTick+0x20>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4413      	add	r3, r2
 800027a:	4a03      	ldr	r2, [pc, #12]	; (8000288 <HAL_IncTick+0x1c>)
 800027c:	6013      	str	r3, [r2, #0]
}
 800027e:	bf00      	nop
 8000280:	46bd      	mov	sp, r7
 8000282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000286:	4770      	bx	lr
 8000288:	20000028 	.word	0x20000028
 800028c:	20000004 	.word	0x20000004

08000290 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
  return uwTick;
 8000294:	4b03      	ldr	r3, [pc, #12]	; (80002a4 <HAL_GetTick+0x14>)
 8000296:	681b      	ldr	r3, [r3, #0]
}
 8000298:	4618      	mov	r0, r3
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	20000028 	.word	0x20000028

080002a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b085      	sub	sp, #20
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f003 0307 	and.w	r3, r3, #7
 80002b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002b8:	4b0c      	ldr	r3, [pc, #48]	; (80002ec <__NVIC_SetPriorityGrouping+0x44>)
 80002ba:	68db      	ldr	r3, [r3, #12]
 80002bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002be:	68ba      	ldr	r2, [r7, #8]
 80002c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002c4:	4013      	ands	r3, r2
 80002c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002da:	4a04      	ldr	r2, [pc, #16]	; (80002ec <__NVIC_SetPriorityGrouping+0x44>)
 80002dc:	68bb      	ldr	r3, [r7, #8]
 80002de:	60d3      	str	r3, [r2, #12]
}
 80002e0:	bf00      	nop
 80002e2:	3714      	adds	r7, #20
 80002e4:	46bd      	mov	sp, r7
 80002e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ea:	4770      	bx	lr
 80002ec:	e000ed00 	.word	0xe000ed00

080002f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002f4:	4b04      	ldr	r3, [pc, #16]	; (8000308 <__NVIC_GetPriorityGrouping+0x18>)
 80002f6:	68db      	ldr	r3, [r3, #12]
 80002f8:	0a1b      	lsrs	r3, r3, #8
 80002fa:	f003 0307 	and.w	r3, r3, #7
}
 80002fe:	4618      	mov	r0, r3
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	e000ed00 	.word	0xe000ed00

0800030c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	6039      	str	r1, [r7, #0]
 8000316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031c:	2b00      	cmp	r3, #0
 800031e:	db0a      	blt.n	8000336 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000320:	683b      	ldr	r3, [r7, #0]
 8000322:	b2da      	uxtb	r2, r3
 8000324:	490c      	ldr	r1, [pc, #48]	; (8000358 <__NVIC_SetPriority+0x4c>)
 8000326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800032a:	0112      	lsls	r2, r2, #4
 800032c:	b2d2      	uxtb	r2, r2
 800032e:	440b      	add	r3, r1
 8000330:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000334:	e00a      	b.n	800034c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	b2da      	uxtb	r2, r3
 800033a:	4908      	ldr	r1, [pc, #32]	; (800035c <__NVIC_SetPriority+0x50>)
 800033c:	79fb      	ldrb	r3, [r7, #7]
 800033e:	f003 030f 	and.w	r3, r3, #15
 8000342:	3b04      	subs	r3, #4
 8000344:	0112      	lsls	r2, r2, #4
 8000346:	b2d2      	uxtb	r2, r2
 8000348:	440b      	add	r3, r1
 800034a:	761a      	strb	r2, [r3, #24]
}
 800034c:	bf00      	nop
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr
 8000358:	e000e100 	.word	0xe000e100
 800035c:	e000ed00 	.word	0xe000ed00

08000360 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000360:	b480      	push	{r7}
 8000362:	b089      	sub	sp, #36	; 0x24
 8000364:	af00      	add	r7, sp, #0
 8000366:	60f8      	str	r0, [r7, #12]
 8000368:	60b9      	str	r1, [r7, #8]
 800036a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	f003 0307 	and.w	r3, r3, #7
 8000372:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000374:	69fb      	ldr	r3, [r7, #28]
 8000376:	f1c3 0307 	rsb	r3, r3, #7
 800037a:	2b04      	cmp	r3, #4
 800037c:	bf28      	it	cs
 800037e:	2304      	movcs	r3, #4
 8000380:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000382:	69fb      	ldr	r3, [r7, #28]
 8000384:	3304      	adds	r3, #4
 8000386:	2b06      	cmp	r3, #6
 8000388:	d902      	bls.n	8000390 <NVIC_EncodePriority+0x30>
 800038a:	69fb      	ldr	r3, [r7, #28]
 800038c:	3b03      	subs	r3, #3
 800038e:	e000      	b.n	8000392 <NVIC_EncodePriority+0x32>
 8000390:	2300      	movs	r3, #0
 8000392:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000394:	f04f 32ff 	mov.w	r2, #4294967295
 8000398:	69bb      	ldr	r3, [r7, #24]
 800039a:	fa02 f303 	lsl.w	r3, r2, r3
 800039e:	43da      	mvns	r2, r3
 80003a0:	68bb      	ldr	r3, [r7, #8]
 80003a2:	401a      	ands	r2, r3
 80003a4:	697b      	ldr	r3, [r7, #20]
 80003a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003a8:	f04f 31ff 	mov.w	r1, #4294967295
 80003ac:	697b      	ldr	r3, [r7, #20]
 80003ae:	fa01 f303 	lsl.w	r3, r1, r3
 80003b2:	43d9      	mvns	r1, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003b8:	4313      	orrs	r3, r2
         );
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	3724      	adds	r7, #36	; 0x24
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
	...

080003c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	3b01      	subs	r3, #1
 80003d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003d8:	d301      	bcc.n	80003de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003da:	2301      	movs	r3, #1
 80003dc:	e00f      	b.n	80003fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003de:	4a0a      	ldr	r2, [pc, #40]	; (8000408 <SysTick_Config+0x40>)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	3b01      	subs	r3, #1
 80003e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003e6:	210f      	movs	r1, #15
 80003e8:	f04f 30ff 	mov.w	r0, #4294967295
 80003ec:	f7ff ff8e 	bl	800030c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003f0:	4b05      	ldr	r3, [pc, #20]	; (8000408 <SysTick_Config+0x40>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003f6:	4b04      	ldr	r3, [pc, #16]	; (8000408 <SysTick_Config+0x40>)
 80003f8:	2207      	movs	r2, #7
 80003fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003fc:	2300      	movs	r3, #0
}
 80003fe:	4618      	mov	r0, r3
 8000400:	3708      	adds	r7, #8
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	e000e010 	.word	0xe000e010

0800040c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000414:	6878      	ldr	r0, [r7, #4]
 8000416:	f7ff ff47 	bl	80002a8 <__NVIC_SetPriorityGrouping>
}
 800041a:	bf00      	nop
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}

08000422 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000422:	b580      	push	{r7, lr}
 8000424:	b086      	sub	sp, #24
 8000426:	af00      	add	r7, sp, #0
 8000428:	4603      	mov	r3, r0
 800042a:	60b9      	str	r1, [r7, #8]
 800042c:	607a      	str	r2, [r7, #4]
 800042e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000430:	2300      	movs	r3, #0
 8000432:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000434:	f7ff ff5c 	bl	80002f0 <__NVIC_GetPriorityGrouping>
 8000438:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800043a:	687a      	ldr	r2, [r7, #4]
 800043c:	68b9      	ldr	r1, [r7, #8]
 800043e:	6978      	ldr	r0, [r7, #20]
 8000440:	f7ff ff8e 	bl	8000360 <NVIC_EncodePriority>
 8000444:	4602      	mov	r2, r0
 8000446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800044a:	4611      	mov	r1, r2
 800044c:	4618      	mov	r0, r3
 800044e:	f7ff ff5d 	bl	800030c <__NVIC_SetPriority>
}
 8000452:	bf00      	nop
 8000454:	3718      	adds	r7, #24
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}

0800045a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800045a:	b580      	push	{r7, lr}
 800045c:	b082      	sub	sp, #8
 800045e:	af00      	add	r7, sp, #0
 8000460:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000462:	6878      	ldr	r0, [r7, #4]
 8000464:	f7ff ffb0 	bl	80003c8 <SysTick_Config>
 8000468:	4603      	mov	r3, r0
}
 800046a:	4618      	mov	r0, r3
 800046c:	3708      	adds	r7, #8
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
	...

08000474 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000478:	4b04      	ldr	r3, [pc, #16]	; (800048c <HAL_PWREx_GetVoltageRange+0x18>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000480:	4618      	mov	r0, r3
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	40007000 	.word	0x40007000

08000490 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000490:	b480      	push	{r7}
 8000492:	b085      	sub	sp, #20
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800049e:	d130      	bne.n	8000502 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80004a0:	4b23      	ldr	r3, [pc, #140]	; (8000530 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80004a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80004ac:	d038      	beq.n	8000520 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80004ae:	4b20      	ldr	r3, [pc, #128]	; (8000530 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80004b6:	4a1e      	ldr	r2, [pc, #120]	; (8000530 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80004b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80004be:	4b1d      	ldr	r3, [pc, #116]	; (8000534 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	2232      	movs	r2, #50	; 0x32
 80004c4:	fb02 f303 	mul.w	r3, r2, r3
 80004c8:	4a1b      	ldr	r2, [pc, #108]	; (8000538 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80004ca:	fba2 2303 	umull	r2, r3, r2, r3
 80004ce:	0c9b      	lsrs	r3, r3, #18
 80004d0:	3301      	adds	r3, #1
 80004d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80004d4:	e002      	b.n	80004dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	3b01      	subs	r3, #1
 80004da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80004dc:	4b14      	ldr	r3, [pc, #80]	; (8000530 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80004de:	695b      	ldr	r3, [r3, #20]
 80004e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80004e8:	d102      	bne.n	80004f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d1f2      	bne.n	80004d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80004f0:	4b0f      	ldr	r3, [pc, #60]	; (8000530 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80004f2:	695b      	ldr	r3, [r3, #20]
 80004f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80004fc:	d110      	bne.n	8000520 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80004fe:	2303      	movs	r3, #3
 8000500:	e00f      	b.n	8000522 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800050a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800050e:	d007      	beq.n	8000520 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000510:	4b07      	ldr	r3, [pc, #28]	; (8000530 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000518:	4a05      	ldr	r2, [pc, #20]	; (8000530 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800051a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000520:	2300      	movs	r3, #0
}
 8000522:	4618      	mov	r0, r3
 8000524:	3714      	adds	r7, #20
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	40007000 	.word	0x40007000
 8000534:	20000008 	.word	0x20000008
 8000538:	431bde83 	.word	0x431bde83

0800053c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b088      	sub	sp, #32
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d101      	bne.n	800054e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800054a:	2301      	movs	r3, #1
 800054c:	e39d      	b.n	8000c8a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800054e:	4ba4      	ldr	r3, [pc, #656]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 8000550:	689b      	ldr	r3, [r3, #8]
 8000552:	f003 030c 	and.w	r3, r3, #12
 8000556:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000558:	4ba1      	ldr	r3, [pc, #644]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 800055a:	68db      	ldr	r3, [r3, #12]
 800055c:	f003 0303 	and.w	r3, r3, #3
 8000560:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f003 0310 	and.w	r3, r3, #16
 800056a:	2b00      	cmp	r3, #0
 800056c:	f000 80e1 	beq.w	8000732 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000570:	69bb      	ldr	r3, [r7, #24]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d007      	beq.n	8000586 <HAL_RCC_OscConfig+0x4a>
 8000576:	69bb      	ldr	r3, [r7, #24]
 8000578:	2b0c      	cmp	r3, #12
 800057a:	f040 8088 	bne.w	800068e <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	2b01      	cmp	r3, #1
 8000582:	f040 8084 	bne.w	800068e <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000586:	4b96      	ldr	r3, [pc, #600]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f003 0302 	and.w	r3, r3, #2
 800058e:	2b00      	cmp	r3, #0
 8000590:	d005      	beq.n	800059e <HAL_RCC_OscConfig+0x62>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	699b      	ldr	r3, [r3, #24]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d101      	bne.n	800059e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800059a:	2301      	movs	r3, #1
 800059c:	e375      	b.n	8000c8a <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	6a1a      	ldr	r2, [r3, #32]
 80005a2:	4b8f      	ldr	r3, [pc, #572]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f003 0308 	and.w	r3, r3, #8
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d004      	beq.n	80005b8 <HAL_RCC_OscConfig+0x7c>
 80005ae:	4b8c      	ldr	r3, [pc, #560]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80005b6:	e005      	b.n	80005c4 <HAL_RCC_OscConfig+0x88>
 80005b8:	4b89      	ldr	r3, [pc, #548]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 80005ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80005be:	091b      	lsrs	r3, r3, #4
 80005c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d223      	bcs.n	8000610 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	6a1b      	ldr	r3, [r3, #32]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 fcd1 	bl	8000f74 <RCC_SetFlashLatencyFromMSIRange>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80005d8:	2301      	movs	r3, #1
 80005da:	e356      	b.n	8000c8a <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80005dc:	4b80      	ldr	r3, [pc, #512]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a7f      	ldr	r2, [pc, #508]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 80005e2:	f043 0308 	orr.w	r3, r3, #8
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4b7d      	ldr	r3, [pc, #500]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	6a1b      	ldr	r3, [r3, #32]
 80005f4:	497a      	ldr	r1, [pc, #488]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 80005f6:	4313      	orrs	r3, r2
 80005f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80005fa:	4b79      	ldr	r3, [pc, #484]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 80005fc:	685b      	ldr	r3, [r3, #4]
 80005fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	69db      	ldr	r3, [r3, #28]
 8000606:	021b      	lsls	r3, r3, #8
 8000608:	4975      	ldr	r1, [pc, #468]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 800060a:	4313      	orrs	r3, r2
 800060c:	604b      	str	r3, [r1, #4]
 800060e:	e022      	b.n	8000656 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000610:	4b73      	ldr	r3, [pc, #460]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a72      	ldr	r2, [pc, #456]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 8000616:	f043 0308 	orr.w	r3, r3, #8
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b70      	ldr	r3, [pc, #448]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	6a1b      	ldr	r3, [r3, #32]
 8000628:	496d      	ldr	r1, [pc, #436]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 800062a:	4313      	orrs	r3, r2
 800062c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800062e:	4b6c      	ldr	r3, [pc, #432]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	021b      	lsls	r3, r3, #8
 800063c:	4968      	ldr	r1, [pc, #416]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 800063e:	4313      	orrs	r3, r2
 8000640:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	6a1b      	ldr	r3, [r3, #32]
 8000646:	4618      	mov	r0, r3
 8000648:	f000 fc94 	bl	8000f74 <RCC_SetFlashLatencyFromMSIRange>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8000652:	2301      	movs	r3, #1
 8000654:	e319      	b.n	8000c8a <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000656:	f000 fc03 	bl	8000e60 <HAL_RCC_GetSysClockFreq>
 800065a:	4601      	mov	r1, r0
 800065c:	4b60      	ldr	r3, [pc, #384]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 800065e:	689b      	ldr	r3, [r3, #8]
 8000660:	091b      	lsrs	r3, r3, #4
 8000662:	f003 030f 	and.w	r3, r3, #15
 8000666:	4a5f      	ldr	r2, [pc, #380]	; (80007e4 <HAL_RCC_OscConfig+0x2a8>)
 8000668:	5cd3      	ldrb	r3, [r2, r3]
 800066a:	f003 031f 	and.w	r3, r3, #31
 800066e:	fa21 f303 	lsr.w	r3, r1, r3
 8000672:	4a5d      	ldr	r2, [pc, #372]	; (80007e8 <HAL_RCC_OscConfig+0x2ac>)
 8000674:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000676:	4b5d      	ldr	r3, [pc, #372]	; (80007ec <HAL_RCC_OscConfig+0x2b0>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff fdbc 	bl	80001f8 <HAL_InitTick>
 8000680:	4603      	mov	r3, r0
 8000682:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000684:	7bfb      	ldrb	r3, [r7, #15]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d052      	beq.n	8000730 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	e2fd      	b.n	8000c8a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d032      	beq.n	80006fc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000696:	4b52      	ldr	r3, [pc, #328]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a51      	ldr	r2, [pc, #324]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80006a2:	f7ff fdf5 	bl	8000290 <HAL_GetTick>
 80006a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80006a8:	e008      	b.n	80006bc <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80006aa:	f7ff fdf1 	bl	8000290 <HAL_GetTick>
 80006ae:	4602      	mov	r2, r0
 80006b0:	693b      	ldr	r3, [r7, #16]
 80006b2:	1ad3      	subs	r3, r2, r3
 80006b4:	2b02      	cmp	r3, #2
 80006b6:	d901      	bls.n	80006bc <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 80006b8:	2303      	movs	r3, #3
 80006ba:	e2e6      	b.n	8000c8a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80006bc:	4b48      	ldr	r3, [pc, #288]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f003 0302 	and.w	r3, r3, #2
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d0f0      	beq.n	80006aa <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80006c8:	4b45      	ldr	r3, [pc, #276]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a44      	ldr	r2, [pc, #272]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 80006ce:	f043 0308 	orr.w	r3, r3, #8
 80006d2:	6013      	str	r3, [r2, #0]
 80006d4:	4b42      	ldr	r3, [pc, #264]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	6a1b      	ldr	r3, [r3, #32]
 80006e0:	493f      	ldr	r1, [pc, #252]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 80006e2:	4313      	orrs	r3, r2
 80006e4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80006e6:	4b3e      	ldr	r3, [pc, #248]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	021b      	lsls	r3, r3, #8
 80006f4:	493a      	ldr	r1, [pc, #232]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 80006f6:	4313      	orrs	r3, r2
 80006f8:	604b      	str	r3, [r1, #4]
 80006fa:	e01a      	b.n	8000732 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80006fc:	4b38      	ldr	r3, [pc, #224]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a37      	ldr	r2, [pc, #220]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 8000702:	f023 0301 	bic.w	r3, r3, #1
 8000706:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000708:	f7ff fdc2 	bl	8000290 <HAL_GetTick>
 800070c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800070e:	e008      	b.n	8000722 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000710:	f7ff fdbe 	bl	8000290 <HAL_GetTick>
 8000714:	4602      	mov	r2, r0
 8000716:	693b      	ldr	r3, [r7, #16]
 8000718:	1ad3      	subs	r3, r2, r3
 800071a:	2b02      	cmp	r3, #2
 800071c:	d901      	bls.n	8000722 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800071e:	2303      	movs	r3, #3
 8000720:	e2b3      	b.n	8000c8a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000722:	4b2f      	ldr	r3, [pc, #188]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f003 0302 	and.w	r3, r3, #2
 800072a:	2b00      	cmp	r3, #0
 800072c:	d1f0      	bne.n	8000710 <HAL_RCC_OscConfig+0x1d4>
 800072e:	e000      	b.n	8000732 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000730:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	2b00      	cmp	r3, #0
 800073c:	d074      	beq.n	8000828 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800073e:	69bb      	ldr	r3, [r7, #24]
 8000740:	2b08      	cmp	r3, #8
 8000742:	d005      	beq.n	8000750 <HAL_RCC_OscConfig+0x214>
 8000744:	69bb      	ldr	r3, [r7, #24]
 8000746:	2b0c      	cmp	r3, #12
 8000748:	d10e      	bne.n	8000768 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	2b03      	cmp	r3, #3
 800074e:	d10b      	bne.n	8000768 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000750:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000758:	2b00      	cmp	r3, #0
 800075a:	d064      	beq.n	8000826 <HAL_RCC_OscConfig+0x2ea>
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	685b      	ldr	r3, [r3, #4]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d160      	bne.n	8000826 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8000764:	2301      	movs	r3, #1
 8000766:	e290      	b.n	8000c8a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000770:	d106      	bne.n	8000780 <HAL_RCC_OscConfig+0x244>
 8000772:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a1a      	ldr	r2, [pc, #104]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 8000778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800077c:	6013      	str	r3, [r2, #0]
 800077e:	e01d      	b.n	80007bc <HAL_RCC_OscConfig+0x280>
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000788:	d10c      	bne.n	80007a4 <HAL_RCC_OscConfig+0x268>
 800078a:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a14      	ldr	r2, [pc, #80]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 8000790:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000794:	6013      	str	r3, [r2, #0]
 8000796:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a11      	ldr	r2, [pc, #68]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 800079c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007a0:	6013      	str	r3, [r2, #0]
 80007a2:	e00b      	b.n	80007bc <HAL_RCC_OscConfig+0x280>
 80007a4:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a0d      	ldr	r2, [pc, #52]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 80007aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007ae:	6013      	str	r3, [r2, #0]
 80007b0:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <HAL_RCC_OscConfig+0x2a4>)
 80007b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d01c      	beq.n	80007fe <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80007c4:	f7ff fd64 	bl	8000290 <HAL_GetTick>
 80007c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80007ca:	e011      	b.n	80007f0 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80007cc:	f7ff fd60 	bl	8000290 <HAL_GetTick>
 80007d0:	4602      	mov	r2, r0
 80007d2:	693b      	ldr	r3, [r7, #16]
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	2b64      	cmp	r3, #100	; 0x64
 80007d8:	d90a      	bls.n	80007f0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80007da:	2303      	movs	r3, #3
 80007dc:	e255      	b.n	8000c8a <HAL_RCC_OscConfig+0x74e>
 80007de:	bf00      	nop
 80007e0:	40021000 	.word	0x40021000
 80007e4:	080012b0 	.word	0x080012b0
 80007e8:	20000008 	.word	0x20000008
 80007ec:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80007f0:	4bae      	ldr	r3, [pc, #696]	; (8000aac <HAL_RCC_OscConfig+0x570>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d0e7      	beq.n	80007cc <HAL_RCC_OscConfig+0x290>
 80007fc:	e014      	b.n	8000828 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80007fe:	f7ff fd47 	bl	8000290 <HAL_GetTick>
 8000802:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000804:	e008      	b.n	8000818 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000806:	f7ff fd43 	bl	8000290 <HAL_GetTick>
 800080a:	4602      	mov	r2, r0
 800080c:	693b      	ldr	r3, [r7, #16]
 800080e:	1ad3      	subs	r3, r2, r3
 8000810:	2b64      	cmp	r3, #100	; 0x64
 8000812:	d901      	bls.n	8000818 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8000814:	2303      	movs	r3, #3
 8000816:	e238      	b.n	8000c8a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000818:	4ba4      	ldr	r3, [pc, #656]	; (8000aac <HAL_RCC_OscConfig+0x570>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000820:	2b00      	cmp	r3, #0
 8000822:	d1f0      	bne.n	8000806 <HAL_RCC_OscConfig+0x2ca>
 8000824:	e000      	b.n	8000828 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000826:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f003 0302 	and.w	r3, r3, #2
 8000830:	2b00      	cmp	r3, #0
 8000832:	d060      	beq.n	80008f6 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000834:	69bb      	ldr	r3, [r7, #24]
 8000836:	2b04      	cmp	r3, #4
 8000838:	d005      	beq.n	8000846 <HAL_RCC_OscConfig+0x30a>
 800083a:	69bb      	ldr	r3, [r7, #24]
 800083c:	2b0c      	cmp	r3, #12
 800083e:	d119      	bne.n	8000874 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	2b02      	cmp	r3, #2
 8000844:	d116      	bne.n	8000874 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000846:	4b99      	ldr	r3, [pc, #612]	; (8000aac <HAL_RCC_OscConfig+0x570>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800084e:	2b00      	cmp	r3, #0
 8000850:	d005      	beq.n	800085e <HAL_RCC_OscConfig+0x322>
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	68db      	ldr	r3, [r3, #12]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d101      	bne.n	800085e <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 800085a:	2301      	movs	r3, #1
 800085c:	e215      	b.n	8000c8a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800085e:	4b93      	ldr	r3, [pc, #588]	; (8000aac <HAL_RCC_OscConfig+0x570>)
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	691b      	ldr	r3, [r3, #16]
 800086a:	061b      	lsls	r3, r3, #24
 800086c:	498f      	ldr	r1, [pc, #572]	; (8000aac <HAL_RCC_OscConfig+0x570>)
 800086e:	4313      	orrs	r3, r2
 8000870:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000872:	e040      	b.n	80008f6 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d023      	beq.n	80008c4 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800087c:	4b8b      	ldr	r3, [pc, #556]	; (8000aac <HAL_RCC_OscConfig+0x570>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a8a      	ldr	r2, [pc, #552]	; (8000aac <HAL_RCC_OscConfig+0x570>)
 8000882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000886:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000888:	f7ff fd02 	bl	8000290 <HAL_GetTick>
 800088c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800088e:	e008      	b.n	80008a2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000890:	f7ff fcfe 	bl	8000290 <HAL_GetTick>
 8000894:	4602      	mov	r2, r0
 8000896:	693b      	ldr	r3, [r7, #16]
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	2b02      	cmp	r3, #2
 800089c:	d901      	bls.n	80008a2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800089e:	2303      	movs	r3, #3
 80008a0:	e1f3      	b.n	8000c8a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80008a2:	4b82      	ldr	r3, [pc, #520]	; (8000aac <HAL_RCC_OscConfig+0x570>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d0f0      	beq.n	8000890 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008ae:	4b7f      	ldr	r3, [pc, #508]	; (8000aac <HAL_RCC_OscConfig+0x570>)
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	691b      	ldr	r3, [r3, #16]
 80008ba:	061b      	lsls	r3, r3, #24
 80008bc:	497b      	ldr	r1, [pc, #492]	; (8000aac <HAL_RCC_OscConfig+0x570>)
 80008be:	4313      	orrs	r3, r2
 80008c0:	604b      	str	r3, [r1, #4]
 80008c2:	e018      	b.n	80008f6 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80008c4:	4b79      	ldr	r3, [pc, #484]	; (8000aac <HAL_RCC_OscConfig+0x570>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a78      	ldr	r2, [pc, #480]	; (8000aac <HAL_RCC_OscConfig+0x570>)
 80008ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80008ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80008d0:	f7ff fcde 	bl	8000290 <HAL_GetTick>
 80008d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80008d6:	e008      	b.n	80008ea <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80008d8:	f7ff fcda 	bl	8000290 <HAL_GetTick>
 80008dc:	4602      	mov	r2, r0
 80008de:	693b      	ldr	r3, [r7, #16]
 80008e0:	1ad3      	subs	r3, r2, r3
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	d901      	bls.n	80008ea <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80008e6:	2303      	movs	r3, #3
 80008e8:	e1cf      	b.n	8000c8a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80008ea:	4b70      	ldr	r3, [pc, #448]	; (8000aac <HAL_RCC_OscConfig+0x570>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d1f0      	bne.n	80008d8 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f003 0308 	and.w	r3, r3, #8
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d03c      	beq.n	800097c <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d01c      	beq.n	8000944 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800090a:	4b68      	ldr	r3, [pc, #416]	; (8000aac <HAL_RCC_OscConfig+0x570>)
 800090c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000910:	4a66      	ldr	r2, [pc, #408]	; (8000aac <HAL_RCC_OscConfig+0x570>)
 8000912:	f043 0301 	orr.w	r3, r3, #1
 8000916:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800091a:	f7ff fcb9 	bl	8000290 <HAL_GetTick>
 800091e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000920:	e008      	b.n	8000934 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000922:	f7ff fcb5 	bl	8000290 <HAL_GetTick>
 8000926:	4602      	mov	r2, r0
 8000928:	693b      	ldr	r3, [r7, #16]
 800092a:	1ad3      	subs	r3, r2, r3
 800092c:	2b02      	cmp	r3, #2
 800092e:	d901      	bls.n	8000934 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8000930:	2303      	movs	r3, #3
 8000932:	e1aa      	b.n	8000c8a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000934:	4b5d      	ldr	r3, [pc, #372]	; (8000aac <HAL_RCC_OscConfig+0x570>)
 8000936:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	2b00      	cmp	r3, #0
 8000940:	d0ef      	beq.n	8000922 <HAL_RCC_OscConfig+0x3e6>
 8000942:	e01b      	b.n	800097c <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000944:	4b59      	ldr	r3, [pc, #356]	; (8000aac <HAL_RCC_OscConfig+0x570>)
 8000946:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800094a:	4a58      	ldr	r2, [pc, #352]	; (8000aac <HAL_RCC_OscConfig+0x570>)
 800094c:	f023 0301 	bic.w	r3, r3, #1
 8000950:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000954:	f7ff fc9c 	bl	8000290 <HAL_GetTick>
 8000958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800095a:	e008      	b.n	800096e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800095c:	f7ff fc98 	bl	8000290 <HAL_GetTick>
 8000960:	4602      	mov	r2, r0
 8000962:	693b      	ldr	r3, [r7, #16]
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	2b02      	cmp	r3, #2
 8000968:	d901      	bls.n	800096e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800096a:	2303      	movs	r3, #3
 800096c:	e18d      	b.n	8000c8a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800096e:	4b4f      	ldr	r3, [pc, #316]	; (8000aac <HAL_RCC_OscConfig+0x570>)
 8000970:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000974:	f003 0302 	and.w	r3, r3, #2
 8000978:	2b00      	cmp	r3, #0
 800097a:	d1ef      	bne.n	800095c <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f003 0304 	and.w	r3, r3, #4
 8000984:	2b00      	cmp	r3, #0
 8000986:	f000 80a5 	beq.w	8000ad4 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800098a:	2300      	movs	r3, #0
 800098c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800098e:	4b47      	ldr	r3, [pc, #284]	; (8000aac <HAL_RCC_OscConfig+0x570>)
 8000990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000996:	2b00      	cmp	r3, #0
 8000998:	d10d      	bne.n	80009b6 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800099a:	4b44      	ldr	r3, [pc, #272]	; (8000aac <HAL_RCC_OscConfig+0x570>)
 800099c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800099e:	4a43      	ldr	r2, [pc, #268]	; (8000aac <HAL_RCC_OscConfig+0x570>)
 80009a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a4:	6593      	str	r3, [r2, #88]	; 0x58
 80009a6:	4b41      	ldr	r3, [pc, #260]	; (8000aac <HAL_RCC_OscConfig+0x570>)
 80009a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80009b2:	2301      	movs	r3, #1
 80009b4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80009b6:	4b3e      	ldr	r3, [pc, #248]	; (8000ab0 <HAL_RCC_OscConfig+0x574>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d118      	bne.n	80009f4 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80009c2:	4b3b      	ldr	r3, [pc, #236]	; (8000ab0 <HAL_RCC_OscConfig+0x574>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a3a      	ldr	r2, [pc, #232]	; (8000ab0 <HAL_RCC_OscConfig+0x574>)
 80009c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80009ce:	f7ff fc5f 	bl	8000290 <HAL_GetTick>
 80009d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80009d4:	e008      	b.n	80009e8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009d6:	f7ff fc5b 	bl	8000290 <HAL_GetTick>
 80009da:	4602      	mov	r2, r0
 80009dc:	693b      	ldr	r3, [r7, #16]
 80009de:	1ad3      	subs	r3, r2, r3
 80009e0:	2b02      	cmp	r3, #2
 80009e2:	d901      	bls.n	80009e8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80009e4:	2303      	movs	r3, #3
 80009e6:	e150      	b.n	8000c8a <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80009e8:	4b31      	ldr	r3, [pc, #196]	; (8000ab0 <HAL_RCC_OscConfig+0x574>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d0f0      	beq.n	80009d6 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d108      	bne.n	8000a0e <HAL_RCC_OscConfig+0x4d2>
 80009fc:	4b2b      	ldr	r3, [pc, #172]	; (8000aac <HAL_RCC_OscConfig+0x570>)
 80009fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a02:	4a2a      	ldr	r2, [pc, #168]	; (8000aac <HAL_RCC_OscConfig+0x570>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000a0c:	e024      	b.n	8000a58 <HAL_RCC_OscConfig+0x51c>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	2b05      	cmp	r3, #5
 8000a14:	d110      	bne.n	8000a38 <HAL_RCC_OscConfig+0x4fc>
 8000a16:	4b25      	ldr	r3, [pc, #148]	; (8000aac <HAL_RCC_OscConfig+0x570>)
 8000a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a1c:	4a23      	ldr	r2, [pc, #140]	; (8000aac <HAL_RCC_OscConfig+0x570>)
 8000a1e:	f043 0304 	orr.w	r3, r3, #4
 8000a22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000a26:	4b21      	ldr	r3, [pc, #132]	; (8000aac <HAL_RCC_OscConfig+0x570>)
 8000a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a2c:	4a1f      	ldr	r2, [pc, #124]	; (8000aac <HAL_RCC_OscConfig+0x570>)
 8000a2e:	f043 0301 	orr.w	r3, r3, #1
 8000a32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000a36:	e00f      	b.n	8000a58 <HAL_RCC_OscConfig+0x51c>
 8000a38:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <HAL_RCC_OscConfig+0x570>)
 8000a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a3e:	4a1b      	ldr	r2, [pc, #108]	; (8000aac <HAL_RCC_OscConfig+0x570>)
 8000a40:	f023 0301 	bic.w	r3, r3, #1
 8000a44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000a48:	4b18      	ldr	r3, [pc, #96]	; (8000aac <HAL_RCC_OscConfig+0x570>)
 8000a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a4e:	4a17      	ldr	r2, [pc, #92]	; (8000aac <HAL_RCC_OscConfig+0x570>)
 8000a50:	f023 0304 	bic.w	r3, r3, #4
 8000a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d016      	beq.n	8000a8e <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a60:	f7ff fc16 	bl	8000290 <HAL_GetTick>
 8000a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000a66:	e00a      	b.n	8000a7e <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a68:	f7ff fc12 	bl	8000290 <HAL_GetTick>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d901      	bls.n	8000a7e <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	e105      	b.n	8000c8a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <HAL_RCC_OscConfig+0x570>)
 8000a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a84:	f003 0302 	and.w	r3, r3, #2
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d0ed      	beq.n	8000a68 <HAL_RCC_OscConfig+0x52c>
 8000a8c:	e019      	b.n	8000ac2 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a8e:	f7ff fbff 	bl	8000290 <HAL_GetTick>
 8000a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000a94:	e00e      	b.n	8000ab4 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a96:	f7ff fbfb 	bl	8000290 <HAL_GetTick>
 8000a9a:	4602      	mov	r2, r0
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	1ad3      	subs	r3, r2, r3
 8000aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d905      	bls.n	8000ab4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	e0ee      	b.n	8000c8a <HAL_RCC_OscConfig+0x74e>
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000ab4:	4b77      	ldr	r3, [pc, #476]	; (8000c94 <HAL_RCC_OscConfig+0x758>)
 8000ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d1e9      	bne.n	8000a96 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000ac2:	7ffb      	ldrb	r3, [r7, #31]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d105      	bne.n	8000ad4 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ac8:	4b72      	ldr	r3, [pc, #456]	; (8000c94 <HAL_RCC_OscConfig+0x758>)
 8000aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000acc:	4a71      	ldr	r2, [pc, #452]	; (8000c94 <HAL_RCC_OscConfig+0x758>)
 8000ace:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ad2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	f000 80d5 	beq.w	8000c88 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	2b0c      	cmp	r3, #12
 8000ae2:	f000 808e 	beq.w	8000c02 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aea:	2b02      	cmp	r3, #2
 8000aec:	d15b      	bne.n	8000ba6 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000aee:	4b69      	ldr	r3, [pc, #420]	; (8000c94 <HAL_RCC_OscConfig+0x758>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a68      	ldr	r2, [pc, #416]	; (8000c94 <HAL_RCC_OscConfig+0x758>)
 8000af4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000af8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000afa:	f7ff fbc9 	bl	8000290 <HAL_GetTick>
 8000afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000b00:	e008      	b.n	8000b14 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b02:	f7ff fbc5 	bl	8000290 <HAL_GetTick>
 8000b06:	4602      	mov	r2, r0
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	1ad3      	subs	r3, r2, r3
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	d901      	bls.n	8000b14 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8000b10:	2303      	movs	r3, #3
 8000b12:	e0ba      	b.n	8000c8a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000b14:	4b5f      	ldr	r3, [pc, #380]	; (8000c94 <HAL_RCC_OscConfig+0x758>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d1f0      	bne.n	8000b02 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b20:	4b5c      	ldr	r3, [pc, #368]	; (8000c94 <HAL_RCC_OscConfig+0x758>)
 8000b22:	68da      	ldr	r2, [r3, #12]
 8000b24:	4b5c      	ldr	r3, [pc, #368]	; (8000c98 <HAL_RCC_OscConfig+0x75c>)
 8000b26:	4013      	ands	r3, r2
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000b30:	3a01      	subs	r2, #1
 8000b32:	0112      	lsls	r2, r2, #4
 8000b34:	4311      	orrs	r1, r2
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000b3a:	0212      	lsls	r2, r2, #8
 8000b3c:	4311      	orrs	r1, r2
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8000b42:	0852      	lsrs	r2, r2, #1
 8000b44:	3a01      	subs	r2, #1
 8000b46:	0552      	lsls	r2, r2, #21
 8000b48:	4311      	orrs	r1, r2
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000b4e:	0852      	lsrs	r2, r2, #1
 8000b50:	3a01      	subs	r2, #1
 8000b52:	0652      	lsls	r2, r2, #25
 8000b54:	4311      	orrs	r1, r2
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000b5a:	0912      	lsrs	r2, r2, #4
 8000b5c:	0452      	lsls	r2, r2, #17
 8000b5e:	430a      	orrs	r2, r1
 8000b60:	494c      	ldr	r1, [pc, #304]	; (8000c94 <HAL_RCC_OscConfig+0x758>)
 8000b62:	4313      	orrs	r3, r2
 8000b64:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000b66:	4b4b      	ldr	r3, [pc, #300]	; (8000c94 <HAL_RCC_OscConfig+0x758>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a4a      	ldr	r2, [pc, #296]	; (8000c94 <HAL_RCC_OscConfig+0x758>)
 8000b6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b70:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000b72:	4b48      	ldr	r3, [pc, #288]	; (8000c94 <HAL_RCC_OscConfig+0x758>)
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	4a47      	ldr	r2, [pc, #284]	; (8000c94 <HAL_RCC_OscConfig+0x758>)
 8000b78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b7c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b7e:	f7ff fb87 	bl	8000290 <HAL_GetTick>
 8000b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000b84:	e008      	b.n	8000b98 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b86:	f7ff fb83 	bl	8000290 <HAL_GetTick>
 8000b8a:	4602      	mov	r2, r0
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	1ad3      	subs	r3, r2, r3
 8000b90:	2b02      	cmp	r3, #2
 8000b92:	d901      	bls.n	8000b98 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8000b94:	2303      	movs	r3, #3
 8000b96:	e078      	b.n	8000c8a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000b98:	4b3e      	ldr	r3, [pc, #248]	; (8000c94 <HAL_RCC_OscConfig+0x758>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d0f0      	beq.n	8000b86 <HAL_RCC_OscConfig+0x64a>
 8000ba4:	e070      	b.n	8000c88 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ba6:	4b3b      	ldr	r3, [pc, #236]	; (8000c94 <HAL_RCC_OscConfig+0x758>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a3a      	ldr	r2, [pc, #232]	; (8000c94 <HAL_RCC_OscConfig+0x758>)
 8000bac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000bb0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8000bb2:	4b38      	ldr	r3, [pc, #224]	; (8000c94 <HAL_RCC_OscConfig+0x758>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d105      	bne.n	8000bca <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8000bbe:	4b35      	ldr	r3, [pc, #212]	; (8000c94 <HAL_RCC_OscConfig+0x758>)
 8000bc0:	68db      	ldr	r3, [r3, #12]
 8000bc2:	4a34      	ldr	r2, [pc, #208]	; (8000c94 <HAL_RCC_OscConfig+0x758>)
 8000bc4:	f023 0303 	bic.w	r3, r3, #3
 8000bc8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8000bca:	4b32      	ldr	r3, [pc, #200]	; (8000c94 <HAL_RCC_OscConfig+0x758>)
 8000bcc:	68db      	ldr	r3, [r3, #12]
 8000bce:	4a31      	ldr	r2, [pc, #196]	; (8000c94 <HAL_RCC_OscConfig+0x758>)
 8000bd0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8000bd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bd8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bda:	f7ff fb59 	bl	8000290 <HAL_GetTick>
 8000bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000be0:	e008      	b.n	8000bf4 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000be2:	f7ff fb55 	bl	8000290 <HAL_GetTick>
 8000be6:	4602      	mov	r2, r0
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	1ad3      	subs	r3, r2, r3
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d901      	bls.n	8000bf4 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	e04a      	b.n	8000c8a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000bf4:	4b27      	ldr	r3, [pc, #156]	; (8000c94 <HAL_RCC_OscConfig+0x758>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d1f0      	bne.n	8000be2 <HAL_RCC_OscConfig+0x6a6>
 8000c00:	e042      	b.n	8000c88 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d101      	bne.n	8000c0e <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e03d      	b.n	8000c8a <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8000c0e:	4b21      	ldr	r3, [pc, #132]	; (8000c94 <HAL_RCC_OscConfig+0x758>)
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	f003 0203 	and.w	r2, r3, #3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d130      	bne.n	8000c84 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d127      	bne.n	8000c84 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c3e:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d11f      	bne.n	8000c84 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000c4e:	2a07      	cmp	r2, #7
 8000c50:	bf14      	ite	ne
 8000c52:	2201      	movne	r2, #1
 8000c54:	2200      	moveq	r2, #0
 8000c56:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d113      	bne.n	8000c84 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c66:	085b      	lsrs	r3, r3, #1
 8000c68:	3b01      	subs	r3, #1
 8000c6a:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d109      	bne.n	8000c84 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	085b      	lsrs	r3, r3, #1
 8000c7c:	3b01      	subs	r3, #1
 8000c7e:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d001      	beq.n	8000c88 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8000c84:	2301      	movs	r3, #1
 8000c86:	e000      	b.n	8000c8a <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3720      	adds	r7, #32
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40021000 	.word	0x40021000
 8000c98:	f99d808c 	.word	0xf99d808c

08000c9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d101      	bne.n	8000cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	e0c8      	b.n	8000e42 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000cb0:	4b66      	ldr	r3, [pc, #408]	; (8000e4c <HAL_RCC_ClockConfig+0x1b0>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f003 0307 	and.w	r3, r3, #7
 8000cb8:	683a      	ldr	r2, [r7, #0]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d910      	bls.n	8000ce0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cbe:	4b63      	ldr	r3, [pc, #396]	; (8000e4c <HAL_RCC_ClockConfig+0x1b0>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f023 0207 	bic.w	r2, r3, #7
 8000cc6:	4961      	ldr	r1, [pc, #388]	; (8000e4c <HAL_RCC_ClockConfig+0x1b0>)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cce:	4b5f      	ldr	r3, [pc, #380]	; (8000e4c <HAL_RCC_ClockConfig+0x1b0>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	683a      	ldr	r2, [r7, #0]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d001      	beq.n	8000ce0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e0b0      	b.n	8000e42 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d04c      	beq.n	8000d86 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	2b03      	cmp	r3, #3
 8000cf2:	d107      	bne.n	8000d04 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000cf4:	4b56      	ldr	r3, [pc, #344]	; (8000e50 <HAL_RCC_ClockConfig+0x1b4>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d121      	bne.n	8000d44 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	e09e      	b.n	8000e42 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d107      	bne.n	8000d1c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d0c:	4b50      	ldr	r3, [pc, #320]	; (8000e50 <HAL_RCC_ClockConfig+0x1b4>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d115      	bne.n	8000d44 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	e092      	b.n	8000e42 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d107      	bne.n	8000d34 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d24:	4b4a      	ldr	r3, [pc, #296]	; (8000e50 <HAL_RCC_ClockConfig+0x1b4>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f003 0302 	and.w	r3, r3, #2
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d109      	bne.n	8000d44 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	e086      	b.n	8000e42 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d34:	4b46      	ldr	r3, [pc, #280]	; (8000e50 <HAL_RCC_ClockConfig+0x1b4>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d101      	bne.n	8000d44 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
 8000d42:	e07e      	b.n	8000e42 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000d44:	4b42      	ldr	r3, [pc, #264]	; (8000e50 <HAL_RCC_ClockConfig+0x1b4>)
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	f023 0203 	bic.w	r2, r3, #3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	493f      	ldr	r1, [pc, #252]	; (8000e50 <HAL_RCC_ClockConfig+0x1b4>)
 8000d52:	4313      	orrs	r3, r2
 8000d54:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000d56:	f7ff fa9b 	bl	8000290 <HAL_GetTick>
 8000d5a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d5c:	e00a      	b.n	8000d74 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d5e:	f7ff fa97 	bl	8000290 <HAL_GetTick>
 8000d62:	4602      	mov	r2, r0
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d901      	bls.n	8000d74 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8000d70:	2303      	movs	r3, #3
 8000d72:	e066      	b.n	8000e42 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d74:	4b36      	ldr	r3, [pc, #216]	; (8000e50 <HAL_RCC_ClockConfig+0x1b4>)
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	f003 020c 	and.w	r2, r3, #12
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d1eb      	bne.n	8000d5e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d008      	beq.n	8000da4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d92:	4b2f      	ldr	r3, [pc, #188]	; (8000e50 <HAL_RCC_ClockConfig+0x1b4>)
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	492c      	ldr	r1, [pc, #176]	; (8000e50 <HAL_RCC_ClockConfig+0x1b4>)
 8000da0:	4313      	orrs	r3, r2
 8000da2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000da4:	4b29      	ldr	r3, [pc, #164]	; (8000e4c <HAL_RCC_ClockConfig+0x1b0>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f003 0307 	and.w	r3, r3, #7
 8000dac:	683a      	ldr	r2, [r7, #0]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d210      	bcs.n	8000dd4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000db2:	4b26      	ldr	r3, [pc, #152]	; (8000e4c <HAL_RCC_ClockConfig+0x1b0>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f023 0207 	bic.w	r2, r3, #7
 8000dba:	4924      	ldr	r1, [pc, #144]	; (8000e4c <HAL_RCC_ClockConfig+0x1b0>)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dc2:	4b22      	ldr	r3, [pc, #136]	; (8000e4c <HAL_RCC_ClockConfig+0x1b0>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	683a      	ldr	r2, [r7, #0]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d001      	beq.n	8000dd4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e036      	b.n	8000e42 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f003 0304 	and.w	r3, r3, #4
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d008      	beq.n	8000df2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000de0:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <HAL_RCC_ClockConfig+0x1b4>)
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	4918      	ldr	r1, [pc, #96]	; (8000e50 <HAL_RCC_ClockConfig+0x1b4>)
 8000dee:	4313      	orrs	r3, r2
 8000df0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 0308 	and.w	r3, r3, #8
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d009      	beq.n	8000e12 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000dfe:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <HAL_RCC_ClockConfig+0x1b4>)
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	691b      	ldr	r3, [r3, #16]
 8000e0a:	00db      	lsls	r3, r3, #3
 8000e0c:	4910      	ldr	r1, [pc, #64]	; (8000e50 <HAL_RCC_ClockConfig+0x1b4>)
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e12:	f000 f825 	bl	8000e60 <HAL_RCC_GetSysClockFreq>
 8000e16:	4601      	mov	r1, r0
 8000e18:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <HAL_RCC_ClockConfig+0x1b4>)
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	091b      	lsrs	r3, r3, #4
 8000e1e:	f003 030f 	and.w	r3, r3, #15
 8000e22:	4a0c      	ldr	r2, [pc, #48]	; (8000e54 <HAL_RCC_ClockConfig+0x1b8>)
 8000e24:	5cd3      	ldrb	r3, [r2, r3]
 8000e26:	f003 031f 	and.w	r3, r3, #31
 8000e2a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <HAL_RCC_ClockConfig+0x1bc>)
 8000e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8000e32:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <HAL_RCC_ClockConfig+0x1c0>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff f9de 	bl	80001f8 <HAL_InitTick>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	72fb      	strb	r3, [r7, #11]

  return status;
 8000e40:	7afb      	ldrb	r3, [r7, #11]
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40022000 	.word	0x40022000
 8000e50:	40021000 	.word	0x40021000
 8000e54:	080012b0 	.word	0x080012b0
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	20000000 	.word	0x20000000

08000e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b089      	sub	sp, #36	; 0x24
 8000e64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e6e:	4b3d      	ldr	r3, [pc, #244]	; (8000f64 <HAL_RCC_GetSysClockFreq+0x104>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	f003 030c 	and.w	r3, r3, #12
 8000e76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e78:	4b3a      	ldr	r3, [pc, #232]	; (8000f64 <HAL_RCC_GetSysClockFreq+0x104>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	f003 0303 	and.w	r3, r3, #3
 8000e80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d005      	beq.n	8000e94 <HAL_RCC_GetSysClockFreq+0x34>
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	2b0c      	cmp	r3, #12
 8000e8c:	d121      	bne.n	8000ed2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d11e      	bne.n	8000ed2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000e94:	4b33      	ldr	r3, [pc, #204]	; (8000f64 <HAL_RCC_GetSysClockFreq+0x104>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f003 0308 	and.w	r3, r3, #8
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d107      	bne.n	8000eb0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000ea0:	4b30      	ldr	r3, [pc, #192]	; (8000f64 <HAL_RCC_GetSysClockFreq+0x104>)
 8000ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ea6:	0a1b      	lsrs	r3, r3, #8
 8000ea8:	f003 030f 	and.w	r3, r3, #15
 8000eac:	61fb      	str	r3, [r7, #28]
 8000eae:	e005      	b.n	8000ebc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000eb0:	4b2c      	ldr	r3, [pc, #176]	; (8000f64 <HAL_RCC_GetSysClockFreq+0x104>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	091b      	lsrs	r3, r3, #4
 8000eb6:	f003 030f 	and.w	r3, r3, #15
 8000eba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8000ebc:	4a2a      	ldr	r2, [pc, #168]	; (8000f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d10d      	bne.n	8000ee8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000ed0:	e00a      	b.n	8000ee8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	2b04      	cmp	r3, #4
 8000ed6:	d102      	bne.n	8000ede <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8000ed8:	4b24      	ldr	r3, [pc, #144]	; (8000f6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8000eda:	61bb      	str	r3, [r7, #24]
 8000edc:	e004      	b.n	8000ee8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	2b08      	cmp	r3, #8
 8000ee2:	d101      	bne.n	8000ee8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8000ee4:	4b22      	ldr	r3, [pc, #136]	; (8000f70 <HAL_RCC_GetSysClockFreq+0x110>)
 8000ee6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	2b0c      	cmp	r3, #12
 8000eec:	d133      	bne.n	8000f56 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000eee:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <HAL_RCC_GetSysClockFreq+0x104>)
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	f003 0303 	and.w	r3, r3, #3
 8000ef6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d002      	beq.n	8000f04 <HAL_RCC_GetSysClockFreq+0xa4>
 8000efe:	2b03      	cmp	r3, #3
 8000f00:	d003      	beq.n	8000f0a <HAL_RCC_GetSysClockFreq+0xaa>
 8000f02:	e005      	b.n	8000f10 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8000f04:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8000f06:	617b      	str	r3, [r7, #20]
      break;
 8000f08:	e005      	b.n	8000f16 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8000f0a:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <HAL_RCC_GetSysClockFreq+0x110>)
 8000f0c:	617b      	str	r3, [r7, #20]
      break;
 8000f0e:	e002      	b.n	8000f16 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	617b      	str	r3, [r7, #20]
      break;
 8000f14:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000f16:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <HAL_RCC_GetSysClockFreq+0x104>)
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	091b      	lsrs	r3, r3, #4
 8000f1c:	f003 0307 	and.w	r3, r3, #7
 8000f20:	3301      	adds	r3, #1
 8000f22:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <HAL_RCC_GetSysClockFreq+0x104>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	0a1b      	lsrs	r3, r3, #8
 8000f2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	fb02 f203 	mul.w	r2, r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000f3c:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <HAL_RCC_GetSysClockFreq+0x104>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	0e5b      	lsrs	r3, r3, #25
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	3301      	adds	r3, #1
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8000f4c:	697a      	ldr	r2, [r7, #20]
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f54:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8000f56:	69bb      	ldr	r3, [r7, #24]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3724      	adds	r7, #36	; 0x24
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	40021000 	.word	0x40021000
 8000f68:	080012c0 	.word	0x080012c0
 8000f6c:	00f42400 	.word	0x00f42400
 8000f70:	007a1200 	.word	0x007a1200

08000f74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000f80:	4b2a      	ldr	r3, [pc, #168]	; (800102c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8000f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d003      	beq.n	8000f94 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000f8c:	f7ff fa72 	bl	8000474 <HAL_PWREx_GetVoltageRange>
 8000f90:	6178      	str	r0, [r7, #20]
 8000f92:	e014      	b.n	8000fbe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8000f94:	4b25      	ldr	r3, [pc, #148]	; (800102c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8000f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f98:	4a24      	ldr	r2, [pc, #144]	; (800102c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8000f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	6593      	str	r3, [r2, #88]	; 0x58
 8000fa0:	4b22      	ldr	r3, [pc, #136]	; (800102c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8000fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8000fac:	f7ff fa62 	bl	8000474 <HAL_PWREx_GetVoltageRange>
 8000fb0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8000fb2:	4b1e      	ldr	r3, [pc, #120]	; (800102c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8000fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb6:	4a1d      	ldr	r2, [pc, #116]	; (800102c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8000fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fc4:	d10b      	bne.n	8000fde <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b80      	cmp	r3, #128	; 0x80
 8000fca:	d919      	bls.n	8001000 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2ba0      	cmp	r3, #160	; 0xa0
 8000fd0:	d902      	bls.n	8000fd8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	e013      	b.n	8001000 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000fd8:	2301      	movs	r3, #1
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	e010      	b.n	8001000 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b80      	cmp	r3, #128	; 0x80
 8000fe2:	d902      	bls.n	8000fea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	e00a      	b.n	8001000 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b80      	cmp	r3, #128	; 0x80
 8000fee:	d102      	bne.n	8000ff6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	e004      	b.n	8001000 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b70      	cmp	r3, #112	; 0x70
 8000ffa:	d101      	bne.n	8001000 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001000:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f023 0207 	bic.w	r2, r3, #7
 8001008:	4909      	ldr	r1, [pc, #36]	; (8001030 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001010:	4b07      	ldr	r3, [pc, #28]	; (8001030 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 0307 	and.w	r3, r3, #7
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	429a      	cmp	r2, r3
 800101c:	d001      	beq.n	8001022 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e000      	b.n	8001024 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40021000 	.word	0x40021000
 8001030:	40022000 	.word	0x40022000

08001034 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001038:	f7ff f8c6 	bl	80001c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103c:	f000 f801 	bl	8001042 <SystemClock_Config>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001040:	e7fe      	b.n	8001040 <main+0xc>

08001042 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b096      	sub	sp, #88	; 0x58
 8001046:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	2244      	movs	r2, #68	; 0x44
 800104e:	2100      	movs	r1, #0
 8001050:	4618      	mov	r0, r3
 8001052:	f000 f919 	bl	8001288 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001056:	463b      	mov	r3, r7
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001064:	2310      	movs	r3, #16
 8001066:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001068:	2301      	movs	r3, #1
 800106a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001070:	2360      	movs	r3, #96	; 0x60
 8001072:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001074:	2300      	movs	r3, #0
 8001076:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fa5d 	bl	800053c <HAL_RCC_OscConfig>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <SystemClock_Config+0x4a>
  {
    Error_Handler();
 8001088:	f000 f821 	bl	80010ce <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108c:	230f      	movs	r3, #15
 800108e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001090:	2300      	movs	r3, #0
 8001092:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010a0:	463b      	mov	r3, r7
 80010a2:	2100      	movs	r1, #0
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fdf9 	bl	8000c9c <HAL_RCC_ClockConfig>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80010b0:	f000 f80d 	bl	80010ce <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010b4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010b8:	f7ff f9ea 	bl	8000490 <HAL_PWREx_ControlVoltageScaling>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80010c2:	f000 f804 	bl	80010ce <Error_Handler>
  }
}
 80010c6:	bf00      	nop
 80010c8:	3758      	adds	r7, #88	; 0x58
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e2:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <HAL_MspInit+0x44>)
 80010e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e6:	4a0e      	ldr	r2, [pc, #56]	; (8001120 <HAL_MspInit+0x44>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6613      	str	r3, [r2, #96]	; 0x60
 80010ee:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <HAL_MspInit+0x44>)
 80010f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <HAL_MspInit+0x44>)
 80010fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fe:	4a08      	ldr	r2, [pc, #32]	; (8001120 <HAL_MspInit+0x44>)
 8001100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001104:	6593      	str	r3, [r2, #88]	; 0x58
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_MspInit+0x44>)
 8001108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40021000 	.word	0x40021000

08001124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001136:	e7fe      	b.n	8001136 <HardFault_Handler+0x4>

08001138 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800113c:	e7fe      	b.n	800113c <MemManage_Handler+0x4>

0800113e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001142:	e7fe      	b.n	8001142 <BusFault_Handler+0x4>

08001144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001148:	e7fe      	b.n	8001148 <UsageFault_Handler+0x4>

0800114a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001178:	f7ff f878 	bl	800026c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}

08001180 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001184:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <SystemInit+0x64>)
 8001186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800118a:	4a16      	ldr	r2, [pc, #88]	; (80011e4 <SystemInit+0x64>)
 800118c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001190:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <SystemInit+0x68>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a13      	ldr	r2, [pc, #76]	; (80011e8 <SystemInit+0x68>)
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <SystemInit+0x68>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80011a6:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <SystemInit+0x68>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a0f      	ldr	r2, [pc, #60]	; (80011e8 <SystemInit+0x68>)
 80011ac:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80011b0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80011b4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80011b6:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <SystemInit+0x68>)
 80011b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011bc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <SystemInit+0x68>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a09      	ldr	r2, [pc, #36]	; (80011e8 <SystemInit+0x68>)
 80011c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011c8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80011ca:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <SystemInit+0x68>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <SystemInit+0x64>)
 80011d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011d6:	609a      	str	r2, [r3, #8]
#endif
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000ed00 	.word	0xe000ed00
 80011e8:	40021000 	.word	0x40021000

080011ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001224 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80011f0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80011f2:	e003      	b.n	80011fc <LoopCopyDataInit>

080011f4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80011f6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80011f8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80011fa:	3104      	adds	r1, #4

080011fc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80011fc:	480b      	ldr	r0, [pc, #44]	; (800122c <LoopForever+0xa>)
	ldr	r3, =_edata
 80011fe:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001200:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001202:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001204:	d3f6      	bcc.n	80011f4 <CopyDataInit>
	ldr	r2, =_sbss
 8001206:	4a0b      	ldr	r2, [pc, #44]	; (8001234 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001208:	e002      	b.n	8001210 <LoopFillZerobss>

0800120a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800120a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800120c:	f842 3b04 	str.w	r3, [r2], #4

08001210 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001210:	4b09      	ldr	r3, [pc, #36]	; (8001238 <LoopForever+0x16>)
	cmp	r2, r3
 8001212:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001214:	d3f9      	bcc.n	800120a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001216:	f7ff ffb3 	bl	8001180 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800121a:	f000 f811 	bl	8001240 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800121e:	f7ff ff09 	bl	8001034 <main>

08001222 <LoopForever>:

LoopForever:
    b LoopForever
 8001222:	e7fe      	b.n	8001222 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001224:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001228:	080012f8 	.word	0x080012f8
	ldr	r0, =_sdata
 800122c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001230:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001234:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001238:	2000002c 	.word	0x2000002c

0800123c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800123c:	e7fe      	b.n	800123c <ADC1_2_IRQHandler>
	...

08001240 <__libc_init_array>:
 8001240:	b570      	push	{r4, r5, r6, lr}
 8001242:	4e0d      	ldr	r6, [pc, #52]	; (8001278 <__libc_init_array+0x38>)
 8001244:	4c0d      	ldr	r4, [pc, #52]	; (800127c <__libc_init_array+0x3c>)
 8001246:	1ba4      	subs	r4, r4, r6
 8001248:	10a4      	asrs	r4, r4, #2
 800124a:	2500      	movs	r5, #0
 800124c:	42a5      	cmp	r5, r4
 800124e:	d109      	bne.n	8001264 <__libc_init_array+0x24>
 8001250:	4e0b      	ldr	r6, [pc, #44]	; (8001280 <__libc_init_array+0x40>)
 8001252:	4c0c      	ldr	r4, [pc, #48]	; (8001284 <__libc_init_array+0x44>)
 8001254:	f000 f820 	bl	8001298 <_init>
 8001258:	1ba4      	subs	r4, r4, r6
 800125a:	10a4      	asrs	r4, r4, #2
 800125c:	2500      	movs	r5, #0
 800125e:	42a5      	cmp	r5, r4
 8001260:	d105      	bne.n	800126e <__libc_init_array+0x2e>
 8001262:	bd70      	pop	{r4, r5, r6, pc}
 8001264:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001268:	4798      	blx	r3
 800126a:	3501      	adds	r5, #1
 800126c:	e7ee      	b.n	800124c <__libc_init_array+0xc>
 800126e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001272:	4798      	blx	r3
 8001274:	3501      	adds	r5, #1
 8001276:	e7f2      	b.n	800125e <__libc_init_array+0x1e>
 8001278:	080012f0 	.word	0x080012f0
 800127c:	080012f0 	.word	0x080012f0
 8001280:	080012f0 	.word	0x080012f0
 8001284:	080012f4 	.word	0x080012f4

08001288 <memset>:
 8001288:	4402      	add	r2, r0
 800128a:	4603      	mov	r3, r0
 800128c:	4293      	cmp	r3, r2
 800128e:	d100      	bne.n	8001292 <memset+0xa>
 8001290:	4770      	bx	lr
 8001292:	f803 1b01 	strb.w	r1, [r3], #1
 8001296:	e7f9      	b.n	800128c <memset+0x4>

08001298 <_init>:
 8001298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800129a:	bf00      	nop
 800129c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800129e:	bc08      	pop	{r3}
 80012a0:	469e      	mov	lr, r3
 80012a2:	4770      	bx	lr

080012a4 <_fini>:
 80012a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012a6:	bf00      	nop
 80012a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012aa:	bc08      	pop	{r3}
 80012ac:	469e      	mov	lr, r3
 80012ae:	4770      	bx	lr
