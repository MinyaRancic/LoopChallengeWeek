
ComboLock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ffc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800618c  0800618c  0001618c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800628c  0800628c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800628c  0800628c  0001628c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006294  08006294  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006294  08006294  00016294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006298  08006298  00016298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800629c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000074  08006310  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08006310  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012235  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024bf  00000000  00000000  000322d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ec8  00000000  00000000  00034798  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000da0  00000000  00000000  00035660  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002949c  00000000  00000000  00036400  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000be4c  00000000  00000000  0005f89c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ff447  00000000  00000000  0006b6e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016ab2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044a8  00000000  00000000  0016abac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006174 	.word	0x08006174

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006174 	.word	0x08006174

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000576:	2300      	movs	r3, #0
 8000578:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800057a:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <HAL_Init+0x3c>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a0b      	ldr	r2, [pc, #44]	; (80005ac <HAL_Init+0x3c>)
 8000580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000584:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000586:	2003      	movs	r0, #3
 8000588:	f001 fe64 	bl	8002254 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800058c:	2000      	movs	r0, #0
 800058e:	f000 f80f 	bl	80005b0 <HAL_InitTick>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d002      	beq.n	800059e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000598:	2301      	movs	r3, #1
 800059a:	71fb      	strb	r3, [r7, #7]
 800059c:	e001      	b.n	80005a2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800059e:	f004 fc4b 	bl	8004e38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005a2:	79fb      	ldrb	r3, [r7, #7]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40022000 	.word	0x40022000

080005b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005b8:	2300      	movs	r3, #0
 80005ba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80005bc:	4b16      	ldr	r3, [pc, #88]	; (8000618 <HAL_InitTick+0x68>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d022      	beq.n	800060a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80005c4:	4b15      	ldr	r3, [pc, #84]	; (800061c <HAL_InitTick+0x6c>)
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	4b13      	ldr	r3, [pc, #76]	; (8000618 <HAL_InitTick+0x68>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80005d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d8:	4618      	mov	r0, r3
 80005da:	f001 fe70 	bl	80022be <HAL_SYSTICK_Config>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d10f      	bne.n	8000604 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2b0f      	cmp	r3, #15
 80005e8:	d809      	bhi.n	80005fe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005ea:	2200      	movs	r2, #0
 80005ec:	6879      	ldr	r1, [r7, #4]
 80005ee:	f04f 30ff 	mov.w	r0, #4294967295
 80005f2:	f001 fe3a 	bl	800226a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005f6:	4a0a      	ldr	r2, [pc, #40]	; (8000620 <HAL_InitTick+0x70>)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	e007      	b.n	800060e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	73fb      	strb	r3, [r7, #15]
 8000602:	e004      	b.n	800060e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000604:	2301      	movs	r3, #1
 8000606:	73fb      	strb	r3, [r7, #15]
 8000608:	e001      	b.n	800060e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800060a:	2301      	movs	r3, #1
 800060c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800060e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000610:	4618      	mov	r0, r3
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000004 	.word	0x20000004
 800061c:	2000000c 	.word	0x2000000c
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <HAL_IncTick+0x1c>)
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <HAL_IncTick+0x20>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4413      	add	r3, r2
 8000632:	4a03      	ldr	r2, [pc, #12]	; (8000640 <HAL_IncTick+0x1c>)
 8000634:	6013      	str	r3, [r2, #0]
}
 8000636:	bf00      	nop
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	200000b0 	.word	0x200000b0
 8000644:	20000004 	.word	0x20000004

08000648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  return uwTick;
 800064c:	4b03      	ldr	r3, [pc, #12]	; (800065c <HAL_GetTick+0x14>)
 800064e:	681b      	ldr	r3, [r3, #0]
}
 8000650:	4618      	mov	r0, r3
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	200000b0 	.word	0x200000b0

08000660 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	689b      	ldr	r3, [r3, #8]
 800066e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	431a      	orrs	r2, r3
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	609a      	str	r2, [r3, #8]
}
 800067a:	bf00      	nop
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr

08000686 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000686:	b480      	push	{r7}
 8000688:	b083      	sub	sp, #12
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
 800068e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	689b      	ldr	r3, [r3, #8]
 8000694:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	431a      	orrs	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	609a      	str	r2, [r3, #8]
}
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	689b      	ldr	r3, [r3, #8]
 80006b8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80006bc:	4618      	mov	r0, r3
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80006c8:	b490      	push	{r4, r7}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	60f8      	str	r0, [r7, #12]
 80006d0:	60b9      	str	r1, [r7, #8]
 80006d2:	607a      	str	r2, [r7, #4]
 80006d4:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	3360      	adds	r3, #96	; 0x60
 80006da:	461a      	mov	r2, r3
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	4413      	add	r3, r2
 80006e2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80006e4:	6822      	ldr	r2, [r4, #0]
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <LL_ADC_SetOffset+0x40>)
 80006e8:	4013      	ands	r3, r2
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80006f0:	683a      	ldr	r2, [r7, #0]
 80006f2:	430a      	orrs	r2, r1
 80006f4:	4313      	orrs	r3, r2
 80006f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006fa:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80006fc:	bf00      	nop
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bc90      	pop	{r4, r7}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	03fff000 	.word	0x03fff000

0800070c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800070c:	b490      	push	{r4, r7}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	3360      	adds	r3, #96	; 0x60
 800071a:	461a      	mov	r2, r3
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	4413      	add	r3, r2
 8000722:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000724:	6823      	ldr	r3, [r4, #0]
 8000726:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800072a:	4618      	mov	r0, r3
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bc90      	pop	{r4, r7}
 8000732:	4770      	bx	lr

08000734 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000734:	b490      	push	{r4, r7}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	3360      	adds	r3, #96	; 0x60
 8000744:	461a      	mov	r2, r3
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	4413      	add	r3, r2
 800074c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800074e:	6823      	ldr	r3, [r4, #0]
 8000750:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4313      	orrs	r3, r2
 8000758:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800075a:	bf00      	nop
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bc90      	pop	{r4, r7}
 8000762:	4770      	bx	lr

08000764 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000774:	2b00      	cmp	r3, #0
 8000776:	d101      	bne.n	800077c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000778:	2301      	movs	r3, #1
 800077a:	e000      	b.n	800077e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr

0800078a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800078a:	b490      	push	{r4, r7}
 800078c:	b084      	sub	sp, #16
 800078e:	af00      	add	r7, sp, #0
 8000790:	60f8      	str	r0, [r7, #12]
 8000792:	60b9      	str	r1, [r7, #8]
 8000794:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	3330      	adds	r3, #48	; 0x30
 800079a:	461a      	mov	r2, r3
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	0a1b      	lsrs	r3, r3, #8
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	f003 030c 	and.w	r3, r3, #12
 80007a6:	4413      	add	r3, r2
 80007a8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80007aa:	6822      	ldr	r2, [r4, #0]
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	f003 031f 	and.w	r3, r3, #31
 80007b2:	211f      	movs	r1, #31
 80007b4:	fa01 f303 	lsl.w	r3, r1, r3
 80007b8:	43db      	mvns	r3, r3
 80007ba:	401a      	ands	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	0e9b      	lsrs	r3, r3, #26
 80007c0:	f003 011f 	and.w	r1, r3, #31
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	f003 031f 	and.w	r3, r3, #31
 80007ca:	fa01 f303 	lsl.w	r3, r1, r3
 80007ce:	4313      	orrs	r3, r2
 80007d0:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80007d2:	bf00      	nop
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc90      	pop	{r4, r7}
 80007da:	4770      	bx	lr

080007dc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80007dc:	b490      	push	{r4, r7}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60f8      	str	r0, [r7, #12]
 80007e4:	60b9      	str	r1, [r7, #8]
 80007e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	3314      	adds	r3, #20
 80007ec:	461a      	mov	r2, r3
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	0e5b      	lsrs	r3, r3, #25
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	f003 0304 	and.w	r3, r3, #4
 80007f8:	4413      	add	r3, r2
 80007fa:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80007fc:	6822      	ldr	r2, [r4, #0]
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	0d1b      	lsrs	r3, r3, #20
 8000802:	f003 031f 	and.w	r3, r3, #31
 8000806:	2107      	movs	r1, #7
 8000808:	fa01 f303 	lsl.w	r3, r1, r3
 800080c:	43db      	mvns	r3, r3
 800080e:	401a      	ands	r2, r3
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	0d1b      	lsrs	r3, r3, #20
 8000814:	f003 031f 	and.w	r3, r3, #31
 8000818:	6879      	ldr	r1, [r7, #4]
 800081a:	fa01 f303 	lsl.w	r3, r1, r3
 800081e:	4313      	orrs	r3, r2
 8000820:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000822:	bf00      	nop
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bc90      	pop	{r4, r7}
 800082a:	4770      	bx	lr

0800082c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000844:	43db      	mvns	r3, r3
 8000846:	401a      	ands	r2, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	f003 0318 	and.w	r3, r3, #24
 800084e:	4908      	ldr	r1, [pc, #32]	; (8000870 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000850:	40d9      	lsrs	r1, r3
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	400b      	ands	r3, r1
 8000856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800085a:	431a      	orrs	r2, r3
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000862:	bf00      	nop
 8000864:	3714      	adds	r7, #20
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	0007ffff 	.word	0x0007ffff

08000874 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	689b      	ldr	r3, [r3, #8]
 8000880:	f003 031f 	and.w	r3, r3, #31
}
 8000884:	4618      	mov	r0, r3
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	689b      	ldr	r3, [r3, #8]
 800089c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	689b      	ldr	r3, [r3, #8]
 80008b8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80008bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80008c0:	687a      	ldr	r2, [r7, #4]
 80008c2:	6093      	str	r3, [r2, #8]
}
 80008c4:	bf00      	nop
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80008e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80008e4:	d101      	bne.n	80008ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80008e6:	2301      	movs	r3, #1
 80008e8:	e000      	b.n	80008ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80008ea:	2300      	movs	r3, #0
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000908:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800090c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	689b      	ldr	r3, [r3, #8]
 800092c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000930:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000934:	d101      	bne.n	800093a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000936:	2301      	movs	r3, #1
 8000938:	e000      	b.n	800093c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800093a:	2300      	movs	r3, #0
}
 800093c:	4618      	mov	r0, r3
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	689b      	ldr	r3, [r3, #8]
 8000954:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000958:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800095c:	f043 0201 	orr.w	r2, r3, #1
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	689b      	ldr	r3, [r3, #8]
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	2b01      	cmp	r3, #1
 8000982:	d101      	bne.n	8000988 <LL_ADC_IsEnabled+0x18>
 8000984:	2301      	movs	r3, #1
 8000986:	e000      	b.n	800098a <LL_ADC_IsEnabled+0x1a>
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000996:	b480      	push	{r7}
 8000998:	b083      	sub	sp, #12
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	689b      	ldr	r3, [r3, #8]
 80009a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80009a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80009aa:	f043 0204 	orr.w	r2, r3, #4
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80009be:	b480      	push	{r7}
 80009c0:	b083      	sub	sp, #12
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	689b      	ldr	r3, [r3, #8]
 80009ca:	f003 0304 	and.w	r3, r3, #4
 80009ce:	2b04      	cmp	r3, #4
 80009d0:	d101      	bne.n	80009d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80009d2:	2301      	movs	r3, #1
 80009d4:	e000      	b.n	80009d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80009d6:	2300      	movs	r3, #0
}
 80009d8:	4618      	mov	r0, r3
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	f003 0308 	and.w	r3, r3, #8
 80009f4:	2b08      	cmp	r3, #8
 80009f6:	d101      	bne.n	80009fc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80009f8:	2301      	movs	r3, #1
 80009fa:	e000      	b.n	80009fe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80009fc:	2300      	movs	r3, #0
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
	...

08000a0c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000a0c:	b590      	push	{r4, r7, lr}
 8000a0e:	b089      	sub	sp, #36	; 0x24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a14:	2300      	movs	r3, #0
 8000a16:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d101      	bne.n	8000a26 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	e134      	b.n	8000c90 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	691b      	ldr	r3, [r3, #16]
 8000a2a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d109      	bne.n	8000a48 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f004 fa29 	bl	8004e8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2200      	movs	r2, #0
 8000a44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff ff3f 	bl	80008d0 <LL_ADC_IsDeepPowerDownEnabled>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d004      	beq.n	8000a62 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ff25 	bl	80008ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff ff5a 	bl	8000920 <LL_ADC_IsInternalRegulatorEnabled>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d113      	bne.n	8000a9a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff ff3e 	bl	80008f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000a7c:	4b86      	ldr	r3, [pc, #536]	; (8000c98 <HAL_ADC_Init+0x28c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	099b      	lsrs	r3, r3, #6
 8000a82:	4a86      	ldr	r2, [pc, #536]	; (8000c9c <HAL_ADC_Init+0x290>)
 8000a84:	fba2 2303 	umull	r2, r3, r2, r3
 8000a88:	099b      	lsrs	r3, r3, #6
 8000a8a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000a8c:	e002      	b.n	8000a94 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	3b01      	subs	r3, #1
 8000a92:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d1f9      	bne.n	8000a8e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff ff3e 	bl	8000920 <LL_ADC_IsInternalRegulatorEnabled>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d10d      	bne.n	8000ac6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000aae:	f043 0210 	orr.w	r2, r3, #16
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aba:	f043 0201 	orr.w	r2, r3, #1
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff ff77 	bl	80009be <LL_ADC_REG_IsConversionOngoing>
 8000ad0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ad6:	f003 0310 	and.w	r3, r3, #16
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	f040 80cf 	bne.w	8000c7e <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	f040 80cb 	bne.w	8000c7e <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000aec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000af0:	f043 0202 	orr.w	r2, r3, #2
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff ff37 	bl	8000970 <LL_ADC_IsEnabled>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d115      	bne.n	8000b34 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000b08:	4865      	ldr	r0, [pc, #404]	; (8000ca0 <HAL_ADC_Init+0x294>)
 8000b0a:	f7ff ff31 	bl	8000970 <LL_ADC_IsEnabled>
 8000b0e:	4604      	mov	r4, r0
 8000b10:	4864      	ldr	r0, [pc, #400]	; (8000ca4 <HAL_ADC_Init+0x298>)
 8000b12:	f7ff ff2d 	bl	8000970 <LL_ADC_IsEnabled>
 8000b16:	4603      	mov	r3, r0
 8000b18:	431c      	orrs	r4, r3
 8000b1a:	4863      	ldr	r0, [pc, #396]	; (8000ca8 <HAL_ADC_Init+0x29c>)
 8000b1c:	f7ff ff28 	bl	8000970 <LL_ADC_IsEnabled>
 8000b20:	4603      	mov	r3, r0
 8000b22:	4323      	orrs	r3, r4
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d105      	bne.n	8000b34 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	485f      	ldr	r0, [pc, #380]	; (8000cac <HAL_ADC_Init+0x2a0>)
 8000b30:	f7ff fd96 	bl	8000660 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	7e5b      	ldrb	r3, [r3, #25]
 8000b38:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000b3e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000b44:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000b4a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b52:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000b54:	4313      	orrs	r3, r2
 8000b56:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d106      	bne.n	8000b70 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b66:	3b01      	subs	r3, #1
 8000b68:	045b      	lsls	r3, r3, #17
 8000b6a:	69ba      	ldr	r2, [r7, #24]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d009      	beq.n	8000b8c <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b7c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b84:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000b86:	69ba      	ldr	r2, [r7, #24]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	68da      	ldr	r2, [r3, #12]
 8000b92:	4b47      	ldr	r3, [pc, #284]	; (8000cb0 <HAL_ADC_Init+0x2a4>)
 8000b94:	4013      	ands	r3, r2
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	6812      	ldr	r2, [r2, #0]
 8000b9a:	69b9      	ldr	r1, [r7, #24]
 8000b9c:	430b      	orrs	r3, r1
 8000b9e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff0a 	bl	80009be <LL_ADC_REG_IsConversionOngoing>
 8000baa:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff ff17 	bl	80009e4 <LL_ADC_INJ_IsConversionOngoing>
 8000bb6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d13d      	bne.n	8000c3a <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d13a      	bne.n	8000c3a <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000bc8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000bd0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000be0:	f023 0302 	bic.w	r3, r3, #2
 8000be4:	687a      	ldr	r2, [r7, #4]
 8000be6:	6812      	ldr	r2, [r2, #0]
 8000be8:	69b9      	ldr	r1, [r7, #24]
 8000bea:	430b      	orrs	r3, r1
 8000bec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d118      	bne.n	8000c2a <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	691b      	ldr	r3, [r3, #16]
 8000bfe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000c02:	f023 0304 	bic.w	r3, r3, #4
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000c0e:	4311      	orrs	r1, r2
 8000c10:	687a      	ldr	r2, [r7, #4]
 8000c12:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000c14:	4311      	orrs	r1, r2
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000c1a:	430a      	orrs	r2, r1
 8000c1c:	431a      	orrs	r2, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f042 0201 	orr.w	r2, r2, #1
 8000c26:	611a      	str	r2, [r3, #16]
 8000c28:	e007      	b.n	8000c3a <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	691a      	ldr	r2, [r3, #16]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f022 0201 	bic.w	r2, r2, #1
 8000c38:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	691b      	ldr	r3, [r3, #16]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d10c      	bne.n	8000c5c <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c48:	f023 010f 	bic.w	r1, r3, #15
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	69db      	ldr	r3, [r3, #28]
 8000c50:	1e5a      	subs	r2, r3, #1
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	430a      	orrs	r2, r1
 8000c58:	631a      	str	r2, [r3, #48]	; 0x30
 8000c5a:	e007      	b.n	8000c6c <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f022 020f 	bic.w	r2, r2, #15
 8000c6a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c70:	f023 0303 	bic.w	r3, r3, #3
 8000c74:	f043 0201 	orr.w	r2, r3, #1
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	655a      	str	r2, [r3, #84]	; 0x54
 8000c7c:	e007      	b.n	8000c8e <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c82:	f043 0210 	orr.w	r2, r3, #16
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000c8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3724      	adds	r7, #36	; 0x24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd90      	pop	{r4, r7, pc}
 8000c98:	2000000c 	.word	0x2000000c
 8000c9c:	053e2d63 	.word	0x053e2d63
 8000ca0:	50040000 	.word	0x50040000
 8000ca4:	50040100 	.word	0x50040100
 8000ca8:	50040200 	.word	0x50040200
 8000cac:	50040300 	.word	0x50040300
 8000cb0:	fff0c007 	.word	0xfff0c007

08000cb4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000cbc:	4857      	ldr	r0, [pc, #348]	; (8000e1c <HAL_ADC_Start+0x168>)
 8000cbe:	f7ff fdd9 	bl	8000874 <LL_ADC_GetMultimode>
 8000cc2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fe78 	bl	80009be <LL_ADC_REG_IsConversionOngoing>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	f040 809c 	bne.w	8000e0e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d101      	bne.n	8000ce4 <HAL_ADC_Start+0x30>
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	e097      	b.n	8000e14 <HAL_ADC_Start+0x160>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f000 fcdd 	bl	80016ac <ADC_Enable>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000cf6:	7dfb      	ldrb	r3, [r7, #23]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	f040 8083 	bne.w	8000e04 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d02:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000d06:	f023 0301 	bic.w	r3, r3, #1
 8000d0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a42      	ldr	r2, [pc, #264]	; (8000e20 <HAL_ADC_Start+0x16c>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d002      	beq.n	8000d22 <HAL_ADC_Start+0x6e>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	e000      	b.n	8000d24 <HAL_ADC_Start+0x70>
 8000d22:	4b40      	ldr	r3, [pc, #256]	; (8000e24 <HAL_ADC_Start+0x170>)
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	6812      	ldr	r2, [r2, #0]
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d002      	beq.n	8000d32 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d105      	bne.n	8000d3e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d36:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d4a:	d106      	bne.n	8000d5a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d50:	f023 0206 	bic.w	r2, r3, #6
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	659a      	str	r2, [r3, #88]	; 0x58
 8000d58:	e002      	b.n	8000d60 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	221c      	movs	r2, #28
 8000d66:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a2a      	ldr	r2, [pc, #168]	; (8000e20 <HAL_ADC_Start+0x16c>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d002      	beq.n	8000d80 <HAL_ADC_Start+0xcc>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	e000      	b.n	8000d82 <HAL_ADC_Start+0xce>
 8000d80:	4b28      	ldr	r3, [pc, #160]	; (8000e24 <HAL_ADC_Start+0x170>)
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	6812      	ldr	r2, [r2, #0]
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d008      	beq.n	8000d9c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d005      	beq.n	8000d9c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	2b05      	cmp	r3, #5
 8000d94:	d002      	beq.n	8000d9c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	2b09      	cmp	r3, #9
 8000d9a:	d114      	bne.n	8000dc6 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d007      	beq.n	8000dba <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000db2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff fde9 	bl	8000996 <LL_ADC_REG_StartConversion>
 8000dc4:	e025      	b.n	8000e12 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a12      	ldr	r2, [pc, #72]	; (8000e20 <HAL_ADC_Start+0x16c>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d002      	beq.n	8000de2 <HAL_ADC_Start+0x12e>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	e000      	b.n	8000de4 <HAL_ADC_Start+0x130>
 8000de2:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <HAL_ADC_Start+0x170>)
 8000de4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d00f      	beq.n	8000e12 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000df6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000dfa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	655a      	str	r2, [r3, #84]	; 0x54
 8000e02:	e006      	b.n	8000e12 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2200      	movs	r2, #0
 8000e08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000e0c:	e001      	b.n	8000e12 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8000e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	50040300 	.word	0x50040300
 8000e20:	50040100 	.word	0x50040100
 8000e24:	50040000 	.word	0x50040000

08000e28 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b088      	sub	sp, #32
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000e32:	4862      	ldr	r0, [pc, #392]	; (8000fbc <HAL_ADC_PollForConversion+0x194>)
 8000e34:	f7ff fd1e 	bl	8000874 <LL_ADC_GetMultimode>
 8000e38:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	2b08      	cmp	r3, #8
 8000e40:	d102      	bne.n	8000e48 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8000e42:	2308      	movs	r3, #8
 8000e44:	61fb      	str	r3, [r7, #28]
 8000e46:	e02a      	b.n	8000e9e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d005      	beq.n	8000e5a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	2b05      	cmp	r3, #5
 8000e52:	d002      	beq.n	8000e5a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	2b09      	cmp	r3, #9
 8000e58:	d111      	bne.n	8000e7e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d007      	beq.n	8000e78 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e6c:	f043 0220 	orr.w	r2, r3, #32
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	e09d      	b.n	8000fb4 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8000e78:	2304      	movs	r3, #4
 8000e7a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8000e7c:	e00f      	b.n	8000e9e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8000e7e:	484f      	ldr	r0, [pc, #316]	; (8000fbc <HAL_ADC_PollForConversion+0x194>)
 8000e80:	f7ff fd06 	bl	8000890 <LL_ADC_GetMultiDMATransfer>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d007      	beq.n	8000e9a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e8e:	f043 0220 	orr.w	r2, r3, #32
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e08c      	b.n	8000fb4 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8000e9e:	f7ff fbd3 	bl	8000648 <HAL_GetTick>
 8000ea2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000ea4:	e01a      	b.n	8000edc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eac:	d016      	beq.n	8000edc <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8000eae:	f7ff fbcb 	bl	8000648 <HAL_GetTick>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	683a      	ldr	r2, [r7, #0]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d302      	bcc.n	8000ec4 <HAL_ADC_PollForConversion+0x9c>
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d10b      	bne.n	8000edc <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ec8:	f043 0204 	orr.w	r2, r3, #4
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	e06b      	b.n	8000fb4 <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d0dd      	beq.n	8000ea6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000eee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fc32 	bl	8000764 <LL_ADC_REG_IsTriggerSourceSWStart>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d01c      	beq.n	8000f40 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	7e5b      	ldrb	r3, [r3, #25]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d118      	bne.n	8000f40 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 0308 	and.w	r3, r3, #8
 8000f18:	2b08      	cmp	r3, #8
 8000f1a:	d111      	bne.n	8000f40 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d105      	bne.n	8000f40 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f38:	f043 0201 	orr.w	r2, r3, #1
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a1e      	ldr	r2, [pc, #120]	; (8000fc0 <HAL_ADC_PollForConversion+0x198>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d002      	beq.n	8000f50 <HAL_ADC_PollForConversion+0x128>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	e000      	b.n	8000f52 <HAL_ADC_PollForConversion+0x12a>
 8000f50:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <HAL_ADC_PollForConversion+0x19c>)
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	6812      	ldr	r2, [r2, #0]
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d008      	beq.n	8000f6c <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d005      	beq.n	8000f6c <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	2b05      	cmp	r3, #5
 8000f64:	d002      	beq.n	8000f6c <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	2b09      	cmp	r3, #9
 8000f6a:	d104      	bne.n	8000f76 <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	68db      	ldr	r3, [r3, #12]
 8000f72:	61bb      	str	r3, [r7, #24]
 8000f74:	e00c      	b.n	8000f90 <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a11      	ldr	r2, [pc, #68]	; (8000fc0 <HAL_ADC_PollForConversion+0x198>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d002      	beq.n	8000f86 <HAL_ADC_PollForConversion+0x15e>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	e000      	b.n	8000f88 <HAL_ADC_PollForConversion+0x160>
 8000f86:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <HAL_ADC_PollForConversion+0x19c>)
 8000f88:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	2b08      	cmp	r3, #8
 8000f94:	d104      	bne.n	8000fa0 <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2208      	movs	r2, #8
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	e008      	b.n	8000fb2 <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d103      	bne.n	8000fb2 <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	220c      	movs	r2, #12
 8000fb0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3720      	adds	r7, #32
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	50040300 	.word	0x50040300
 8000fc0:	50040100 	.word	0x50040100
 8000fc4:	50040000 	.word	0x50040000

08000fc8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b0a6      	sub	sp, #152	; 0x98
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d101      	bne.n	8001006 <HAL_ADC_ConfigChannel+0x22>
 8001002:	2302      	movs	r3, #2
 8001004:	e348      	b.n	8001698 <HAL_ADC_ConfigChannel+0x6b4>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2201      	movs	r2, #1
 800100a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fcd3 	bl	80009be <LL_ADC_REG_IsConversionOngoing>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	f040 8329 	bne.w	8001672 <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	2b05      	cmp	r3, #5
 8001026:	d824      	bhi.n	8001072 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	3b02      	subs	r3, #2
 800102e:	2b03      	cmp	r3, #3
 8001030:	d81b      	bhi.n	800106a <HAL_ADC_ConfigChannel+0x86>
 8001032:	a201      	add	r2, pc, #4	; (adr r2, 8001038 <HAL_ADC_ConfigChannel+0x54>)
 8001034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001038:	08001049 	.word	0x08001049
 800103c:	08001051 	.word	0x08001051
 8001040:	08001059 	.word	0x08001059
 8001044:	08001061 	.word	0x08001061
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	220c      	movs	r2, #12
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	e011      	b.n	8001074 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	2212      	movs	r2, #18
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	e00d      	b.n	8001074 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	2218      	movs	r2, #24
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	e009      	b.n	8001074 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	e004      	b.n	8001074 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	2206      	movs	r2, #6
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	e000      	b.n	8001074 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001072:	bf00      	nop
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6818      	ldr	r0, [r3, #0]
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	6859      	ldr	r1, [r3, #4]
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	f7ff fb82 	bl	800078a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fc97 	bl	80009be <LL_ADC_REG_IsConversionOngoing>
 8001090:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fca3 	bl	80009e4 <LL_ADC_INJ_IsConversionOngoing>
 800109e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80010a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f040 8148 	bne.w	800133c <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80010ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f040 8143 	bne.w	800133c <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6818      	ldr	r0, [r3, #0]
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	6819      	ldr	r1, [r3, #0]
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	461a      	mov	r2, r3
 80010c4:	f7ff fb8a 	bl	80007dc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	695a      	ldr	r2, [r3, #20]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	08db      	lsrs	r3, r3, #3
 80010d4:	f003 0303 	and.w	r3, r3, #3
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	691b      	ldr	r3, [r3, #16]
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	d00a      	beq.n	8001100 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6818      	ldr	r0, [r3, #0]
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	6919      	ldr	r1, [r3, #16]
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80010fa:	f7ff fae5 	bl	80006c8 <LL_ADC_SetOffset>
 80010fe:	e11d      	b.n	800133c <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fb00 	bl	800070c <LL_ADC_GetOffsetChannel>
 800110c:	4603      	mov	r3, r0
 800110e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001112:	2b00      	cmp	r3, #0
 8001114:	d10a      	bne.n	800112c <HAL_ADC_ConfigChannel+0x148>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2100      	movs	r1, #0
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff faf5 	bl	800070c <LL_ADC_GetOffsetChannel>
 8001122:	4603      	mov	r3, r0
 8001124:	0e9b      	lsrs	r3, r3, #26
 8001126:	f003 021f 	and.w	r2, r3, #31
 800112a:	e012      	b.n	8001152 <HAL_ADC_ConfigChannel+0x16e>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff faea 	bl	800070c <LL_ADC_GetOffsetChannel>
 8001138:	4603      	mov	r3, r0
 800113a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800113e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001142:	fa93 f3a3 	rbit	r3, r3
 8001146:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001148:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800114a:	fab3 f383 	clz	r3, r3
 800114e:	b2db      	uxtb	r3, r3
 8001150:	461a      	mov	r2, r3
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800115a:	2b00      	cmp	r3, #0
 800115c:	d105      	bne.n	800116a <HAL_ADC_ConfigChannel+0x186>
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	0e9b      	lsrs	r3, r3, #26
 8001164:	f003 031f 	and.w	r3, r3, #31
 8001168:	e00a      	b.n	8001180 <HAL_ADC_ConfigChannel+0x19c>
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001170:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001172:	fa93 f3a3 	rbit	r3, r3
 8001176:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8001178:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800117a:	fab3 f383 	clz	r3, r3
 800117e:	b2db      	uxtb	r3, r3
 8001180:	429a      	cmp	r2, r3
 8001182:	d106      	bne.n	8001192 <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2200      	movs	r2, #0
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff fad1 	bl	8000734 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2101      	movs	r1, #1
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff fab7 	bl	800070c <LL_ADC_GetOffsetChannel>
 800119e:	4603      	mov	r3, r0
 80011a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d10a      	bne.n	80011be <HAL_ADC_ConfigChannel+0x1da>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2101      	movs	r1, #1
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff faac 	bl	800070c <LL_ADC_GetOffsetChannel>
 80011b4:	4603      	mov	r3, r0
 80011b6:	0e9b      	lsrs	r3, r3, #26
 80011b8:	f003 021f 	and.w	r2, r3, #31
 80011bc:	e010      	b.n	80011e0 <HAL_ADC_ConfigChannel+0x1fc>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2101      	movs	r1, #1
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff faa1 	bl	800070c <LL_ADC_GetOffsetChannel>
 80011ca:	4603      	mov	r3, r0
 80011cc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80011d0:	fa93 f3a3 	rbit	r3, r3
 80011d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80011d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80011d8:	fab3 f383 	clz	r3, r3
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	461a      	mov	r2, r3
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d105      	bne.n	80011f8 <HAL_ADC_ConfigChannel+0x214>
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	0e9b      	lsrs	r3, r3, #26
 80011f2:	f003 031f 	and.w	r3, r3, #31
 80011f6:	e00a      	b.n	800120e <HAL_ADC_ConfigChannel+0x22a>
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001200:	fa93 f3a3 	rbit	r3, r3
 8001204:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001206:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001208:	fab3 f383 	clz	r3, r3
 800120c:	b2db      	uxtb	r3, r3
 800120e:	429a      	cmp	r2, r3
 8001210:	d106      	bne.n	8001220 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2200      	movs	r2, #0
 8001218:	2101      	movs	r1, #1
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff fa8a 	bl	8000734 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2102      	movs	r1, #2
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff fa70 	bl	800070c <LL_ADC_GetOffsetChannel>
 800122c:	4603      	mov	r3, r0
 800122e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001232:	2b00      	cmp	r3, #0
 8001234:	d10a      	bne.n	800124c <HAL_ADC_ConfigChannel+0x268>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2102      	movs	r1, #2
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff fa65 	bl	800070c <LL_ADC_GetOffsetChannel>
 8001242:	4603      	mov	r3, r0
 8001244:	0e9b      	lsrs	r3, r3, #26
 8001246:	f003 021f 	and.w	r2, r3, #31
 800124a:	e010      	b.n	800126e <HAL_ADC_ConfigChannel+0x28a>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2102      	movs	r1, #2
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff fa5a 	bl	800070c <LL_ADC_GetOffsetChannel>
 8001258:	4603      	mov	r3, r0
 800125a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800125c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800125e:	fa93 f3a3 	rbit	r3, r3
 8001262:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8001264:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001266:	fab3 f383 	clz	r3, r3
 800126a:	b2db      	uxtb	r3, r3
 800126c:	461a      	mov	r2, r3
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001276:	2b00      	cmp	r3, #0
 8001278:	d105      	bne.n	8001286 <HAL_ADC_ConfigChannel+0x2a2>
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	0e9b      	lsrs	r3, r3, #26
 8001280:	f003 031f 	and.w	r3, r3, #31
 8001284:	e00a      	b.n	800129c <HAL_ADC_ConfigChannel+0x2b8>
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800128e:	fa93 f3a3 	rbit	r3, r3
 8001292:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001296:	fab3 f383 	clz	r3, r3
 800129a:	b2db      	uxtb	r3, r3
 800129c:	429a      	cmp	r2, r3
 800129e:	d106      	bne.n	80012ae <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2200      	movs	r2, #0
 80012a6:	2102      	movs	r1, #2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fa43 	bl	8000734 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2103      	movs	r1, #3
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fa29 	bl	800070c <LL_ADC_GetOffsetChannel>
 80012ba:	4603      	mov	r3, r0
 80012bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d10a      	bne.n	80012da <HAL_ADC_ConfigChannel+0x2f6>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2103      	movs	r1, #3
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fa1e 	bl	800070c <LL_ADC_GetOffsetChannel>
 80012d0:	4603      	mov	r3, r0
 80012d2:	0e9b      	lsrs	r3, r3, #26
 80012d4:	f003 021f 	and.w	r2, r3, #31
 80012d8:	e010      	b.n	80012fc <HAL_ADC_ConfigChannel+0x318>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2103      	movs	r1, #3
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fa13 	bl	800070c <LL_ADC_GetOffsetChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012ec:	fa93 f3a3 	rbit	r3, r3
 80012f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80012f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012f4:	fab3 f383 	clz	r3, r3
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	461a      	mov	r2, r3
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001304:	2b00      	cmp	r3, #0
 8001306:	d105      	bne.n	8001314 <HAL_ADC_ConfigChannel+0x330>
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	0e9b      	lsrs	r3, r3, #26
 800130e:	f003 031f 	and.w	r3, r3, #31
 8001312:	e00a      	b.n	800132a <HAL_ADC_ConfigChannel+0x346>
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800131a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800131c:	fa93 f3a3 	rbit	r3, r3
 8001320:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8001322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001324:	fab3 f383 	clz	r3, r3
 8001328:	b2db      	uxtb	r3, r3
 800132a:	429a      	cmp	r2, r3
 800132c:	d106      	bne.n	800133c <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2200      	movs	r2, #0
 8001334:	2103      	movs	r1, #3
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f9fc 	bl	8000734 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fb15 	bl	8000970 <LL_ADC_IsEnabled>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	f040 810c 	bne.w	8001566 <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6818      	ldr	r0, [r3, #0]
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	6819      	ldr	r1, [r3, #0]
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	461a      	mov	r2, r3
 800135c:	f7ff fa66 	bl	800082c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	4aad      	ldr	r2, [pc, #692]	; (800161c <HAL_ADC_ConfigChannel+0x638>)
 8001366:	4293      	cmp	r3, r2
 8001368:	f040 80fd 	bne.w	8001566 <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001378:	2b00      	cmp	r3, #0
 800137a:	d10b      	bne.n	8001394 <HAL_ADC_ConfigChannel+0x3b0>
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	0e9b      	lsrs	r3, r3, #26
 8001382:	3301      	adds	r3, #1
 8001384:	f003 031f 	and.w	r3, r3, #31
 8001388:	2b09      	cmp	r3, #9
 800138a:	bf94      	ite	ls
 800138c:	2301      	movls	r3, #1
 800138e:	2300      	movhi	r3, #0
 8001390:	b2db      	uxtb	r3, r3
 8001392:	e012      	b.n	80013ba <HAL_ADC_ConfigChannel+0x3d6>
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800139a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800139c:	fa93 f3a3 	rbit	r3, r3
 80013a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80013a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013a4:	fab3 f383 	clz	r3, r3
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	3301      	adds	r3, #1
 80013ac:	f003 031f 	and.w	r3, r3, #31
 80013b0:	2b09      	cmp	r3, #9
 80013b2:	bf94      	ite	ls
 80013b4:	2301      	movls	r3, #1
 80013b6:	2300      	movhi	r3, #0
 80013b8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d064      	beq.n	8001488 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d107      	bne.n	80013da <HAL_ADC_ConfigChannel+0x3f6>
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	0e9b      	lsrs	r3, r3, #26
 80013d0:	3301      	adds	r3, #1
 80013d2:	069b      	lsls	r3, r3, #26
 80013d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80013d8:	e00e      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x414>
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013e2:	fa93 f3a3 	rbit	r3, r3
 80013e6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80013e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ea:	fab3 f383 	clz	r3, r3
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	3301      	adds	r3, #1
 80013f2:	069b      	lsls	r3, r3, #26
 80013f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001400:	2b00      	cmp	r3, #0
 8001402:	d109      	bne.n	8001418 <HAL_ADC_ConfigChannel+0x434>
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	0e9b      	lsrs	r3, r3, #26
 800140a:	3301      	adds	r3, #1
 800140c:	f003 031f 	and.w	r3, r3, #31
 8001410:	2101      	movs	r1, #1
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	e010      	b.n	800143a <HAL_ADC_ConfigChannel+0x456>
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001420:	fa93 f3a3 	rbit	r3, r3
 8001424:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001428:	fab3 f383 	clz	r3, r3
 800142c:	b2db      	uxtb	r3, r3
 800142e:	3301      	adds	r3, #1
 8001430:	f003 031f 	and.w	r3, r3, #31
 8001434:	2101      	movs	r1, #1
 8001436:	fa01 f303 	lsl.w	r3, r1, r3
 800143a:	ea42 0103 	orr.w	r1, r2, r3
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001446:	2b00      	cmp	r3, #0
 8001448:	d10a      	bne.n	8001460 <HAL_ADC_ConfigChannel+0x47c>
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	0e9b      	lsrs	r3, r3, #26
 8001450:	3301      	adds	r3, #1
 8001452:	f003 021f 	and.w	r2, r3, #31
 8001456:	4613      	mov	r3, r2
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	4413      	add	r3, r2
 800145c:	051b      	lsls	r3, r3, #20
 800145e:	e011      	b.n	8001484 <HAL_ADC_ConfigChannel+0x4a0>
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001468:	fa93 f3a3 	rbit	r3, r3
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	fab3 f383 	clz	r3, r3
 8001474:	b2db      	uxtb	r3, r3
 8001476:	3301      	adds	r3, #1
 8001478:	f003 021f 	and.w	r2, r3, #31
 800147c:	4613      	mov	r3, r2
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	4413      	add	r3, r2
 8001482:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001484:	430b      	orrs	r3, r1
 8001486:	e069      	b.n	800155c <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001490:	2b00      	cmp	r3, #0
 8001492:	d107      	bne.n	80014a4 <HAL_ADC_ConfigChannel+0x4c0>
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	0e9b      	lsrs	r3, r3, #26
 800149a:	3301      	adds	r3, #1
 800149c:	069b      	lsls	r3, r3, #26
 800149e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80014a2:	e00e      	b.n	80014c2 <HAL_ADC_ConfigChannel+0x4de>
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014aa:	6a3b      	ldr	r3, [r7, #32]
 80014ac:	fa93 f3a3 	rbit	r3, r3
 80014b0:	61fb      	str	r3, [r7, #28]
  return result;
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	fab3 f383 	clz	r3, r3
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	3301      	adds	r3, #1
 80014bc:	069b      	lsls	r3, r3, #26
 80014be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d109      	bne.n	80014e2 <HAL_ADC_ConfigChannel+0x4fe>
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	0e9b      	lsrs	r3, r3, #26
 80014d4:	3301      	adds	r3, #1
 80014d6:	f003 031f 	and.w	r3, r3, #31
 80014da:	2101      	movs	r1, #1
 80014dc:	fa01 f303 	lsl.w	r3, r1, r3
 80014e0:	e010      	b.n	8001504 <HAL_ADC_ConfigChannel+0x520>
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	fa93 f3a3 	rbit	r3, r3
 80014ee:	617b      	str	r3, [r7, #20]
  return result;
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	fab3 f383 	clz	r3, r3
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	3301      	adds	r3, #1
 80014fa:	f003 031f 	and.w	r3, r3, #31
 80014fe:	2101      	movs	r1, #1
 8001500:	fa01 f303 	lsl.w	r3, r1, r3
 8001504:	ea42 0103 	orr.w	r1, r2, r3
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001510:	2b00      	cmp	r3, #0
 8001512:	d10d      	bne.n	8001530 <HAL_ADC_ConfigChannel+0x54c>
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	0e9b      	lsrs	r3, r3, #26
 800151a:	3301      	adds	r3, #1
 800151c:	f003 021f 	and.w	r2, r3, #31
 8001520:	4613      	mov	r3, r2
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	4413      	add	r3, r2
 8001526:	3b1e      	subs	r3, #30
 8001528:	051b      	lsls	r3, r3, #20
 800152a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800152e:	e014      	b.n	800155a <HAL_ADC_ConfigChannel+0x576>
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	fa93 f3a3 	rbit	r3, r3
 800153c:	60fb      	str	r3, [r7, #12]
  return result;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	fab3 f383 	clz	r3, r3
 8001544:	b2db      	uxtb	r3, r3
 8001546:	3301      	adds	r3, #1
 8001548:	f003 021f 	and.w	r2, r3, #31
 800154c:	4613      	mov	r3, r2
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	4413      	add	r3, r2
 8001552:	3b1e      	subs	r3, #30
 8001554:	051b      	lsls	r3, r3, #20
 8001556:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800155a:	430b      	orrs	r3, r1
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	6892      	ldr	r2, [r2, #8]
 8001560:	4619      	mov	r1, r3
 8001562:	f7ff f93b 	bl	80007dc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	4b2d      	ldr	r3, [pc, #180]	; (8001620 <HAL_ADC_ConfigChannel+0x63c>)
 800156c:	4013      	ands	r3, r2
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 808c 	beq.w	800168c <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001574:	482b      	ldr	r0, [pc, #172]	; (8001624 <HAL_ADC_ConfigChannel+0x640>)
 8001576:	f7ff f899 	bl	80006ac <LL_ADC_GetCommonPathInternalCh>
 800157a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a29      	ldr	r2, [pc, #164]	; (8001628 <HAL_ADC_ConfigChannel+0x644>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d12b      	bne.n	80015e0 <HAL_ADC_ConfigChannel+0x5fc>
 8001588:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800158c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d125      	bne.n	80015e0 <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a24      	ldr	r2, [pc, #144]	; (800162c <HAL_ADC_ConfigChannel+0x648>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d004      	beq.n	80015a8 <HAL_ADC_ConfigChannel+0x5c4>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a23      	ldr	r2, [pc, #140]	; (8001630 <HAL_ADC_ConfigChannel+0x64c>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d16e      	bne.n	8001686 <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80015a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80015ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015b0:	4619      	mov	r1, r3
 80015b2:	481c      	ldr	r0, [pc, #112]	; (8001624 <HAL_ADC_ConfigChannel+0x640>)
 80015b4:	f7ff f867 	bl	8000686 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80015b8:	4b1e      	ldr	r3, [pc, #120]	; (8001634 <HAL_ADC_ConfigChannel+0x650>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	099b      	lsrs	r3, r3, #6
 80015be:	4a1e      	ldr	r2, [pc, #120]	; (8001638 <HAL_ADC_ConfigChannel+0x654>)
 80015c0:	fba2 2303 	umull	r2, r3, r2, r3
 80015c4:	099a      	lsrs	r2, r3, #6
 80015c6:	4613      	mov	r3, r2
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	4413      	add	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80015d0:	e002      	b.n	80015d8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	3b01      	subs	r3, #1
 80015d6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f9      	bne.n	80015d2 <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80015de:	e052      	b.n	8001686 <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a15      	ldr	r2, [pc, #84]	; (800163c <HAL_ADC_ConfigChannel+0x658>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d12a      	bne.n	8001640 <HAL_ADC_ConfigChannel+0x65c>
 80015ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80015ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d124      	bne.n	8001640 <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a0c      	ldr	r2, [pc, #48]	; (800162c <HAL_ADC_ConfigChannel+0x648>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d004      	beq.n	800160a <HAL_ADC_ConfigChannel+0x626>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <HAL_ADC_ConfigChannel+0x64c>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d13f      	bne.n	800168a <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800160a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800160e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001612:	4619      	mov	r1, r3
 8001614:	4803      	ldr	r0, [pc, #12]	; (8001624 <HAL_ADC_ConfigChannel+0x640>)
 8001616:	f7ff f836 	bl	8000686 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800161a:	e036      	b.n	800168a <HAL_ADC_ConfigChannel+0x6a6>
 800161c:	407f0000 	.word	0x407f0000
 8001620:	80080000 	.word	0x80080000
 8001624:	50040300 	.word	0x50040300
 8001628:	c7520000 	.word	0xc7520000
 800162c:	50040000 	.word	0x50040000
 8001630:	50040200 	.word	0x50040200
 8001634:	2000000c 	.word	0x2000000c
 8001638:	053e2d63 	.word	0x053e2d63
 800163c:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a16      	ldr	r2, [pc, #88]	; (80016a0 <HAL_ADC_ConfigChannel+0x6bc>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d120      	bne.n	800168c <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800164a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800164e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d11a      	bne.n	800168c <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a12      	ldr	r2, [pc, #72]	; (80016a4 <HAL_ADC_ConfigChannel+0x6c0>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d115      	bne.n	800168c <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001660:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001664:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001668:	4619      	mov	r1, r3
 800166a:	480f      	ldr	r0, [pc, #60]	; (80016a8 <HAL_ADC_ConfigChannel+0x6c4>)
 800166c:	f7ff f80b 	bl	8000686 <LL_ADC_SetCommonPathInternalCh>
 8001670:	e00c      	b.n	800168c <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001676:	f043 0220 	orr.w	r2, r3, #32
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001684:	e002      	b.n	800168c <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001686:	bf00      	nop
 8001688:	e000      	b.n	800168c <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800168a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001694:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8001698:	4618      	mov	r0, r3
 800169a:	3798      	adds	r7, #152	; 0x98
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	80000001 	.word	0x80000001
 80016a4:	50040000 	.word	0x50040000
 80016a8:	50040300 	.word	0x50040300

080016ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff f959 	bl	8000970 <LL_ADC_IsEnabled>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d146      	bne.n	8001752 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	4b24      	ldr	r3, [pc, #144]	; (800175c <ADC_Enable+0xb0>)
 80016cc:	4013      	ands	r3, r2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00d      	beq.n	80016ee <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d6:	f043 0210 	orr.w	r2, r3, #16
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e2:	f043 0201 	orr.w	r2, r3, #1
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e032      	b.n	8001754 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff f928 	bl	8000948 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80016f8:	f7fe ffa6 	bl	8000648 <HAL_GetTick>
 80016fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80016fe:	e021      	b.n	8001744 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff f933 	bl	8000970 <LL_ADC_IsEnabled>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d104      	bne.n	800171a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff f917 	bl	8000948 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800171a:	f7fe ff95 	bl	8000648 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d90d      	bls.n	8001744 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800172c:	f043 0210 	orr.w	r2, r3, #16
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001738:	f043 0201 	orr.w	r2, r3, #1
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e007      	b.n	8001754 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b01      	cmp	r3, #1
 8001750:	d1d6      	bne.n	8001700 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	8000003f 	.word	0x8000003f

08001760 <LL_ADC_IsEnabled>:
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	2b01      	cmp	r3, #1
 8001772:	d101      	bne.n	8001778 <LL_ADC_IsEnabled+0x18>
 8001774:	2301      	movs	r3, #1
 8001776:	e000      	b.n	800177a <LL_ADC_IsEnabled+0x1a>
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <LL_ADC_REG_IsConversionOngoing>:
{
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 0304 	and.w	r3, r3, #4
 8001796:	2b04      	cmp	r3, #4
 8001798:	d101      	bne.n	800179e <LL_ADC_REG_IsConversionOngoing+0x18>
 800179a:	2301      	movs	r3, #1
 800179c:	e000      	b.n	80017a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80017ac:	b590      	push	{r4, r7, lr}
 80017ae:	b09f      	sub	sp, #124	; 0x7c
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017b6:	2300      	movs	r3, #0
 80017b8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d101      	bne.n	80017ca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80017c6:	2302      	movs	r3, #2
 80017c8:	e08f      	b.n	80018ea <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2201      	movs	r2, #1
 80017ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a47      	ldr	r2, [pc, #284]	; (80018f4 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d102      	bne.n	80017e2 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80017dc:	4b46      	ldr	r3, [pc, #280]	; (80018f8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	e001      	b.n	80017e6 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80017e2:	2300      	movs	r3, #0
 80017e4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d10b      	bne.n	8001804 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f0:	f043 0220 	orr.w	r2, r3, #32
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e072      	b.n	80018ea <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff ffbd 	bl	8001786 <LL_ADC_REG_IsConversionOngoing>
 800180c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ffb7 	bl	8001786 <LL_ADC_REG_IsConversionOngoing>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d154      	bne.n	80018c8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800181e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001820:	2b00      	cmp	r3, #0
 8001822:	d151      	bne.n	80018c8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001824:	4b35      	ldr	r3, [pc, #212]	; (80018fc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001826:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d02c      	beq.n	800188a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	6859      	ldr	r1, [r3, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001842:	035b      	lsls	r3, r3, #13
 8001844:	430b      	orrs	r3, r1
 8001846:	431a      	orrs	r2, r3
 8001848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800184a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800184c:	4829      	ldr	r0, [pc, #164]	; (80018f4 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800184e:	f7ff ff87 	bl	8001760 <LL_ADC_IsEnabled>
 8001852:	4604      	mov	r4, r0
 8001854:	4828      	ldr	r0, [pc, #160]	; (80018f8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001856:	f7ff ff83 	bl	8001760 <LL_ADC_IsEnabled>
 800185a:	4603      	mov	r3, r0
 800185c:	431c      	orrs	r4, r3
 800185e:	4828      	ldr	r0, [pc, #160]	; (8001900 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001860:	f7ff ff7e 	bl	8001760 <LL_ADC_IsEnabled>
 8001864:	4603      	mov	r3, r0
 8001866:	4323      	orrs	r3, r4
 8001868:	2b00      	cmp	r3, #0
 800186a:	d137      	bne.n	80018dc <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800186c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001874:	f023 030f 	bic.w	r3, r3, #15
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	6811      	ldr	r1, [r2, #0]
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	6892      	ldr	r2, [r2, #8]
 8001880:	430a      	orrs	r2, r1
 8001882:	431a      	orrs	r2, r3
 8001884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001886:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001888:	e028      	b.n	80018dc <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800188a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001894:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001896:	4817      	ldr	r0, [pc, #92]	; (80018f4 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001898:	f7ff ff62 	bl	8001760 <LL_ADC_IsEnabled>
 800189c:	4604      	mov	r4, r0
 800189e:	4816      	ldr	r0, [pc, #88]	; (80018f8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80018a0:	f7ff ff5e 	bl	8001760 <LL_ADC_IsEnabled>
 80018a4:	4603      	mov	r3, r0
 80018a6:	431c      	orrs	r4, r3
 80018a8:	4815      	ldr	r0, [pc, #84]	; (8001900 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80018aa:	f7ff ff59 	bl	8001760 <LL_ADC_IsEnabled>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4323      	orrs	r3, r4
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d112      	bne.n	80018dc <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80018b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80018be:	f023 030f 	bic.w	r3, r3, #15
 80018c2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80018c4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80018c6:	e009      	b.n	80018dc <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018cc:	f043 0220 	orr.w	r2, r3, #32
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80018da:	e000      	b.n	80018de <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80018dc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80018e6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	377c      	adds	r7, #124	; 0x7c
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd90      	pop	{r4, r7, pc}
 80018f2:	bf00      	nop
 80018f4:	50040000 	.word	0x50040000
 80018f8:	50040100 	.word	0x50040100
 80018fc:	50040300 	.word	0x50040300
 8001900:	50040200 	.word	0x50040200

08001904 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e0ed      	b.n	8001af2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 3020 	ldrb.w	r3, [r3, #32]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d102      	bne.n	8001928 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f003 faf0 	bl	8004f08 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 0202 	bic.w	r2, r2, #2
 8001936:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001938:	f7fe fe86 	bl	8000648 <HAL_GetTick>
 800193c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800193e:	e012      	b.n	8001966 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001940:	f7fe fe82 	bl	8000648 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b0a      	cmp	r3, #10
 800194c:	d90b      	bls.n	8001966 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001952:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2205      	movs	r2, #5
 800195e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e0c5      	b.n	8001af2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1e5      	bne.n	8001940 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f042 0201 	orr.w	r2, r2, #1
 8001982:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001984:	f7fe fe60 	bl	8000648 <HAL_GetTick>
 8001988:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800198a:	e012      	b.n	80019b2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800198c:	f7fe fe5c 	bl	8000648 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b0a      	cmp	r3, #10
 8001998:	d90b      	bls.n	80019b2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2205      	movs	r2, #5
 80019aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e09f      	b.n	8001af2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d0e5      	beq.n	800198c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	7e1b      	ldrb	r3, [r3, #24]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d108      	bne.n	80019da <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	e007      	b.n	80019ea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	7e5b      	ldrb	r3, [r3, #25]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d108      	bne.n	8001a04 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	e007      	b.n	8001a14 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a12:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	7e9b      	ldrb	r3, [r3, #26]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d108      	bne.n	8001a2e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f042 0220 	orr.w	r2, r2, #32
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	e007      	b.n	8001a3e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f022 0220 	bic.w	r2, r2, #32
 8001a3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	7edb      	ldrb	r3, [r3, #27]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d108      	bne.n	8001a58 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 0210 	bic.w	r2, r2, #16
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	e007      	b.n	8001a68 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 0210 	orr.w	r2, r2, #16
 8001a66:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	7f1b      	ldrb	r3, [r3, #28]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d108      	bne.n	8001a82 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f042 0208 	orr.w	r2, r2, #8
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	e007      	b.n	8001a92 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 0208 	bic.w	r2, r2, #8
 8001a90:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	7f5b      	ldrb	r3, [r3, #29]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d108      	bne.n	8001aac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f042 0204 	orr.w	r2, r2, #4
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	e007      	b.n	8001abc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f022 0204 	bic.w	r2, r2, #4
 8001aba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	431a      	orrs	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	ea42 0103 	orr.w	r1, r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	1e5a      	subs	r2, r3, #1
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b087      	sub	sp, #28
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b10:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001b12:	7cfb      	ldrb	r3, [r7, #19]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d003      	beq.n	8001b20 <HAL_CAN_ConfigFilter+0x26>
 8001b18:	7cfb      	ldrb	r3, [r7, #19]
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	f040 80aa 	bne.w	8001c74 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b26:	f043 0201 	orr.w	r2, r3, #1
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	695b      	ldr	r3, [r3, #20]
 8001b34:	f003 031f 	and.w	r3, r3, #31
 8001b38:	2201      	movs	r2, #1
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	401a      	ands	r2, r3
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d123      	bne.n	8001ba2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	43db      	mvns	r3, r3
 8001b64:	401a      	ands	r2, r3
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b7c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	3248      	adds	r2, #72	; 0x48
 8001b82:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b96:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b98:	6979      	ldr	r1, [r7, #20]
 8001b9a:	3348      	adds	r3, #72	; 0x48
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	440b      	add	r3, r1
 8001ba0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d122      	bne.n	8001bf0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bca:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	3248      	adds	r2, #72	; 0x48
 8001bd0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001be4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001be6:	6979      	ldr	r1, [r7, #20]
 8001be8:	3348      	adds	r3, #72	; 0x48
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	440b      	add	r3, r1
 8001bee:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d109      	bne.n	8001c0c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	43db      	mvns	r3, r3
 8001c02:	401a      	ands	r2, r3
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001c0a:	e007      	b.n	8001c1c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	431a      	orrs	r2, r3
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d109      	bne.n	8001c38 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	401a      	ands	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001c36:	e007      	b.n	8001c48 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	431a      	orrs	r2, r3
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d107      	bne.n	8001c60 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c66:	f023 0201 	bic.w	r2, r3, #1
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001c70:	2300      	movs	r3, #0
 8001c72:	e006      	b.n	8001c82 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c78:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
  }
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	371c      	adds	r7, #28
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b089      	sub	sp, #36	; 0x24
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	60f8      	str	r0, [r7, #12]
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	607a      	str	r2, [r7, #4]
 8001c9a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ca2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001cac:	7ffb      	ldrb	r3, [r7, #31]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d003      	beq.n	8001cba <HAL_CAN_AddTxMessage+0x2c>
 8001cb2:	7ffb      	ldrb	r3, [r7, #31]
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	f040 80b8 	bne.w	8001e2a <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d10a      	bne.n	8001cda <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d105      	bne.n	8001cda <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 80a0 	beq.w	8001e1a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	0e1b      	lsrs	r3, r3, #24
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d907      	bls.n	8001cfa <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cee:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e09e      	b.n	8001e38 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	409a      	lsls	r2, r3
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d10d      	bne.n	8001d28 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d16:	68f9      	ldr	r1, [r7, #12]
 8001d18:	6809      	ldr	r1, [r1, #0]
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	3318      	adds	r3, #24
 8001d20:	011b      	lsls	r3, r3, #4
 8001d22:	440b      	add	r3, r1
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	e00f      	b.n	8001d48 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d32:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d38:	68f9      	ldr	r1, [r7, #12]
 8001d3a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001d3c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	3318      	adds	r3, #24
 8001d42:	011b      	lsls	r3, r3, #4
 8001d44:	440b      	add	r3, r1
 8001d46:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6819      	ldr	r1, [r3, #0]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	691a      	ldr	r2, [r3, #16]
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	3318      	adds	r3, #24
 8001d54:	011b      	lsls	r3, r3, #4
 8001d56:	440b      	add	r3, r1
 8001d58:	3304      	adds	r3, #4
 8001d5a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	7d1b      	ldrb	r3, [r3, #20]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d111      	bne.n	8001d88 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	3318      	adds	r3, #24
 8001d6c:	011b      	lsls	r3, r3, #4
 8001d6e:	4413      	add	r3, r2
 8001d70:	3304      	adds	r3, #4
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	6811      	ldr	r1, [r2, #0]
 8001d78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	3318      	adds	r3, #24
 8001d80:	011b      	lsls	r3, r3, #4
 8001d82:	440b      	add	r3, r1
 8001d84:	3304      	adds	r3, #4
 8001d86:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3307      	adds	r3, #7
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	061a      	lsls	r2, r3, #24
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3306      	adds	r3, #6
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	041b      	lsls	r3, r3, #16
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	3305      	adds	r3, #5
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	021b      	lsls	r3, r3, #8
 8001da2:	4313      	orrs	r3, r2
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	3204      	adds	r2, #4
 8001da8:	7812      	ldrb	r2, [r2, #0]
 8001daa:	4610      	mov	r0, r2
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	6811      	ldr	r1, [r2, #0]
 8001db0:	ea43 0200 	orr.w	r2, r3, r0
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	011b      	lsls	r3, r3, #4
 8001db8:	440b      	add	r3, r1
 8001dba:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001dbe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3303      	adds	r3, #3
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	061a      	lsls	r2, r3, #24
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3302      	adds	r3, #2
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	041b      	lsls	r3, r3, #16
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	021b      	lsls	r3, r3, #8
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	7812      	ldrb	r2, [r2, #0]
 8001de0:	4610      	mov	r0, r2
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	6811      	ldr	r1, [r2, #0]
 8001de6:	ea43 0200 	orr.w	r2, r3, r0
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	011b      	lsls	r3, r3, #4
 8001dee:	440b      	add	r3, r1
 8001df0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001df4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	3318      	adds	r3, #24
 8001dfe:	011b      	lsls	r3, r3, #4
 8001e00:	4413      	add	r3, r2
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	6811      	ldr	r1, [r2, #0]
 8001e08:	f043 0201 	orr.w	r2, r3, #1
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	3318      	adds	r3, #24
 8001e10:	011b      	lsls	r3, r3, #4
 8001e12:	440b      	add	r3, r1
 8001e14:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001e16:	2300      	movs	r3, #0
 8001e18:	e00e      	b.n	8001e38 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e006      	b.n	8001e38 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
  }
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3724      	adds	r7, #36	; 0x24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e58:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e5a:	7afb      	ldrb	r3, [r7, #11]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d002      	beq.n	8001e66 <HAL_CAN_IsTxMessagePending+0x22>
 8001e60:	7afb      	ldrb	r3, [r7, #11]
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d10b      	bne.n	8001e7e <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	069b      	lsls	r3, r3, #26
 8001e70:	401a      	ands	r2, r3
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	069b      	lsls	r3, r3, #26
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d001      	beq.n	8001e7e <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b087      	sub	sp, #28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
 8001e98:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ea0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ea2:	7dfb      	ldrb	r3, [r7, #23]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d003      	beq.n	8001eb0 <HAL_CAN_GetRxMessage+0x24>
 8001ea8:	7dfb      	ldrb	r3, [r7, #23]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	f040 80f4 	bne.w	8002098 <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10e      	bne.n	8001ed4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f003 0303 	and.w	r3, r3, #3
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d116      	bne.n	8001ef2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e0e8      	b.n	80020a6 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d107      	bne.n	8001ef2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e0d9      	b.n	80020a6 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	331b      	adds	r3, #27
 8001efa:	011b      	lsls	r3, r3, #4
 8001efc:	4413      	add	r3, r2
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0204 	and.w	r2, r3, #4
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10c      	bne.n	8001f2a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	331b      	adds	r3, #27
 8001f18:	011b      	lsls	r3, r3, #4
 8001f1a:	4413      	add	r3, r2
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	0d5b      	lsrs	r3, r3, #21
 8001f20:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	e00b      	b.n	8001f42 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	331b      	adds	r3, #27
 8001f32:	011b      	lsls	r3, r3, #4
 8001f34:	4413      	add	r3, r2
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	08db      	lsrs	r3, r3, #3
 8001f3a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	331b      	adds	r3, #27
 8001f4a:	011b      	lsls	r3, r3, #4
 8001f4c:	4413      	add	r3, r2
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	085b      	lsrs	r3, r3, #1
 8001f52:	f003 0201 	and.w	r2, r3, #1
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	331b      	adds	r3, #27
 8001f62:	011b      	lsls	r3, r3, #4
 8001f64:	4413      	add	r3, r2
 8001f66:	3304      	adds	r3, #4
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 020f 	and.w	r2, r3, #15
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	331b      	adds	r3, #27
 8001f7a:	011b      	lsls	r3, r3, #4
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3304      	adds	r3, #4
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	0a1b      	lsrs	r3, r3, #8
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	331b      	adds	r3, #27
 8001f92:	011b      	lsls	r3, r3, #4
 8001f94:	4413      	add	r3, r2
 8001f96:	3304      	adds	r3, #4
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	0c1b      	lsrs	r3, r3, #16
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	011b      	lsls	r3, r3, #4
 8001faa:	4413      	add	r3, r2
 8001fac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	011b      	lsls	r3, r3, #4
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	0a1a      	lsrs	r2, r3, #8
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	011b      	lsls	r3, r3, #4
 8001fda:	4413      	add	r3, r2
 8001fdc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	0c1a      	lsrs	r2, r3, #16
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	3302      	adds	r3, #2
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	0e1a      	lsrs	r2, r3, #24
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	3303      	adds	r3, #3
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	4413      	add	r3, r2
 8002010:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	3304      	adds	r3, #4
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	011b      	lsls	r3, r3, #4
 8002026:	4413      	add	r3, r2
 8002028:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	0a1a      	lsrs	r2, r3, #8
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	3305      	adds	r3, #5
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	011b      	lsls	r3, r3, #4
 8002040:	4413      	add	r3, r2
 8002042:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	0c1a      	lsrs	r2, r3, #16
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	3306      	adds	r3, #6
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	011b      	lsls	r3, r3, #4
 800205a:	4413      	add	r3, r2
 800205c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	0e1a      	lsrs	r2, r3, #24
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	3307      	adds	r3, #7
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d108      	bne.n	8002084 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f042 0220 	orr.w	r2, r2, #32
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	e007      	b.n	8002094 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	691a      	ldr	r2, [r3, #16]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0220 	orr.w	r2, r2, #32
 8002092:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002094:	2300      	movs	r3, #0
 8002096:	e006      	b.n	80020a6 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
  }
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	371c      	adds	r7, #28
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
	...

080020b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020c4:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <__NVIC_SetPriorityGrouping+0x44>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020d0:	4013      	ands	r3, r2
 80020d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020e6:	4a04      	ldr	r2, [pc, #16]	; (80020f8 <__NVIC_SetPriorityGrouping+0x44>)
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	60d3      	str	r3, [r2, #12]
}
 80020ec:	bf00      	nop
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002100:	4b04      	ldr	r3, [pc, #16]	; (8002114 <__NVIC_GetPriorityGrouping+0x18>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	0a1b      	lsrs	r3, r3, #8
 8002106:	f003 0307 	and.w	r3, r3, #7
}
 800210a:	4618      	mov	r0, r3
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	2b00      	cmp	r3, #0
 8002128:	db0b      	blt.n	8002142 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800212a:	79fb      	ldrb	r3, [r7, #7]
 800212c:	f003 021f 	and.w	r2, r3, #31
 8002130:	4907      	ldr	r1, [pc, #28]	; (8002150 <__NVIC_EnableIRQ+0x38>)
 8002132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002136:	095b      	lsrs	r3, r3, #5
 8002138:	2001      	movs	r0, #1
 800213a:	fa00 f202 	lsl.w	r2, r0, r2
 800213e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	e000e100 	.word	0xe000e100

08002154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	6039      	str	r1, [r7, #0]
 800215e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002164:	2b00      	cmp	r3, #0
 8002166:	db0a      	blt.n	800217e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	b2da      	uxtb	r2, r3
 800216c:	490c      	ldr	r1, [pc, #48]	; (80021a0 <__NVIC_SetPriority+0x4c>)
 800216e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002172:	0112      	lsls	r2, r2, #4
 8002174:	b2d2      	uxtb	r2, r2
 8002176:	440b      	add	r3, r1
 8002178:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800217c:	e00a      	b.n	8002194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	b2da      	uxtb	r2, r3
 8002182:	4908      	ldr	r1, [pc, #32]	; (80021a4 <__NVIC_SetPriority+0x50>)
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	3b04      	subs	r3, #4
 800218c:	0112      	lsls	r2, r2, #4
 800218e:	b2d2      	uxtb	r2, r2
 8002190:	440b      	add	r3, r1
 8002192:	761a      	strb	r2, [r3, #24]
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	e000e100 	.word	0xe000e100
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b089      	sub	sp, #36	; 0x24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	f1c3 0307 	rsb	r3, r3, #7
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	bf28      	it	cs
 80021c6:	2304      	movcs	r3, #4
 80021c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	3304      	adds	r3, #4
 80021ce:	2b06      	cmp	r3, #6
 80021d0:	d902      	bls.n	80021d8 <NVIC_EncodePriority+0x30>
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3b03      	subs	r3, #3
 80021d6:	e000      	b.n	80021da <NVIC_EncodePriority+0x32>
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021dc:	f04f 32ff 	mov.w	r2, #4294967295
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43da      	mvns	r2, r3
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	401a      	ands	r2, r3
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f0:	f04f 31ff 	mov.w	r1, #4294967295
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	fa01 f303 	lsl.w	r3, r1, r3
 80021fa:	43d9      	mvns	r1, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002200:	4313      	orrs	r3, r2
         );
}
 8002202:	4618      	mov	r0, r3
 8002204:	3724      	adds	r7, #36	; 0x24
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
	...

08002210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3b01      	subs	r3, #1
 800221c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002220:	d301      	bcc.n	8002226 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002222:	2301      	movs	r3, #1
 8002224:	e00f      	b.n	8002246 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002226:	4a0a      	ldr	r2, [pc, #40]	; (8002250 <SysTick_Config+0x40>)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3b01      	subs	r3, #1
 800222c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800222e:	210f      	movs	r1, #15
 8002230:	f04f 30ff 	mov.w	r0, #4294967295
 8002234:	f7ff ff8e 	bl	8002154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002238:	4b05      	ldr	r3, [pc, #20]	; (8002250 <SysTick_Config+0x40>)
 800223a:	2200      	movs	r2, #0
 800223c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800223e:	4b04      	ldr	r3, [pc, #16]	; (8002250 <SysTick_Config+0x40>)
 8002240:	2207      	movs	r2, #7
 8002242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	e000e010 	.word	0xe000e010

08002254 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7ff ff29 	bl	80020b4 <__NVIC_SetPriorityGrouping>
}
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b086      	sub	sp, #24
 800226e:	af00      	add	r7, sp, #0
 8002270:	4603      	mov	r3, r0
 8002272:	60b9      	str	r1, [r7, #8]
 8002274:	607a      	str	r2, [r7, #4]
 8002276:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800227c:	f7ff ff3e 	bl	80020fc <__NVIC_GetPriorityGrouping>
 8002280:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	68b9      	ldr	r1, [r7, #8]
 8002286:	6978      	ldr	r0, [r7, #20]
 8002288:	f7ff ff8e 	bl	80021a8 <NVIC_EncodePriority>
 800228c:	4602      	mov	r2, r0
 800228e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002292:	4611      	mov	r1, r2
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff ff5d 	bl	8002154 <__NVIC_SetPriority>
}
 800229a:	bf00      	nop
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	4603      	mov	r3, r0
 80022aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff ff31 	bl	8002118 <__NVIC_EnableIRQ>
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff ffa2 	bl	8002210 <SysTick_Config>
 80022cc:	4603      	mov	r3, r0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022d8:	b480      	push	{r7}
 80022da:	b087      	sub	sp, #28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022e2:	2300      	movs	r3, #0
 80022e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022e6:	e17f      	b.n	80025e8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	2101      	movs	r1, #1
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	fa01 f303 	lsl.w	r3, r1, r3
 80022f4:	4013      	ands	r3, r2
 80022f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 8171 	beq.w	80025e2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b02      	cmp	r3, #2
 8002306:	d003      	beq.n	8002310 <HAL_GPIO_Init+0x38>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b12      	cmp	r3, #18
 800230e:	d123      	bne.n	8002358 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	08da      	lsrs	r2, r3, #3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3208      	adds	r2, #8
 8002318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800231c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	220f      	movs	r2, #15
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4013      	ands	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	691a      	ldr	r2, [r3, #16]
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	4313      	orrs	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	08da      	lsrs	r2, r3, #3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3208      	adds	r2, #8
 8002352:	6939      	ldr	r1, [r7, #16]
 8002354:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	2203      	movs	r2, #3
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4013      	ands	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 0203 	and.w	r2, r3, #3
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d00b      	beq.n	80023ac <HAL_GPIO_Init+0xd4>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b02      	cmp	r3, #2
 800239a:	d007      	beq.n	80023ac <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023a0:	2b11      	cmp	r3, #17
 80023a2:	d003      	beq.n	80023ac <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b12      	cmp	r3, #18
 80023aa:	d130      	bne.n	800240e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	2203      	movs	r2, #3
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	4013      	ands	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	68da      	ldr	r2, [r3, #12]
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023e2:	2201      	movs	r2, #1
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43db      	mvns	r3, r3
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4013      	ands	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	091b      	lsrs	r3, r3, #4
 80023f8:	f003 0201 	and.w	r2, r3, #1
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	2b03      	cmp	r3, #3
 8002418:	d118      	bne.n	800244c <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002420:	2201      	movs	r2, #1
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	4013      	ands	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	08db      	lsrs	r3, r3, #3
 8002436:	f003 0201 	and.w	r2, r3, #1
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4313      	orrs	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	2203      	movs	r2, #3
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	4013      	ands	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 80ac 	beq.w	80025e2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800248a:	4b5e      	ldr	r3, [pc, #376]	; (8002604 <HAL_GPIO_Init+0x32c>)
 800248c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800248e:	4a5d      	ldr	r2, [pc, #372]	; (8002604 <HAL_GPIO_Init+0x32c>)
 8002490:	f043 0301 	orr.w	r3, r3, #1
 8002494:	6613      	str	r3, [r2, #96]	; 0x60
 8002496:	4b5b      	ldr	r3, [pc, #364]	; (8002604 <HAL_GPIO_Init+0x32c>)
 8002498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	60bb      	str	r3, [r7, #8]
 80024a0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024a2:	4a59      	ldr	r2, [pc, #356]	; (8002608 <HAL_GPIO_Init+0x330>)
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	089b      	lsrs	r3, r3, #2
 80024a8:	3302      	adds	r3, #2
 80024aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	220f      	movs	r2, #15
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43db      	mvns	r3, r3
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4013      	ands	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024cc:	d025      	beq.n	800251a <HAL_GPIO_Init+0x242>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a4e      	ldr	r2, [pc, #312]	; (800260c <HAL_GPIO_Init+0x334>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d01f      	beq.n	8002516 <HAL_GPIO_Init+0x23e>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a4d      	ldr	r2, [pc, #308]	; (8002610 <HAL_GPIO_Init+0x338>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d019      	beq.n	8002512 <HAL_GPIO_Init+0x23a>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a4c      	ldr	r2, [pc, #304]	; (8002614 <HAL_GPIO_Init+0x33c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d013      	beq.n	800250e <HAL_GPIO_Init+0x236>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a4b      	ldr	r2, [pc, #300]	; (8002618 <HAL_GPIO_Init+0x340>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d00d      	beq.n	800250a <HAL_GPIO_Init+0x232>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a4a      	ldr	r2, [pc, #296]	; (800261c <HAL_GPIO_Init+0x344>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d007      	beq.n	8002506 <HAL_GPIO_Init+0x22e>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a49      	ldr	r2, [pc, #292]	; (8002620 <HAL_GPIO_Init+0x348>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d101      	bne.n	8002502 <HAL_GPIO_Init+0x22a>
 80024fe:	2306      	movs	r3, #6
 8002500:	e00c      	b.n	800251c <HAL_GPIO_Init+0x244>
 8002502:	2307      	movs	r3, #7
 8002504:	e00a      	b.n	800251c <HAL_GPIO_Init+0x244>
 8002506:	2305      	movs	r3, #5
 8002508:	e008      	b.n	800251c <HAL_GPIO_Init+0x244>
 800250a:	2304      	movs	r3, #4
 800250c:	e006      	b.n	800251c <HAL_GPIO_Init+0x244>
 800250e:	2303      	movs	r3, #3
 8002510:	e004      	b.n	800251c <HAL_GPIO_Init+0x244>
 8002512:	2302      	movs	r3, #2
 8002514:	e002      	b.n	800251c <HAL_GPIO_Init+0x244>
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <HAL_GPIO_Init+0x244>
 800251a:	2300      	movs	r3, #0
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	f002 0203 	and.w	r2, r2, #3
 8002522:	0092      	lsls	r2, r2, #2
 8002524:	4093      	lsls	r3, r2
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	4313      	orrs	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800252c:	4936      	ldr	r1, [pc, #216]	; (8002608 <HAL_GPIO_Init+0x330>)
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	089b      	lsrs	r3, r3, #2
 8002532:	3302      	adds	r3, #2
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800253a:	4b3a      	ldr	r3, [pc, #232]	; (8002624 <HAL_GPIO_Init+0x34c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	43db      	mvns	r3, r3
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	4013      	ands	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4313      	orrs	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800255e:	4a31      	ldr	r2, [pc, #196]	; (8002624 <HAL_GPIO_Init+0x34c>)
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002564:	4b2f      	ldr	r3, [pc, #188]	; (8002624 <HAL_GPIO_Init+0x34c>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	43db      	mvns	r3, r3
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	4013      	ands	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d003      	beq.n	8002588 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	4313      	orrs	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002588:	4a26      	ldr	r2, [pc, #152]	; (8002624 <HAL_GPIO_Init+0x34c>)
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800258e:	4b25      	ldr	r3, [pc, #148]	; (8002624 <HAL_GPIO_Init+0x34c>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	43db      	mvns	r3, r3
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	4013      	ands	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025b2:	4a1c      	ldr	r2, [pc, #112]	; (8002624 <HAL_GPIO_Init+0x34c>)
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025b8:	4b1a      	ldr	r3, [pc, #104]	; (8002624 <HAL_GPIO_Init+0x34c>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	43db      	mvns	r3, r3
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	4013      	ands	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	4313      	orrs	r3, r2
 80025da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025dc:	4a11      	ldr	r2, [pc, #68]	; (8002624 <HAL_GPIO_Init+0x34c>)
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	3301      	adds	r3, #1
 80025e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	fa22 f303 	lsr.w	r3, r2, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f47f ae78 	bne.w	80022e8 <HAL_GPIO_Init+0x10>
  }
}
 80025f8:	bf00      	nop
 80025fa:	371c      	adds	r7, #28
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	40021000 	.word	0x40021000
 8002608:	40010000 	.word	0x40010000
 800260c:	48000400 	.word	0x48000400
 8002610:	48000800 	.word	0x48000800
 8002614:	48000c00 	.word	0x48000c00
 8002618:	48001000 	.word	0x48001000
 800261c:	48001400 	.word	0x48001400
 8002620:	48001800 	.word	0x48001800
 8002624:	40010400 	.word	0x40010400

08002628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	807b      	strh	r3, [r7, #2]
 8002634:	4613      	mov	r3, r2
 8002636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002638:	787b      	ldrb	r3, [r7, #1]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800263e:	887a      	ldrh	r2, [r7, #2]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002644:	e002      	b.n	800264c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002646:	887a      	ldrh	r2, [r7, #2]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002662:	4b08      	ldr	r3, [pc, #32]	; (8002684 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002664:	695a      	ldr	r2, [r3, #20]
 8002666:	88fb      	ldrh	r3, [r7, #6]
 8002668:	4013      	ands	r3, r2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d006      	beq.n	800267c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800266e:	4a05      	ldr	r2, [pc, #20]	; (8002684 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002670:	88fb      	ldrh	r3, [r7, #6]
 8002672:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002674:	88fb      	ldrh	r3, [r7, #6]
 8002676:	4618      	mov	r0, r3
 8002678:	f002 f8aa 	bl	80047d0 <HAL_GPIO_EXTI_Callback>
  }
}
 800267c:	bf00      	nop
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40010400 	.word	0x40010400

08002688 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800268c:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002694:	4618      	mov	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	40007000 	.word	0x40007000

080026a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026b2:	d130      	bne.n	8002716 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80026b4:	4b23      	ldr	r3, [pc, #140]	; (8002744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026c0:	d038      	beq.n	8002734 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026c2:	4b20      	ldr	r3, [pc, #128]	; (8002744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026ca:	4a1e      	ldr	r2, [pc, #120]	; (8002744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026d2:	4b1d      	ldr	r3, [pc, #116]	; (8002748 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2232      	movs	r2, #50	; 0x32
 80026d8:	fb02 f303 	mul.w	r3, r2, r3
 80026dc:	4a1b      	ldr	r2, [pc, #108]	; (800274c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80026de:	fba2 2303 	umull	r2, r3, r2, r3
 80026e2:	0c9b      	lsrs	r3, r3, #18
 80026e4:	3301      	adds	r3, #1
 80026e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026e8:	e002      	b.n	80026f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	3b01      	subs	r3, #1
 80026ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026f0:	4b14      	ldr	r3, [pc, #80]	; (8002744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026fc:	d102      	bne.n	8002704 <HAL_PWREx_ControlVoltageScaling+0x60>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1f2      	bne.n	80026ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002704:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800270c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002710:	d110      	bne.n	8002734 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e00f      	b.n	8002736 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002716:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800271e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002722:	d007      	beq.n	8002734 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002724:	4b07      	ldr	r3, [pc, #28]	; (8002744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800272c:	4a05      	ldr	r2, [pc, #20]	; (8002744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800272e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002732:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	40007000 	.word	0x40007000
 8002748:	2000000c 	.word	0x2000000c
 800274c:	431bde83 	.word	0x431bde83

08002750 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b088      	sub	sp, #32
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e39d      	b.n	8002e9e <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002762:	4ba4      	ldr	r3, [pc, #656]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 030c 	and.w	r3, r3, #12
 800276a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800276c:	4ba1      	ldr	r3, [pc, #644]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	f003 0303 	and.w	r3, r3, #3
 8002774:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0310 	and.w	r3, r3, #16
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 80e1 	beq.w	8002946 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d007      	beq.n	800279a <HAL_RCC_OscConfig+0x4a>
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	2b0c      	cmp	r3, #12
 800278e:	f040 8088 	bne.w	80028a2 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	2b01      	cmp	r3, #1
 8002796:	f040 8084 	bne.w	80028a2 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800279a:	4b96      	ldr	r3, [pc, #600]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d005      	beq.n	80027b2 <HAL_RCC_OscConfig+0x62>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e375      	b.n	8002e9e <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1a      	ldr	r2, [r3, #32]
 80027b6:	4b8f      	ldr	r3, [pc, #572]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d004      	beq.n	80027cc <HAL_RCC_OscConfig+0x7c>
 80027c2:	4b8c      	ldr	r3, [pc, #560]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027ca:	e005      	b.n	80027d8 <HAL_RCC_OscConfig+0x88>
 80027cc:	4b89      	ldr	r3, [pc, #548]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 80027ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027d2:	091b      	lsrs	r3, r3, #4
 80027d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027d8:	4293      	cmp	r3, r2
 80027da:	d223      	bcs.n	8002824 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 fd09 	bl	80031f8 <RCC_SetFlashLatencyFromMSIRange>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e356      	b.n	8002e9e <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027f0:	4b80      	ldr	r3, [pc, #512]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a7f      	ldr	r2, [pc, #508]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 80027f6:	f043 0308 	orr.w	r3, r3, #8
 80027fa:	6013      	str	r3, [r2, #0]
 80027fc:	4b7d      	ldr	r3, [pc, #500]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	497a      	ldr	r1, [pc, #488]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 800280a:	4313      	orrs	r3, r2
 800280c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800280e:	4b79      	ldr	r3, [pc, #484]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	021b      	lsls	r3, r3, #8
 800281c:	4975      	ldr	r1, [pc, #468]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 800281e:	4313      	orrs	r3, r2
 8002820:	604b      	str	r3, [r1, #4]
 8002822:	e022      	b.n	800286a <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002824:	4b73      	ldr	r3, [pc, #460]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a72      	ldr	r2, [pc, #456]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 800282a:	f043 0308 	orr.w	r3, r3, #8
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	4b70      	ldr	r3, [pc, #448]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	496d      	ldr	r1, [pc, #436]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 800283e:	4313      	orrs	r3, r2
 8002840:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002842:	4b6c      	ldr	r3, [pc, #432]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	021b      	lsls	r3, r3, #8
 8002850:	4968      	ldr	r1, [pc, #416]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 8002852:	4313      	orrs	r3, r2
 8002854:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	4618      	mov	r0, r3
 800285c:	f000 fccc 	bl	80031f8 <RCC_SetFlashLatencyFromMSIRange>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e319      	b.n	8002e9e <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800286a:	f000 fc03 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 800286e:	4601      	mov	r1, r0
 8002870:	4b60      	ldr	r3, [pc, #384]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	091b      	lsrs	r3, r3, #4
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	4a5f      	ldr	r2, [pc, #380]	; (80029f8 <HAL_RCC_OscConfig+0x2a8>)
 800287c:	5cd3      	ldrb	r3, [r2, r3]
 800287e:	f003 031f 	and.w	r3, r3, #31
 8002882:	fa21 f303 	lsr.w	r3, r1, r3
 8002886:	4a5d      	ldr	r2, [pc, #372]	; (80029fc <HAL_RCC_OscConfig+0x2ac>)
 8002888:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800288a:	4b5d      	ldr	r3, [pc, #372]	; (8002a00 <HAL_RCC_OscConfig+0x2b0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f7fd fe8e 	bl	80005b0 <HAL_InitTick>
 8002894:	4603      	mov	r3, r0
 8002896:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d052      	beq.n	8002944 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800289e:	7bfb      	ldrb	r3, [r7, #15]
 80028a0:	e2fd      	b.n	8002e9e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d032      	beq.n	8002910 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028aa:	4b52      	ldr	r3, [pc, #328]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a51      	ldr	r2, [pc, #324]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028b6:	f7fd fec7 	bl	8000648 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028be:	f7fd fec3 	bl	8000648 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e2e6      	b.n	8002e9e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028d0:	4b48      	ldr	r3, [pc, #288]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028dc:	4b45      	ldr	r3, [pc, #276]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a44      	ldr	r2, [pc, #272]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 80028e2:	f043 0308 	orr.w	r3, r3, #8
 80028e6:	6013      	str	r3, [r2, #0]
 80028e8:	4b42      	ldr	r3, [pc, #264]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	493f      	ldr	r1, [pc, #252]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028fa:	4b3e      	ldr	r3, [pc, #248]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	021b      	lsls	r3, r3, #8
 8002908:	493a      	ldr	r1, [pc, #232]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 800290a:	4313      	orrs	r3, r2
 800290c:	604b      	str	r3, [r1, #4]
 800290e:	e01a      	b.n	8002946 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002910:	4b38      	ldr	r3, [pc, #224]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a37      	ldr	r2, [pc, #220]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 8002916:	f023 0301 	bic.w	r3, r3, #1
 800291a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800291c:	f7fd fe94 	bl	8000648 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002924:	f7fd fe90 	bl	8000648 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e2b3      	b.n	8002e9e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002936:	4b2f      	ldr	r3, [pc, #188]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f0      	bne.n	8002924 <HAL_RCC_OscConfig+0x1d4>
 8002942:	e000      	b.n	8002946 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002944:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d074      	beq.n	8002a3c <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	2b08      	cmp	r3, #8
 8002956:	d005      	beq.n	8002964 <HAL_RCC_OscConfig+0x214>
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	2b0c      	cmp	r3, #12
 800295c:	d10e      	bne.n	800297c <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	2b03      	cmp	r3, #3
 8002962:	d10b      	bne.n	800297c <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002964:	4b23      	ldr	r3, [pc, #140]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d064      	beq.n	8002a3a <HAL_RCC_OscConfig+0x2ea>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d160      	bne.n	8002a3a <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e290      	b.n	8002e9e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002984:	d106      	bne.n	8002994 <HAL_RCC_OscConfig+0x244>
 8002986:	4b1b      	ldr	r3, [pc, #108]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a1a      	ldr	r2, [pc, #104]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 800298c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	e01d      	b.n	80029d0 <HAL_RCC_OscConfig+0x280>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800299c:	d10c      	bne.n	80029b8 <HAL_RCC_OscConfig+0x268>
 800299e:	4b15      	ldr	r3, [pc, #84]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a14      	ldr	r2, [pc, #80]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 80029a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029a8:	6013      	str	r3, [r2, #0]
 80029aa:	4b12      	ldr	r3, [pc, #72]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a11      	ldr	r2, [pc, #68]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 80029b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	e00b      	b.n	80029d0 <HAL_RCC_OscConfig+0x280>
 80029b8:	4b0e      	ldr	r3, [pc, #56]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a0d      	ldr	r2, [pc, #52]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 80029be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c2:	6013      	str	r3, [r2, #0]
 80029c4:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a0a      	ldr	r2, [pc, #40]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 80029ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d01c      	beq.n	8002a12 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d8:	f7fd fe36 	bl	8000648 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029de:	e011      	b.n	8002a04 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029e0:	f7fd fe32 	bl	8000648 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b64      	cmp	r3, #100	; 0x64
 80029ec:	d90a      	bls.n	8002a04 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e255      	b.n	8002e9e <HAL_RCC_OscConfig+0x74e>
 80029f2:	bf00      	nop
 80029f4:	40021000 	.word	0x40021000
 80029f8:	080061ac 	.word	0x080061ac
 80029fc:	2000000c 	.word	0x2000000c
 8002a00:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a04:	4bae      	ldr	r3, [pc, #696]	; (8002cc0 <HAL_RCC_OscConfig+0x570>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0e7      	beq.n	80029e0 <HAL_RCC_OscConfig+0x290>
 8002a10:	e014      	b.n	8002a3c <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a12:	f7fd fe19 	bl	8000648 <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a1a:	f7fd fe15 	bl	8000648 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b64      	cmp	r3, #100	; 0x64
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e238      	b.n	8002e9e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a2c:	4ba4      	ldr	r3, [pc, #656]	; (8002cc0 <HAL_RCC_OscConfig+0x570>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1f0      	bne.n	8002a1a <HAL_RCC_OscConfig+0x2ca>
 8002a38:	e000      	b.n	8002a3c <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a3a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d060      	beq.n	8002b0a <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d005      	beq.n	8002a5a <HAL_RCC_OscConfig+0x30a>
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	2b0c      	cmp	r3, #12
 8002a52:	d119      	bne.n	8002a88 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d116      	bne.n	8002a88 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a5a:	4b99      	ldr	r3, [pc, #612]	; (8002cc0 <HAL_RCC_OscConfig+0x570>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d005      	beq.n	8002a72 <HAL_RCC_OscConfig+0x322>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e215      	b.n	8002e9e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a72:	4b93      	ldr	r3, [pc, #588]	; (8002cc0 <HAL_RCC_OscConfig+0x570>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	061b      	lsls	r3, r3, #24
 8002a80:	498f      	ldr	r1, [pc, #572]	; (8002cc0 <HAL_RCC_OscConfig+0x570>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a86:	e040      	b.n	8002b0a <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d023      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a90:	4b8b      	ldr	r3, [pc, #556]	; (8002cc0 <HAL_RCC_OscConfig+0x570>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a8a      	ldr	r2, [pc, #552]	; (8002cc0 <HAL_RCC_OscConfig+0x570>)
 8002a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9c:	f7fd fdd4 	bl	8000648 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aa4:	f7fd fdd0 	bl	8000648 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e1f3      	b.n	8002e9e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ab6:	4b82      	ldr	r3, [pc, #520]	; (8002cc0 <HAL_RCC_OscConfig+0x570>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0f0      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac2:	4b7f      	ldr	r3, [pc, #508]	; (8002cc0 <HAL_RCC_OscConfig+0x570>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	061b      	lsls	r3, r3, #24
 8002ad0:	497b      	ldr	r1, [pc, #492]	; (8002cc0 <HAL_RCC_OscConfig+0x570>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	604b      	str	r3, [r1, #4]
 8002ad6:	e018      	b.n	8002b0a <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ad8:	4b79      	ldr	r3, [pc, #484]	; (8002cc0 <HAL_RCC_OscConfig+0x570>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a78      	ldr	r2, [pc, #480]	; (8002cc0 <HAL_RCC_OscConfig+0x570>)
 8002ade:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ae2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae4:	f7fd fdb0 	bl	8000648 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aec:	f7fd fdac 	bl	8000648 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e1cf      	b.n	8002e9e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002afe:	4b70      	ldr	r3, [pc, #448]	; (8002cc0 <HAL_RCC_OscConfig+0x570>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f0      	bne.n	8002aec <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d03c      	beq.n	8002b90 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d01c      	beq.n	8002b58 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b1e:	4b68      	ldr	r3, [pc, #416]	; (8002cc0 <HAL_RCC_OscConfig+0x570>)
 8002b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b24:	4a66      	ldr	r2, [pc, #408]	; (8002cc0 <HAL_RCC_OscConfig+0x570>)
 8002b26:	f043 0301 	orr.w	r3, r3, #1
 8002b2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2e:	f7fd fd8b 	bl	8000648 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b36:	f7fd fd87 	bl	8000648 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e1aa      	b.n	8002e9e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b48:	4b5d      	ldr	r3, [pc, #372]	; (8002cc0 <HAL_RCC_OscConfig+0x570>)
 8002b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0ef      	beq.n	8002b36 <HAL_RCC_OscConfig+0x3e6>
 8002b56:	e01b      	b.n	8002b90 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b58:	4b59      	ldr	r3, [pc, #356]	; (8002cc0 <HAL_RCC_OscConfig+0x570>)
 8002b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b5e:	4a58      	ldr	r2, [pc, #352]	; (8002cc0 <HAL_RCC_OscConfig+0x570>)
 8002b60:	f023 0301 	bic.w	r3, r3, #1
 8002b64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b68:	f7fd fd6e 	bl	8000648 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b70:	f7fd fd6a 	bl	8000648 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e18d      	b.n	8002e9e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b82:	4b4f      	ldr	r3, [pc, #316]	; (8002cc0 <HAL_RCC_OscConfig+0x570>)
 8002b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1ef      	bne.n	8002b70 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 80a5 	beq.w	8002ce8 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ba2:	4b47      	ldr	r3, [pc, #284]	; (8002cc0 <HAL_RCC_OscConfig+0x570>)
 8002ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10d      	bne.n	8002bca <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bae:	4b44      	ldr	r3, [pc, #272]	; (8002cc0 <HAL_RCC_OscConfig+0x570>)
 8002bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb2:	4a43      	ldr	r2, [pc, #268]	; (8002cc0 <HAL_RCC_OscConfig+0x570>)
 8002bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb8:	6593      	str	r3, [r2, #88]	; 0x58
 8002bba:	4b41      	ldr	r3, [pc, #260]	; (8002cc0 <HAL_RCC_OscConfig+0x570>)
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc2:	60bb      	str	r3, [r7, #8]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bca:	4b3e      	ldr	r3, [pc, #248]	; (8002cc4 <HAL_RCC_OscConfig+0x574>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d118      	bne.n	8002c08 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bd6:	4b3b      	ldr	r3, [pc, #236]	; (8002cc4 <HAL_RCC_OscConfig+0x574>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a3a      	ldr	r2, [pc, #232]	; (8002cc4 <HAL_RCC_OscConfig+0x574>)
 8002bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002be2:	f7fd fd31 	bl	8000648 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bea:	f7fd fd2d 	bl	8000648 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e150      	b.n	8002e9e <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bfc:	4b31      	ldr	r3, [pc, #196]	; (8002cc4 <HAL_RCC_OscConfig+0x574>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0f0      	beq.n	8002bea <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d108      	bne.n	8002c22 <HAL_RCC_OscConfig+0x4d2>
 8002c10:	4b2b      	ldr	r3, [pc, #172]	; (8002cc0 <HAL_RCC_OscConfig+0x570>)
 8002c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c16:	4a2a      	ldr	r2, [pc, #168]	; (8002cc0 <HAL_RCC_OscConfig+0x570>)
 8002c18:	f043 0301 	orr.w	r3, r3, #1
 8002c1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c20:	e024      	b.n	8002c6c <HAL_RCC_OscConfig+0x51c>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	2b05      	cmp	r3, #5
 8002c28:	d110      	bne.n	8002c4c <HAL_RCC_OscConfig+0x4fc>
 8002c2a:	4b25      	ldr	r3, [pc, #148]	; (8002cc0 <HAL_RCC_OscConfig+0x570>)
 8002c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c30:	4a23      	ldr	r2, [pc, #140]	; (8002cc0 <HAL_RCC_OscConfig+0x570>)
 8002c32:	f043 0304 	orr.w	r3, r3, #4
 8002c36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c3a:	4b21      	ldr	r3, [pc, #132]	; (8002cc0 <HAL_RCC_OscConfig+0x570>)
 8002c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c40:	4a1f      	ldr	r2, [pc, #124]	; (8002cc0 <HAL_RCC_OscConfig+0x570>)
 8002c42:	f043 0301 	orr.w	r3, r3, #1
 8002c46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c4a:	e00f      	b.n	8002c6c <HAL_RCC_OscConfig+0x51c>
 8002c4c:	4b1c      	ldr	r3, [pc, #112]	; (8002cc0 <HAL_RCC_OscConfig+0x570>)
 8002c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c52:	4a1b      	ldr	r2, [pc, #108]	; (8002cc0 <HAL_RCC_OscConfig+0x570>)
 8002c54:	f023 0301 	bic.w	r3, r3, #1
 8002c58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c5c:	4b18      	ldr	r3, [pc, #96]	; (8002cc0 <HAL_RCC_OscConfig+0x570>)
 8002c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c62:	4a17      	ldr	r2, [pc, #92]	; (8002cc0 <HAL_RCC_OscConfig+0x570>)
 8002c64:	f023 0304 	bic.w	r3, r3, #4
 8002c68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d016      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c74:	f7fd fce8 	bl	8000648 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c7a:	e00a      	b.n	8002c92 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c7c:	f7fd fce4 	bl	8000648 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e105      	b.n	8002e9e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c92:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <HAL_RCC_OscConfig+0x570>)
 8002c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0ed      	beq.n	8002c7c <HAL_RCC_OscConfig+0x52c>
 8002ca0:	e019      	b.n	8002cd6 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca2:	f7fd fcd1 	bl	8000648 <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ca8:	e00e      	b.n	8002cc8 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002caa:	f7fd fccd 	bl	8000648 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d905      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e0ee      	b.n	8002e9e <HAL_RCC_OscConfig+0x74e>
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cc8:	4b77      	ldr	r3, [pc, #476]	; (8002ea8 <HAL_RCC_OscConfig+0x758>)
 8002cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1e9      	bne.n	8002caa <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cd6:	7ffb      	ldrb	r3, [r7, #31]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d105      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cdc:	4b72      	ldr	r3, [pc, #456]	; (8002ea8 <HAL_RCC_OscConfig+0x758>)
 8002cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce0:	4a71      	ldr	r2, [pc, #452]	; (8002ea8 <HAL_RCC_OscConfig+0x758>)
 8002ce2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ce6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 80d5 	beq.w	8002e9c <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	2b0c      	cmp	r3, #12
 8002cf6:	f000 808e 	beq.w	8002e16 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d15b      	bne.n	8002dba <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d02:	4b69      	ldr	r3, [pc, #420]	; (8002ea8 <HAL_RCC_OscConfig+0x758>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a68      	ldr	r2, [pc, #416]	; (8002ea8 <HAL_RCC_OscConfig+0x758>)
 8002d08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0e:	f7fd fc9b 	bl	8000648 <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d16:	f7fd fc97 	bl	8000648 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e0ba      	b.n	8002e9e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d28:	4b5f      	ldr	r3, [pc, #380]	; (8002ea8 <HAL_RCC_OscConfig+0x758>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1f0      	bne.n	8002d16 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d34:	4b5c      	ldr	r3, [pc, #368]	; (8002ea8 <HAL_RCC_OscConfig+0x758>)
 8002d36:	68da      	ldr	r2, [r3, #12]
 8002d38:	4b5c      	ldr	r3, [pc, #368]	; (8002eac <HAL_RCC_OscConfig+0x75c>)
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d44:	3a01      	subs	r2, #1
 8002d46:	0112      	lsls	r2, r2, #4
 8002d48:	4311      	orrs	r1, r2
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d4e:	0212      	lsls	r2, r2, #8
 8002d50:	4311      	orrs	r1, r2
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d56:	0852      	lsrs	r2, r2, #1
 8002d58:	3a01      	subs	r2, #1
 8002d5a:	0552      	lsls	r2, r2, #21
 8002d5c:	4311      	orrs	r1, r2
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d62:	0852      	lsrs	r2, r2, #1
 8002d64:	3a01      	subs	r2, #1
 8002d66:	0652      	lsls	r2, r2, #25
 8002d68:	4311      	orrs	r1, r2
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d6e:	0912      	lsrs	r2, r2, #4
 8002d70:	0452      	lsls	r2, r2, #17
 8002d72:	430a      	orrs	r2, r1
 8002d74:	494c      	ldr	r1, [pc, #304]	; (8002ea8 <HAL_RCC_OscConfig+0x758>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d7a:	4b4b      	ldr	r3, [pc, #300]	; (8002ea8 <HAL_RCC_OscConfig+0x758>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a4a      	ldr	r2, [pc, #296]	; (8002ea8 <HAL_RCC_OscConfig+0x758>)
 8002d80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d84:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d86:	4b48      	ldr	r3, [pc, #288]	; (8002ea8 <HAL_RCC_OscConfig+0x758>)
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	4a47      	ldr	r2, [pc, #284]	; (8002ea8 <HAL_RCC_OscConfig+0x758>)
 8002d8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d90:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d92:	f7fd fc59 	bl	8000648 <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d9a:	f7fd fc55 	bl	8000648 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e078      	b.n	8002e9e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dac:	4b3e      	ldr	r3, [pc, #248]	; (8002ea8 <HAL_RCC_OscConfig+0x758>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0f0      	beq.n	8002d9a <HAL_RCC_OscConfig+0x64a>
 8002db8:	e070      	b.n	8002e9c <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dba:	4b3b      	ldr	r3, [pc, #236]	; (8002ea8 <HAL_RCC_OscConfig+0x758>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a3a      	ldr	r2, [pc, #232]	; (8002ea8 <HAL_RCC_OscConfig+0x758>)
 8002dc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dc4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002dc6:	4b38      	ldr	r3, [pc, #224]	; (8002ea8 <HAL_RCC_OscConfig+0x758>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d105      	bne.n	8002dde <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002dd2:	4b35      	ldr	r3, [pc, #212]	; (8002ea8 <HAL_RCC_OscConfig+0x758>)
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	4a34      	ldr	r2, [pc, #208]	; (8002ea8 <HAL_RCC_OscConfig+0x758>)
 8002dd8:	f023 0303 	bic.w	r3, r3, #3
 8002ddc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002dde:	4b32      	ldr	r3, [pc, #200]	; (8002ea8 <HAL_RCC_OscConfig+0x758>)
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	4a31      	ldr	r2, [pc, #196]	; (8002ea8 <HAL_RCC_OscConfig+0x758>)
 8002de4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002de8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dec:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dee:	f7fd fc2b 	bl	8000648 <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df6:	f7fd fc27 	bl	8000648 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e04a      	b.n	8002e9e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e08:	4b27      	ldr	r3, [pc, #156]	; (8002ea8 <HAL_RCC_OscConfig+0x758>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1f0      	bne.n	8002df6 <HAL_RCC_OscConfig+0x6a6>
 8002e14:	e042      	b.n	8002e9c <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d101      	bne.n	8002e22 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e03d      	b.n	8002e9e <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8002e22:	4b21      	ldr	r3, [pc, #132]	; (8002ea8 <HAL_RCC_OscConfig+0x758>)
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	f003 0203 	and.w	r2, r3, #3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d130      	bne.n	8002e98 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e40:	3b01      	subs	r3, #1
 8002e42:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d127      	bne.n	8002e98 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e52:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d11f      	bne.n	8002e98 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e62:	2a07      	cmp	r2, #7
 8002e64:	bf14      	ite	ne
 8002e66:	2201      	movne	r2, #1
 8002e68:	2200      	moveq	r2, #0
 8002e6a:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d113      	bne.n	8002e98 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e7a:	085b      	lsrs	r3, r3, #1
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d109      	bne.n	8002e98 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	085b      	lsrs	r3, r3, #1
 8002e90:	3b01      	subs	r3, #1
 8002e92:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d001      	beq.n	8002e9c <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e000      	b.n	8002e9e <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3720      	adds	r7, #32
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	f99d808c 	.word	0xf99d808c

08002eb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e0c8      	b.n	8003056 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ec4:	4b66      	ldr	r3, [pc, #408]	; (8003060 <HAL_RCC_ClockConfig+0x1b0>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d910      	bls.n	8002ef4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed2:	4b63      	ldr	r3, [pc, #396]	; (8003060 <HAL_RCC_ClockConfig+0x1b0>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f023 0207 	bic.w	r2, r3, #7
 8002eda:	4961      	ldr	r1, [pc, #388]	; (8003060 <HAL_RCC_ClockConfig+0x1b0>)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee2:	4b5f      	ldr	r3, [pc, #380]	; (8003060 <HAL_RCC_ClockConfig+0x1b0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d001      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e0b0      	b.n	8003056 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d04c      	beq.n	8002f9a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b03      	cmp	r3, #3
 8002f06:	d107      	bne.n	8002f18 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f08:	4b56      	ldr	r3, [pc, #344]	; (8003064 <HAL_RCC_ClockConfig+0x1b4>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d121      	bne.n	8002f58 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e09e      	b.n	8003056 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d107      	bne.n	8002f30 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f20:	4b50      	ldr	r3, [pc, #320]	; (8003064 <HAL_RCC_ClockConfig+0x1b4>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d115      	bne.n	8002f58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e092      	b.n	8003056 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d107      	bne.n	8002f48 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f38:	4b4a      	ldr	r3, [pc, #296]	; (8003064 <HAL_RCC_ClockConfig+0x1b4>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d109      	bne.n	8002f58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e086      	b.n	8003056 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f48:	4b46      	ldr	r3, [pc, #280]	; (8003064 <HAL_RCC_ClockConfig+0x1b4>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d101      	bne.n	8002f58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e07e      	b.n	8003056 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f58:	4b42      	ldr	r3, [pc, #264]	; (8003064 <HAL_RCC_ClockConfig+0x1b4>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f023 0203 	bic.w	r2, r3, #3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	493f      	ldr	r1, [pc, #252]	; (8003064 <HAL_RCC_ClockConfig+0x1b4>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f6a:	f7fd fb6d 	bl	8000648 <HAL_GetTick>
 8002f6e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f70:	e00a      	b.n	8002f88 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f72:	f7fd fb69 	bl	8000648 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e066      	b.n	8003056 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f88:	4b36      	ldr	r3, [pc, #216]	; (8003064 <HAL_RCC_ClockConfig+0x1b4>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 020c 	and.w	r2, r3, #12
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d1eb      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d008      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa6:	4b2f      	ldr	r3, [pc, #188]	; (8003064 <HAL_RCC_ClockConfig+0x1b4>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	492c      	ldr	r1, [pc, #176]	; (8003064 <HAL_RCC_ClockConfig+0x1b4>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb8:	4b29      	ldr	r3, [pc, #164]	; (8003060 <HAL_RCC_ClockConfig+0x1b0>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d210      	bcs.n	8002fe8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc6:	4b26      	ldr	r3, [pc, #152]	; (8003060 <HAL_RCC_ClockConfig+0x1b0>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f023 0207 	bic.w	r2, r3, #7
 8002fce:	4924      	ldr	r1, [pc, #144]	; (8003060 <HAL_RCC_ClockConfig+0x1b0>)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd6:	4b22      	ldr	r3, [pc, #136]	; (8003060 <HAL_RCC_ClockConfig+0x1b0>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d001      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e036      	b.n	8003056 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d008      	beq.n	8003006 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ff4:	4b1b      	ldr	r3, [pc, #108]	; (8003064 <HAL_RCC_ClockConfig+0x1b4>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	4918      	ldr	r1, [pc, #96]	; (8003064 <HAL_RCC_ClockConfig+0x1b4>)
 8003002:	4313      	orrs	r3, r2
 8003004:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0308 	and.w	r3, r3, #8
 800300e:	2b00      	cmp	r3, #0
 8003010:	d009      	beq.n	8003026 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003012:	4b14      	ldr	r3, [pc, #80]	; (8003064 <HAL_RCC_ClockConfig+0x1b4>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	4910      	ldr	r1, [pc, #64]	; (8003064 <HAL_RCC_ClockConfig+0x1b4>)
 8003022:	4313      	orrs	r3, r2
 8003024:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003026:	f000 f825 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 800302a:	4601      	mov	r1, r0
 800302c:	4b0d      	ldr	r3, [pc, #52]	; (8003064 <HAL_RCC_ClockConfig+0x1b4>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	091b      	lsrs	r3, r3, #4
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	4a0c      	ldr	r2, [pc, #48]	; (8003068 <HAL_RCC_ClockConfig+0x1b8>)
 8003038:	5cd3      	ldrb	r3, [r2, r3]
 800303a:	f003 031f 	and.w	r3, r3, #31
 800303e:	fa21 f303 	lsr.w	r3, r1, r3
 8003042:	4a0a      	ldr	r2, [pc, #40]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8003044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003046:	4b0a      	ldr	r3, [pc, #40]	; (8003070 <HAL_RCC_ClockConfig+0x1c0>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f7fd fab0 	bl	80005b0 <HAL_InitTick>
 8003050:	4603      	mov	r3, r0
 8003052:	72fb      	strb	r3, [r7, #11]

  return status;
 8003054:	7afb      	ldrb	r3, [r7, #11]
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40022000 	.word	0x40022000
 8003064:	40021000 	.word	0x40021000
 8003068:	080061ac 	.word	0x080061ac
 800306c:	2000000c 	.word	0x2000000c
 8003070:	20000000 	.word	0x20000000

08003074 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003074:	b480      	push	{r7}
 8003076:	b089      	sub	sp, #36	; 0x24
 8003078:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800307a:	2300      	movs	r3, #0
 800307c:	61fb      	str	r3, [r7, #28]
 800307e:	2300      	movs	r3, #0
 8003080:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003082:	4b3d      	ldr	r3, [pc, #244]	; (8003178 <HAL_RCC_GetSysClockFreq+0x104>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 030c 	and.w	r3, r3, #12
 800308a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800308c:	4b3a      	ldr	r3, [pc, #232]	; (8003178 <HAL_RCC_GetSysClockFreq+0x104>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	f003 0303 	and.w	r3, r3, #3
 8003094:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d005      	beq.n	80030a8 <HAL_RCC_GetSysClockFreq+0x34>
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	2b0c      	cmp	r3, #12
 80030a0:	d121      	bne.n	80030e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d11e      	bne.n	80030e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030a8:	4b33      	ldr	r3, [pc, #204]	; (8003178 <HAL_RCC_GetSysClockFreq+0x104>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0308 	and.w	r3, r3, #8
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d107      	bne.n	80030c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030b4:	4b30      	ldr	r3, [pc, #192]	; (8003178 <HAL_RCC_GetSysClockFreq+0x104>)
 80030b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ba:	0a1b      	lsrs	r3, r3, #8
 80030bc:	f003 030f 	and.w	r3, r3, #15
 80030c0:	61fb      	str	r3, [r7, #28]
 80030c2:	e005      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030c4:	4b2c      	ldr	r3, [pc, #176]	; (8003178 <HAL_RCC_GetSysClockFreq+0x104>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	091b      	lsrs	r3, r3, #4
 80030ca:	f003 030f 	and.w	r3, r3, #15
 80030ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80030d0:	4a2a      	ldr	r2, [pc, #168]	; (800317c <HAL_RCC_GetSysClockFreq+0x108>)
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10d      	bne.n	80030fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030e4:	e00a      	b.n	80030fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	2b04      	cmp	r3, #4
 80030ea:	d102      	bne.n	80030f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030ec:	4b24      	ldr	r3, [pc, #144]	; (8003180 <HAL_RCC_GetSysClockFreq+0x10c>)
 80030ee:	61bb      	str	r3, [r7, #24]
 80030f0:	e004      	b.n	80030fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	d101      	bne.n	80030fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030f8:	4b22      	ldr	r3, [pc, #136]	; (8003184 <HAL_RCC_GetSysClockFreq+0x110>)
 80030fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	2b0c      	cmp	r3, #12
 8003100:	d133      	bne.n	800316a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003102:	4b1d      	ldr	r3, [pc, #116]	; (8003178 <HAL_RCC_GetSysClockFreq+0x104>)
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2b02      	cmp	r3, #2
 8003110:	d002      	beq.n	8003118 <HAL_RCC_GetSysClockFreq+0xa4>
 8003112:	2b03      	cmp	r3, #3
 8003114:	d003      	beq.n	800311e <HAL_RCC_GetSysClockFreq+0xaa>
 8003116:	e005      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003118:	4b19      	ldr	r3, [pc, #100]	; (8003180 <HAL_RCC_GetSysClockFreq+0x10c>)
 800311a:	617b      	str	r3, [r7, #20]
      break;
 800311c:	e005      	b.n	800312a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800311e:	4b19      	ldr	r3, [pc, #100]	; (8003184 <HAL_RCC_GetSysClockFreq+0x110>)
 8003120:	617b      	str	r3, [r7, #20]
      break;
 8003122:	e002      	b.n	800312a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	617b      	str	r3, [r7, #20]
      break;
 8003128:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800312a:	4b13      	ldr	r3, [pc, #76]	; (8003178 <HAL_RCC_GetSysClockFreq+0x104>)
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	091b      	lsrs	r3, r3, #4
 8003130:	f003 0307 	and.w	r3, r3, #7
 8003134:	3301      	adds	r3, #1
 8003136:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003138:	4b0f      	ldr	r3, [pc, #60]	; (8003178 <HAL_RCC_GetSysClockFreq+0x104>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	0a1b      	lsrs	r3, r3, #8
 800313e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	fb02 f203 	mul.w	r2, r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	fbb2 f3f3 	udiv	r3, r2, r3
 800314e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003150:	4b09      	ldr	r3, [pc, #36]	; (8003178 <HAL_RCC_GetSysClockFreq+0x104>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	0e5b      	lsrs	r3, r3, #25
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	3301      	adds	r3, #1
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	fbb2 f3f3 	udiv	r3, r2, r3
 8003168:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800316a:	69bb      	ldr	r3, [r7, #24]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3724      	adds	r7, #36	; 0x24
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	40021000 	.word	0x40021000
 800317c:	080061c4 	.word	0x080061c4
 8003180:	00f42400 	.word	0x00f42400
 8003184:	007a1200 	.word	0x007a1200

08003188 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800318c:	4b03      	ldr	r3, [pc, #12]	; (800319c <HAL_RCC_GetHCLKFreq+0x14>)
 800318e:	681b      	ldr	r3, [r3, #0]
}
 8003190:	4618      	mov	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	2000000c 	.word	0x2000000c

080031a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031a4:	f7ff fff0 	bl	8003188 <HAL_RCC_GetHCLKFreq>
 80031a8:	4601      	mov	r1, r0
 80031aa:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	0a1b      	lsrs	r3, r3, #8
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	4a04      	ldr	r2, [pc, #16]	; (80031c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031b6:	5cd3      	ldrb	r3, [r2, r3]
 80031b8:	f003 031f 	and.w	r3, r3, #31
 80031bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40021000 	.word	0x40021000
 80031c8:	080061bc 	.word	0x080061bc

080031cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031d0:	f7ff ffda 	bl	8003188 <HAL_RCC_GetHCLKFreq>
 80031d4:	4601      	mov	r1, r0
 80031d6:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	0adb      	lsrs	r3, r3, #11
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	4a04      	ldr	r2, [pc, #16]	; (80031f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031e2:	5cd3      	ldrb	r3, [r2, r3]
 80031e4:	f003 031f 	and.w	r3, r3, #31
 80031e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40021000 	.word	0x40021000
 80031f4:	080061bc 	.word	0x080061bc

080031f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003200:	2300      	movs	r3, #0
 8003202:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003204:	4b2a      	ldr	r3, [pc, #168]	; (80032b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d003      	beq.n	8003218 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003210:	f7ff fa3a 	bl	8002688 <HAL_PWREx_GetVoltageRange>
 8003214:	6178      	str	r0, [r7, #20]
 8003216:	e014      	b.n	8003242 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003218:	4b25      	ldr	r3, [pc, #148]	; (80032b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800321a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321c:	4a24      	ldr	r2, [pc, #144]	; (80032b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800321e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003222:	6593      	str	r3, [r2, #88]	; 0x58
 8003224:	4b22      	ldr	r3, [pc, #136]	; (80032b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003230:	f7ff fa2a 	bl	8002688 <HAL_PWREx_GetVoltageRange>
 8003234:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003236:	4b1e      	ldr	r3, [pc, #120]	; (80032b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323a:	4a1d      	ldr	r2, [pc, #116]	; (80032b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800323c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003240:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003248:	d10b      	bne.n	8003262 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b80      	cmp	r3, #128	; 0x80
 800324e:	d919      	bls.n	8003284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2ba0      	cmp	r3, #160	; 0xa0
 8003254:	d902      	bls.n	800325c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003256:	2302      	movs	r3, #2
 8003258:	613b      	str	r3, [r7, #16]
 800325a:	e013      	b.n	8003284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800325c:	2301      	movs	r3, #1
 800325e:	613b      	str	r3, [r7, #16]
 8003260:	e010      	b.n	8003284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b80      	cmp	r3, #128	; 0x80
 8003266:	d902      	bls.n	800326e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003268:	2303      	movs	r3, #3
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	e00a      	b.n	8003284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b80      	cmp	r3, #128	; 0x80
 8003272:	d102      	bne.n	800327a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003274:	2302      	movs	r3, #2
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	e004      	b.n	8003284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b70      	cmp	r3, #112	; 0x70
 800327e:	d101      	bne.n	8003284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003280:	2301      	movs	r3, #1
 8003282:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003284:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f023 0207 	bic.w	r2, r3, #7
 800328c:	4909      	ldr	r1, [pc, #36]	; (80032b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	4313      	orrs	r3, r2
 8003292:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003294:	4b07      	ldr	r3, [pc, #28]	; (80032b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d001      	beq.n	80032a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e000      	b.n	80032a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3718      	adds	r7, #24
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40021000 	.word	0x40021000
 80032b4:	40022000 	.word	0x40022000

080032b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032c0:	2300      	movs	r3, #0
 80032c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032c4:	2300      	movs	r3, #0
 80032c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d03f      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032dc:	d01c      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80032de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032e2:	d802      	bhi.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x32>
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00e      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80032e8:	e01f      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x72>
 80032ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032ee:	d003      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80032f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032f4:	d01c      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80032f6:	e018      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032f8:	4b85      	ldr	r3, [pc, #532]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	4a84      	ldr	r2, [pc, #528]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003302:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003304:	e015      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	3304      	adds	r3, #4
 800330a:	2100      	movs	r1, #0
 800330c:	4618      	mov	r0, r3
 800330e:	f000 fab9 	bl	8003884 <RCCEx_PLLSAI1_Config>
 8003312:	4603      	mov	r3, r0
 8003314:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003316:	e00c      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3320      	adds	r3, #32
 800331c:	2100      	movs	r1, #0
 800331e:	4618      	mov	r0, r3
 8003320:	f000 fba0 	bl	8003a64 <RCCEx_PLLSAI2_Config>
 8003324:	4603      	mov	r3, r0
 8003326:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003328:	e003      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	74fb      	strb	r3, [r7, #19]
      break;
 800332e:	e000      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003330:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003332:	7cfb      	ldrb	r3, [r7, #19]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10b      	bne.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003338:	4b75      	ldr	r3, [pc, #468]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800333a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003346:	4972      	ldr	r1, [pc, #456]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003348:	4313      	orrs	r3, r2
 800334a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800334e:	e001      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003350:	7cfb      	ldrb	r3, [r7, #19]
 8003352:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d03f      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003364:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003368:	d01c      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800336a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800336e:	d802      	bhi.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00e      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003374:	e01f      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003376:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800337a:	d003      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800337c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003380:	d01c      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003382:	e018      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003384:	4b62      	ldr	r3, [pc, #392]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	4a61      	ldr	r2, [pc, #388]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800338a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800338e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003390:	e015      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3304      	adds	r3, #4
 8003396:	2100      	movs	r1, #0
 8003398:	4618      	mov	r0, r3
 800339a:	f000 fa73 	bl	8003884 <RCCEx_PLLSAI1_Config>
 800339e:	4603      	mov	r3, r0
 80033a0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033a2:	e00c      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3320      	adds	r3, #32
 80033a8:	2100      	movs	r1, #0
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 fb5a 	bl	8003a64 <RCCEx_PLLSAI2_Config>
 80033b0:	4603      	mov	r3, r0
 80033b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033b4:	e003      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	74fb      	strb	r3, [r7, #19]
      break;
 80033ba:	e000      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80033bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033be:	7cfb      	ldrb	r3, [r7, #19]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10b      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033c4:	4b52      	ldr	r3, [pc, #328]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033d2:	494f      	ldr	r1, [pc, #316]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80033da:	e001      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033dc:	7cfb      	ldrb	r3, [r7, #19]
 80033de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 80a0 	beq.w	800352e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ee:	2300      	movs	r3, #0
 80033f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033f2:	4b47      	ldr	r3, [pc, #284]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80033fe:	2301      	movs	r3, #1
 8003400:	e000      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003402:	2300      	movs	r3, #0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00d      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003408:	4b41      	ldr	r3, [pc, #260]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800340a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340c:	4a40      	ldr	r2, [pc, #256]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800340e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003412:	6593      	str	r3, [r2, #88]	; 0x58
 8003414:	4b3e      	ldr	r3, [pc, #248]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003420:	2301      	movs	r3, #1
 8003422:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003424:	4b3b      	ldr	r3, [pc, #236]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a3a      	ldr	r2, [pc, #232]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800342a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800342e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003430:	f7fd f90a 	bl	8000648 <HAL_GetTick>
 8003434:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003436:	e009      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003438:	f7fd f906 	bl	8000648 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d902      	bls.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	74fb      	strb	r3, [r7, #19]
        break;
 800344a:	e005      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800344c:	4b31      	ldr	r3, [pc, #196]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003454:	2b00      	cmp	r3, #0
 8003456:	d0ef      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003458:	7cfb      	ldrb	r3, [r7, #19]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d15c      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800345e:	4b2c      	ldr	r3, [pc, #176]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003464:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003468:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d01f      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	429a      	cmp	r2, r3
 800347a:	d019      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800347c:	4b24      	ldr	r3, [pc, #144]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800347e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003486:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003488:	4b21      	ldr	r3, [pc, #132]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800348a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348e:	4a20      	ldr	r2, [pc, #128]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003494:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003498:	4b1d      	ldr	r3, [pc, #116]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800349a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800349e:	4a1c      	ldr	r2, [pc, #112]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034a8:	4a19      	ldr	r2, [pc, #100]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d016      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ba:	f7fd f8c5 	bl	8000648 <HAL_GetTick>
 80034be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034c0:	e00b      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034c2:	f7fd f8c1 	bl	8000648 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d902      	bls.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	74fb      	strb	r3, [r7, #19]
            break;
 80034d8:	e006      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034da:	4b0d      	ldr	r3, [pc, #52]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0ec      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80034e8:	7cfb      	ldrb	r3, [r7, #19]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10c      	bne.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034ee:	4b08      	ldr	r3, [pc, #32]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034fe:	4904      	ldr	r1, [pc, #16]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003500:	4313      	orrs	r3, r2
 8003502:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003506:	e009      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003508:	7cfb      	ldrb	r3, [r7, #19]
 800350a:	74bb      	strb	r3, [r7, #18]
 800350c:	e006      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800350e:	bf00      	nop
 8003510:	40021000 	.word	0x40021000
 8003514:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003518:	7cfb      	ldrb	r3, [r7, #19]
 800351a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800351c:	7c7b      	ldrb	r3, [r7, #17]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d105      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003522:	4b9e      	ldr	r3, [pc, #632]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003526:	4a9d      	ldr	r2, [pc, #628]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003528:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800352c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00a      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800353a:	4b98      	ldr	r3, [pc, #608]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800353c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003540:	f023 0203 	bic.w	r2, r3, #3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003548:	4994      	ldr	r1, [pc, #592]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800354a:	4313      	orrs	r3, r2
 800354c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00a      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800355c:	4b8f      	ldr	r3, [pc, #572]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800355e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003562:	f023 020c 	bic.w	r2, r3, #12
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356a:	498c      	ldr	r1, [pc, #560]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800356c:	4313      	orrs	r3, r2
 800356e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0304 	and.w	r3, r3, #4
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00a      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800357e:	4b87      	ldr	r3, [pc, #540]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003584:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358c:	4983      	ldr	r1, [pc, #524]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800358e:	4313      	orrs	r3, r2
 8003590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0308 	and.w	r3, r3, #8
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00a      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035a0:	4b7e      	ldr	r3, [pc, #504]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ae:	497b      	ldr	r1, [pc, #492]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0310 	and.w	r3, r3, #16
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00a      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035c2:	4b76      	ldr	r3, [pc, #472]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035d0:	4972      	ldr	r1, [pc, #456]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0320 	and.w	r3, r3, #32
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00a      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035e4:	4b6d      	ldr	r3, [pc, #436]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f2:	496a      	ldr	r1, [pc, #424]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00a      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003606:	4b65      	ldr	r3, [pc, #404]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003614:	4961      	ldr	r1, [pc, #388]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003616:	4313      	orrs	r3, r2
 8003618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00a      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003628:	4b5c      	ldr	r3, [pc, #368]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800362a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003636:	4959      	ldr	r1, [pc, #356]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003638:	4313      	orrs	r3, r2
 800363a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00a      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800364a:	4b54      	ldr	r3, [pc, #336]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800364c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003650:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003658:	4950      	ldr	r1, [pc, #320]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800365a:	4313      	orrs	r3, r2
 800365c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00a      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800366c:	4b4b      	ldr	r3, [pc, #300]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800366e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003672:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367a:	4948      	ldr	r1, [pc, #288]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800367c:	4313      	orrs	r3, r2
 800367e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00a      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800368e:	4b43      	ldr	r3, [pc, #268]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003694:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369c:	493f      	ldr	r1, [pc, #252]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d028      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036b0:	4b3a      	ldr	r3, [pc, #232]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036be:	4937      	ldr	r1, [pc, #220]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036ce:	d106      	bne.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036d0:	4b32      	ldr	r3, [pc, #200]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	4a31      	ldr	r2, [pc, #196]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036da:	60d3      	str	r3, [r2, #12]
 80036dc:	e011      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036e6:	d10c      	bne.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3304      	adds	r3, #4
 80036ec:	2101      	movs	r1, #1
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 f8c8 	bl	8003884 <RCCEx_PLLSAI1_Config>
 80036f4:	4603      	mov	r3, r0
 80036f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80036f8:	7cfb      	ldrb	r3, [r7, #19]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80036fe:	7cfb      	ldrb	r3, [r7, #19]
 8003700:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d028      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800370e:	4b23      	ldr	r3, [pc, #140]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003714:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371c:	491f      	ldr	r1, [pc, #124]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800371e:	4313      	orrs	r3, r2
 8003720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003728:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800372c:	d106      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800372e:	4b1b      	ldr	r3, [pc, #108]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	4a1a      	ldr	r2, [pc, #104]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003734:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003738:	60d3      	str	r3, [r2, #12]
 800373a:	e011      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003740:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003744:	d10c      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	3304      	adds	r3, #4
 800374a:	2101      	movs	r1, #1
 800374c:	4618      	mov	r0, r3
 800374e:	f000 f899 	bl	8003884 <RCCEx_PLLSAI1_Config>
 8003752:	4603      	mov	r3, r0
 8003754:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003756:	7cfb      	ldrb	r3, [r7, #19]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800375c:	7cfb      	ldrb	r3, [r7, #19]
 800375e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d02b      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800376c:	4b0b      	ldr	r3, [pc, #44]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800376e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003772:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800377a:	4908      	ldr	r1, [pc, #32]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800377c:	4313      	orrs	r3, r2
 800377e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003786:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800378a:	d109      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800378c:	4b03      	ldr	r3, [pc, #12]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	4a02      	ldr	r2, [pc, #8]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003792:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003796:	60d3      	str	r3, [r2, #12]
 8003798:	e014      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800379a:	bf00      	nop
 800379c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037a8:	d10c      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3304      	adds	r3, #4
 80037ae:	2101      	movs	r1, #1
 80037b0:	4618      	mov	r0, r3
 80037b2:	f000 f867 	bl	8003884 <RCCEx_PLLSAI1_Config>
 80037b6:	4603      	mov	r3, r0
 80037b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037ba:	7cfb      	ldrb	r3, [r7, #19]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80037c0:	7cfb      	ldrb	r3, [r7, #19]
 80037c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d02f      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037d0:	4b2b      	ldr	r3, [pc, #172]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037de:	4928      	ldr	r1, [pc, #160]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037ee:	d10d      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3304      	adds	r3, #4
 80037f4:	2102      	movs	r1, #2
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 f844 	bl	8003884 <RCCEx_PLLSAI1_Config>
 80037fc:	4603      	mov	r3, r0
 80037fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003800:	7cfb      	ldrb	r3, [r7, #19]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d014      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003806:	7cfb      	ldrb	r3, [r7, #19]
 8003808:	74bb      	strb	r3, [r7, #18]
 800380a:	e011      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003810:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003814:	d10c      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3320      	adds	r3, #32
 800381a:	2102      	movs	r1, #2
 800381c:	4618      	mov	r0, r3
 800381e:	f000 f921 	bl	8003a64 <RCCEx_PLLSAI2_Config>
 8003822:	4603      	mov	r3, r0
 8003824:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003826:	7cfb      	ldrb	r3, [r7, #19]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800382c:	7cfb      	ldrb	r3, [r7, #19]
 800382e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00a      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800383c:	4b10      	ldr	r3, [pc, #64]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800383e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003842:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800384a:	490d      	ldr	r1, [pc, #52]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800384c:	4313      	orrs	r3, r2
 800384e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00b      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800385e:	4b08      	ldr	r3, [pc, #32]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003864:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800386e:	4904      	ldr	r1, [pc, #16]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003870:	4313      	orrs	r3, r2
 8003872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003876:	7cbb      	ldrb	r3, [r7, #18]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3718      	adds	r7, #24
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	40021000 	.word	0x40021000

08003884 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800388e:	2300      	movs	r3, #0
 8003890:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003892:	4b73      	ldr	r3, [pc, #460]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d018      	beq.n	80038d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800389e:	4b70      	ldr	r3, [pc, #448]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	f003 0203 	and.w	r2, r3, #3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d10d      	bne.n	80038ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
       ||
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d009      	beq.n	80038ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80038b6:	4b6a      	ldr	r3, [pc, #424]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	091b      	lsrs	r3, r3, #4
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	1c5a      	adds	r2, r3, #1
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
       ||
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d044      	beq.n	8003954 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	73fb      	strb	r3, [r7, #15]
 80038ce:	e041      	b.n	8003954 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d00c      	beq.n	80038f2 <RCCEx_PLLSAI1_Config+0x6e>
 80038d8:	2b03      	cmp	r3, #3
 80038da:	d013      	beq.n	8003904 <RCCEx_PLLSAI1_Config+0x80>
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d120      	bne.n	8003922 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038e0:	4b5f      	ldr	r3, [pc, #380]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d11d      	bne.n	8003928 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038f0:	e01a      	b.n	8003928 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038f2:	4b5b      	ldr	r3, [pc, #364]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d116      	bne.n	800392c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003902:	e013      	b.n	800392c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003904:	4b56      	ldr	r3, [pc, #344]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10f      	bne.n	8003930 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003910:	4b53      	ldr	r3, [pc, #332]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d109      	bne.n	8003930 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003920:	e006      	b.n	8003930 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	73fb      	strb	r3, [r7, #15]
      break;
 8003926:	e004      	b.n	8003932 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003928:	bf00      	nop
 800392a:	e002      	b.n	8003932 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800392c:	bf00      	nop
 800392e:	e000      	b.n	8003932 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003930:	bf00      	nop
    }

    if(status == HAL_OK)
 8003932:	7bfb      	ldrb	r3, [r7, #15]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10d      	bne.n	8003954 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003938:	4b49      	ldr	r3, [pc, #292]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6819      	ldr	r1, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	3b01      	subs	r3, #1
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	430b      	orrs	r3, r1
 800394e:	4944      	ldr	r1, [pc, #272]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003950:	4313      	orrs	r3, r2
 8003952:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003954:	7bfb      	ldrb	r3, [r7, #15]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d17d      	bne.n	8003a56 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800395a:	4b41      	ldr	r3, [pc, #260]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a40      	ldr	r2, [pc, #256]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003960:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003964:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003966:	f7fc fe6f 	bl	8000648 <HAL_GetTick>
 800396a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800396c:	e009      	b.n	8003982 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800396e:	f7fc fe6b 	bl	8000648 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d902      	bls.n	8003982 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	73fb      	strb	r3, [r7, #15]
        break;
 8003980:	e005      	b.n	800398e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003982:	4b37      	ldr	r3, [pc, #220]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1ef      	bne.n	800396e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800398e:	7bfb      	ldrb	r3, [r7, #15]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d160      	bne.n	8003a56 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d111      	bne.n	80039be <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800399a:	4b31      	ldr	r3, [pc, #196]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80039a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6892      	ldr	r2, [r2, #8]
 80039aa:	0211      	lsls	r1, r2, #8
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	68d2      	ldr	r2, [r2, #12]
 80039b0:	0912      	lsrs	r2, r2, #4
 80039b2:	0452      	lsls	r2, r2, #17
 80039b4:	430a      	orrs	r2, r1
 80039b6:	492a      	ldr	r1, [pc, #168]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	610b      	str	r3, [r1, #16]
 80039bc:	e027      	b.n	8003a0e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d112      	bne.n	80039ea <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039c4:	4b26      	ldr	r3, [pc, #152]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80039cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6892      	ldr	r2, [r2, #8]
 80039d4:	0211      	lsls	r1, r2, #8
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6912      	ldr	r2, [r2, #16]
 80039da:	0852      	lsrs	r2, r2, #1
 80039dc:	3a01      	subs	r2, #1
 80039de:	0552      	lsls	r2, r2, #21
 80039e0:	430a      	orrs	r2, r1
 80039e2:	491f      	ldr	r1, [pc, #124]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	610b      	str	r3, [r1, #16]
 80039e8:	e011      	b.n	8003a0e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039ea:	4b1d      	ldr	r3, [pc, #116]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80039f2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6892      	ldr	r2, [r2, #8]
 80039fa:	0211      	lsls	r1, r2, #8
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6952      	ldr	r2, [r2, #20]
 8003a00:	0852      	lsrs	r2, r2, #1
 8003a02:	3a01      	subs	r2, #1
 8003a04:	0652      	lsls	r2, r2, #25
 8003a06:	430a      	orrs	r2, r1
 8003a08:	4915      	ldr	r1, [pc, #84]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a0e:	4b14      	ldr	r3, [pc, #80]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a13      	ldr	r2, [pc, #76]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a18:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a1a:	f7fc fe15 	bl	8000648 <HAL_GetTick>
 8003a1e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a20:	e009      	b.n	8003a36 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a22:	f7fc fe11 	bl	8000648 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d902      	bls.n	8003a36 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	73fb      	strb	r3, [r7, #15]
          break;
 8003a34:	e005      	b.n	8003a42 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a36:	4b0a      	ldr	r3, [pc, #40]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d0ef      	beq.n	8003a22 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003a42:	7bfb      	ldrb	r3, [r7, #15]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d106      	bne.n	8003a56 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a48:	4b05      	ldr	r3, [pc, #20]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a4a:	691a      	ldr	r2, [r3, #16]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	4903      	ldr	r1, [pc, #12]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40021000 	.word	0x40021000

08003a64 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a72:	4b68      	ldr	r3, [pc, #416]	; (8003c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f003 0303 	and.w	r3, r3, #3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d018      	beq.n	8003ab0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a7e:	4b65      	ldr	r3, [pc, #404]	; (8003c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f003 0203 	and.w	r2, r3, #3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d10d      	bne.n	8003aaa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
       ||
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d009      	beq.n	8003aaa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003a96:	4b5f      	ldr	r3, [pc, #380]	; (8003c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	091b      	lsrs	r3, r3, #4
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
       ||
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d044      	beq.n	8003b34 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	73fb      	strb	r3, [r7, #15]
 8003aae:	e041      	b.n	8003b34 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d00c      	beq.n	8003ad2 <RCCEx_PLLSAI2_Config+0x6e>
 8003ab8:	2b03      	cmp	r3, #3
 8003aba:	d013      	beq.n	8003ae4 <RCCEx_PLLSAI2_Config+0x80>
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d120      	bne.n	8003b02 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ac0:	4b54      	ldr	r3, [pc, #336]	; (8003c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d11d      	bne.n	8003b08 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ad0:	e01a      	b.n	8003b08 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ad2:	4b50      	ldr	r3, [pc, #320]	; (8003c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d116      	bne.n	8003b0c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ae2:	e013      	b.n	8003b0c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ae4:	4b4b      	ldr	r3, [pc, #300]	; (8003c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10f      	bne.n	8003b10 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003af0:	4b48      	ldr	r3, [pc, #288]	; (8003c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d109      	bne.n	8003b10 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b00:	e006      	b.n	8003b10 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	73fb      	strb	r3, [r7, #15]
      break;
 8003b06:	e004      	b.n	8003b12 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003b08:	bf00      	nop
 8003b0a:	e002      	b.n	8003b12 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003b0c:	bf00      	nop
 8003b0e:	e000      	b.n	8003b12 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003b10:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10d      	bne.n	8003b34 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b18:	4b3e      	ldr	r3, [pc, #248]	; (8003c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6819      	ldr	r1, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	011b      	lsls	r3, r3, #4
 8003b2c:	430b      	orrs	r3, r1
 8003b2e:	4939      	ldr	r1, [pc, #228]	; (8003c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d167      	bne.n	8003c0a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b3a:	4b36      	ldr	r3, [pc, #216]	; (8003c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a35      	ldr	r2, [pc, #212]	; (8003c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b46:	f7fc fd7f 	bl	8000648 <HAL_GetTick>
 8003b4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b4c:	e009      	b.n	8003b62 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b4e:	f7fc fd7b 	bl	8000648 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d902      	bls.n	8003b62 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	73fb      	strb	r3, [r7, #15]
        break;
 8003b60:	e005      	b.n	8003b6e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b62:	4b2c      	ldr	r3, [pc, #176]	; (8003c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1ef      	bne.n	8003b4e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003b6e:	7bfb      	ldrb	r3, [r7, #15]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d14a      	bne.n	8003c0a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d111      	bne.n	8003b9e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b7a:	4b26      	ldr	r3, [pc, #152]	; (8003c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6892      	ldr	r2, [r2, #8]
 8003b8a:	0211      	lsls	r1, r2, #8
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	68d2      	ldr	r2, [r2, #12]
 8003b90:	0912      	lsrs	r2, r2, #4
 8003b92:	0452      	lsls	r2, r2, #17
 8003b94:	430a      	orrs	r2, r1
 8003b96:	491f      	ldr	r1, [pc, #124]	; (8003c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	614b      	str	r3, [r1, #20]
 8003b9c:	e011      	b.n	8003bc2 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b9e:	4b1d      	ldr	r3, [pc, #116]	; (8003c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ba6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	6892      	ldr	r2, [r2, #8]
 8003bae:	0211      	lsls	r1, r2, #8
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6912      	ldr	r2, [r2, #16]
 8003bb4:	0852      	lsrs	r2, r2, #1
 8003bb6:	3a01      	subs	r2, #1
 8003bb8:	0652      	lsls	r2, r2, #25
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	4915      	ldr	r1, [pc, #84]	; (8003c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003bc2:	4b14      	ldr	r3, [pc, #80]	; (8003c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a13      	ldr	r2, [pc, #76]	; (8003c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bcc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bce:	f7fc fd3b 	bl	8000648 <HAL_GetTick>
 8003bd2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bd4:	e009      	b.n	8003bea <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003bd6:	f7fc fd37 	bl	8000648 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d902      	bls.n	8003bea <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	73fb      	strb	r3, [r7, #15]
          break;
 8003be8:	e005      	b.n	8003bf6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bea:	4b0a      	ldr	r3, [pc, #40]	; (8003c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0ef      	beq.n	8003bd6 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003bf6:	7bfb      	ldrb	r3, [r7, #15]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d106      	bne.n	8003c0a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003bfc:	4b05      	ldr	r3, [pc, #20]	; (8003c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003bfe:	695a      	ldr	r2, [r3, #20]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	4903      	ldr	r1, [pc, #12]	; (8003c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40021000 	.word	0x40021000

08003c18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e040      	b.n	8003cac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d106      	bne.n	8003c40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f001 f9a8 	bl	8004f90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2224      	movs	r2, #36	; 0x24
 8003c44:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 0201 	bic.w	r2, r2, #1
 8003c54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f8c0 	bl	8003ddc <UART_SetConfig>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d101      	bne.n	8003c66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e022      	b.n	8003cac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 fbfc 	bl	800446c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689a      	ldr	r2, [r3, #8]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0201 	orr.w	r2, r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 fc83 	bl	80045b0 <UART_CheckIdleState>
 8003caa:	4603      	mov	r3, r0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b08a      	sub	sp, #40	; 0x28
 8003cb8:	af02      	add	r7, sp, #8
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	603b      	str	r3, [r7, #0]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cc8:	2b20      	cmp	r3, #32
 8003cca:	f040 8081 	bne.w	8003dd0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d002      	beq.n	8003cda <HAL_UART_Transmit+0x26>
 8003cd4:	88fb      	ldrh	r3, [r7, #6]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e079      	b.n	8003dd2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d101      	bne.n	8003cec <HAL_UART_Transmit+0x38>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	e072      	b.n	8003dd2 <HAL_UART_Transmit+0x11e>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2221      	movs	r2, #33	; 0x21
 8003cfe:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003d00:	f7fc fca2 	bl	8000648 <HAL_GetTick>
 8003d04:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	88fa      	ldrh	r2, [r7, #6]
 8003d0a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	88fa      	ldrh	r2, [r7, #6]
 8003d12:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d1e:	d108      	bne.n	8003d32 <HAL_UART_Transmit+0x7e>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d104      	bne.n	8003d32 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	61bb      	str	r3, [r7, #24]
 8003d30:	e003      	b.n	8003d3a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d36:	2300      	movs	r3, #0
 8003d38:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d3a:	e02d      	b.n	8003d98 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	2200      	movs	r2, #0
 8003d44:	2180      	movs	r1, #128	; 0x80
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f000 fc77 	bl	800463a <UART_WaitOnFlagUntilTimeout>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e03d      	b.n	8003dd2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10b      	bne.n	8003d74 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	881a      	ldrh	r2, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d68:	b292      	uxth	r2, r2
 8003d6a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	3302      	adds	r3, #2
 8003d70:	61bb      	str	r3, [r7, #24]
 8003d72:	e008      	b.n	8003d86 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	781a      	ldrb	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	b292      	uxth	r2, r2
 8003d7e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	3301      	adds	r3, #1
 8003d84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1cb      	bne.n	8003d3c <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	2200      	movs	r2, #0
 8003dac:	2140      	movs	r1, #64	; 0x40
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 fc43 	bl	800463a <UART_WaitOnFlagUntilTimeout>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e009      	b.n	8003dd2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	e000      	b.n	8003dd2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003dd0:	2302      	movs	r3, #2
  }
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3720      	adds	r7, #32
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
	...

08003ddc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ddc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003de0:	b088      	sub	sp, #32
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dea:	2300      	movs	r3, #0
 8003dec:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689a      	ldr	r2, [r3, #8]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	431a      	orrs	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	4bac      	ldr	r3, [pc, #688]	; (80040c4 <UART_SetConfig+0x2e8>)
 8003e12:	4013      	ands	r3, r2
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6812      	ldr	r2, [r2, #0]
 8003e18:	69f9      	ldr	r1, [r7, #28]
 8003e1a:	430b      	orrs	r3, r1
 8003e1c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68da      	ldr	r2, [r3, #12]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4aa2      	ldr	r2, [pc, #648]	; (80040c8 <UART_SetConfig+0x2ec>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d004      	beq.n	8003e4e <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	69fa      	ldr	r2, [r7, #28]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	69fa      	ldr	r2, [r7, #28]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a99      	ldr	r2, [pc, #612]	; (80040cc <UART_SetConfig+0x2f0>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d121      	bne.n	8003eb0 <UART_SetConfig+0xd4>
 8003e6c:	4b98      	ldr	r3, [pc, #608]	; (80040d0 <UART_SetConfig+0x2f4>)
 8003e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	2b03      	cmp	r3, #3
 8003e78:	d816      	bhi.n	8003ea8 <UART_SetConfig+0xcc>
 8003e7a:	a201      	add	r2, pc, #4	; (adr r2, 8003e80 <UART_SetConfig+0xa4>)
 8003e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e80:	08003e91 	.word	0x08003e91
 8003e84:	08003e9d 	.word	0x08003e9d
 8003e88:	08003e97 	.word	0x08003e97
 8003e8c:	08003ea3 	.word	0x08003ea3
 8003e90:	2301      	movs	r3, #1
 8003e92:	76fb      	strb	r3, [r7, #27]
 8003e94:	e0e8      	b.n	8004068 <UART_SetConfig+0x28c>
 8003e96:	2302      	movs	r3, #2
 8003e98:	76fb      	strb	r3, [r7, #27]
 8003e9a:	e0e5      	b.n	8004068 <UART_SetConfig+0x28c>
 8003e9c:	2304      	movs	r3, #4
 8003e9e:	76fb      	strb	r3, [r7, #27]
 8003ea0:	e0e2      	b.n	8004068 <UART_SetConfig+0x28c>
 8003ea2:	2308      	movs	r3, #8
 8003ea4:	76fb      	strb	r3, [r7, #27]
 8003ea6:	e0df      	b.n	8004068 <UART_SetConfig+0x28c>
 8003ea8:	2310      	movs	r3, #16
 8003eaa:	76fb      	strb	r3, [r7, #27]
 8003eac:	bf00      	nop
 8003eae:	e0db      	b.n	8004068 <UART_SetConfig+0x28c>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a87      	ldr	r2, [pc, #540]	; (80040d4 <UART_SetConfig+0x2f8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d134      	bne.n	8003f24 <UART_SetConfig+0x148>
 8003eba:	4b85      	ldr	r3, [pc, #532]	; (80040d0 <UART_SetConfig+0x2f4>)
 8003ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec0:	f003 030c 	and.w	r3, r3, #12
 8003ec4:	2b0c      	cmp	r3, #12
 8003ec6:	d829      	bhi.n	8003f1c <UART_SetConfig+0x140>
 8003ec8:	a201      	add	r2, pc, #4	; (adr r2, 8003ed0 <UART_SetConfig+0xf4>)
 8003eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ece:	bf00      	nop
 8003ed0:	08003f05 	.word	0x08003f05
 8003ed4:	08003f1d 	.word	0x08003f1d
 8003ed8:	08003f1d 	.word	0x08003f1d
 8003edc:	08003f1d 	.word	0x08003f1d
 8003ee0:	08003f11 	.word	0x08003f11
 8003ee4:	08003f1d 	.word	0x08003f1d
 8003ee8:	08003f1d 	.word	0x08003f1d
 8003eec:	08003f1d 	.word	0x08003f1d
 8003ef0:	08003f0b 	.word	0x08003f0b
 8003ef4:	08003f1d 	.word	0x08003f1d
 8003ef8:	08003f1d 	.word	0x08003f1d
 8003efc:	08003f1d 	.word	0x08003f1d
 8003f00:	08003f17 	.word	0x08003f17
 8003f04:	2300      	movs	r3, #0
 8003f06:	76fb      	strb	r3, [r7, #27]
 8003f08:	e0ae      	b.n	8004068 <UART_SetConfig+0x28c>
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	76fb      	strb	r3, [r7, #27]
 8003f0e:	e0ab      	b.n	8004068 <UART_SetConfig+0x28c>
 8003f10:	2304      	movs	r3, #4
 8003f12:	76fb      	strb	r3, [r7, #27]
 8003f14:	e0a8      	b.n	8004068 <UART_SetConfig+0x28c>
 8003f16:	2308      	movs	r3, #8
 8003f18:	76fb      	strb	r3, [r7, #27]
 8003f1a:	e0a5      	b.n	8004068 <UART_SetConfig+0x28c>
 8003f1c:	2310      	movs	r3, #16
 8003f1e:	76fb      	strb	r3, [r7, #27]
 8003f20:	bf00      	nop
 8003f22:	e0a1      	b.n	8004068 <UART_SetConfig+0x28c>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a6b      	ldr	r2, [pc, #428]	; (80040d8 <UART_SetConfig+0x2fc>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d120      	bne.n	8003f70 <UART_SetConfig+0x194>
 8003f2e:	4b68      	ldr	r3, [pc, #416]	; (80040d0 <UART_SetConfig+0x2f4>)
 8003f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f34:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f38:	2b10      	cmp	r3, #16
 8003f3a:	d00f      	beq.n	8003f5c <UART_SetConfig+0x180>
 8003f3c:	2b10      	cmp	r3, #16
 8003f3e:	d802      	bhi.n	8003f46 <UART_SetConfig+0x16a>
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d005      	beq.n	8003f50 <UART_SetConfig+0x174>
 8003f44:	e010      	b.n	8003f68 <UART_SetConfig+0x18c>
 8003f46:	2b20      	cmp	r3, #32
 8003f48:	d005      	beq.n	8003f56 <UART_SetConfig+0x17a>
 8003f4a:	2b30      	cmp	r3, #48	; 0x30
 8003f4c:	d009      	beq.n	8003f62 <UART_SetConfig+0x186>
 8003f4e:	e00b      	b.n	8003f68 <UART_SetConfig+0x18c>
 8003f50:	2300      	movs	r3, #0
 8003f52:	76fb      	strb	r3, [r7, #27]
 8003f54:	e088      	b.n	8004068 <UART_SetConfig+0x28c>
 8003f56:	2302      	movs	r3, #2
 8003f58:	76fb      	strb	r3, [r7, #27]
 8003f5a:	e085      	b.n	8004068 <UART_SetConfig+0x28c>
 8003f5c:	2304      	movs	r3, #4
 8003f5e:	76fb      	strb	r3, [r7, #27]
 8003f60:	e082      	b.n	8004068 <UART_SetConfig+0x28c>
 8003f62:	2308      	movs	r3, #8
 8003f64:	76fb      	strb	r3, [r7, #27]
 8003f66:	e07f      	b.n	8004068 <UART_SetConfig+0x28c>
 8003f68:	2310      	movs	r3, #16
 8003f6a:	76fb      	strb	r3, [r7, #27]
 8003f6c:	bf00      	nop
 8003f6e:	e07b      	b.n	8004068 <UART_SetConfig+0x28c>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a59      	ldr	r2, [pc, #356]	; (80040dc <UART_SetConfig+0x300>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d120      	bne.n	8003fbc <UART_SetConfig+0x1e0>
 8003f7a:	4b55      	ldr	r3, [pc, #340]	; (80040d0 <UART_SetConfig+0x2f4>)
 8003f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f80:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003f84:	2b40      	cmp	r3, #64	; 0x40
 8003f86:	d00f      	beq.n	8003fa8 <UART_SetConfig+0x1cc>
 8003f88:	2b40      	cmp	r3, #64	; 0x40
 8003f8a:	d802      	bhi.n	8003f92 <UART_SetConfig+0x1b6>
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d005      	beq.n	8003f9c <UART_SetConfig+0x1c0>
 8003f90:	e010      	b.n	8003fb4 <UART_SetConfig+0x1d8>
 8003f92:	2b80      	cmp	r3, #128	; 0x80
 8003f94:	d005      	beq.n	8003fa2 <UART_SetConfig+0x1c6>
 8003f96:	2bc0      	cmp	r3, #192	; 0xc0
 8003f98:	d009      	beq.n	8003fae <UART_SetConfig+0x1d2>
 8003f9a:	e00b      	b.n	8003fb4 <UART_SetConfig+0x1d8>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	76fb      	strb	r3, [r7, #27]
 8003fa0:	e062      	b.n	8004068 <UART_SetConfig+0x28c>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	76fb      	strb	r3, [r7, #27]
 8003fa6:	e05f      	b.n	8004068 <UART_SetConfig+0x28c>
 8003fa8:	2304      	movs	r3, #4
 8003faa:	76fb      	strb	r3, [r7, #27]
 8003fac:	e05c      	b.n	8004068 <UART_SetConfig+0x28c>
 8003fae:	2308      	movs	r3, #8
 8003fb0:	76fb      	strb	r3, [r7, #27]
 8003fb2:	e059      	b.n	8004068 <UART_SetConfig+0x28c>
 8003fb4:	2310      	movs	r3, #16
 8003fb6:	76fb      	strb	r3, [r7, #27]
 8003fb8:	bf00      	nop
 8003fba:	e055      	b.n	8004068 <UART_SetConfig+0x28c>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a47      	ldr	r2, [pc, #284]	; (80040e0 <UART_SetConfig+0x304>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d124      	bne.n	8004010 <UART_SetConfig+0x234>
 8003fc6:	4b42      	ldr	r3, [pc, #264]	; (80040d0 <UART_SetConfig+0x2f4>)
 8003fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fd4:	d012      	beq.n	8003ffc <UART_SetConfig+0x220>
 8003fd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fda:	d802      	bhi.n	8003fe2 <UART_SetConfig+0x206>
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d007      	beq.n	8003ff0 <UART_SetConfig+0x214>
 8003fe0:	e012      	b.n	8004008 <UART_SetConfig+0x22c>
 8003fe2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fe6:	d006      	beq.n	8003ff6 <UART_SetConfig+0x21a>
 8003fe8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fec:	d009      	beq.n	8004002 <UART_SetConfig+0x226>
 8003fee:	e00b      	b.n	8004008 <UART_SetConfig+0x22c>
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	76fb      	strb	r3, [r7, #27]
 8003ff4:	e038      	b.n	8004068 <UART_SetConfig+0x28c>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	76fb      	strb	r3, [r7, #27]
 8003ffa:	e035      	b.n	8004068 <UART_SetConfig+0x28c>
 8003ffc:	2304      	movs	r3, #4
 8003ffe:	76fb      	strb	r3, [r7, #27]
 8004000:	e032      	b.n	8004068 <UART_SetConfig+0x28c>
 8004002:	2308      	movs	r3, #8
 8004004:	76fb      	strb	r3, [r7, #27]
 8004006:	e02f      	b.n	8004068 <UART_SetConfig+0x28c>
 8004008:	2310      	movs	r3, #16
 800400a:	76fb      	strb	r3, [r7, #27]
 800400c:	bf00      	nop
 800400e:	e02b      	b.n	8004068 <UART_SetConfig+0x28c>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a2c      	ldr	r2, [pc, #176]	; (80040c8 <UART_SetConfig+0x2ec>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d124      	bne.n	8004064 <UART_SetConfig+0x288>
 800401a:	4b2d      	ldr	r3, [pc, #180]	; (80040d0 <UART_SetConfig+0x2f4>)
 800401c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004020:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004028:	d012      	beq.n	8004050 <UART_SetConfig+0x274>
 800402a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800402e:	d802      	bhi.n	8004036 <UART_SetConfig+0x25a>
 8004030:	2b00      	cmp	r3, #0
 8004032:	d007      	beq.n	8004044 <UART_SetConfig+0x268>
 8004034:	e012      	b.n	800405c <UART_SetConfig+0x280>
 8004036:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800403a:	d006      	beq.n	800404a <UART_SetConfig+0x26e>
 800403c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004040:	d009      	beq.n	8004056 <UART_SetConfig+0x27a>
 8004042:	e00b      	b.n	800405c <UART_SetConfig+0x280>
 8004044:	2300      	movs	r3, #0
 8004046:	76fb      	strb	r3, [r7, #27]
 8004048:	e00e      	b.n	8004068 <UART_SetConfig+0x28c>
 800404a:	2302      	movs	r3, #2
 800404c:	76fb      	strb	r3, [r7, #27]
 800404e:	e00b      	b.n	8004068 <UART_SetConfig+0x28c>
 8004050:	2304      	movs	r3, #4
 8004052:	76fb      	strb	r3, [r7, #27]
 8004054:	e008      	b.n	8004068 <UART_SetConfig+0x28c>
 8004056:	2308      	movs	r3, #8
 8004058:	76fb      	strb	r3, [r7, #27]
 800405a:	e005      	b.n	8004068 <UART_SetConfig+0x28c>
 800405c:	2310      	movs	r3, #16
 800405e:	76fb      	strb	r3, [r7, #27]
 8004060:	bf00      	nop
 8004062:	e001      	b.n	8004068 <UART_SetConfig+0x28c>
 8004064:	2310      	movs	r3, #16
 8004066:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a16      	ldr	r2, [pc, #88]	; (80040c8 <UART_SetConfig+0x2ec>)
 800406e:	4293      	cmp	r3, r2
 8004070:	f040 80fa 	bne.w	8004268 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004074:	7efb      	ldrb	r3, [r7, #27]
 8004076:	2b08      	cmp	r3, #8
 8004078:	d836      	bhi.n	80040e8 <UART_SetConfig+0x30c>
 800407a:	a201      	add	r2, pc, #4	; (adr r2, 8004080 <UART_SetConfig+0x2a4>)
 800407c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004080:	080040a5 	.word	0x080040a5
 8004084:	080040e9 	.word	0x080040e9
 8004088:	080040ad 	.word	0x080040ad
 800408c:	080040e9 	.word	0x080040e9
 8004090:	080040b3 	.word	0x080040b3
 8004094:	080040e9 	.word	0x080040e9
 8004098:	080040e9 	.word	0x080040e9
 800409c:	080040e9 	.word	0x080040e9
 80040a0:	080040bb 	.word	0x080040bb
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80040a4:	f7ff f87c 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 80040a8:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80040aa:	e020      	b.n	80040ee <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80040ac:	4b0d      	ldr	r3, [pc, #52]	; (80040e4 <UART_SetConfig+0x308>)
 80040ae:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80040b0:	e01d      	b.n	80040ee <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80040b2:	f7fe ffdf 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 80040b6:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80040b8:	e019      	b.n	80040ee <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80040ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040be:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80040c0:	e015      	b.n	80040ee <UART_SetConfig+0x312>
 80040c2:	bf00      	nop
 80040c4:	efff69f3 	.word	0xefff69f3
 80040c8:	40008000 	.word	0x40008000
 80040cc:	40013800 	.word	0x40013800
 80040d0:	40021000 	.word	0x40021000
 80040d4:	40004400 	.word	0x40004400
 80040d8:	40004800 	.word	0x40004800
 80040dc:	40004c00 	.word	0x40004c00
 80040e0:	40005000 	.word	0x40005000
 80040e4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	74fb      	strb	r3, [r7, #19]
        break;
 80040ec:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 81ac 	beq.w	800444e <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	4613      	mov	r3, r2
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	4413      	add	r3, r2
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	429a      	cmp	r2, r3
 8004104:	d305      	bcc.n	8004112 <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	429a      	cmp	r2, r3
 8004110:	d902      	bls.n	8004118 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	74fb      	strb	r3, [r7, #19]
 8004116:	e19a      	b.n	800444e <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8004118:	7efb      	ldrb	r3, [r7, #27]
 800411a:	2b08      	cmp	r3, #8
 800411c:	f200 8091 	bhi.w	8004242 <UART_SetConfig+0x466>
 8004120:	a201      	add	r2, pc, #4	; (adr r2, 8004128 <UART_SetConfig+0x34c>)
 8004122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004126:	bf00      	nop
 8004128:	0800414d 	.word	0x0800414d
 800412c:	08004243 	.word	0x08004243
 8004130:	08004199 	.word	0x08004199
 8004134:	08004243 	.word	0x08004243
 8004138:	080041cd 	.word	0x080041cd
 800413c:	08004243 	.word	0x08004243
 8004140:	08004243 	.word	0x08004243
 8004144:	08004243 	.word	0x08004243
 8004148:	08004219 	.word	0x08004219
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800414c:	f7ff f828 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 8004150:	4603      	mov	r3, r0
 8004152:	4619      	mov	r1, r3
 8004154:	f04f 0200 	mov.w	r2, #0
 8004158:	f04f 0300 	mov.w	r3, #0
 800415c:	f04f 0400 	mov.w	r4, #0
 8004160:	0214      	lsls	r4, r2, #8
 8004162:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004166:	020b      	lsls	r3, r1, #8
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	6852      	ldr	r2, [r2, #4]
 800416c:	0852      	lsrs	r2, r2, #1
 800416e:	4611      	mov	r1, r2
 8004170:	f04f 0200 	mov.w	r2, #0
 8004174:	eb13 0b01 	adds.w	fp, r3, r1
 8004178:	eb44 0c02 	adc.w	ip, r4, r2
 800417c:	4658      	mov	r0, fp
 800417e:	4661      	mov	r1, ip
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f04f 0400 	mov.w	r4, #0
 8004188:	461a      	mov	r2, r3
 800418a:	4623      	mov	r3, r4
 800418c:	f7fc f870 	bl	8000270 <__aeabi_uldivmod>
 8004190:	4603      	mov	r3, r0
 8004192:	460c      	mov	r4, r1
 8004194:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004196:	e057      	b.n	8004248 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	085b      	lsrs	r3, r3, #1
 800419e:	f04f 0400 	mov.w	r4, #0
 80041a2:	49b1      	ldr	r1, [pc, #708]	; (8004468 <UART_SetConfig+0x68c>)
 80041a4:	f04f 0200 	mov.w	r2, #0
 80041a8:	eb13 0b01 	adds.w	fp, r3, r1
 80041ac:	eb44 0c02 	adc.w	ip, r4, r2
 80041b0:	4658      	mov	r0, fp
 80041b2:	4661      	mov	r1, ip
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f04f 0400 	mov.w	r4, #0
 80041bc:	461a      	mov	r2, r3
 80041be:	4623      	mov	r3, r4
 80041c0:	f7fc f856 	bl	8000270 <__aeabi_uldivmod>
 80041c4:	4603      	mov	r3, r0
 80041c6:	460c      	mov	r4, r1
 80041c8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80041ca:	e03d      	b.n	8004248 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80041cc:	f7fe ff52 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 80041d0:	4603      	mov	r3, r0
 80041d2:	4619      	mov	r1, r3
 80041d4:	f04f 0200 	mov.w	r2, #0
 80041d8:	f04f 0300 	mov.w	r3, #0
 80041dc:	f04f 0400 	mov.w	r4, #0
 80041e0:	0214      	lsls	r4, r2, #8
 80041e2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80041e6:	020b      	lsls	r3, r1, #8
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6852      	ldr	r2, [r2, #4]
 80041ec:	0852      	lsrs	r2, r2, #1
 80041ee:	4611      	mov	r1, r2
 80041f0:	f04f 0200 	mov.w	r2, #0
 80041f4:	eb13 0b01 	adds.w	fp, r3, r1
 80041f8:	eb44 0c02 	adc.w	ip, r4, r2
 80041fc:	4658      	mov	r0, fp
 80041fe:	4661      	mov	r1, ip
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f04f 0400 	mov.w	r4, #0
 8004208:	461a      	mov	r2, r3
 800420a:	4623      	mov	r3, r4
 800420c:	f7fc f830 	bl	8000270 <__aeabi_uldivmod>
 8004210:	4603      	mov	r3, r0
 8004212:	460c      	mov	r4, r1
 8004214:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004216:	e017      	b.n	8004248 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	085b      	lsrs	r3, r3, #1
 800421e:	f04f 0400 	mov.w	r4, #0
 8004222:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004226:	f144 0100 	adc.w	r1, r4, #0
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f04f 0400 	mov.w	r4, #0
 8004232:	461a      	mov	r2, r3
 8004234:	4623      	mov	r3, r4
 8004236:	f7fc f81b 	bl	8000270 <__aeabi_uldivmod>
 800423a:	4603      	mov	r3, r0
 800423c:	460c      	mov	r4, r1
 800423e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004240:	e002      	b.n	8004248 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	74fb      	strb	r3, [r7, #19]
            break;
 8004246:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800424e:	d308      	bcc.n	8004262 <UART_SetConfig+0x486>
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004256:	d204      	bcs.n	8004262 <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	60da      	str	r2, [r3, #12]
 8004260:	e0f5      	b.n	800444e <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	74fb      	strb	r3, [r7, #19]
 8004266:	e0f2      	b.n	800444e <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	69db      	ldr	r3, [r3, #28]
 800426c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004270:	d17f      	bne.n	8004372 <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8004272:	7efb      	ldrb	r3, [r7, #27]
 8004274:	2b08      	cmp	r3, #8
 8004276:	d85c      	bhi.n	8004332 <UART_SetConfig+0x556>
 8004278:	a201      	add	r2, pc, #4	; (adr r2, 8004280 <UART_SetConfig+0x4a4>)
 800427a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427e:	bf00      	nop
 8004280:	080042a5 	.word	0x080042a5
 8004284:	080042c3 	.word	0x080042c3
 8004288:	080042e1 	.word	0x080042e1
 800428c:	08004333 	.word	0x08004333
 8004290:	080042fd 	.word	0x080042fd
 8004294:	08004333 	.word	0x08004333
 8004298:	08004333 	.word	0x08004333
 800429c:	08004333 	.word	0x08004333
 80042a0:	0800431b 	.word	0x0800431b
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80042a4:	f7fe ff7c 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 80042a8:	4603      	mov	r3, r0
 80042aa:	005a      	lsls	r2, r3, #1
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	085b      	lsrs	r3, r3, #1
 80042b2:	441a      	add	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042bc:	b29b      	uxth	r3, r3
 80042be:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80042c0:	e03a      	b.n	8004338 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80042c2:	f7fe ff83 	bl	80031cc <HAL_RCC_GetPCLK2Freq>
 80042c6:	4603      	mov	r3, r0
 80042c8:	005a      	lsls	r2, r3, #1
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	085b      	lsrs	r3, r3, #1
 80042d0:	441a      	add	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042da:	b29b      	uxth	r3, r3
 80042dc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80042de:	e02b      	b.n	8004338 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	085b      	lsrs	r3, r3, #1
 80042e6:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80042ea:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	6852      	ldr	r2, [r2, #4]
 80042f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80042fa:	e01d      	b.n	8004338 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80042fc:	f7fe feba 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 8004300:	4603      	mov	r3, r0
 8004302:	005a      	lsls	r2, r3, #1
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	085b      	lsrs	r3, r3, #1
 800430a:	441a      	add	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	fbb2 f3f3 	udiv	r3, r2, r3
 8004314:	b29b      	uxth	r3, r3
 8004316:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004318:	e00e      	b.n	8004338 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	085b      	lsrs	r3, r3, #1
 8004320:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	fbb2 f3f3 	udiv	r3, r2, r3
 800432c:	b29b      	uxth	r3, r3
 800432e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004330:	e002      	b.n	8004338 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	74fb      	strb	r3, [r7, #19]
        break;
 8004336:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	2b0f      	cmp	r3, #15
 800433c:	d916      	bls.n	800436c <UART_SetConfig+0x590>
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004344:	d212      	bcs.n	800436c <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	b29b      	uxth	r3, r3
 800434a:	f023 030f 	bic.w	r3, r3, #15
 800434e:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	085b      	lsrs	r3, r3, #1
 8004354:	b29b      	uxth	r3, r3
 8004356:	f003 0307 	and.w	r3, r3, #7
 800435a:	b29a      	uxth	r2, r3
 800435c:	897b      	ldrh	r3, [r7, #10]
 800435e:	4313      	orrs	r3, r2
 8004360:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	897a      	ldrh	r2, [r7, #10]
 8004368:	60da      	str	r2, [r3, #12]
 800436a:	e070      	b.n	800444e <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	74fb      	strb	r3, [r7, #19]
 8004370:	e06d      	b.n	800444e <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8004372:	7efb      	ldrb	r3, [r7, #27]
 8004374:	2b08      	cmp	r3, #8
 8004376:	d859      	bhi.n	800442c <UART_SetConfig+0x650>
 8004378:	a201      	add	r2, pc, #4	; (adr r2, 8004380 <UART_SetConfig+0x5a4>)
 800437a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437e:	bf00      	nop
 8004380:	080043a5 	.word	0x080043a5
 8004384:	080043c1 	.word	0x080043c1
 8004388:	080043dd 	.word	0x080043dd
 800438c:	0800442d 	.word	0x0800442d
 8004390:	080043f9 	.word	0x080043f9
 8004394:	0800442d 	.word	0x0800442d
 8004398:	0800442d 	.word	0x0800442d
 800439c:	0800442d 	.word	0x0800442d
 80043a0:	08004415 	.word	0x08004415
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80043a4:	f7fe fefc 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 80043a8:	4602      	mov	r2, r0
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	085b      	lsrs	r3, r3, #1
 80043b0:	441a      	add	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80043be:	e038      	b.n	8004432 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80043c0:	f7fe ff04 	bl	80031cc <HAL_RCC_GetPCLK2Freq>
 80043c4:	4602      	mov	r2, r0
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	085b      	lsrs	r3, r3, #1
 80043cc:	441a      	add	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80043da:	e02a      	b.n	8004432 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	085b      	lsrs	r3, r3, #1
 80043e2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80043e6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	6852      	ldr	r2, [r2, #4]
 80043ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80043f6:	e01c      	b.n	8004432 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80043f8:	f7fe fe3c 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 80043fc:	4602      	mov	r2, r0
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	085b      	lsrs	r3, r3, #1
 8004404:	441a      	add	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	fbb2 f3f3 	udiv	r3, r2, r3
 800440e:	b29b      	uxth	r3, r3
 8004410:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004412:	e00e      	b.n	8004432 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	085b      	lsrs	r3, r3, #1
 800441a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	fbb2 f3f3 	udiv	r3, r2, r3
 8004426:	b29b      	uxth	r3, r3
 8004428:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800442a:	e002      	b.n	8004432 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	74fb      	strb	r3, [r7, #19]
        break;
 8004430:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2b0f      	cmp	r3, #15
 8004436:	d908      	bls.n	800444a <UART_SetConfig+0x66e>
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800443e:	d204      	bcs.n	800444a <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	60da      	str	r2, [r3, #12]
 8004448:	e001      	b.n	800444e <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800445a:	7cfb      	ldrb	r3, [r7, #19]
}
 800445c:	4618      	mov	r0, r3
 800445e:	3720      	adds	r7, #32
 8004460:	46bd      	mov	sp, r7
 8004462:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004466:	bf00      	nop
 8004468:	f4240000 	.word	0xf4240000

0800446c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00a      	beq.n	8004496 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00a      	beq.n	80044b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00a      	beq.n	80044da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044de:	f003 0308 	and.w	r3, r3, #8
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00a      	beq.n	80044fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	f003 0310 	and.w	r3, r3, #16
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00a      	beq.n	800451e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	f003 0320 	and.w	r3, r3, #32
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00a      	beq.n	8004540 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	430a      	orrs	r2, r1
 800453e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004548:	2b00      	cmp	r3, #0
 800454a:	d01a      	beq.n	8004582 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	430a      	orrs	r2, r1
 8004560:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004566:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800456a:	d10a      	bne.n	8004582 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00a      	beq.n	80045a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	605a      	str	r2, [r3, #4]
  }
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af02      	add	r7, sp, #8
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80045be:	f7fc f843 	bl	8000648 <HAL_GetTick>
 80045c2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0308 	and.w	r3, r3, #8
 80045ce:	2b08      	cmp	r3, #8
 80045d0:	d10e      	bne.n	80045f0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 f82a 	bl	800463a <UART_WaitOnFlagUntilTimeout>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d001      	beq.n	80045f0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e020      	b.n	8004632 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0304 	and.w	r3, r3, #4
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d10e      	bne.n	800461c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004602:	9300      	str	r3, [sp, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 f814 	bl	800463a <UART_WaitOnFlagUntilTimeout>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d001      	beq.n	800461c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e00a      	b.n	8004632 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2220      	movs	r2, #32
 8004620:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2220      	movs	r2, #32
 8004626:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b084      	sub	sp, #16
 800463e:	af00      	add	r7, sp, #0
 8004640:	60f8      	str	r0, [r7, #12]
 8004642:	60b9      	str	r1, [r7, #8]
 8004644:	603b      	str	r3, [r7, #0]
 8004646:	4613      	mov	r3, r2
 8004648:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800464a:	e02a      	b.n	80046a2 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004652:	d026      	beq.n	80046a2 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004654:	f7fb fff8 	bl	8000648 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	429a      	cmp	r2, r3
 8004662:	d302      	bcc.n	800466a <UART_WaitOnFlagUntilTimeout+0x30>
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d11b      	bne.n	80046a2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004678:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 0201 	bic.w	r2, r2, #1
 8004688:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2220      	movs	r2, #32
 800468e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2220      	movs	r2, #32
 8004694:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e00f      	b.n	80046c2 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	69da      	ldr	r2, [r3, #28]
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	4013      	ands	r3, r2
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	bf0c      	ite	eq
 80046b2:	2301      	moveq	r3, #1
 80046b4:	2300      	movne	r3, #0
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	461a      	mov	r2, r3
 80046ba:	79fb      	ldrb	r3, [r7, #7]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d0c5      	beq.n	800464c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <generateTXHeader>:
 */

#include "can.h"

CAN_TxHeaderTypeDef generateTXHeader(uint32_t StdId, uint32_t ExtId, uint32_t IDE, uint32_t RTR,
		uint32_t DLC, FunctionalState TimeTransmit) {
 80046ca:	b4b0      	push	{r4, r5, r7}
 80046cc:	b08b      	sub	sp, #44	; 0x2c
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	60f8      	str	r0, [r7, #12]
 80046d2:	60b9      	str	r1, [r7, #8]
 80046d4:	607a      	str	r2, [r7, #4]
 80046d6:	603b      	str	r3, [r7, #0]
	CAN_TxHeaderTypeDef txHeader;
	txHeader.StdId = StdId;
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	613b      	str	r3, [r7, #16]
	txHeader.ExtId = ExtId;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	617b      	str	r3, [r7, #20]
	txHeader.IDE = IDE;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	61bb      	str	r3, [r7, #24]
	txHeader.RTR = RTR;
 80046e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e6:	61fb      	str	r3, [r7, #28]
	txHeader.DLC = DLC;
 80046e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ea:	623b      	str	r3, [r7, #32]
	txHeader.TransmitGlobalTime = DISABLE;
 80046ec:	2300      	movs	r3, #0
 80046ee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	return txHeader;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	461d      	mov	r5, r3
 80046f6:	f107 0410 	add.w	r4, r7, #16
 80046fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004702:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	372c      	adds	r7, #44	; 0x2c
 800470a:	46bd      	mov	sp, r7
 800470c:	bcb0      	pop	{r4, r5, r7}
 800470e:	4770      	bx	lr

08004710 <writeToCAN>:

/**
 * Writes to the CAN Transmit Line and returns the amount of data written (approximately)
 *
 */
int writeToCAN(CAN_HandleTypeDef *hcan, uint8_t data[], uint8_t dataSize) {
 8004710:	b580      	push	{r7, lr}
 8004712:	b090      	sub	sp, #64	; 0x40
 8004714:	af04      	add	r7, sp, #16
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	4613      	mov	r3, r2
 800471c:	71fb      	strb	r3, [r7, #7]
	CAN_TxHeaderTypeDef txHeader = generateTXHeader(CAN_ID, CAN_EXT_ID,
 800471e:	79fb      	ldrb	r3, [r7, #7]
 8004720:	f107 0018 	add.w	r0, r7, #24
 8004724:	2200      	movs	r2, #0
 8004726:	9202      	str	r2, [sp, #8]
 8004728:	9301      	str	r3, [sp, #4]
 800472a:	2300      	movs	r3, #0
 800472c:	9300      	str	r3, [sp, #0]
 800472e:	2300      	movs	r3, #0
 8004730:	2200      	movs	r2, #0
 8004732:	2101      	movs	r1, #1
 8004734:	f7ff ffc9 	bl	80046ca <generateTXHeader>
	CAN_IS_EXT, CAN_RTR_DATA, dataSize, DISABLE);
	uint32_t mailbox = CAN_TX_MAILBOX0;
 8004738:	2301      	movs	r3, #1
 800473a:	617b      	str	r3, [r7, #20]

	if (HAL_CAN_AddTxMessage(hcan, &txHeader, data, &mailbox) != HAL_OK) {
 800473c:	f107 0314 	add.w	r3, r7, #20
 8004740:	f107 0118 	add.w	r1, r7, #24
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f7fd faa1 	bl	8001c8e <HAL_CAN_AddTxMessage>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <writeToCAN+0x48>
		return -1;
 8004752:	f04f 33ff 	mov.w	r3, #4294967295
 8004756:	e009      	b.n	800476c <writeToCAN+0x5c>
	}
	while (HAL_CAN_IsTxMessagePending(hcan, mailbox))
 8004758:	bf00      	nop
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	4619      	mov	r1, r3
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f7fd fb70 	bl	8001e44 <HAL_CAN_IsTxMessagePending>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f7      	bne.n	800475a <writeToCAN+0x4a>
		;
	return dataSize;
 800476a:	79fb      	ldrb	r3, [r7, #7]
}
 800476c:	4618      	mov	r0, r3
 800476e:	3730      	adds	r7, #48	; 0x30
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <readCAN>:

int readCAN(CAN_HandleTypeDef *hcan, uint8_t *data, CAN_RxHeaderTypeDef *rxHeader) {
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, data) != HAL_OK) {
 8004780:	1d3a      	adds	r2, r7, #4
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	2100      	movs	r1, #0
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f7fd fb80 	bl	8001e8c <HAL_CAN_GetRxMessage>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d002      	beq.n	8004798 <readCAN+0x24>
		return -1;
 8004792:	f04f 33ff 	mov.w	r3, #4294967295
 8004796:	e001      	b.n	800479c <readCAN+0x28>
	}
	return rxHeader->DLC;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	691b      	ldr	r3, [r3, #16]
}
 800479c:	4618      	mov	r0, r3
 800479e:	3710      	adds	r7, #16
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <__io_putchar>:
static void MX_CAN1_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_ADC1_Init(void);
void determineDigit(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch) {
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, &*c, 1, 10);
 80047b2:	f107 010c 	add.w	r1, r7, #12
 80047b6:	230a      	movs	r3, #10
 80047b8:	2201      	movs	r2, #1
 80047ba:	4804      	ldr	r0, [pc, #16]	; (80047cc <__io_putchar+0x28>)
 80047bc:	f7ff fa7a 	bl	8003cb4 <HAL_UART_Transmit>
	return ch;
 80047c0:	687b      	ldr	r3, [r7, #4]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	20000124 	.word	0x20000124

080047d0 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	4603      	mov	r3, r0
 80047d8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) {
 80047da:	88fb      	ldrh	r3, [r7, #6]
 80047dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047e0:	d111      	bne.n	8004806 <HAL_GPIO_EXTI_Callback+0x36>
		if ((HAL_GetTick() - lastTickTime) > 200 && getState() == READ_DIGIT) {
 80047e2:	f7fb ff31 	bl	8000648 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	4b09      	ldr	r3, [pc, #36]	; (8004810 <HAL_GPIO_EXTI_Callback+0x40>)
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2bc8      	cmp	r3, #200	; 0xc8
 80047f0:	d909      	bls.n	8004806 <HAL_GPIO_EXTI_Callback+0x36>
 80047f2:	f000 fad3 	bl	8004d9c <getState>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d104      	bne.n	8004806 <HAL_GPIO_EXTI_Callback+0x36>
			determineDigit();
 80047fc:	f000 f80a 	bl	8004814 <determineDigit>
			nextState(DIGIT_READ);
 8004800:	2000      	movs	r0, #0
 8004802:	f000 fad7 	bl	8004db4 <nextState>
		}
	}
}
 8004806:	bf00      	nop
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	20000090 	.word	0x20000090

08004814 <determineDigit>:

void determineDigit(void) {
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
	adcDigit[arrayIndex % 4] = (((float) adcValue / (float) maxADC) * 5);
 800481a:	4b17      	ldr	r3, [pc, #92]	; (8004878 <determineDigit+0x64>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	ee07 3a90 	vmov	s15, r3
 8004822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004826:	4b15      	ldr	r3, [pc, #84]	; (800487c <determineDigit+0x68>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	ee07 3a90 	vmov	s15, r3
 800482e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004832:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004836:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800483a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800483e:	4b10      	ldr	r3, [pc, #64]	; (8004880 <determineDigit+0x6c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	425a      	negs	r2, r3
 8004844:	f003 0303 	and.w	r3, r3, #3
 8004848:	f002 0203 	and.w	r2, r2, #3
 800484c:	bf58      	it	pl
 800484e:	4253      	negpl	r3, r2
 8004850:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004854:	edc7 7a01 	vstr	s15, [r7, #4]
 8004858:	793a      	ldrb	r2, [r7, #4]
 800485a:	b2d1      	uxtb	r1, r2
 800485c:	4a09      	ldr	r2, [pc, #36]	; (8004884 <determineDigit+0x70>)
 800485e:	54d1      	strb	r1, [r2, r3]
	arrayIndex++;
 8004860:	4b07      	ldr	r3, [pc, #28]	; (8004880 <determineDigit+0x6c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3301      	adds	r3, #1
 8004866:	4a06      	ldr	r2, [pc, #24]	; (8004880 <determineDigit+0x6c>)
 8004868:	6013      	str	r3, [r2, #0]
}
 800486a:	bf00      	nop
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	200001cc 	.word	0x200001cc
 800487c:	20000008 	.word	0x20000008
 8004880:	200000a0 	.word	0x200000a0
 8004884:	20000120 	.word	0x20000120

08004888 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8004888:	b580      	push	{r7, lr}
 800488a:	b08a      	sub	sp, #40	; 0x28
 800488c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800488e:	f7fb fe6f 	bl	8000570 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8004892:	f000 f879 	bl	8004988 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8004896:	f000 f9fd 	bl	8004c94 <MX_GPIO_Init>
	MX_CAN1_Init();
 800489a:	f000 f975 	bl	8004b88 <MX_CAN1_Init>
	MX_USART2_UART_Init();
 800489e:	f000 f9c9 	bl	8004c34 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 80048a2:	f000 f8f9 	bl	8004a98 <MX_ADC1_Init>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		switch (getState()) {
 80048a6:	f000 fa79 	bl	8004d9c <getState>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b03      	cmp	r3, #3
 80048ae:	d8fa      	bhi.n	80048a6 <main+0x1e>
 80048b0:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <main+0x30>)
 80048b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b6:	bf00      	nop
 80048b8:	080048c9 	.word	0x080048c9
 80048bc:	080048f9 	.word	0x080048f9
 80048c0:	08004933 	.word	0x08004933
 80048c4:	0800495b 	.word	0x0800495b
		case READ_DIGIT: {
			HAL_StatusTypeDef start = HAL_ADC_Start(&hadc1);
 80048c8:	4827      	ldr	r0, [pc, #156]	; (8004968 <main+0xe0>)
 80048ca:	f7fc f9f3 	bl	8000cb4 <HAL_ADC_Start>
 80048ce:	4603      	mov	r3, r0
 80048d0:	77fb      	strb	r3, [r7, #31]
			HAL_StatusTypeDef poll = HAL_ADC_PollForConversion(&hadc1, 100);
 80048d2:	2164      	movs	r1, #100	; 0x64
 80048d4:	4824      	ldr	r0, [pc, #144]	; (8004968 <main+0xe0>)
 80048d6:	f7fc faa7 	bl	8000e28 <HAL_ADC_PollForConversion>
 80048da:	4603      	mov	r3, r0
 80048dc:	77bb      	strb	r3, [r7, #30]
			adcValue = HAL_ADC_GetValue(&hadc1);
 80048de:	4822      	ldr	r0, [pc, #136]	; (8004968 <main+0xe0>)
 80048e0:	f7fc fb72 	bl	8000fc8 <HAL_ADC_GetValue>
 80048e4:	4602      	mov	r2, r0
 80048e6:	4b21      	ldr	r3, [pc, #132]	; (800496c <main+0xe4>)
 80048e8:	601a      	str	r2, [r3, #0]
			printf("%u\n", adcValue);
 80048ea:	4b20      	ldr	r3, [pc, #128]	; (800496c <main+0xe4>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4619      	mov	r1, r3
 80048f0:	481f      	ldr	r0, [pc, #124]	; (8004970 <main+0xe8>)
 80048f2:	f000 fcf7 	bl	80052e4 <iprintf>
			break;
 80048f6:	e035      	b.n	8004964 <main+0xdc>
		}

		case SEND_MESSAGE: {
			printf("%d, %d, %d, %d\n", adcDigit[0], adcDigit[1], adcDigit[2], adcDigit[3]);
 80048f8:	4b1e      	ldr	r3, [pc, #120]	; (8004974 <main+0xec>)
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	4619      	mov	r1, r3
 80048fe:	4b1d      	ldr	r3, [pc, #116]	; (8004974 <main+0xec>)
 8004900:	785b      	ldrb	r3, [r3, #1]
 8004902:	461a      	mov	r2, r3
 8004904:	4b1b      	ldr	r3, [pc, #108]	; (8004974 <main+0xec>)
 8004906:	789b      	ldrb	r3, [r3, #2]
 8004908:	4618      	mov	r0, r3
 800490a:	4b1a      	ldr	r3, [pc, #104]	; (8004974 <main+0xec>)
 800490c:	78db      	ldrb	r3, [r3, #3]
 800490e:	9300      	str	r3, [sp, #0]
 8004910:	4603      	mov	r3, r0
 8004912:	4819      	ldr	r0, [pc, #100]	; (8004978 <main+0xf0>)
 8004914:	f000 fce6 	bl	80052e4 <iprintf>
			if (writeToCAN(&hcan1, adcDigit, 4) != -1) {
 8004918:	2204      	movs	r2, #4
 800491a:	4916      	ldr	r1, [pc, #88]	; (8004974 <main+0xec>)
 800491c:	4817      	ldr	r0, [pc, #92]	; (800497c <main+0xf4>)
 800491e:	f7ff fef7 	bl	8004710 <writeToCAN>
 8004922:	4603      	mov	r3, r0
 8004924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004928:	d01b      	beq.n	8004962 <main+0xda>
				nextState(CAN_SENT);
 800492a:	2001      	movs	r0, #1
 800492c:	f000 fa42 	bl	8004db4 <nextState>
			}
			break;
 8004930:	e017      	b.n	8004962 <main+0xda>
		}

		case RECEIVE_MESSAGE: {
			CAN_RxHeaderTypeDef result;
			if (readCAN(&hcan1, secretMessage, &result) == SECRET_SIZE) {
 8004932:	463b      	mov	r3, r7
 8004934:	461a      	mov	r2, r3
 8004936:	4912      	ldr	r1, [pc, #72]	; (8004980 <main+0xf8>)
 8004938:	4810      	ldr	r0, [pc, #64]	; (800497c <main+0xf4>)
 800493a:	f7ff ff1b 	bl	8004774 <readCAN>
 800493e:	4603      	mov	r3, r0
 8004940:	2b08      	cmp	r3, #8
 8004942:	d105      	bne.n	8004950 <main+0xc8>
				printf("%s\n", (char*) secretMessage);
 8004944:	480e      	ldr	r0, [pc, #56]	; (8004980 <main+0xf8>)
 8004946:	f000 fd41 	bl	80053cc <puts>
				nextState(CAN_RECEIVED);
 800494a:	2002      	movs	r0, #2
 800494c:	f000 fa32 	bl	8004db4 <nextState>
			}
			printf("Reading CAN");
 8004950:	480c      	ldr	r0, [pc, #48]	; (8004984 <main+0xfc>)
 8004952:	f000 fcc7 	bl	80052e4 <iprintf>
			break;
 8004956:	bf00      	nop
 8004958:	e004      	b.n	8004964 <main+0xdc>
		}
		case FINISHED: {
			printf("%s\n", (char*) secretMessage);
 800495a:	4809      	ldr	r0, [pc, #36]	; (8004980 <main+0xf8>)
 800495c:	f000 fd36 	bl	80053cc <puts>
			break;
 8004960:	e000      	b.n	8004964 <main+0xdc>
			break;
 8004962:	bf00      	nop
		switch (getState()) {
 8004964:	e79f      	b.n	80048a6 <main+0x1e>
 8004966:	bf00      	nop
 8004968:	200000bc 	.word	0x200000bc
 800496c:	200001cc 	.word	0x200001cc
 8004970:	0800618c 	.word	0x0800618c
 8004974:	20000120 	.word	0x20000120
 8004978:	08006190 	.word	0x08006190
 800497c:	200001a4 	.word	0x200001a4
 8004980:	20000094 	.word	0x20000094
 8004984:	080061a0 	.word	0x080061a0

08004988 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004988:	b580      	push	{r7, lr}
 800498a:	b0b8      	sub	sp, #224	; 0xe0
 800498c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800498e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004992:	2244      	movs	r2, #68	; 0x44
 8004994:	2100      	movs	r1, #0
 8004996:	4618      	mov	r0, r3
 8004998:	f000 fc9c 	bl	80052d4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800499c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80049a0:	2200      	movs	r2, #0
 80049a2:	601a      	str	r2, [r3, #0]
 80049a4:	605a      	str	r2, [r3, #4]
 80049a6:	609a      	str	r2, [r3, #8]
 80049a8:	60da      	str	r2, [r3, #12]
 80049aa:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80049ac:	463b      	mov	r3, r7
 80049ae:	2288      	movs	r2, #136	; 0x88
 80049b0:	2100      	movs	r1, #0
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 fc8e 	bl	80052d4 <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80049b8:	2302      	movs	r3, #2
 80049ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80049be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80049c6:	2310      	movs	r3, #16
 80049c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80049cc:	2302      	movs	r3, #2
 80049ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80049d2:	2302      	movs	r3, #2
 80049d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 1;
 80049d8:	2301      	movs	r3, #1
 80049da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 10;
 80049de:	230a      	movs	r3, #10
 80049e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80049e4:	2307      	movs	r3, #7
 80049e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80049ea:	2302      	movs	r3, #2
 80049ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80049f0:	2302      	movs	r3, #2
 80049f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80049f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fd fea8 	bl	8002750 <HAL_RCC_OscConfig>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <SystemClock_Config+0x82>
		Error_Handler();
 8004a06:	f000 f9c1 	bl	8004d8c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
 8004a0a:	230f      	movs	r3, #15
 8004a0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			| RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a10:	2303      	movs	r3, #3
 8004a12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a16:	2300      	movs	r3, #0
 8004a18:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004a22:	2300      	movs	r3, #0
 8004a24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8004a28:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004a2c:	2104      	movs	r1, #4
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fe fa3e 	bl	8002eb0 <HAL_RCC_ClockConfig>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <SystemClock_Config+0xb6>
		Error_Handler();
 8004a3a:	f000 f9a7 	bl	8004d8c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_ADC;
 8004a3e:	f244 0302 	movw	r3, #16386	; 0x4002
 8004a42:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004a44:	2300      	movs	r3, #0
 8004a46:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8004a48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004a4c:	67bb      	str	r3, [r7, #120]	; 0x78
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8004a4e:	2302      	movs	r3, #2
 8004a50:	607b      	str	r3, [r7, #4]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8004a52:	2301      	movs	r3, #1
 8004a54:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8004a56:	2308      	movs	r3, #8
 8004a58:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8004a5a:	2307      	movs	r3, #7
 8004a5c:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8004a5e:	2302      	movs	r3, #2
 8004a60:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8004a62:	2302      	movs	r3, #2
 8004a64:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8004a66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a6a:	61fb      	str	r3, [r7, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8004a6c:	463b      	mov	r3, r7
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7fe fc22 	bl	80032b8 <HAL_RCCEx_PeriphCLKConfig>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <SystemClock_Config+0xf6>
		Error_Handler();
 8004a7a:	f000 f987 	bl	8004d8c <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 8004a7e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004a82:	f7fd fe0f 	bl	80026a4 <HAL_PWREx_ControlVoltageScaling>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d001      	beq.n	8004a90 <SystemClock_Config+0x108>
		Error_Handler();
 8004a8c:	f000 f97e 	bl	8004d8c <Error_Handler>
	}
}
 8004a90:	bf00      	nop
 8004a92:	37e0      	adds	r7, #224	; 0xe0
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b08a      	sub	sp, #40	; 0x28
 8004a9c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8004a9e:	f107 031c 	add.w	r3, r7, #28
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	605a      	str	r2, [r3, #4]
 8004aa8:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8004aaa:	1d3b      	adds	r3, r7, #4
 8004aac:	2200      	movs	r2, #0
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	605a      	str	r2, [r3, #4]
 8004ab2:	609a      	str	r2, [r3, #8]
 8004ab4:	60da      	str	r2, [r3, #12]
 8004ab6:	611a      	str	r2, [r3, #16]
 8004ab8:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8004aba:	4b30      	ldr	r3, [pc, #192]	; (8004b7c <MX_ADC1_Init+0xe4>)
 8004abc:	4a30      	ldr	r2, [pc, #192]	; (8004b80 <MX_ADC1_Init+0xe8>)
 8004abe:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8004ac0:	4b2e      	ldr	r3, [pc, #184]	; (8004b7c <MX_ADC1_Init+0xe4>)
 8004ac2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004ac6:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004ac8:	4b2c      	ldr	r3, [pc, #176]	; (8004b7c <MX_ADC1_Init+0xe4>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004ace:	4b2b      	ldr	r3, [pc, #172]	; (8004b7c <MX_ADC1_Init+0xe4>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004ad4:	4b29      	ldr	r3, [pc, #164]	; (8004b7c <MX_ADC1_Init+0xe4>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004ada:	4b28      	ldr	r3, [pc, #160]	; (8004b7c <MX_ADC1_Init+0xe4>)
 8004adc:	2204      	movs	r2, #4
 8004ade:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8004ae0:	4b26      	ldr	r3, [pc, #152]	; (8004b7c <MX_ADC1_Init+0xe4>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8004ae6:	4b25      	ldr	r3, [pc, #148]	; (8004b7c <MX_ADC1_Init+0xe4>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 5; // check
 8004aec:	4b23      	ldr	r3, [pc, #140]	; (8004b7c <MX_ADC1_Init+0xe4>)
 8004aee:	2205      	movs	r2, #5
 8004af0:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004af2:	4b22      	ldr	r3, [pc, #136]	; (8004b7c <MX_ADC1_Init+0xe4>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004afa:	4b20      	ldr	r3, [pc, #128]	; (8004b7c <MX_ADC1_Init+0xe4>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004b00:	4b1e      	ldr	r3, [pc, #120]	; (8004b7c <MX_ADC1_Init+0xe4>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8004b06:	4b1d      	ldr	r3, [pc, #116]	; (8004b7c <MX_ADC1_Init+0xe4>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004b0e:	4b1b      	ldr	r3, [pc, #108]	; (8004b7c <MX_ADC1_Init+0xe4>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8004b14:	4b19      	ldr	r3, [pc, #100]	; (8004b7c <MX_ADC1_Init+0xe4>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8004b1c:	4817      	ldr	r0, [pc, #92]	; (8004b7c <MX_ADC1_Init+0xe4>)
 8004b1e:	f7fb ff75 	bl	8000a0c <HAL_ADC_Init>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d001      	beq.n	8004b2c <MX_ADC1_Init+0x94>
		Error_Handler();
 8004b28:	f000 f930 	bl	8004d8c <Error_Handler>
	}
	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8004b30:	f107 031c 	add.w	r3, r7, #28
 8004b34:	4619      	mov	r1, r3
 8004b36:	4811      	ldr	r0, [pc, #68]	; (8004b7c <MX_ADC1_Init+0xe4>)
 8004b38:	f7fc fe38 	bl	80017ac <HAL_ADCEx_MultiModeConfigChannel>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <MX_ADC1_Init+0xae>
		Error_Handler();
 8004b42:	f000 f923 	bl	8004d8c <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8004b46:	4b0f      	ldr	r3, [pc, #60]	; (8004b84 <MX_ADC1_Init+0xec>)
 8004b48:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8004b4a:	2306      	movs	r3, #6
 8004b4c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8004b4e:	2304      	movs	r3, #4
 8004b50:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004b52:	237f      	movs	r3, #127	; 0x7f
 8004b54:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004b56:	2304      	movs	r3, #4
 8004b58:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8004b5e:	1d3b      	adds	r3, r7, #4
 8004b60:	4619      	mov	r1, r3
 8004b62:	4806      	ldr	r0, [pc, #24]	; (8004b7c <MX_ADC1_Init+0xe4>)
 8004b64:	f7fc fa3e 	bl	8000fe4 <HAL_ADC_ConfigChannel>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <MX_ADC1_Init+0xda>
		Error_Handler();
 8004b6e:	f000 f90d 	bl	8004d8c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8004b72:	bf00      	nop
 8004b74:	3728      	adds	r7, #40	; 0x28
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	200000bc 	.word	0x200000bc
 8004b80:	50040000 	.word	0x50040000
 8004b84:	14f00020 	.word	0x14f00020

08004b88 <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b08a      	sub	sp, #40	; 0x28
 8004b8c:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8004b8e:	4b27      	ldr	r3, [pc, #156]	; (8004c2c <MX_CAN1_Init+0xa4>)
 8004b90:	4a27      	ldr	r2, [pc, #156]	; (8004c30 <MX_CAN1_Init+0xa8>)
 8004b92:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 10;
 8004b94:	4b25      	ldr	r3, [pc, #148]	; (8004c2c <MX_CAN1_Init+0xa4>)
 8004b96:	220a      	movs	r2, #10
 8004b98:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8004b9a:	4b24      	ldr	r3, [pc, #144]	; (8004c2c <MX_CAN1_Init+0xa4>)
 8004b9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004ba0:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8004ba2:	4b22      	ldr	r3, [pc, #136]	; (8004c2c <MX_CAN1_Init+0xa4>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8004ba8:	4b20      	ldr	r3, [pc, #128]	; (8004c2c <MX_CAN1_Init+0xa4>)
 8004baa:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8004bae:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8004bb0:	4b1e      	ldr	r3, [pc, #120]	; (8004c2c <MX_CAN1_Init+0xa4>)
 8004bb2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004bb6:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8004bb8:	4b1c      	ldr	r3, [pc, #112]	; (8004c2c <MX_CAN1_Init+0xa4>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8004bbe:	4b1b      	ldr	r3, [pc, #108]	; (8004c2c <MX_CAN1_Init+0xa4>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8004bc4:	4b19      	ldr	r3, [pc, #100]	; (8004c2c <MX_CAN1_Init+0xa4>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = ENABLE;
 8004bca:	4b18      	ldr	r3, [pc, #96]	; (8004c2c <MX_CAN1_Init+0xa4>)
 8004bcc:	2201      	movs	r2, #1
 8004bce:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8004bd0:	4b16      	ldr	r3, [pc, #88]	; (8004c2c <MX_CAN1_Init+0xa4>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8004bd6:	4b15      	ldr	r3, [pc, #84]	; (8004c2c <MX_CAN1_Init+0xa4>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8004bdc:	4813      	ldr	r0, [pc, #76]	; (8004c2c <MX_CAN1_Init+0xa4>)
 8004bde:	f7fc fe91 	bl	8001904 <HAL_CAN_Init>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d001      	beq.n	8004bec <MX_CAN1_Init+0x64>
		Error_Handler();
 8004be8:	f000 f8d0 	bl	8004d8c <Error_Handler>
	 * Found Id = 0xXXXXXXXX
	 * Masked = (0x00000000) & 0xXXXXXXXX = 0x00000000
	 * Expected = 0x00000000
	 */
	CAN_FilterTypeDef filterParams;
	filterParams.FilterBank = 0;
 8004bec:	2300      	movs	r3, #0
 8004bee:	617b      	str	r3, [r7, #20]
	filterParams.FilterFIFOAssignment = CAN_RX_FIFO0;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	613b      	str	r3, [r7, #16]
	filterParams.FilterMode = CAN_FILTERMODE_IDMASK;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	61bb      	str	r3, [r7, #24]
	filterParams.FilterScale = CAN_FILTERSCALE_32BIT;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	61fb      	str	r3, [r7, #28]
	filterParams.FilterIdHigh = 0x0000;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	603b      	str	r3, [r7, #0]
	filterParams.FilterIdLow = 0x0000;
 8004c00:	2300      	movs	r3, #0
 8004c02:	607b      	str	r3, [r7, #4]
	filterParams.FilterMaskIdHigh = 0x0000;
 8004c04:	2300      	movs	r3, #0
 8004c06:	60bb      	str	r3, [r7, #8]
	filterParams.FilterMaskIdLow = 0x0000;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	60fb      	str	r3, [r7, #12]
	filterParams.FilterActivation = CAN_FILTER_ENABLE;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	623b      	str	r3, [r7, #32]

	if (HAL_CAN_ConfigFilter(&hcan1, &filterParams) != HAL_OK) {
 8004c10:	463b      	mov	r3, r7
 8004c12:	4619      	mov	r1, r3
 8004c14:	4805      	ldr	r0, [pc, #20]	; (8004c2c <MX_CAN1_Init+0xa4>)
 8004c16:	f7fc ff70 	bl	8001afa <HAL_CAN_ConfigFilter>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <MX_CAN1_Init+0x9c>
		Error_Handler();
 8004c20:	f000 f8b4 	bl	8004d8c <Error_Handler>
	}
	/* USER CODE END CAN1_Init 2 */

}
 8004c24:	bf00      	nop
 8004c26:	3728      	adds	r7, #40	; 0x28
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	200001a4 	.word	0x200001a4
 8004c30:	40006400 	.word	0x40006400

08004c34 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8004c38:	4b14      	ldr	r3, [pc, #80]	; (8004c8c <MX_USART2_UART_Init+0x58>)
 8004c3a:	4a15      	ldr	r2, [pc, #84]	; (8004c90 <MX_USART2_UART_Init+0x5c>)
 8004c3c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8004c3e:	4b13      	ldr	r3, [pc, #76]	; (8004c8c <MX_USART2_UART_Init+0x58>)
 8004c40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004c44:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004c46:	4b11      	ldr	r3, [pc, #68]	; (8004c8c <MX_USART2_UART_Init+0x58>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8004c4c:	4b0f      	ldr	r3, [pc, #60]	; (8004c8c <MX_USART2_UART_Init+0x58>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8004c52:	4b0e      	ldr	r3, [pc, #56]	; (8004c8c <MX_USART2_UART_Init+0x58>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8004c58:	4b0c      	ldr	r3, [pc, #48]	; (8004c8c <MX_USART2_UART_Init+0x58>)
 8004c5a:	220c      	movs	r2, #12
 8004c5c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c5e:	4b0b      	ldr	r3, [pc, #44]	; (8004c8c <MX_USART2_UART_Init+0x58>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c64:	4b09      	ldr	r3, [pc, #36]	; (8004c8c <MX_USART2_UART_Init+0x58>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004c6a:	4b08      	ldr	r3, [pc, #32]	; (8004c8c <MX_USART2_UART_Init+0x58>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004c70:	4b06      	ldr	r3, [pc, #24]	; (8004c8c <MX_USART2_UART_Init+0x58>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8004c76:	4805      	ldr	r0, [pc, #20]	; (8004c8c <MX_USART2_UART_Init+0x58>)
 8004c78:	f7fe ffce 	bl	8003c18 <HAL_UART_Init>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8004c82:	f000 f883 	bl	8004d8c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8004c86:	bf00      	nop
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	20000124 	.word	0x20000124
 8004c90:	40004400 	.word	0x40004400

08004c94 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b08a      	sub	sp, #40	; 0x28
 8004c98:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004c9a:	f107 0314 	add.w	r3, r7, #20
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	601a      	str	r2, [r3, #0]
 8004ca2:	605a      	str	r2, [r3, #4]
 8004ca4:	609a      	str	r2, [r3, #8]
 8004ca6:	60da      	str	r2, [r3, #12]
 8004ca8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8004caa:	4b35      	ldr	r3, [pc, #212]	; (8004d80 <MX_GPIO_Init+0xec>)
 8004cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cae:	4a34      	ldr	r2, [pc, #208]	; (8004d80 <MX_GPIO_Init+0xec>)
 8004cb0:	f043 0304 	orr.w	r3, r3, #4
 8004cb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cb6:	4b32      	ldr	r3, [pc, #200]	; (8004d80 <MX_GPIO_Init+0xec>)
 8004cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cba:	f003 0304 	and.w	r3, r3, #4
 8004cbe:	613b      	str	r3, [r7, #16]
 8004cc0:	693b      	ldr	r3, [r7, #16]
	;
	__HAL_RCC_GPIOH_CLK_ENABLE()
 8004cc2:	4b2f      	ldr	r3, [pc, #188]	; (8004d80 <MX_GPIO_Init+0xec>)
 8004cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cc6:	4a2e      	ldr	r2, [pc, #184]	; (8004d80 <MX_GPIO_Init+0xec>)
 8004cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ccc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cce:	4b2c      	ldr	r3, [pc, #176]	; (8004d80 <MX_GPIO_Init+0xec>)
 8004cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd6:	60fb      	str	r3, [r7, #12]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8004cda:	4b29      	ldr	r3, [pc, #164]	; (8004d80 <MX_GPIO_Init+0xec>)
 8004cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cde:	4a28      	ldr	r2, [pc, #160]	; (8004d80 <MX_GPIO_Init+0xec>)
 8004ce0:	f043 0301 	orr.w	r3, r3, #1
 8004ce4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ce6:	4b26      	ldr	r3, [pc, #152]	; (8004d80 <MX_GPIO_Init+0xec>)
 8004ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	60bb      	str	r3, [r7, #8]
 8004cf0:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8004cf2:	4b23      	ldr	r3, [pc, #140]	; (8004d80 <MX_GPIO_Init+0xec>)
 8004cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cf6:	4a22      	ldr	r2, [pc, #136]	; (8004d80 <MX_GPIO_Init+0xec>)
 8004cf8:	f043 0302 	orr.w	r3, r3, #2
 8004cfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cfe:	4b20      	ldr	r3, [pc, #128]	; (8004d80 <MX_GPIO_Init+0xec>)
 8004d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	607b      	str	r3, [r7, #4]
 8004d08:	687b      	ldr	r3, [r7, #4]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	2120      	movs	r1, #32
 8004d0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d12:	f7fd fc89 	bl	8002628 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8004d16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d1a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004d1c:	4b19      	ldr	r3, [pc, #100]	; (8004d84 <MX_GPIO_Init+0xf0>)
 8004d1e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d20:	2300      	movs	r3, #0
 8004d22:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004d24:	f107 0314 	add.w	r3, r7, #20
 8004d28:	4619      	mov	r1, r3
 8004d2a:	4817      	ldr	r0, [pc, #92]	; (8004d88 <MX_GPIO_Init+0xf4>)
 8004d2c:	f7fd fad4 	bl	80022d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004d30:	2301      	movs	r3, #1
 8004d32:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004d34:	230b      	movs	r3, #11
 8004d36:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d3c:	f107 0314 	add.w	r3, r7, #20
 8004d40:	4619      	mov	r1, r3
 8004d42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d46:	f7fd fac7 	bl	80022d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8004d4a:	2320      	movs	r3, #32
 8004d4c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d52:	2300      	movs	r3, #0
 8004d54:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d56:	2300      	movs	r3, #0
 8004d58:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004d5a:	f107 0314 	add.w	r3, r7, #20
 8004d5e:	4619      	mov	r1, r3
 8004d60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d64:	f7fd fab8 	bl	80022d8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004d68:	2200      	movs	r2, #0
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	2028      	movs	r0, #40	; 0x28
 8004d6e:	f7fd fa7c 	bl	800226a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004d72:	2028      	movs	r0, #40	; 0x28
 8004d74:	f7fd fa95 	bl	80022a2 <HAL_NVIC_EnableIRQ>

}
 8004d78:	bf00      	nop
 8004d7a:	3728      	adds	r7, #40	; 0x28
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	40021000 	.word	0x40021000
 8004d84:	10210000 	.word	0x10210000
 8004d88:	48000800 	.word	0x48000800

08004d8c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004d8c:	b480      	push	{r7}
 8004d8e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8004d90:	bf00      	nop
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
	...

08004d9c <getState>:
 *      Author: Minya
 */

#include "stateMachine.h"

enum states getState() {
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
	return state;
 8004da0:	4b03      	ldr	r3, [pc, #12]	; (8004db0 <getState+0x14>)
 8004da2:	781b      	ldrb	r3, [r3, #0]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	200000b4 	.word	0x200000b4

08004db4 <nextState>:

void nextState(enum events event) {
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	4603      	mov	r3, r0
 8004dbc:	71fb      	strb	r3, [r7, #7]
	switch(state) {
 8004dbe:	4b1c      	ldr	r3, [pc, #112]	; (8004e30 <nextState+0x7c>)
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	2b03      	cmp	r3, #3
 8004dc4:	d826      	bhi.n	8004e14 <nextState+0x60>
 8004dc6:	a201      	add	r2, pc, #4	; (adr r2, 8004dcc <nextState+0x18>)
 8004dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dcc:	08004ddd 	.word	0x08004ddd
 8004dd0:	08004dfd 	.word	0x08004dfd
 8004dd4:	08004e09 	.word	0x08004e09
 8004dd8:	08004e1d 	.word	0x08004e1d
	case READ_DIGIT: {
		if(event == DIGIT_READ) {
 8004ddc:	79fb      	ldrb	r3, [r7, #7]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d104      	bne.n	8004dec <nextState+0x38>
			digitsRead++;
 8004de2:	4b14      	ldr	r3, [pc, #80]	; (8004e34 <nextState+0x80>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	3301      	adds	r3, #1
 8004de8:	4a12      	ldr	r2, [pc, #72]	; (8004e34 <nextState+0x80>)
 8004dea:	6013      	str	r3, [r2, #0]
		}
		if(digitsRead == 4) {
 8004dec:	4b11      	ldr	r3, [pc, #68]	; (8004e34 <nextState+0x80>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2b04      	cmp	r3, #4
 8004df2:	d115      	bne.n	8004e20 <nextState+0x6c>
			state = SEND_MESSAGE;
 8004df4:	4b0e      	ldr	r3, [pc, #56]	; (8004e30 <nextState+0x7c>)
 8004df6:	2201      	movs	r2, #1
 8004df8:	701a      	strb	r2, [r3, #0]
		}
		break;
 8004dfa:	e011      	b.n	8004e20 <nextState+0x6c>
	}

	case SEND_MESSAGE: {
		if(event = CAN_SENT) {
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	71fb      	strb	r3, [r7, #7]
			state = RECEIVE_MESSAGE;
 8004e00:	4b0b      	ldr	r3, [pc, #44]	; (8004e30 <nextState+0x7c>)
 8004e02:	2202      	movs	r2, #2
 8004e04:	701a      	strb	r2, [r3, #0]
		}
		break;
 8004e06:	e00c      	b.n	8004e22 <nextState+0x6e>
	}
	case RECEIVE_MESSAGE: {
		if(event = CAN_RECEIVED) {
 8004e08:	2302      	movs	r3, #2
 8004e0a:	71fb      	strb	r3, [r7, #7]
			state = FINISHED;
 8004e0c:	4b08      	ldr	r3, [pc, #32]	; (8004e30 <nextState+0x7c>)
 8004e0e:	2203      	movs	r2, #3
 8004e10:	701a      	strb	r2, [r3, #0]
		}
		break;
 8004e12:	e006      	b.n	8004e22 <nextState+0x6e>
	}
	case FINISHED:
		break;
	default:
		state = READ_DIGIT;
 8004e14:	4b06      	ldr	r3, [pc, #24]	; (8004e30 <nextState+0x7c>)
 8004e16:	2200      	movs	r2, #0
 8004e18:	701a      	strb	r2, [r3, #0]
		break;
 8004e1a:	e002      	b.n	8004e22 <nextState+0x6e>
		break;
 8004e1c:	bf00      	nop
 8004e1e:	e000      	b.n	8004e22 <nextState+0x6e>
		break;
 8004e20:	bf00      	nop
	}
}
 8004e22:	bf00      	nop
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	200000b4 	.word	0x200000b4
 8004e34:	200000b8 	.word	0x200000b8

08004e38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e3e:	4b12      	ldr	r3, [pc, #72]	; (8004e88 <HAL_MspInit+0x50>)
 8004e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e42:	4a11      	ldr	r2, [pc, #68]	; (8004e88 <HAL_MspInit+0x50>)
 8004e44:	f043 0301 	orr.w	r3, r3, #1
 8004e48:	6613      	str	r3, [r2, #96]	; 0x60
 8004e4a:	4b0f      	ldr	r3, [pc, #60]	; (8004e88 <HAL_MspInit+0x50>)
 8004e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	607b      	str	r3, [r7, #4]
 8004e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e56:	4b0c      	ldr	r3, [pc, #48]	; (8004e88 <HAL_MspInit+0x50>)
 8004e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e5a:	4a0b      	ldr	r2, [pc, #44]	; (8004e88 <HAL_MspInit+0x50>)
 8004e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e60:	6593      	str	r3, [r2, #88]	; 0x58
 8004e62:	4b09      	ldr	r3, [pc, #36]	; (8004e88 <HAL_MspInit+0x50>)
 8004e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e6a:	603b      	str	r3, [r7, #0]
 8004e6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8004e6e:	2200      	movs	r2, #0
 8004e70:	2100      	movs	r1, #0
 8004e72:	2005      	movs	r0, #5
 8004e74:	f7fd f9f9 	bl	800226a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004e78:	2005      	movs	r0, #5
 8004e7a:	f7fd fa12 	bl	80022a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e7e:	bf00      	nop
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	40021000 	.word	0x40021000

08004e8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b08a      	sub	sp, #40	; 0x28
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e94:	f107 0314 	add.w	r3, r7, #20
 8004e98:	2200      	movs	r2, #0
 8004e9a:	601a      	str	r2, [r3, #0]
 8004e9c:	605a      	str	r2, [r3, #4]
 8004e9e:	609a      	str	r2, [r3, #8]
 8004ea0:	60da      	str	r2, [r3, #12]
 8004ea2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a15      	ldr	r2, [pc, #84]	; (8004f00 <HAL_ADC_MspInit+0x74>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d124      	bne.n	8004ef8 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004eae:	4b15      	ldr	r3, [pc, #84]	; (8004f04 <HAL_ADC_MspInit+0x78>)
 8004eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eb2:	4a14      	ldr	r2, [pc, #80]	; (8004f04 <HAL_ADC_MspInit+0x78>)
 8004eb4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004eb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004eba:	4b12      	ldr	r3, [pc, #72]	; (8004f04 <HAL_ADC_MspInit+0x78>)
 8004ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ebe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ec2:	613b      	str	r3, [r7, #16]
 8004ec4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ec6:	4b0f      	ldr	r3, [pc, #60]	; (8004f04 <HAL_ADC_MspInit+0x78>)
 8004ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eca:	4a0e      	ldr	r2, [pc, #56]	; (8004f04 <HAL_ADC_MspInit+0x78>)
 8004ecc:	f043 0301 	orr.w	r3, r3, #1
 8004ed0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ed2:	4b0c      	ldr	r3, [pc, #48]	; (8004f04 <HAL_ADC_MspInit+0x78>)
 8004ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	60fb      	str	r3, [r7, #12]
 8004edc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004eea:	f107 0314 	add.w	r3, r7, #20
 8004eee:	4619      	mov	r1, r3
 8004ef0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ef4:	f7fd f9f0 	bl	80022d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004ef8:	bf00      	nop
 8004efa:	3728      	adds	r7, #40	; 0x28
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	50040000 	.word	0x50040000
 8004f04:	40021000 	.word	0x40021000

08004f08 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b08a      	sub	sp, #40	; 0x28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f10:	f107 0314 	add.w	r3, r7, #20
 8004f14:	2200      	movs	r2, #0
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	605a      	str	r2, [r3, #4]
 8004f1a:	609a      	str	r2, [r3, #8]
 8004f1c:	60da      	str	r2, [r3, #12]
 8004f1e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a18      	ldr	r2, [pc, #96]	; (8004f88 <HAL_CAN_MspInit+0x80>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d129      	bne.n	8004f7e <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004f2a:	4b18      	ldr	r3, [pc, #96]	; (8004f8c <HAL_CAN_MspInit+0x84>)
 8004f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f2e:	4a17      	ldr	r2, [pc, #92]	; (8004f8c <HAL_CAN_MspInit+0x84>)
 8004f30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f34:	6593      	str	r3, [r2, #88]	; 0x58
 8004f36:	4b15      	ldr	r3, [pc, #84]	; (8004f8c <HAL_CAN_MspInit+0x84>)
 8004f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f3e:	613b      	str	r3, [r7, #16]
 8004f40:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f42:	4b12      	ldr	r3, [pc, #72]	; (8004f8c <HAL_CAN_MspInit+0x84>)
 8004f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f46:	4a11      	ldr	r2, [pc, #68]	; (8004f8c <HAL_CAN_MspInit+0x84>)
 8004f48:	f043 0301 	orr.w	r3, r3, #1
 8004f4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f4e:	4b0f      	ldr	r3, [pc, #60]	; (8004f8c <HAL_CAN_MspInit+0x84>)
 8004f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	60fb      	str	r3, [r7, #12]
 8004f58:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004f5a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f60:	2302      	movs	r3, #2
 8004f62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f64:	2300      	movs	r3, #0
 8004f66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004f6c:	2309      	movs	r3, #9
 8004f6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f70:	f107 0314 	add.w	r3, r7, #20
 8004f74:	4619      	mov	r1, r3
 8004f76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f7a:	f7fd f9ad 	bl	80022d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8004f7e:	bf00      	nop
 8004f80:	3728      	adds	r7, #40	; 0x28
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	40006400 	.word	0x40006400
 8004f8c:	40021000 	.word	0x40021000

08004f90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b08a      	sub	sp, #40	; 0x28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f98:	f107 0314 	add.w	r3, r7, #20
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	601a      	str	r2, [r3, #0]
 8004fa0:	605a      	str	r2, [r3, #4]
 8004fa2:	609a      	str	r2, [r3, #8]
 8004fa4:	60da      	str	r2, [r3, #12]
 8004fa6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a17      	ldr	r2, [pc, #92]	; (800500c <HAL_UART_MspInit+0x7c>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d128      	bne.n	8005004 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004fb2:	4b17      	ldr	r3, [pc, #92]	; (8005010 <HAL_UART_MspInit+0x80>)
 8004fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb6:	4a16      	ldr	r2, [pc, #88]	; (8005010 <HAL_UART_MspInit+0x80>)
 8004fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fbc:	6593      	str	r3, [r2, #88]	; 0x58
 8004fbe:	4b14      	ldr	r3, [pc, #80]	; (8005010 <HAL_UART_MspInit+0x80>)
 8004fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc6:	613b      	str	r3, [r7, #16]
 8004fc8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fca:	4b11      	ldr	r3, [pc, #68]	; (8005010 <HAL_UART_MspInit+0x80>)
 8004fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fce:	4a10      	ldr	r2, [pc, #64]	; (8005010 <HAL_UART_MspInit+0x80>)
 8004fd0:	f043 0301 	orr.w	r3, r3, #1
 8004fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fd6:	4b0e      	ldr	r3, [pc, #56]	; (8005010 <HAL_UART_MspInit+0x80>)
 8004fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	60fb      	str	r3, [r7, #12]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004fe2:	230c      	movs	r3, #12
 8004fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fea:	2300      	movs	r3, #0
 8004fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004ff2:	2307      	movs	r3, #7
 8004ff4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ff6:	f107 0314 	add.w	r3, r7, #20
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005000:	f7fd f96a 	bl	80022d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005004:	bf00      	nop
 8005006:	3728      	adds	r7, #40	; 0x28
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	40004400 	.word	0x40004400
 8005010:	40021000 	.word	0x40021000

08005014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005014:	b480      	push	{r7}
 8005016:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005018:	bf00      	nop
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005022:	b480      	push	{r7}
 8005024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005026:	e7fe      	b.n	8005026 <HardFault_Handler+0x4>

08005028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005028:	b480      	push	{r7}
 800502a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800502c:	e7fe      	b.n	800502c <MemManage_Handler+0x4>

0800502e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800502e:	b480      	push	{r7}
 8005030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005032:	e7fe      	b.n	8005032 <BusFault_Handler+0x4>

08005034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005034:	b480      	push	{r7}
 8005036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005038:	e7fe      	b.n	8005038 <UsageFault_Handler+0x4>

0800503a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800503a:	b480      	push	{r7}
 800503c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800503e:	bf00      	nop
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005048:	b480      	push	{r7}
 800504a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800504c:	bf00      	nop
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005056:	b480      	push	{r7}
 8005058:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800505a:	bf00      	nop
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005068:	f7fb fadc 	bl	8000624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800506c:	bf00      	nop
 800506e:	bd80      	pop	{r7, pc}

08005070 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8005070:	b480      	push	{r7}
 8005072:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8005074:	bf00      	nop
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800507e:	b580      	push	{r7, lr}
 8005080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005082:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005086:	f7fd fae7 	bl	8002658 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800508a:	bf00      	nop
 800508c:	bd80      	pop	{r7, pc}

0800508e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b086      	sub	sp, #24
 8005092:	af00      	add	r7, sp, #0
 8005094:	60f8      	str	r0, [r7, #12]
 8005096:	60b9      	str	r1, [r7, #8]
 8005098:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800509a:	2300      	movs	r3, #0
 800509c:	617b      	str	r3, [r7, #20]
 800509e:	e00a      	b.n	80050b6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80050a0:	f3af 8000 	nop.w
 80050a4:	4601      	mov	r1, r0
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	1c5a      	adds	r2, r3, #1
 80050aa:	60ba      	str	r2, [r7, #8]
 80050ac:	b2ca      	uxtb	r2, r1
 80050ae:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	3301      	adds	r3, #1
 80050b4:	617b      	str	r3, [r7, #20]
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	dbf0      	blt.n	80050a0 <_read+0x12>
	}

return len;
 80050be:	687b      	ldr	r3, [r7, #4]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3718      	adds	r7, #24
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050d4:	2300      	movs	r3, #0
 80050d6:	617b      	str	r3, [r7, #20]
 80050d8:	e009      	b.n	80050ee <_write+0x26>
	{
		__io_putchar(*ptr++);
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	60ba      	str	r2, [r7, #8]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7ff fb5e 	bl	80047a4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	3301      	adds	r3, #1
 80050ec:	617b      	str	r3, [r7, #20]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	dbf1      	blt.n	80050da <_write+0x12>
	}
	return len;
 80050f6:	687b      	ldr	r3, [r7, #4]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3718      	adds	r7, #24
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <_close>:

int _close(int file)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
	return -1;
 8005108:	f04f 33ff 	mov.w	r3, #4294967295
}
 800510c:	4618      	mov	r0, r3
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005128:	605a      	str	r2, [r3, #4]
	return 0;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <_isatty>:

int _isatty(int file)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
	return 1;
 8005140:	2301      	movs	r3, #1
}
 8005142:	4618      	mov	r0, r3
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr

0800514e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800514e:	b480      	push	{r7}
 8005150:	b085      	sub	sp, #20
 8005152:	af00      	add	r7, sp, #0
 8005154:	60f8      	str	r0, [r7, #12]
 8005156:	60b9      	str	r1, [r7, #8]
 8005158:	607a      	str	r2, [r7, #4]
	return 0;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005170:	4b11      	ldr	r3, [pc, #68]	; (80051b8 <_sbrk+0x50>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d102      	bne.n	800517e <_sbrk+0x16>
		heap_end = &end;
 8005178:	4b0f      	ldr	r3, [pc, #60]	; (80051b8 <_sbrk+0x50>)
 800517a:	4a10      	ldr	r2, [pc, #64]	; (80051bc <_sbrk+0x54>)
 800517c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800517e:	4b0e      	ldr	r3, [pc, #56]	; (80051b8 <_sbrk+0x50>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005184:	4b0c      	ldr	r3, [pc, #48]	; (80051b8 <_sbrk+0x50>)
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4413      	add	r3, r2
 800518c:	466a      	mov	r2, sp
 800518e:	4293      	cmp	r3, r2
 8005190:	d907      	bls.n	80051a2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005192:	f000 f875 	bl	8005280 <__errno>
 8005196:	4602      	mov	r2, r0
 8005198:	230c      	movs	r3, #12
 800519a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800519c:	f04f 33ff 	mov.w	r3, #4294967295
 80051a0:	e006      	b.n	80051b0 <_sbrk+0x48>
	}

	heap_end += incr;
 80051a2:	4b05      	ldr	r3, [pc, #20]	; (80051b8 <_sbrk+0x50>)
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4413      	add	r3, r2
 80051aa:	4a03      	ldr	r2, [pc, #12]	; (80051b8 <_sbrk+0x50>)
 80051ac:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80051ae:	68fb      	ldr	r3, [r7, #12]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	200000a4 	.word	0x200000a4
 80051bc:	200001d8 	.word	0x200001d8

080051c0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80051c0:	b480      	push	{r7}
 80051c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80051c4:	4b17      	ldr	r3, [pc, #92]	; (8005224 <SystemInit+0x64>)
 80051c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ca:	4a16      	ldr	r2, [pc, #88]	; (8005224 <SystemInit+0x64>)
 80051cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80051d4:	4b14      	ldr	r3, [pc, #80]	; (8005228 <SystemInit+0x68>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a13      	ldr	r2, [pc, #76]	; (8005228 <SystemInit+0x68>)
 80051da:	f043 0301 	orr.w	r3, r3, #1
 80051de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80051e0:	4b11      	ldr	r3, [pc, #68]	; (8005228 <SystemInit+0x68>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80051e6:	4b10      	ldr	r3, [pc, #64]	; (8005228 <SystemInit+0x68>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a0f      	ldr	r2, [pc, #60]	; (8005228 <SystemInit+0x68>)
 80051ec:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80051f0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80051f4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80051f6:	4b0c      	ldr	r3, [pc, #48]	; (8005228 <SystemInit+0x68>)
 80051f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80051fc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80051fe:	4b0a      	ldr	r3, [pc, #40]	; (8005228 <SystemInit+0x68>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a09      	ldr	r2, [pc, #36]	; (8005228 <SystemInit+0x68>)
 8005204:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005208:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800520a:	4b07      	ldr	r3, [pc, #28]	; (8005228 <SystemInit+0x68>)
 800520c:	2200      	movs	r2, #0
 800520e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005210:	4b04      	ldr	r3, [pc, #16]	; (8005224 <SystemInit+0x64>)
 8005212:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005216:	609a      	str	r2, [r3, #8]
#endif
}
 8005218:	bf00      	nop
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	e000ed00 	.word	0xe000ed00
 8005228:	40021000 	.word	0x40021000

0800522c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800522c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005264 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005230:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005232:	e003      	b.n	800523c <LoopCopyDataInit>

08005234 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005234:	4b0c      	ldr	r3, [pc, #48]	; (8005268 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005236:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005238:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800523a:	3104      	adds	r1, #4

0800523c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800523c:	480b      	ldr	r0, [pc, #44]	; (800526c <LoopForever+0xa>)
	ldr	r3, =_edata
 800523e:	4b0c      	ldr	r3, [pc, #48]	; (8005270 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005240:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005242:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005244:	d3f6      	bcc.n	8005234 <CopyDataInit>
	ldr	r2, =_sbss
 8005246:	4a0b      	ldr	r2, [pc, #44]	; (8005274 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005248:	e002      	b.n	8005250 <LoopFillZerobss>

0800524a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800524a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800524c:	f842 3b04 	str.w	r3, [r2], #4

08005250 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005250:	4b09      	ldr	r3, [pc, #36]	; (8005278 <LoopForever+0x16>)
	cmp	r2, r3
 8005252:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005254:	d3f9      	bcc.n	800524a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005256:	f7ff ffb3 	bl	80051c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800525a:	f000 f817 	bl	800528c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800525e:	f7ff fb13 	bl	8004888 <main>

08005262 <LoopForever>:

LoopForever:
    b LoopForever
 8005262:	e7fe      	b.n	8005262 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005264:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8005268:	0800629c 	.word	0x0800629c
	ldr	r0, =_sdata
 800526c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005270:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8005274:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8005278:	200001d4 	.word	0x200001d4

0800527c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800527c:	e7fe      	b.n	800527c <ADC1_2_IRQHandler>
	...

08005280 <__errno>:
 8005280:	4b01      	ldr	r3, [pc, #4]	; (8005288 <__errno+0x8>)
 8005282:	6818      	ldr	r0, [r3, #0]
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	20000010 	.word	0x20000010

0800528c <__libc_init_array>:
 800528c:	b570      	push	{r4, r5, r6, lr}
 800528e:	4e0d      	ldr	r6, [pc, #52]	; (80052c4 <__libc_init_array+0x38>)
 8005290:	4c0d      	ldr	r4, [pc, #52]	; (80052c8 <__libc_init_array+0x3c>)
 8005292:	1ba4      	subs	r4, r4, r6
 8005294:	10a4      	asrs	r4, r4, #2
 8005296:	2500      	movs	r5, #0
 8005298:	42a5      	cmp	r5, r4
 800529a:	d109      	bne.n	80052b0 <__libc_init_array+0x24>
 800529c:	4e0b      	ldr	r6, [pc, #44]	; (80052cc <__libc_init_array+0x40>)
 800529e:	4c0c      	ldr	r4, [pc, #48]	; (80052d0 <__libc_init_array+0x44>)
 80052a0:	f000 ff68 	bl	8006174 <_init>
 80052a4:	1ba4      	subs	r4, r4, r6
 80052a6:	10a4      	asrs	r4, r4, #2
 80052a8:	2500      	movs	r5, #0
 80052aa:	42a5      	cmp	r5, r4
 80052ac:	d105      	bne.n	80052ba <__libc_init_array+0x2e>
 80052ae:	bd70      	pop	{r4, r5, r6, pc}
 80052b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052b4:	4798      	blx	r3
 80052b6:	3501      	adds	r5, #1
 80052b8:	e7ee      	b.n	8005298 <__libc_init_array+0xc>
 80052ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052be:	4798      	blx	r3
 80052c0:	3501      	adds	r5, #1
 80052c2:	e7f2      	b.n	80052aa <__libc_init_array+0x1e>
 80052c4:	08006294 	.word	0x08006294
 80052c8:	08006294 	.word	0x08006294
 80052cc:	08006294 	.word	0x08006294
 80052d0:	08006298 	.word	0x08006298

080052d4 <memset>:
 80052d4:	4402      	add	r2, r0
 80052d6:	4603      	mov	r3, r0
 80052d8:	4293      	cmp	r3, r2
 80052da:	d100      	bne.n	80052de <memset+0xa>
 80052dc:	4770      	bx	lr
 80052de:	f803 1b01 	strb.w	r1, [r3], #1
 80052e2:	e7f9      	b.n	80052d8 <memset+0x4>

080052e4 <iprintf>:
 80052e4:	b40f      	push	{r0, r1, r2, r3}
 80052e6:	4b0a      	ldr	r3, [pc, #40]	; (8005310 <iprintf+0x2c>)
 80052e8:	b513      	push	{r0, r1, r4, lr}
 80052ea:	681c      	ldr	r4, [r3, #0]
 80052ec:	b124      	cbz	r4, 80052f8 <iprintf+0x14>
 80052ee:	69a3      	ldr	r3, [r4, #24]
 80052f0:	b913      	cbnz	r3, 80052f8 <iprintf+0x14>
 80052f2:	4620      	mov	r0, r4
 80052f4:	f000 fa22 	bl	800573c <__sinit>
 80052f8:	ab05      	add	r3, sp, #20
 80052fa:	9a04      	ldr	r2, [sp, #16]
 80052fc:	68a1      	ldr	r1, [r4, #8]
 80052fe:	9301      	str	r3, [sp, #4]
 8005300:	4620      	mov	r0, r4
 8005302:	f000 fbdb 	bl	8005abc <_vfiprintf_r>
 8005306:	b002      	add	sp, #8
 8005308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800530c:	b004      	add	sp, #16
 800530e:	4770      	bx	lr
 8005310:	20000010 	.word	0x20000010

08005314 <_puts_r>:
 8005314:	b570      	push	{r4, r5, r6, lr}
 8005316:	460e      	mov	r6, r1
 8005318:	4605      	mov	r5, r0
 800531a:	b118      	cbz	r0, 8005324 <_puts_r+0x10>
 800531c:	6983      	ldr	r3, [r0, #24]
 800531e:	b90b      	cbnz	r3, 8005324 <_puts_r+0x10>
 8005320:	f000 fa0c 	bl	800573c <__sinit>
 8005324:	69ab      	ldr	r3, [r5, #24]
 8005326:	68ac      	ldr	r4, [r5, #8]
 8005328:	b913      	cbnz	r3, 8005330 <_puts_r+0x1c>
 800532a:	4628      	mov	r0, r5
 800532c:	f000 fa06 	bl	800573c <__sinit>
 8005330:	4b23      	ldr	r3, [pc, #140]	; (80053c0 <_puts_r+0xac>)
 8005332:	429c      	cmp	r4, r3
 8005334:	d117      	bne.n	8005366 <_puts_r+0x52>
 8005336:	686c      	ldr	r4, [r5, #4]
 8005338:	89a3      	ldrh	r3, [r4, #12]
 800533a:	071b      	lsls	r3, r3, #28
 800533c:	d51d      	bpl.n	800537a <_puts_r+0x66>
 800533e:	6923      	ldr	r3, [r4, #16]
 8005340:	b1db      	cbz	r3, 800537a <_puts_r+0x66>
 8005342:	3e01      	subs	r6, #1
 8005344:	68a3      	ldr	r3, [r4, #8]
 8005346:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800534a:	3b01      	subs	r3, #1
 800534c:	60a3      	str	r3, [r4, #8]
 800534e:	b9e9      	cbnz	r1, 800538c <_puts_r+0x78>
 8005350:	2b00      	cmp	r3, #0
 8005352:	da2e      	bge.n	80053b2 <_puts_r+0x9e>
 8005354:	4622      	mov	r2, r4
 8005356:	210a      	movs	r1, #10
 8005358:	4628      	mov	r0, r5
 800535a:	f000 f83f 	bl	80053dc <__swbuf_r>
 800535e:	3001      	adds	r0, #1
 8005360:	d011      	beq.n	8005386 <_puts_r+0x72>
 8005362:	200a      	movs	r0, #10
 8005364:	e011      	b.n	800538a <_puts_r+0x76>
 8005366:	4b17      	ldr	r3, [pc, #92]	; (80053c4 <_puts_r+0xb0>)
 8005368:	429c      	cmp	r4, r3
 800536a:	d101      	bne.n	8005370 <_puts_r+0x5c>
 800536c:	68ac      	ldr	r4, [r5, #8]
 800536e:	e7e3      	b.n	8005338 <_puts_r+0x24>
 8005370:	4b15      	ldr	r3, [pc, #84]	; (80053c8 <_puts_r+0xb4>)
 8005372:	429c      	cmp	r4, r3
 8005374:	bf08      	it	eq
 8005376:	68ec      	ldreq	r4, [r5, #12]
 8005378:	e7de      	b.n	8005338 <_puts_r+0x24>
 800537a:	4621      	mov	r1, r4
 800537c:	4628      	mov	r0, r5
 800537e:	f000 f87f 	bl	8005480 <__swsetup_r>
 8005382:	2800      	cmp	r0, #0
 8005384:	d0dd      	beq.n	8005342 <_puts_r+0x2e>
 8005386:	f04f 30ff 	mov.w	r0, #4294967295
 800538a:	bd70      	pop	{r4, r5, r6, pc}
 800538c:	2b00      	cmp	r3, #0
 800538e:	da04      	bge.n	800539a <_puts_r+0x86>
 8005390:	69a2      	ldr	r2, [r4, #24]
 8005392:	429a      	cmp	r2, r3
 8005394:	dc06      	bgt.n	80053a4 <_puts_r+0x90>
 8005396:	290a      	cmp	r1, #10
 8005398:	d004      	beq.n	80053a4 <_puts_r+0x90>
 800539a:	6823      	ldr	r3, [r4, #0]
 800539c:	1c5a      	adds	r2, r3, #1
 800539e:	6022      	str	r2, [r4, #0]
 80053a0:	7019      	strb	r1, [r3, #0]
 80053a2:	e7cf      	b.n	8005344 <_puts_r+0x30>
 80053a4:	4622      	mov	r2, r4
 80053a6:	4628      	mov	r0, r5
 80053a8:	f000 f818 	bl	80053dc <__swbuf_r>
 80053ac:	3001      	adds	r0, #1
 80053ae:	d1c9      	bne.n	8005344 <_puts_r+0x30>
 80053b0:	e7e9      	b.n	8005386 <_puts_r+0x72>
 80053b2:	6823      	ldr	r3, [r4, #0]
 80053b4:	200a      	movs	r0, #10
 80053b6:	1c5a      	adds	r2, r3, #1
 80053b8:	6022      	str	r2, [r4, #0]
 80053ba:	7018      	strb	r0, [r3, #0]
 80053bc:	e7e5      	b.n	800538a <_puts_r+0x76>
 80053be:	bf00      	nop
 80053c0:	08006218 	.word	0x08006218
 80053c4:	08006238 	.word	0x08006238
 80053c8:	080061f8 	.word	0x080061f8

080053cc <puts>:
 80053cc:	4b02      	ldr	r3, [pc, #8]	; (80053d8 <puts+0xc>)
 80053ce:	4601      	mov	r1, r0
 80053d0:	6818      	ldr	r0, [r3, #0]
 80053d2:	f7ff bf9f 	b.w	8005314 <_puts_r>
 80053d6:	bf00      	nop
 80053d8:	20000010 	.word	0x20000010

080053dc <__swbuf_r>:
 80053dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053de:	460e      	mov	r6, r1
 80053e0:	4614      	mov	r4, r2
 80053e2:	4605      	mov	r5, r0
 80053e4:	b118      	cbz	r0, 80053ee <__swbuf_r+0x12>
 80053e6:	6983      	ldr	r3, [r0, #24]
 80053e8:	b90b      	cbnz	r3, 80053ee <__swbuf_r+0x12>
 80053ea:	f000 f9a7 	bl	800573c <__sinit>
 80053ee:	4b21      	ldr	r3, [pc, #132]	; (8005474 <__swbuf_r+0x98>)
 80053f0:	429c      	cmp	r4, r3
 80053f2:	d12a      	bne.n	800544a <__swbuf_r+0x6e>
 80053f4:	686c      	ldr	r4, [r5, #4]
 80053f6:	69a3      	ldr	r3, [r4, #24]
 80053f8:	60a3      	str	r3, [r4, #8]
 80053fa:	89a3      	ldrh	r3, [r4, #12]
 80053fc:	071a      	lsls	r2, r3, #28
 80053fe:	d52e      	bpl.n	800545e <__swbuf_r+0x82>
 8005400:	6923      	ldr	r3, [r4, #16]
 8005402:	b363      	cbz	r3, 800545e <__swbuf_r+0x82>
 8005404:	6923      	ldr	r3, [r4, #16]
 8005406:	6820      	ldr	r0, [r4, #0]
 8005408:	1ac0      	subs	r0, r0, r3
 800540a:	6963      	ldr	r3, [r4, #20]
 800540c:	b2f6      	uxtb	r6, r6
 800540e:	4283      	cmp	r3, r0
 8005410:	4637      	mov	r7, r6
 8005412:	dc04      	bgt.n	800541e <__swbuf_r+0x42>
 8005414:	4621      	mov	r1, r4
 8005416:	4628      	mov	r0, r5
 8005418:	f000 f926 	bl	8005668 <_fflush_r>
 800541c:	bb28      	cbnz	r0, 800546a <__swbuf_r+0x8e>
 800541e:	68a3      	ldr	r3, [r4, #8]
 8005420:	3b01      	subs	r3, #1
 8005422:	60a3      	str	r3, [r4, #8]
 8005424:	6823      	ldr	r3, [r4, #0]
 8005426:	1c5a      	adds	r2, r3, #1
 8005428:	6022      	str	r2, [r4, #0]
 800542a:	701e      	strb	r6, [r3, #0]
 800542c:	6963      	ldr	r3, [r4, #20]
 800542e:	3001      	adds	r0, #1
 8005430:	4283      	cmp	r3, r0
 8005432:	d004      	beq.n	800543e <__swbuf_r+0x62>
 8005434:	89a3      	ldrh	r3, [r4, #12]
 8005436:	07db      	lsls	r3, r3, #31
 8005438:	d519      	bpl.n	800546e <__swbuf_r+0x92>
 800543a:	2e0a      	cmp	r6, #10
 800543c:	d117      	bne.n	800546e <__swbuf_r+0x92>
 800543e:	4621      	mov	r1, r4
 8005440:	4628      	mov	r0, r5
 8005442:	f000 f911 	bl	8005668 <_fflush_r>
 8005446:	b190      	cbz	r0, 800546e <__swbuf_r+0x92>
 8005448:	e00f      	b.n	800546a <__swbuf_r+0x8e>
 800544a:	4b0b      	ldr	r3, [pc, #44]	; (8005478 <__swbuf_r+0x9c>)
 800544c:	429c      	cmp	r4, r3
 800544e:	d101      	bne.n	8005454 <__swbuf_r+0x78>
 8005450:	68ac      	ldr	r4, [r5, #8]
 8005452:	e7d0      	b.n	80053f6 <__swbuf_r+0x1a>
 8005454:	4b09      	ldr	r3, [pc, #36]	; (800547c <__swbuf_r+0xa0>)
 8005456:	429c      	cmp	r4, r3
 8005458:	bf08      	it	eq
 800545a:	68ec      	ldreq	r4, [r5, #12]
 800545c:	e7cb      	b.n	80053f6 <__swbuf_r+0x1a>
 800545e:	4621      	mov	r1, r4
 8005460:	4628      	mov	r0, r5
 8005462:	f000 f80d 	bl	8005480 <__swsetup_r>
 8005466:	2800      	cmp	r0, #0
 8005468:	d0cc      	beq.n	8005404 <__swbuf_r+0x28>
 800546a:	f04f 37ff 	mov.w	r7, #4294967295
 800546e:	4638      	mov	r0, r7
 8005470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005472:	bf00      	nop
 8005474:	08006218 	.word	0x08006218
 8005478:	08006238 	.word	0x08006238
 800547c:	080061f8 	.word	0x080061f8

08005480 <__swsetup_r>:
 8005480:	4b32      	ldr	r3, [pc, #200]	; (800554c <__swsetup_r+0xcc>)
 8005482:	b570      	push	{r4, r5, r6, lr}
 8005484:	681d      	ldr	r5, [r3, #0]
 8005486:	4606      	mov	r6, r0
 8005488:	460c      	mov	r4, r1
 800548a:	b125      	cbz	r5, 8005496 <__swsetup_r+0x16>
 800548c:	69ab      	ldr	r3, [r5, #24]
 800548e:	b913      	cbnz	r3, 8005496 <__swsetup_r+0x16>
 8005490:	4628      	mov	r0, r5
 8005492:	f000 f953 	bl	800573c <__sinit>
 8005496:	4b2e      	ldr	r3, [pc, #184]	; (8005550 <__swsetup_r+0xd0>)
 8005498:	429c      	cmp	r4, r3
 800549a:	d10f      	bne.n	80054bc <__swsetup_r+0x3c>
 800549c:	686c      	ldr	r4, [r5, #4]
 800549e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	0715      	lsls	r5, r2, #28
 80054a6:	d42c      	bmi.n	8005502 <__swsetup_r+0x82>
 80054a8:	06d0      	lsls	r0, r2, #27
 80054aa:	d411      	bmi.n	80054d0 <__swsetup_r+0x50>
 80054ac:	2209      	movs	r2, #9
 80054ae:	6032      	str	r2, [r6, #0]
 80054b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054b4:	81a3      	strh	r3, [r4, #12]
 80054b6:	f04f 30ff 	mov.w	r0, #4294967295
 80054ba:	e03e      	b.n	800553a <__swsetup_r+0xba>
 80054bc:	4b25      	ldr	r3, [pc, #148]	; (8005554 <__swsetup_r+0xd4>)
 80054be:	429c      	cmp	r4, r3
 80054c0:	d101      	bne.n	80054c6 <__swsetup_r+0x46>
 80054c2:	68ac      	ldr	r4, [r5, #8]
 80054c4:	e7eb      	b.n	800549e <__swsetup_r+0x1e>
 80054c6:	4b24      	ldr	r3, [pc, #144]	; (8005558 <__swsetup_r+0xd8>)
 80054c8:	429c      	cmp	r4, r3
 80054ca:	bf08      	it	eq
 80054cc:	68ec      	ldreq	r4, [r5, #12]
 80054ce:	e7e6      	b.n	800549e <__swsetup_r+0x1e>
 80054d0:	0751      	lsls	r1, r2, #29
 80054d2:	d512      	bpl.n	80054fa <__swsetup_r+0x7a>
 80054d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054d6:	b141      	cbz	r1, 80054ea <__swsetup_r+0x6a>
 80054d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054dc:	4299      	cmp	r1, r3
 80054de:	d002      	beq.n	80054e6 <__swsetup_r+0x66>
 80054e0:	4630      	mov	r0, r6
 80054e2:	f000 fa19 	bl	8005918 <_free_r>
 80054e6:	2300      	movs	r3, #0
 80054e8:	6363      	str	r3, [r4, #52]	; 0x34
 80054ea:	89a3      	ldrh	r3, [r4, #12]
 80054ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80054f0:	81a3      	strh	r3, [r4, #12]
 80054f2:	2300      	movs	r3, #0
 80054f4:	6063      	str	r3, [r4, #4]
 80054f6:	6923      	ldr	r3, [r4, #16]
 80054f8:	6023      	str	r3, [r4, #0]
 80054fa:	89a3      	ldrh	r3, [r4, #12]
 80054fc:	f043 0308 	orr.w	r3, r3, #8
 8005500:	81a3      	strh	r3, [r4, #12]
 8005502:	6923      	ldr	r3, [r4, #16]
 8005504:	b94b      	cbnz	r3, 800551a <__swsetup_r+0x9a>
 8005506:	89a3      	ldrh	r3, [r4, #12]
 8005508:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800550c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005510:	d003      	beq.n	800551a <__swsetup_r+0x9a>
 8005512:	4621      	mov	r1, r4
 8005514:	4630      	mov	r0, r6
 8005516:	f000 f9bf 	bl	8005898 <__smakebuf_r>
 800551a:	89a2      	ldrh	r2, [r4, #12]
 800551c:	f012 0301 	ands.w	r3, r2, #1
 8005520:	d00c      	beq.n	800553c <__swsetup_r+0xbc>
 8005522:	2300      	movs	r3, #0
 8005524:	60a3      	str	r3, [r4, #8]
 8005526:	6963      	ldr	r3, [r4, #20]
 8005528:	425b      	negs	r3, r3
 800552a:	61a3      	str	r3, [r4, #24]
 800552c:	6923      	ldr	r3, [r4, #16]
 800552e:	b953      	cbnz	r3, 8005546 <__swsetup_r+0xc6>
 8005530:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005534:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005538:	d1ba      	bne.n	80054b0 <__swsetup_r+0x30>
 800553a:	bd70      	pop	{r4, r5, r6, pc}
 800553c:	0792      	lsls	r2, r2, #30
 800553e:	bf58      	it	pl
 8005540:	6963      	ldrpl	r3, [r4, #20]
 8005542:	60a3      	str	r3, [r4, #8]
 8005544:	e7f2      	b.n	800552c <__swsetup_r+0xac>
 8005546:	2000      	movs	r0, #0
 8005548:	e7f7      	b.n	800553a <__swsetup_r+0xba>
 800554a:	bf00      	nop
 800554c:	20000010 	.word	0x20000010
 8005550:	08006218 	.word	0x08006218
 8005554:	08006238 	.word	0x08006238
 8005558:	080061f8 	.word	0x080061f8

0800555c <__sflush_r>:
 800555c:	898a      	ldrh	r2, [r1, #12]
 800555e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005562:	4605      	mov	r5, r0
 8005564:	0710      	lsls	r0, r2, #28
 8005566:	460c      	mov	r4, r1
 8005568:	d458      	bmi.n	800561c <__sflush_r+0xc0>
 800556a:	684b      	ldr	r3, [r1, #4]
 800556c:	2b00      	cmp	r3, #0
 800556e:	dc05      	bgt.n	800557c <__sflush_r+0x20>
 8005570:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005572:	2b00      	cmp	r3, #0
 8005574:	dc02      	bgt.n	800557c <__sflush_r+0x20>
 8005576:	2000      	movs	r0, #0
 8005578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800557c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800557e:	2e00      	cmp	r6, #0
 8005580:	d0f9      	beq.n	8005576 <__sflush_r+0x1a>
 8005582:	2300      	movs	r3, #0
 8005584:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005588:	682f      	ldr	r7, [r5, #0]
 800558a:	6a21      	ldr	r1, [r4, #32]
 800558c:	602b      	str	r3, [r5, #0]
 800558e:	d032      	beq.n	80055f6 <__sflush_r+0x9a>
 8005590:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005592:	89a3      	ldrh	r3, [r4, #12]
 8005594:	075a      	lsls	r2, r3, #29
 8005596:	d505      	bpl.n	80055a4 <__sflush_r+0x48>
 8005598:	6863      	ldr	r3, [r4, #4]
 800559a:	1ac0      	subs	r0, r0, r3
 800559c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800559e:	b10b      	cbz	r3, 80055a4 <__sflush_r+0x48>
 80055a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055a2:	1ac0      	subs	r0, r0, r3
 80055a4:	2300      	movs	r3, #0
 80055a6:	4602      	mov	r2, r0
 80055a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055aa:	6a21      	ldr	r1, [r4, #32]
 80055ac:	4628      	mov	r0, r5
 80055ae:	47b0      	blx	r6
 80055b0:	1c43      	adds	r3, r0, #1
 80055b2:	89a3      	ldrh	r3, [r4, #12]
 80055b4:	d106      	bne.n	80055c4 <__sflush_r+0x68>
 80055b6:	6829      	ldr	r1, [r5, #0]
 80055b8:	291d      	cmp	r1, #29
 80055ba:	d848      	bhi.n	800564e <__sflush_r+0xf2>
 80055bc:	4a29      	ldr	r2, [pc, #164]	; (8005664 <__sflush_r+0x108>)
 80055be:	40ca      	lsrs	r2, r1
 80055c0:	07d6      	lsls	r6, r2, #31
 80055c2:	d544      	bpl.n	800564e <__sflush_r+0xf2>
 80055c4:	2200      	movs	r2, #0
 80055c6:	6062      	str	r2, [r4, #4]
 80055c8:	04d9      	lsls	r1, r3, #19
 80055ca:	6922      	ldr	r2, [r4, #16]
 80055cc:	6022      	str	r2, [r4, #0]
 80055ce:	d504      	bpl.n	80055da <__sflush_r+0x7e>
 80055d0:	1c42      	adds	r2, r0, #1
 80055d2:	d101      	bne.n	80055d8 <__sflush_r+0x7c>
 80055d4:	682b      	ldr	r3, [r5, #0]
 80055d6:	b903      	cbnz	r3, 80055da <__sflush_r+0x7e>
 80055d8:	6560      	str	r0, [r4, #84]	; 0x54
 80055da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055dc:	602f      	str	r7, [r5, #0]
 80055de:	2900      	cmp	r1, #0
 80055e0:	d0c9      	beq.n	8005576 <__sflush_r+0x1a>
 80055e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055e6:	4299      	cmp	r1, r3
 80055e8:	d002      	beq.n	80055f0 <__sflush_r+0x94>
 80055ea:	4628      	mov	r0, r5
 80055ec:	f000 f994 	bl	8005918 <_free_r>
 80055f0:	2000      	movs	r0, #0
 80055f2:	6360      	str	r0, [r4, #52]	; 0x34
 80055f4:	e7c0      	b.n	8005578 <__sflush_r+0x1c>
 80055f6:	2301      	movs	r3, #1
 80055f8:	4628      	mov	r0, r5
 80055fa:	47b0      	blx	r6
 80055fc:	1c41      	adds	r1, r0, #1
 80055fe:	d1c8      	bne.n	8005592 <__sflush_r+0x36>
 8005600:	682b      	ldr	r3, [r5, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d0c5      	beq.n	8005592 <__sflush_r+0x36>
 8005606:	2b1d      	cmp	r3, #29
 8005608:	d001      	beq.n	800560e <__sflush_r+0xb2>
 800560a:	2b16      	cmp	r3, #22
 800560c:	d101      	bne.n	8005612 <__sflush_r+0xb6>
 800560e:	602f      	str	r7, [r5, #0]
 8005610:	e7b1      	b.n	8005576 <__sflush_r+0x1a>
 8005612:	89a3      	ldrh	r3, [r4, #12]
 8005614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005618:	81a3      	strh	r3, [r4, #12]
 800561a:	e7ad      	b.n	8005578 <__sflush_r+0x1c>
 800561c:	690f      	ldr	r7, [r1, #16]
 800561e:	2f00      	cmp	r7, #0
 8005620:	d0a9      	beq.n	8005576 <__sflush_r+0x1a>
 8005622:	0793      	lsls	r3, r2, #30
 8005624:	680e      	ldr	r6, [r1, #0]
 8005626:	bf08      	it	eq
 8005628:	694b      	ldreq	r3, [r1, #20]
 800562a:	600f      	str	r7, [r1, #0]
 800562c:	bf18      	it	ne
 800562e:	2300      	movne	r3, #0
 8005630:	eba6 0807 	sub.w	r8, r6, r7
 8005634:	608b      	str	r3, [r1, #8]
 8005636:	f1b8 0f00 	cmp.w	r8, #0
 800563a:	dd9c      	ble.n	8005576 <__sflush_r+0x1a>
 800563c:	4643      	mov	r3, r8
 800563e:	463a      	mov	r2, r7
 8005640:	6a21      	ldr	r1, [r4, #32]
 8005642:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005644:	4628      	mov	r0, r5
 8005646:	47b0      	blx	r6
 8005648:	2800      	cmp	r0, #0
 800564a:	dc06      	bgt.n	800565a <__sflush_r+0xfe>
 800564c:	89a3      	ldrh	r3, [r4, #12]
 800564e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005652:	81a3      	strh	r3, [r4, #12]
 8005654:	f04f 30ff 	mov.w	r0, #4294967295
 8005658:	e78e      	b.n	8005578 <__sflush_r+0x1c>
 800565a:	4407      	add	r7, r0
 800565c:	eba8 0800 	sub.w	r8, r8, r0
 8005660:	e7e9      	b.n	8005636 <__sflush_r+0xda>
 8005662:	bf00      	nop
 8005664:	20400001 	.word	0x20400001

08005668 <_fflush_r>:
 8005668:	b538      	push	{r3, r4, r5, lr}
 800566a:	690b      	ldr	r3, [r1, #16]
 800566c:	4605      	mov	r5, r0
 800566e:	460c      	mov	r4, r1
 8005670:	b1db      	cbz	r3, 80056aa <_fflush_r+0x42>
 8005672:	b118      	cbz	r0, 800567c <_fflush_r+0x14>
 8005674:	6983      	ldr	r3, [r0, #24]
 8005676:	b90b      	cbnz	r3, 800567c <_fflush_r+0x14>
 8005678:	f000 f860 	bl	800573c <__sinit>
 800567c:	4b0c      	ldr	r3, [pc, #48]	; (80056b0 <_fflush_r+0x48>)
 800567e:	429c      	cmp	r4, r3
 8005680:	d109      	bne.n	8005696 <_fflush_r+0x2e>
 8005682:	686c      	ldr	r4, [r5, #4]
 8005684:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005688:	b17b      	cbz	r3, 80056aa <_fflush_r+0x42>
 800568a:	4621      	mov	r1, r4
 800568c:	4628      	mov	r0, r5
 800568e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005692:	f7ff bf63 	b.w	800555c <__sflush_r>
 8005696:	4b07      	ldr	r3, [pc, #28]	; (80056b4 <_fflush_r+0x4c>)
 8005698:	429c      	cmp	r4, r3
 800569a:	d101      	bne.n	80056a0 <_fflush_r+0x38>
 800569c:	68ac      	ldr	r4, [r5, #8]
 800569e:	e7f1      	b.n	8005684 <_fflush_r+0x1c>
 80056a0:	4b05      	ldr	r3, [pc, #20]	; (80056b8 <_fflush_r+0x50>)
 80056a2:	429c      	cmp	r4, r3
 80056a4:	bf08      	it	eq
 80056a6:	68ec      	ldreq	r4, [r5, #12]
 80056a8:	e7ec      	b.n	8005684 <_fflush_r+0x1c>
 80056aa:	2000      	movs	r0, #0
 80056ac:	bd38      	pop	{r3, r4, r5, pc}
 80056ae:	bf00      	nop
 80056b0:	08006218 	.word	0x08006218
 80056b4:	08006238 	.word	0x08006238
 80056b8:	080061f8 	.word	0x080061f8

080056bc <std>:
 80056bc:	2300      	movs	r3, #0
 80056be:	b510      	push	{r4, lr}
 80056c0:	4604      	mov	r4, r0
 80056c2:	e9c0 3300 	strd	r3, r3, [r0]
 80056c6:	6083      	str	r3, [r0, #8]
 80056c8:	8181      	strh	r1, [r0, #12]
 80056ca:	6643      	str	r3, [r0, #100]	; 0x64
 80056cc:	81c2      	strh	r2, [r0, #14]
 80056ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80056d2:	6183      	str	r3, [r0, #24]
 80056d4:	4619      	mov	r1, r3
 80056d6:	2208      	movs	r2, #8
 80056d8:	305c      	adds	r0, #92	; 0x5c
 80056da:	f7ff fdfb 	bl	80052d4 <memset>
 80056de:	4b05      	ldr	r3, [pc, #20]	; (80056f4 <std+0x38>)
 80056e0:	6263      	str	r3, [r4, #36]	; 0x24
 80056e2:	4b05      	ldr	r3, [pc, #20]	; (80056f8 <std+0x3c>)
 80056e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80056e6:	4b05      	ldr	r3, [pc, #20]	; (80056fc <std+0x40>)
 80056e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056ea:	4b05      	ldr	r3, [pc, #20]	; (8005700 <std+0x44>)
 80056ec:	6224      	str	r4, [r4, #32]
 80056ee:	6323      	str	r3, [r4, #48]	; 0x30
 80056f0:	bd10      	pop	{r4, pc}
 80056f2:	bf00      	nop
 80056f4:	08006019 	.word	0x08006019
 80056f8:	0800603b 	.word	0x0800603b
 80056fc:	08006073 	.word	0x08006073
 8005700:	08006097 	.word	0x08006097

08005704 <_cleanup_r>:
 8005704:	4901      	ldr	r1, [pc, #4]	; (800570c <_cleanup_r+0x8>)
 8005706:	f000 b885 	b.w	8005814 <_fwalk_reent>
 800570a:	bf00      	nop
 800570c:	08005669 	.word	0x08005669

08005710 <__sfmoreglue>:
 8005710:	b570      	push	{r4, r5, r6, lr}
 8005712:	1e4a      	subs	r2, r1, #1
 8005714:	2568      	movs	r5, #104	; 0x68
 8005716:	4355      	muls	r5, r2
 8005718:	460e      	mov	r6, r1
 800571a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800571e:	f000 f949 	bl	80059b4 <_malloc_r>
 8005722:	4604      	mov	r4, r0
 8005724:	b140      	cbz	r0, 8005738 <__sfmoreglue+0x28>
 8005726:	2100      	movs	r1, #0
 8005728:	e9c0 1600 	strd	r1, r6, [r0]
 800572c:	300c      	adds	r0, #12
 800572e:	60a0      	str	r0, [r4, #8]
 8005730:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005734:	f7ff fdce 	bl	80052d4 <memset>
 8005738:	4620      	mov	r0, r4
 800573a:	bd70      	pop	{r4, r5, r6, pc}

0800573c <__sinit>:
 800573c:	6983      	ldr	r3, [r0, #24]
 800573e:	b510      	push	{r4, lr}
 8005740:	4604      	mov	r4, r0
 8005742:	bb33      	cbnz	r3, 8005792 <__sinit+0x56>
 8005744:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005748:	6503      	str	r3, [r0, #80]	; 0x50
 800574a:	4b12      	ldr	r3, [pc, #72]	; (8005794 <__sinit+0x58>)
 800574c:	4a12      	ldr	r2, [pc, #72]	; (8005798 <__sinit+0x5c>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6282      	str	r2, [r0, #40]	; 0x28
 8005752:	4298      	cmp	r0, r3
 8005754:	bf04      	itt	eq
 8005756:	2301      	moveq	r3, #1
 8005758:	6183      	streq	r3, [r0, #24]
 800575a:	f000 f81f 	bl	800579c <__sfp>
 800575e:	6060      	str	r0, [r4, #4]
 8005760:	4620      	mov	r0, r4
 8005762:	f000 f81b 	bl	800579c <__sfp>
 8005766:	60a0      	str	r0, [r4, #8]
 8005768:	4620      	mov	r0, r4
 800576a:	f000 f817 	bl	800579c <__sfp>
 800576e:	2200      	movs	r2, #0
 8005770:	60e0      	str	r0, [r4, #12]
 8005772:	2104      	movs	r1, #4
 8005774:	6860      	ldr	r0, [r4, #4]
 8005776:	f7ff ffa1 	bl	80056bc <std>
 800577a:	2201      	movs	r2, #1
 800577c:	2109      	movs	r1, #9
 800577e:	68a0      	ldr	r0, [r4, #8]
 8005780:	f7ff ff9c 	bl	80056bc <std>
 8005784:	2202      	movs	r2, #2
 8005786:	2112      	movs	r1, #18
 8005788:	68e0      	ldr	r0, [r4, #12]
 800578a:	f7ff ff97 	bl	80056bc <std>
 800578e:	2301      	movs	r3, #1
 8005790:	61a3      	str	r3, [r4, #24]
 8005792:	bd10      	pop	{r4, pc}
 8005794:	080061f4 	.word	0x080061f4
 8005798:	08005705 	.word	0x08005705

0800579c <__sfp>:
 800579c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579e:	4b1b      	ldr	r3, [pc, #108]	; (800580c <__sfp+0x70>)
 80057a0:	681e      	ldr	r6, [r3, #0]
 80057a2:	69b3      	ldr	r3, [r6, #24]
 80057a4:	4607      	mov	r7, r0
 80057a6:	b913      	cbnz	r3, 80057ae <__sfp+0x12>
 80057a8:	4630      	mov	r0, r6
 80057aa:	f7ff ffc7 	bl	800573c <__sinit>
 80057ae:	3648      	adds	r6, #72	; 0x48
 80057b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80057b4:	3b01      	subs	r3, #1
 80057b6:	d503      	bpl.n	80057c0 <__sfp+0x24>
 80057b8:	6833      	ldr	r3, [r6, #0]
 80057ba:	b133      	cbz	r3, 80057ca <__sfp+0x2e>
 80057bc:	6836      	ldr	r6, [r6, #0]
 80057be:	e7f7      	b.n	80057b0 <__sfp+0x14>
 80057c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80057c4:	b16d      	cbz	r5, 80057e2 <__sfp+0x46>
 80057c6:	3468      	adds	r4, #104	; 0x68
 80057c8:	e7f4      	b.n	80057b4 <__sfp+0x18>
 80057ca:	2104      	movs	r1, #4
 80057cc:	4638      	mov	r0, r7
 80057ce:	f7ff ff9f 	bl	8005710 <__sfmoreglue>
 80057d2:	6030      	str	r0, [r6, #0]
 80057d4:	2800      	cmp	r0, #0
 80057d6:	d1f1      	bne.n	80057bc <__sfp+0x20>
 80057d8:	230c      	movs	r3, #12
 80057da:	603b      	str	r3, [r7, #0]
 80057dc:	4604      	mov	r4, r0
 80057de:	4620      	mov	r0, r4
 80057e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057e2:	4b0b      	ldr	r3, [pc, #44]	; (8005810 <__sfp+0x74>)
 80057e4:	6665      	str	r5, [r4, #100]	; 0x64
 80057e6:	e9c4 5500 	strd	r5, r5, [r4]
 80057ea:	60a5      	str	r5, [r4, #8]
 80057ec:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80057f0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80057f4:	2208      	movs	r2, #8
 80057f6:	4629      	mov	r1, r5
 80057f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80057fc:	f7ff fd6a 	bl	80052d4 <memset>
 8005800:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005804:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005808:	e7e9      	b.n	80057de <__sfp+0x42>
 800580a:	bf00      	nop
 800580c:	080061f4 	.word	0x080061f4
 8005810:	ffff0001 	.word	0xffff0001

08005814 <_fwalk_reent>:
 8005814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005818:	4680      	mov	r8, r0
 800581a:	4689      	mov	r9, r1
 800581c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005820:	2600      	movs	r6, #0
 8005822:	b914      	cbnz	r4, 800582a <_fwalk_reent+0x16>
 8005824:	4630      	mov	r0, r6
 8005826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800582a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800582e:	3f01      	subs	r7, #1
 8005830:	d501      	bpl.n	8005836 <_fwalk_reent+0x22>
 8005832:	6824      	ldr	r4, [r4, #0]
 8005834:	e7f5      	b.n	8005822 <_fwalk_reent+0xe>
 8005836:	89ab      	ldrh	r3, [r5, #12]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d907      	bls.n	800584c <_fwalk_reent+0x38>
 800583c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005840:	3301      	adds	r3, #1
 8005842:	d003      	beq.n	800584c <_fwalk_reent+0x38>
 8005844:	4629      	mov	r1, r5
 8005846:	4640      	mov	r0, r8
 8005848:	47c8      	blx	r9
 800584a:	4306      	orrs	r6, r0
 800584c:	3568      	adds	r5, #104	; 0x68
 800584e:	e7ee      	b.n	800582e <_fwalk_reent+0x1a>

08005850 <__swhatbuf_r>:
 8005850:	b570      	push	{r4, r5, r6, lr}
 8005852:	460e      	mov	r6, r1
 8005854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005858:	2900      	cmp	r1, #0
 800585a:	b096      	sub	sp, #88	; 0x58
 800585c:	4614      	mov	r4, r2
 800585e:	461d      	mov	r5, r3
 8005860:	da07      	bge.n	8005872 <__swhatbuf_r+0x22>
 8005862:	2300      	movs	r3, #0
 8005864:	602b      	str	r3, [r5, #0]
 8005866:	89b3      	ldrh	r3, [r6, #12]
 8005868:	061a      	lsls	r2, r3, #24
 800586a:	d410      	bmi.n	800588e <__swhatbuf_r+0x3e>
 800586c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005870:	e00e      	b.n	8005890 <__swhatbuf_r+0x40>
 8005872:	466a      	mov	r2, sp
 8005874:	f000 fc36 	bl	80060e4 <_fstat_r>
 8005878:	2800      	cmp	r0, #0
 800587a:	dbf2      	blt.n	8005862 <__swhatbuf_r+0x12>
 800587c:	9a01      	ldr	r2, [sp, #4]
 800587e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005882:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005886:	425a      	negs	r2, r3
 8005888:	415a      	adcs	r2, r3
 800588a:	602a      	str	r2, [r5, #0]
 800588c:	e7ee      	b.n	800586c <__swhatbuf_r+0x1c>
 800588e:	2340      	movs	r3, #64	; 0x40
 8005890:	2000      	movs	r0, #0
 8005892:	6023      	str	r3, [r4, #0]
 8005894:	b016      	add	sp, #88	; 0x58
 8005896:	bd70      	pop	{r4, r5, r6, pc}

08005898 <__smakebuf_r>:
 8005898:	898b      	ldrh	r3, [r1, #12]
 800589a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800589c:	079d      	lsls	r5, r3, #30
 800589e:	4606      	mov	r6, r0
 80058a0:	460c      	mov	r4, r1
 80058a2:	d507      	bpl.n	80058b4 <__smakebuf_r+0x1c>
 80058a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80058a8:	6023      	str	r3, [r4, #0]
 80058aa:	6123      	str	r3, [r4, #16]
 80058ac:	2301      	movs	r3, #1
 80058ae:	6163      	str	r3, [r4, #20]
 80058b0:	b002      	add	sp, #8
 80058b2:	bd70      	pop	{r4, r5, r6, pc}
 80058b4:	ab01      	add	r3, sp, #4
 80058b6:	466a      	mov	r2, sp
 80058b8:	f7ff ffca 	bl	8005850 <__swhatbuf_r>
 80058bc:	9900      	ldr	r1, [sp, #0]
 80058be:	4605      	mov	r5, r0
 80058c0:	4630      	mov	r0, r6
 80058c2:	f000 f877 	bl	80059b4 <_malloc_r>
 80058c6:	b948      	cbnz	r0, 80058dc <__smakebuf_r+0x44>
 80058c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058cc:	059a      	lsls	r2, r3, #22
 80058ce:	d4ef      	bmi.n	80058b0 <__smakebuf_r+0x18>
 80058d0:	f023 0303 	bic.w	r3, r3, #3
 80058d4:	f043 0302 	orr.w	r3, r3, #2
 80058d8:	81a3      	strh	r3, [r4, #12]
 80058da:	e7e3      	b.n	80058a4 <__smakebuf_r+0xc>
 80058dc:	4b0d      	ldr	r3, [pc, #52]	; (8005914 <__smakebuf_r+0x7c>)
 80058de:	62b3      	str	r3, [r6, #40]	; 0x28
 80058e0:	89a3      	ldrh	r3, [r4, #12]
 80058e2:	6020      	str	r0, [r4, #0]
 80058e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e8:	81a3      	strh	r3, [r4, #12]
 80058ea:	9b00      	ldr	r3, [sp, #0]
 80058ec:	6163      	str	r3, [r4, #20]
 80058ee:	9b01      	ldr	r3, [sp, #4]
 80058f0:	6120      	str	r0, [r4, #16]
 80058f2:	b15b      	cbz	r3, 800590c <__smakebuf_r+0x74>
 80058f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058f8:	4630      	mov	r0, r6
 80058fa:	f000 fc05 	bl	8006108 <_isatty_r>
 80058fe:	b128      	cbz	r0, 800590c <__smakebuf_r+0x74>
 8005900:	89a3      	ldrh	r3, [r4, #12]
 8005902:	f023 0303 	bic.w	r3, r3, #3
 8005906:	f043 0301 	orr.w	r3, r3, #1
 800590a:	81a3      	strh	r3, [r4, #12]
 800590c:	89a3      	ldrh	r3, [r4, #12]
 800590e:	431d      	orrs	r5, r3
 8005910:	81a5      	strh	r5, [r4, #12]
 8005912:	e7cd      	b.n	80058b0 <__smakebuf_r+0x18>
 8005914:	08005705 	.word	0x08005705

08005918 <_free_r>:
 8005918:	b538      	push	{r3, r4, r5, lr}
 800591a:	4605      	mov	r5, r0
 800591c:	2900      	cmp	r1, #0
 800591e:	d045      	beq.n	80059ac <_free_r+0x94>
 8005920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005924:	1f0c      	subs	r4, r1, #4
 8005926:	2b00      	cmp	r3, #0
 8005928:	bfb8      	it	lt
 800592a:	18e4      	addlt	r4, r4, r3
 800592c:	f000 fc0e 	bl	800614c <__malloc_lock>
 8005930:	4a1f      	ldr	r2, [pc, #124]	; (80059b0 <_free_r+0x98>)
 8005932:	6813      	ldr	r3, [r2, #0]
 8005934:	4610      	mov	r0, r2
 8005936:	b933      	cbnz	r3, 8005946 <_free_r+0x2e>
 8005938:	6063      	str	r3, [r4, #4]
 800593a:	6014      	str	r4, [r2, #0]
 800593c:	4628      	mov	r0, r5
 800593e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005942:	f000 bc04 	b.w	800614e <__malloc_unlock>
 8005946:	42a3      	cmp	r3, r4
 8005948:	d90c      	bls.n	8005964 <_free_r+0x4c>
 800594a:	6821      	ldr	r1, [r4, #0]
 800594c:	1862      	adds	r2, r4, r1
 800594e:	4293      	cmp	r3, r2
 8005950:	bf04      	itt	eq
 8005952:	681a      	ldreq	r2, [r3, #0]
 8005954:	685b      	ldreq	r3, [r3, #4]
 8005956:	6063      	str	r3, [r4, #4]
 8005958:	bf04      	itt	eq
 800595a:	1852      	addeq	r2, r2, r1
 800595c:	6022      	streq	r2, [r4, #0]
 800595e:	6004      	str	r4, [r0, #0]
 8005960:	e7ec      	b.n	800593c <_free_r+0x24>
 8005962:	4613      	mov	r3, r2
 8005964:	685a      	ldr	r2, [r3, #4]
 8005966:	b10a      	cbz	r2, 800596c <_free_r+0x54>
 8005968:	42a2      	cmp	r2, r4
 800596a:	d9fa      	bls.n	8005962 <_free_r+0x4a>
 800596c:	6819      	ldr	r1, [r3, #0]
 800596e:	1858      	adds	r0, r3, r1
 8005970:	42a0      	cmp	r0, r4
 8005972:	d10b      	bne.n	800598c <_free_r+0x74>
 8005974:	6820      	ldr	r0, [r4, #0]
 8005976:	4401      	add	r1, r0
 8005978:	1858      	adds	r0, r3, r1
 800597a:	4282      	cmp	r2, r0
 800597c:	6019      	str	r1, [r3, #0]
 800597e:	d1dd      	bne.n	800593c <_free_r+0x24>
 8005980:	6810      	ldr	r0, [r2, #0]
 8005982:	6852      	ldr	r2, [r2, #4]
 8005984:	605a      	str	r2, [r3, #4]
 8005986:	4401      	add	r1, r0
 8005988:	6019      	str	r1, [r3, #0]
 800598a:	e7d7      	b.n	800593c <_free_r+0x24>
 800598c:	d902      	bls.n	8005994 <_free_r+0x7c>
 800598e:	230c      	movs	r3, #12
 8005990:	602b      	str	r3, [r5, #0]
 8005992:	e7d3      	b.n	800593c <_free_r+0x24>
 8005994:	6820      	ldr	r0, [r4, #0]
 8005996:	1821      	adds	r1, r4, r0
 8005998:	428a      	cmp	r2, r1
 800599a:	bf04      	itt	eq
 800599c:	6811      	ldreq	r1, [r2, #0]
 800599e:	6852      	ldreq	r2, [r2, #4]
 80059a0:	6062      	str	r2, [r4, #4]
 80059a2:	bf04      	itt	eq
 80059a4:	1809      	addeq	r1, r1, r0
 80059a6:	6021      	streq	r1, [r4, #0]
 80059a8:	605c      	str	r4, [r3, #4]
 80059aa:	e7c7      	b.n	800593c <_free_r+0x24>
 80059ac:	bd38      	pop	{r3, r4, r5, pc}
 80059ae:	bf00      	nop
 80059b0:	200000a8 	.word	0x200000a8

080059b4 <_malloc_r>:
 80059b4:	b570      	push	{r4, r5, r6, lr}
 80059b6:	1ccd      	adds	r5, r1, #3
 80059b8:	f025 0503 	bic.w	r5, r5, #3
 80059bc:	3508      	adds	r5, #8
 80059be:	2d0c      	cmp	r5, #12
 80059c0:	bf38      	it	cc
 80059c2:	250c      	movcc	r5, #12
 80059c4:	2d00      	cmp	r5, #0
 80059c6:	4606      	mov	r6, r0
 80059c8:	db01      	blt.n	80059ce <_malloc_r+0x1a>
 80059ca:	42a9      	cmp	r1, r5
 80059cc:	d903      	bls.n	80059d6 <_malloc_r+0x22>
 80059ce:	230c      	movs	r3, #12
 80059d0:	6033      	str	r3, [r6, #0]
 80059d2:	2000      	movs	r0, #0
 80059d4:	bd70      	pop	{r4, r5, r6, pc}
 80059d6:	f000 fbb9 	bl	800614c <__malloc_lock>
 80059da:	4a21      	ldr	r2, [pc, #132]	; (8005a60 <_malloc_r+0xac>)
 80059dc:	6814      	ldr	r4, [r2, #0]
 80059de:	4621      	mov	r1, r4
 80059e0:	b991      	cbnz	r1, 8005a08 <_malloc_r+0x54>
 80059e2:	4c20      	ldr	r4, [pc, #128]	; (8005a64 <_malloc_r+0xb0>)
 80059e4:	6823      	ldr	r3, [r4, #0]
 80059e6:	b91b      	cbnz	r3, 80059f0 <_malloc_r+0x3c>
 80059e8:	4630      	mov	r0, r6
 80059ea:	f000 fb05 	bl	8005ff8 <_sbrk_r>
 80059ee:	6020      	str	r0, [r4, #0]
 80059f0:	4629      	mov	r1, r5
 80059f2:	4630      	mov	r0, r6
 80059f4:	f000 fb00 	bl	8005ff8 <_sbrk_r>
 80059f8:	1c43      	adds	r3, r0, #1
 80059fa:	d124      	bne.n	8005a46 <_malloc_r+0x92>
 80059fc:	230c      	movs	r3, #12
 80059fe:	6033      	str	r3, [r6, #0]
 8005a00:	4630      	mov	r0, r6
 8005a02:	f000 fba4 	bl	800614e <__malloc_unlock>
 8005a06:	e7e4      	b.n	80059d2 <_malloc_r+0x1e>
 8005a08:	680b      	ldr	r3, [r1, #0]
 8005a0a:	1b5b      	subs	r3, r3, r5
 8005a0c:	d418      	bmi.n	8005a40 <_malloc_r+0x8c>
 8005a0e:	2b0b      	cmp	r3, #11
 8005a10:	d90f      	bls.n	8005a32 <_malloc_r+0x7e>
 8005a12:	600b      	str	r3, [r1, #0]
 8005a14:	50cd      	str	r5, [r1, r3]
 8005a16:	18cc      	adds	r4, r1, r3
 8005a18:	4630      	mov	r0, r6
 8005a1a:	f000 fb98 	bl	800614e <__malloc_unlock>
 8005a1e:	f104 000b 	add.w	r0, r4, #11
 8005a22:	1d23      	adds	r3, r4, #4
 8005a24:	f020 0007 	bic.w	r0, r0, #7
 8005a28:	1ac3      	subs	r3, r0, r3
 8005a2a:	d0d3      	beq.n	80059d4 <_malloc_r+0x20>
 8005a2c:	425a      	negs	r2, r3
 8005a2e:	50e2      	str	r2, [r4, r3]
 8005a30:	e7d0      	b.n	80059d4 <_malloc_r+0x20>
 8005a32:	428c      	cmp	r4, r1
 8005a34:	684b      	ldr	r3, [r1, #4]
 8005a36:	bf16      	itet	ne
 8005a38:	6063      	strne	r3, [r4, #4]
 8005a3a:	6013      	streq	r3, [r2, #0]
 8005a3c:	460c      	movne	r4, r1
 8005a3e:	e7eb      	b.n	8005a18 <_malloc_r+0x64>
 8005a40:	460c      	mov	r4, r1
 8005a42:	6849      	ldr	r1, [r1, #4]
 8005a44:	e7cc      	b.n	80059e0 <_malloc_r+0x2c>
 8005a46:	1cc4      	adds	r4, r0, #3
 8005a48:	f024 0403 	bic.w	r4, r4, #3
 8005a4c:	42a0      	cmp	r0, r4
 8005a4e:	d005      	beq.n	8005a5c <_malloc_r+0xa8>
 8005a50:	1a21      	subs	r1, r4, r0
 8005a52:	4630      	mov	r0, r6
 8005a54:	f000 fad0 	bl	8005ff8 <_sbrk_r>
 8005a58:	3001      	adds	r0, #1
 8005a5a:	d0cf      	beq.n	80059fc <_malloc_r+0x48>
 8005a5c:	6025      	str	r5, [r4, #0]
 8005a5e:	e7db      	b.n	8005a18 <_malloc_r+0x64>
 8005a60:	200000a8 	.word	0x200000a8
 8005a64:	200000ac 	.word	0x200000ac

08005a68 <__sfputc_r>:
 8005a68:	6893      	ldr	r3, [r2, #8]
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	b410      	push	{r4}
 8005a70:	6093      	str	r3, [r2, #8]
 8005a72:	da08      	bge.n	8005a86 <__sfputc_r+0x1e>
 8005a74:	6994      	ldr	r4, [r2, #24]
 8005a76:	42a3      	cmp	r3, r4
 8005a78:	db01      	blt.n	8005a7e <__sfputc_r+0x16>
 8005a7a:	290a      	cmp	r1, #10
 8005a7c:	d103      	bne.n	8005a86 <__sfputc_r+0x1e>
 8005a7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a82:	f7ff bcab 	b.w	80053dc <__swbuf_r>
 8005a86:	6813      	ldr	r3, [r2, #0]
 8005a88:	1c58      	adds	r0, r3, #1
 8005a8a:	6010      	str	r0, [r2, #0]
 8005a8c:	7019      	strb	r1, [r3, #0]
 8005a8e:	4608      	mov	r0, r1
 8005a90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <__sfputs_r>:
 8005a96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a98:	4606      	mov	r6, r0
 8005a9a:	460f      	mov	r7, r1
 8005a9c:	4614      	mov	r4, r2
 8005a9e:	18d5      	adds	r5, r2, r3
 8005aa0:	42ac      	cmp	r4, r5
 8005aa2:	d101      	bne.n	8005aa8 <__sfputs_r+0x12>
 8005aa4:	2000      	movs	r0, #0
 8005aa6:	e007      	b.n	8005ab8 <__sfputs_r+0x22>
 8005aa8:	463a      	mov	r2, r7
 8005aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aae:	4630      	mov	r0, r6
 8005ab0:	f7ff ffda 	bl	8005a68 <__sfputc_r>
 8005ab4:	1c43      	adds	r3, r0, #1
 8005ab6:	d1f3      	bne.n	8005aa0 <__sfputs_r+0xa>
 8005ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005abc <_vfiprintf_r>:
 8005abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ac0:	460c      	mov	r4, r1
 8005ac2:	b09d      	sub	sp, #116	; 0x74
 8005ac4:	4617      	mov	r7, r2
 8005ac6:	461d      	mov	r5, r3
 8005ac8:	4606      	mov	r6, r0
 8005aca:	b118      	cbz	r0, 8005ad4 <_vfiprintf_r+0x18>
 8005acc:	6983      	ldr	r3, [r0, #24]
 8005ace:	b90b      	cbnz	r3, 8005ad4 <_vfiprintf_r+0x18>
 8005ad0:	f7ff fe34 	bl	800573c <__sinit>
 8005ad4:	4b7c      	ldr	r3, [pc, #496]	; (8005cc8 <_vfiprintf_r+0x20c>)
 8005ad6:	429c      	cmp	r4, r3
 8005ad8:	d158      	bne.n	8005b8c <_vfiprintf_r+0xd0>
 8005ada:	6874      	ldr	r4, [r6, #4]
 8005adc:	89a3      	ldrh	r3, [r4, #12]
 8005ade:	0718      	lsls	r0, r3, #28
 8005ae0:	d55e      	bpl.n	8005ba0 <_vfiprintf_r+0xe4>
 8005ae2:	6923      	ldr	r3, [r4, #16]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d05b      	beq.n	8005ba0 <_vfiprintf_r+0xe4>
 8005ae8:	2300      	movs	r3, #0
 8005aea:	9309      	str	r3, [sp, #36]	; 0x24
 8005aec:	2320      	movs	r3, #32
 8005aee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005af2:	2330      	movs	r3, #48	; 0x30
 8005af4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005af8:	9503      	str	r5, [sp, #12]
 8005afa:	f04f 0b01 	mov.w	fp, #1
 8005afe:	46b8      	mov	r8, r7
 8005b00:	4645      	mov	r5, r8
 8005b02:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005b06:	b10b      	cbz	r3, 8005b0c <_vfiprintf_r+0x50>
 8005b08:	2b25      	cmp	r3, #37	; 0x25
 8005b0a:	d154      	bne.n	8005bb6 <_vfiprintf_r+0xfa>
 8005b0c:	ebb8 0a07 	subs.w	sl, r8, r7
 8005b10:	d00b      	beq.n	8005b2a <_vfiprintf_r+0x6e>
 8005b12:	4653      	mov	r3, sl
 8005b14:	463a      	mov	r2, r7
 8005b16:	4621      	mov	r1, r4
 8005b18:	4630      	mov	r0, r6
 8005b1a:	f7ff ffbc 	bl	8005a96 <__sfputs_r>
 8005b1e:	3001      	adds	r0, #1
 8005b20:	f000 80c2 	beq.w	8005ca8 <_vfiprintf_r+0x1ec>
 8005b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b26:	4453      	add	r3, sl
 8005b28:	9309      	str	r3, [sp, #36]	; 0x24
 8005b2a:	f898 3000 	ldrb.w	r3, [r8]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f000 80ba 	beq.w	8005ca8 <_vfiprintf_r+0x1ec>
 8005b34:	2300      	movs	r3, #0
 8005b36:	f04f 32ff 	mov.w	r2, #4294967295
 8005b3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b3e:	9304      	str	r3, [sp, #16]
 8005b40:	9307      	str	r3, [sp, #28]
 8005b42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b46:	931a      	str	r3, [sp, #104]	; 0x68
 8005b48:	46a8      	mov	r8, r5
 8005b4a:	2205      	movs	r2, #5
 8005b4c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005b50:	485e      	ldr	r0, [pc, #376]	; (8005ccc <_vfiprintf_r+0x210>)
 8005b52:	f7fa fb3d 	bl	80001d0 <memchr>
 8005b56:	9b04      	ldr	r3, [sp, #16]
 8005b58:	bb78      	cbnz	r0, 8005bba <_vfiprintf_r+0xfe>
 8005b5a:	06d9      	lsls	r1, r3, #27
 8005b5c:	bf44      	itt	mi
 8005b5e:	2220      	movmi	r2, #32
 8005b60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005b64:	071a      	lsls	r2, r3, #28
 8005b66:	bf44      	itt	mi
 8005b68:	222b      	movmi	r2, #43	; 0x2b
 8005b6a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005b6e:	782a      	ldrb	r2, [r5, #0]
 8005b70:	2a2a      	cmp	r2, #42	; 0x2a
 8005b72:	d02a      	beq.n	8005bca <_vfiprintf_r+0x10e>
 8005b74:	9a07      	ldr	r2, [sp, #28]
 8005b76:	46a8      	mov	r8, r5
 8005b78:	2000      	movs	r0, #0
 8005b7a:	250a      	movs	r5, #10
 8005b7c:	4641      	mov	r1, r8
 8005b7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b82:	3b30      	subs	r3, #48	; 0x30
 8005b84:	2b09      	cmp	r3, #9
 8005b86:	d969      	bls.n	8005c5c <_vfiprintf_r+0x1a0>
 8005b88:	b360      	cbz	r0, 8005be4 <_vfiprintf_r+0x128>
 8005b8a:	e024      	b.n	8005bd6 <_vfiprintf_r+0x11a>
 8005b8c:	4b50      	ldr	r3, [pc, #320]	; (8005cd0 <_vfiprintf_r+0x214>)
 8005b8e:	429c      	cmp	r4, r3
 8005b90:	d101      	bne.n	8005b96 <_vfiprintf_r+0xda>
 8005b92:	68b4      	ldr	r4, [r6, #8]
 8005b94:	e7a2      	b.n	8005adc <_vfiprintf_r+0x20>
 8005b96:	4b4f      	ldr	r3, [pc, #316]	; (8005cd4 <_vfiprintf_r+0x218>)
 8005b98:	429c      	cmp	r4, r3
 8005b9a:	bf08      	it	eq
 8005b9c:	68f4      	ldreq	r4, [r6, #12]
 8005b9e:	e79d      	b.n	8005adc <_vfiprintf_r+0x20>
 8005ba0:	4621      	mov	r1, r4
 8005ba2:	4630      	mov	r0, r6
 8005ba4:	f7ff fc6c 	bl	8005480 <__swsetup_r>
 8005ba8:	2800      	cmp	r0, #0
 8005baa:	d09d      	beq.n	8005ae8 <_vfiprintf_r+0x2c>
 8005bac:	f04f 30ff 	mov.w	r0, #4294967295
 8005bb0:	b01d      	add	sp, #116	; 0x74
 8005bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bb6:	46a8      	mov	r8, r5
 8005bb8:	e7a2      	b.n	8005b00 <_vfiprintf_r+0x44>
 8005bba:	4a44      	ldr	r2, [pc, #272]	; (8005ccc <_vfiprintf_r+0x210>)
 8005bbc:	1a80      	subs	r0, r0, r2
 8005bbe:	fa0b f000 	lsl.w	r0, fp, r0
 8005bc2:	4318      	orrs	r0, r3
 8005bc4:	9004      	str	r0, [sp, #16]
 8005bc6:	4645      	mov	r5, r8
 8005bc8:	e7be      	b.n	8005b48 <_vfiprintf_r+0x8c>
 8005bca:	9a03      	ldr	r2, [sp, #12]
 8005bcc:	1d11      	adds	r1, r2, #4
 8005bce:	6812      	ldr	r2, [r2, #0]
 8005bd0:	9103      	str	r1, [sp, #12]
 8005bd2:	2a00      	cmp	r2, #0
 8005bd4:	db01      	blt.n	8005bda <_vfiprintf_r+0x11e>
 8005bd6:	9207      	str	r2, [sp, #28]
 8005bd8:	e004      	b.n	8005be4 <_vfiprintf_r+0x128>
 8005bda:	4252      	negs	r2, r2
 8005bdc:	f043 0302 	orr.w	r3, r3, #2
 8005be0:	9207      	str	r2, [sp, #28]
 8005be2:	9304      	str	r3, [sp, #16]
 8005be4:	f898 3000 	ldrb.w	r3, [r8]
 8005be8:	2b2e      	cmp	r3, #46	; 0x2e
 8005bea:	d10e      	bne.n	8005c0a <_vfiprintf_r+0x14e>
 8005bec:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005bf0:	2b2a      	cmp	r3, #42	; 0x2a
 8005bf2:	d138      	bne.n	8005c66 <_vfiprintf_r+0x1aa>
 8005bf4:	9b03      	ldr	r3, [sp, #12]
 8005bf6:	1d1a      	adds	r2, r3, #4
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	9203      	str	r2, [sp, #12]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	bfb8      	it	lt
 8005c00:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c04:	f108 0802 	add.w	r8, r8, #2
 8005c08:	9305      	str	r3, [sp, #20]
 8005c0a:	4d33      	ldr	r5, [pc, #204]	; (8005cd8 <_vfiprintf_r+0x21c>)
 8005c0c:	f898 1000 	ldrb.w	r1, [r8]
 8005c10:	2203      	movs	r2, #3
 8005c12:	4628      	mov	r0, r5
 8005c14:	f7fa fadc 	bl	80001d0 <memchr>
 8005c18:	b140      	cbz	r0, 8005c2c <_vfiprintf_r+0x170>
 8005c1a:	2340      	movs	r3, #64	; 0x40
 8005c1c:	1b40      	subs	r0, r0, r5
 8005c1e:	fa03 f000 	lsl.w	r0, r3, r0
 8005c22:	9b04      	ldr	r3, [sp, #16]
 8005c24:	4303      	orrs	r3, r0
 8005c26:	f108 0801 	add.w	r8, r8, #1
 8005c2a:	9304      	str	r3, [sp, #16]
 8005c2c:	f898 1000 	ldrb.w	r1, [r8]
 8005c30:	482a      	ldr	r0, [pc, #168]	; (8005cdc <_vfiprintf_r+0x220>)
 8005c32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c36:	2206      	movs	r2, #6
 8005c38:	f108 0701 	add.w	r7, r8, #1
 8005c3c:	f7fa fac8 	bl	80001d0 <memchr>
 8005c40:	2800      	cmp	r0, #0
 8005c42:	d037      	beq.n	8005cb4 <_vfiprintf_r+0x1f8>
 8005c44:	4b26      	ldr	r3, [pc, #152]	; (8005ce0 <_vfiprintf_r+0x224>)
 8005c46:	bb1b      	cbnz	r3, 8005c90 <_vfiprintf_r+0x1d4>
 8005c48:	9b03      	ldr	r3, [sp, #12]
 8005c4a:	3307      	adds	r3, #7
 8005c4c:	f023 0307 	bic.w	r3, r3, #7
 8005c50:	3308      	adds	r3, #8
 8005c52:	9303      	str	r3, [sp, #12]
 8005c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c56:	444b      	add	r3, r9
 8005c58:	9309      	str	r3, [sp, #36]	; 0x24
 8005c5a:	e750      	b.n	8005afe <_vfiprintf_r+0x42>
 8005c5c:	fb05 3202 	mla	r2, r5, r2, r3
 8005c60:	2001      	movs	r0, #1
 8005c62:	4688      	mov	r8, r1
 8005c64:	e78a      	b.n	8005b7c <_vfiprintf_r+0xc0>
 8005c66:	2300      	movs	r3, #0
 8005c68:	f108 0801 	add.w	r8, r8, #1
 8005c6c:	9305      	str	r3, [sp, #20]
 8005c6e:	4619      	mov	r1, r3
 8005c70:	250a      	movs	r5, #10
 8005c72:	4640      	mov	r0, r8
 8005c74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c78:	3a30      	subs	r2, #48	; 0x30
 8005c7a:	2a09      	cmp	r2, #9
 8005c7c:	d903      	bls.n	8005c86 <_vfiprintf_r+0x1ca>
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d0c3      	beq.n	8005c0a <_vfiprintf_r+0x14e>
 8005c82:	9105      	str	r1, [sp, #20]
 8005c84:	e7c1      	b.n	8005c0a <_vfiprintf_r+0x14e>
 8005c86:	fb05 2101 	mla	r1, r5, r1, r2
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	4680      	mov	r8, r0
 8005c8e:	e7f0      	b.n	8005c72 <_vfiprintf_r+0x1b6>
 8005c90:	ab03      	add	r3, sp, #12
 8005c92:	9300      	str	r3, [sp, #0]
 8005c94:	4622      	mov	r2, r4
 8005c96:	4b13      	ldr	r3, [pc, #76]	; (8005ce4 <_vfiprintf_r+0x228>)
 8005c98:	a904      	add	r1, sp, #16
 8005c9a:	4630      	mov	r0, r6
 8005c9c:	f3af 8000 	nop.w
 8005ca0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005ca4:	4681      	mov	r9, r0
 8005ca6:	d1d5      	bne.n	8005c54 <_vfiprintf_r+0x198>
 8005ca8:	89a3      	ldrh	r3, [r4, #12]
 8005caa:	065b      	lsls	r3, r3, #25
 8005cac:	f53f af7e 	bmi.w	8005bac <_vfiprintf_r+0xf0>
 8005cb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005cb2:	e77d      	b.n	8005bb0 <_vfiprintf_r+0xf4>
 8005cb4:	ab03      	add	r3, sp, #12
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	4622      	mov	r2, r4
 8005cba:	4b0a      	ldr	r3, [pc, #40]	; (8005ce4 <_vfiprintf_r+0x228>)
 8005cbc:	a904      	add	r1, sp, #16
 8005cbe:	4630      	mov	r0, r6
 8005cc0:	f000 f888 	bl	8005dd4 <_printf_i>
 8005cc4:	e7ec      	b.n	8005ca0 <_vfiprintf_r+0x1e4>
 8005cc6:	bf00      	nop
 8005cc8:	08006218 	.word	0x08006218
 8005ccc:	08006258 	.word	0x08006258
 8005cd0:	08006238 	.word	0x08006238
 8005cd4:	080061f8 	.word	0x080061f8
 8005cd8:	0800625e 	.word	0x0800625e
 8005cdc:	08006262 	.word	0x08006262
 8005ce0:	00000000 	.word	0x00000000
 8005ce4:	08005a97 	.word	0x08005a97

08005ce8 <_printf_common>:
 8005ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cec:	4691      	mov	r9, r2
 8005cee:	461f      	mov	r7, r3
 8005cf0:	688a      	ldr	r2, [r1, #8]
 8005cf2:	690b      	ldr	r3, [r1, #16]
 8005cf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	bfb8      	it	lt
 8005cfc:	4613      	movlt	r3, r2
 8005cfe:	f8c9 3000 	str.w	r3, [r9]
 8005d02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d06:	4606      	mov	r6, r0
 8005d08:	460c      	mov	r4, r1
 8005d0a:	b112      	cbz	r2, 8005d12 <_printf_common+0x2a>
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	f8c9 3000 	str.w	r3, [r9]
 8005d12:	6823      	ldr	r3, [r4, #0]
 8005d14:	0699      	lsls	r1, r3, #26
 8005d16:	bf42      	ittt	mi
 8005d18:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005d1c:	3302      	addmi	r3, #2
 8005d1e:	f8c9 3000 	strmi.w	r3, [r9]
 8005d22:	6825      	ldr	r5, [r4, #0]
 8005d24:	f015 0506 	ands.w	r5, r5, #6
 8005d28:	d107      	bne.n	8005d3a <_printf_common+0x52>
 8005d2a:	f104 0a19 	add.w	sl, r4, #25
 8005d2e:	68e3      	ldr	r3, [r4, #12]
 8005d30:	f8d9 2000 	ldr.w	r2, [r9]
 8005d34:	1a9b      	subs	r3, r3, r2
 8005d36:	42ab      	cmp	r3, r5
 8005d38:	dc28      	bgt.n	8005d8c <_printf_common+0xa4>
 8005d3a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005d3e:	6822      	ldr	r2, [r4, #0]
 8005d40:	3300      	adds	r3, #0
 8005d42:	bf18      	it	ne
 8005d44:	2301      	movne	r3, #1
 8005d46:	0692      	lsls	r2, r2, #26
 8005d48:	d42d      	bmi.n	8005da6 <_printf_common+0xbe>
 8005d4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d4e:	4639      	mov	r1, r7
 8005d50:	4630      	mov	r0, r6
 8005d52:	47c0      	blx	r8
 8005d54:	3001      	adds	r0, #1
 8005d56:	d020      	beq.n	8005d9a <_printf_common+0xb2>
 8005d58:	6823      	ldr	r3, [r4, #0]
 8005d5a:	68e5      	ldr	r5, [r4, #12]
 8005d5c:	f8d9 2000 	ldr.w	r2, [r9]
 8005d60:	f003 0306 	and.w	r3, r3, #6
 8005d64:	2b04      	cmp	r3, #4
 8005d66:	bf08      	it	eq
 8005d68:	1aad      	subeq	r5, r5, r2
 8005d6a:	68a3      	ldr	r3, [r4, #8]
 8005d6c:	6922      	ldr	r2, [r4, #16]
 8005d6e:	bf0c      	ite	eq
 8005d70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d74:	2500      	movne	r5, #0
 8005d76:	4293      	cmp	r3, r2
 8005d78:	bfc4      	itt	gt
 8005d7a:	1a9b      	subgt	r3, r3, r2
 8005d7c:	18ed      	addgt	r5, r5, r3
 8005d7e:	f04f 0900 	mov.w	r9, #0
 8005d82:	341a      	adds	r4, #26
 8005d84:	454d      	cmp	r5, r9
 8005d86:	d11a      	bne.n	8005dbe <_printf_common+0xd6>
 8005d88:	2000      	movs	r0, #0
 8005d8a:	e008      	b.n	8005d9e <_printf_common+0xb6>
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	4652      	mov	r2, sl
 8005d90:	4639      	mov	r1, r7
 8005d92:	4630      	mov	r0, r6
 8005d94:	47c0      	blx	r8
 8005d96:	3001      	adds	r0, #1
 8005d98:	d103      	bne.n	8005da2 <_printf_common+0xba>
 8005d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005da2:	3501      	adds	r5, #1
 8005da4:	e7c3      	b.n	8005d2e <_printf_common+0x46>
 8005da6:	18e1      	adds	r1, r4, r3
 8005da8:	1c5a      	adds	r2, r3, #1
 8005daa:	2030      	movs	r0, #48	; 0x30
 8005dac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005db0:	4422      	add	r2, r4
 8005db2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005db6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005dba:	3302      	adds	r3, #2
 8005dbc:	e7c5      	b.n	8005d4a <_printf_common+0x62>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	4622      	mov	r2, r4
 8005dc2:	4639      	mov	r1, r7
 8005dc4:	4630      	mov	r0, r6
 8005dc6:	47c0      	blx	r8
 8005dc8:	3001      	adds	r0, #1
 8005dca:	d0e6      	beq.n	8005d9a <_printf_common+0xb2>
 8005dcc:	f109 0901 	add.w	r9, r9, #1
 8005dd0:	e7d8      	b.n	8005d84 <_printf_common+0x9c>
	...

08005dd4 <_printf_i>:
 8005dd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005dd8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005ddc:	460c      	mov	r4, r1
 8005dde:	7e09      	ldrb	r1, [r1, #24]
 8005de0:	b085      	sub	sp, #20
 8005de2:	296e      	cmp	r1, #110	; 0x6e
 8005de4:	4617      	mov	r7, r2
 8005de6:	4606      	mov	r6, r0
 8005de8:	4698      	mov	r8, r3
 8005dea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005dec:	f000 80b3 	beq.w	8005f56 <_printf_i+0x182>
 8005df0:	d822      	bhi.n	8005e38 <_printf_i+0x64>
 8005df2:	2963      	cmp	r1, #99	; 0x63
 8005df4:	d036      	beq.n	8005e64 <_printf_i+0x90>
 8005df6:	d80a      	bhi.n	8005e0e <_printf_i+0x3a>
 8005df8:	2900      	cmp	r1, #0
 8005dfa:	f000 80b9 	beq.w	8005f70 <_printf_i+0x19c>
 8005dfe:	2958      	cmp	r1, #88	; 0x58
 8005e00:	f000 8083 	beq.w	8005f0a <_printf_i+0x136>
 8005e04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e08:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005e0c:	e032      	b.n	8005e74 <_printf_i+0xa0>
 8005e0e:	2964      	cmp	r1, #100	; 0x64
 8005e10:	d001      	beq.n	8005e16 <_printf_i+0x42>
 8005e12:	2969      	cmp	r1, #105	; 0x69
 8005e14:	d1f6      	bne.n	8005e04 <_printf_i+0x30>
 8005e16:	6820      	ldr	r0, [r4, #0]
 8005e18:	6813      	ldr	r3, [r2, #0]
 8005e1a:	0605      	lsls	r5, r0, #24
 8005e1c:	f103 0104 	add.w	r1, r3, #4
 8005e20:	d52a      	bpl.n	8005e78 <_printf_i+0xa4>
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6011      	str	r1, [r2, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	da03      	bge.n	8005e32 <_printf_i+0x5e>
 8005e2a:	222d      	movs	r2, #45	; 0x2d
 8005e2c:	425b      	negs	r3, r3
 8005e2e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005e32:	486f      	ldr	r0, [pc, #444]	; (8005ff0 <_printf_i+0x21c>)
 8005e34:	220a      	movs	r2, #10
 8005e36:	e039      	b.n	8005eac <_printf_i+0xd8>
 8005e38:	2973      	cmp	r1, #115	; 0x73
 8005e3a:	f000 809d 	beq.w	8005f78 <_printf_i+0x1a4>
 8005e3e:	d808      	bhi.n	8005e52 <_printf_i+0x7e>
 8005e40:	296f      	cmp	r1, #111	; 0x6f
 8005e42:	d020      	beq.n	8005e86 <_printf_i+0xb2>
 8005e44:	2970      	cmp	r1, #112	; 0x70
 8005e46:	d1dd      	bne.n	8005e04 <_printf_i+0x30>
 8005e48:	6823      	ldr	r3, [r4, #0]
 8005e4a:	f043 0320 	orr.w	r3, r3, #32
 8005e4e:	6023      	str	r3, [r4, #0]
 8005e50:	e003      	b.n	8005e5a <_printf_i+0x86>
 8005e52:	2975      	cmp	r1, #117	; 0x75
 8005e54:	d017      	beq.n	8005e86 <_printf_i+0xb2>
 8005e56:	2978      	cmp	r1, #120	; 0x78
 8005e58:	d1d4      	bne.n	8005e04 <_printf_i+0x30>
 8005e5a:	2378      	movs	r3, #120	; 0x78
 8005e5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e60:	4864      	ldr	r0, [pc, #400]	; (8005ff4 <_printf_i+0x220>)
 8005e62:	e055      	b.n	8005f10 <_printf_i+0x13c>
 8005e64:	6813      	ldr	r3, [r2, #0]
 8005e66:	1d19      	adds	r1, r3, #4
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	6011      	str	r1, [r2, #0]
 8005e6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e74:	2301      	movs	r3, #1
 8005e76:	e08c      	b.n	8005f92 <_printf_i+0x1be>
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	6011      	str	r1, [r2, #0]
 8005e7c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e80:	bf18      	it	ne
 8005e82:	b21b      	sxthne	r3, r3
 8005e84:	e7cf      	b.n	8005e26 <_printf_i+0x52>
 8005e86:	6813      	ldr	r3, [r2, #0]
 8005e88:	6825      	ldr	r5, [r4, #0]
 8005e8a:	1d18      	adds	r0, r3, #4
 8005e8c:	6010      	str	r0, [r2, #0]
 8005e8e:	0628      	lsls	r0, r5, #24
 8005e90:	d501      	bpl.n	8005e96 <_printf_i+0xc2>
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	e002      	b.n	8005e9c <_printf_i+0xc8>
 8005e96:	0668      	lsls	r0, r5, #25
 8005e98:	d5fb      	bpl.n	8005e92 <_printf_i+0xbe>
 8005e9a:	881b      	ldrh	r3, [r3, #0]
 8005e9c:	4854      	ldr	r0, [pc, #336]	; (8005ff0 <_printf_i+0x21c>)
 8005e9e:	296f      	cmp	r1, #111	; 0x6f
 8005ea0:	bf14      	ite	ne
 8005ea2:	220a      	movne	r2, #10
 8005ea4:	2208      	moveq	r2, #8
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005eac:	6865      	ldr	r5, [r4, #4]
 8005eae:	60a5      	str	r5, [r4, #8]
 8005eb0:	2d00      	cmp	r5, #0
 8005eb2:	f2c0 8095 	blt.w	8005fe0 <_printf_i+0x20c>
 8005eb6:	6821      	ldr	r1, [r4, #0]
 8005eb8:	f021 0104 	bic.w	r1, r1, #4
 8005ebc:	6021      	str	r1, [r4, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d13d      	bne.n	8005f3e <_printf_i+0x16a>
 8005ec2:	2d00      	cmp	r5, #0
 8005ec4:	f040 808e 	bne.w	8005fe4 <_printf_i+0x210>
 8005ec8:	4665      	mov	r5, ip
 8005eca:	2a08      	cmp	r2, #8
 8005ecc:	d10b      	bne.n	8005ee6 <_printf_i+0x112>
 8005ece:	6823      	ldr	r3, [r4, #0]
 8005ed0:	07db      	lsls	r3, r3, #31
 8005ed2:	d508      	bpl.n	8005ee6 <_printf_i+0x112>
 8005ed4:	6923      	ldr	r3, [r4, #16]
 8005ed6:	6862      	ldr	r2, [r4, #4]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	bfde      	ittt	le
 8005edc:	2330      	movle	r3, #48	; 0x30
 8005ede:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ee2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ee6:	ebac 0305 	sub.w	r3, ip, r5
 8005eea:	6123      	str	r3, [r4, #16]
 8005eec:	f8cd 8000 	str.w	r8, [sp]
 8005ef0:	463b      	mov	r3, r7
 8005ef2:	aa03      	add	r2, sp, #12
 8005ef4:	4621      	mov	r1, r4
 8005ef6:	4630      	mov	r0, r6
 8005ef8:	f7ff fef6 	bl	8005ce8 <_printf_common>
 8005efc:	3001      	adds	r0, #1
 8005efe:	d14d      	bne.n	8005f9c <_printf_i+0x1c8>
 8005f00:	f04f 30ff 	mov.w	r0, #4294967295
 8005f04:	b005      	add	sp, #20
 8005f06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f0a:	4839      	ldr	r0, [pc, #228]	; (8005ff0 <_printf_i+0x21c>)
 8005f0c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005f10:	6813      	ldr	r3, [r2, #0]
 8005f12:	6821      	ldr	r1, [r4, #0]
 8005f14:	1d1d      	adds	r5, r3, #4
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6015      	str	r5, [r2, #0]
 8005f1a:	060a      	lsls	r2, r1, #24
 8005f1c:	d50b      	bpl.n	8005f36 <_printf_i+0x162>
 8005f1e:	07ca      	lsls	r2, r1, #31
 8005f20:	bf44      	itt	mi
 8005f22:	f041 0120 	orrmi.w	r1, r1, #32
 8005f26:	6021      	strmi	r1, [r4, #0]
 8005f28:	b91b      	cbnz	r3, 8005f32 <_printf_i+0x15e>
 8005f2a:	6822      	ldr	r2, [r4, #0]
 8005f2c:	f022 0220 	bic.w	r2, r2, #32
 8005f30:	6022      	str	r2, [r4, #0]
 8005f32:	2210      	movs	r2, #16
 8005f34:	e7b7      	b.n	8005ea6 <_printf_i+0xd2>
 8005f36:	064d      	lsls	r5, r1, #25
 8005f38:	bf48      	it	mi
 8005f3a:	b29b      	uxthmi	r3, r3
 8005f3c:	e7ef      	b.n	8005f1e <_printf_i+0x14a>
 8005f3e:	4665      	mov	r5, ip
 8005f40:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f44:	fb02 3311 	mls	r3, r2, r1, r3
 8005f48:	5cc3      	ldrb	r3, [r0, r3]
 8005f4a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005f4e:	460b      	mov	r3, r1
 8005f50:	2900      	cmp	r1, #0
 8005f52:	d1f5      	bne.n	8005f40 <_printf_i+0x16c>
 8005f54:	e7b9      	b.n	8005eca <_printf_i+0xf6>
 8005f56:	6813      	ldr	r3, [r2, #0]
 8005f58:	6825      	ldr	r5, [r4, #0]
 8005f5a:	6961      	ldr	r1, [r4, #20]
 8005f5c:	1d18      	adds	r0, r3, #4
 8005f5e:	6010      	str	r0, [r2, #0]
 8005f60:	0628      	lsls	r0, r5, #24
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	d501      	bpl.n	8005f6a <_printf_i+0x196>
 8005f66:	6019      	str	r1, [r3, #0]
 8005f68:	e002      	b.n	8005f70 <_printf_i+0x19c>
 8005f6a:	066a      	lsls	r2, r5, #25
 8005f6c:	d5fb      	bpl.n	8005f66 <_printf_i+0x192>
 8005f6e:	8019      	strh	r1, [r3, #0]
 8005f70:	2300      	movs	r3, #0
 8005f72:	6123      	str	r3, [r4, #16]
 8005f74:	4665      	mov	r5, ip
 8005f76:	e7b9      	b.n	8005eec <_printf_i+0x118>
 8005f78:	6813      	ldr	r3, [r2, #0]
 8005f7a:	1d19      	adds	r1, r3, #4
 8005f7c:	6011      	str	r1, [r2, #0]
 8005f7e:	681d      	ldr	r5, [r3, #0]
 8005f80:	6862      	ldr	r2, [r4, #4]
 8005f82:	2100      	movs	r1, #0
 8005f84:	4628      	mov	r0, r5
 8005f86:	f7fa f923 	bl	80001d0 <memchr>
 8005f8a:	b108      	cbz	r0, 8005f90 <_printf_i+0x1bc>
 8005f8c:	1b40      	subs	r0, r0, r5
 8005f8e:	6060      	str	r0, [r4, #4]
 8005f90:	6863      	ldr	r3, [r4, #4]
 8005f92:	6123      	str	r3, [r4, #16]
 8005f94:	2300      	movs	r3, #0
 8005f96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f9a:	e7a7      	b.n	8005eec <_printf_i+0x118>
 8005f9c:	6923      	ldr	r3, [r4, #16]
 8005f9e:	462a      	mov	r2, r5
 8005fa0:	4639      	mov	r1, r7
 8005fa2:	4630      	mov	r0, r6
 8005fa4:	47c0      	blx	r8
 8005fa6:	3001      	adds	r0, #1
 8005fa8:	d0aa      	beq.n	8005f00 <_printf_i+0x12c>
 8005faa:	6823      	ldr	r3, [r4, #0]
 8005fac:	079b      	lsls	r3, r3, #30
 8005fae:	d413      	bmi.n	8005fd8 <_printf_i+0x204>
 8005fb0:	68e0      	ldr	r0, [r4, #12]
 8005fb2:	9b03      	ldr	r3, [sp, #12]
 8005fb4:	4298      	cmp	r0, r3
 8005fb6:	bfb8      	it	lt
 8005fb8:	4618      	movlt	r0, r3
 8005fba:	e7a3      	b.n	8005f04 <_printf_i+0x130>
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	464a      	mov	r2, r9
 8005fc0:	4639      	mov	r1, r7
 8005fc2:	4630      	mov	r0, r6
 8005fc4:	47c0      	blx	r8
 8005fc6:	3001      	adds	r0, #1
 8005fc8:	d09a      	beq.n	8005f00 <_printf_i+0x12c>
 8005fca:	3501      	adds	r5, #1
 8005fcc:	68e3      	ldr	r3, [r4, #12]
 8005fce:	9a03      	ldr	r2, [sp, #12]
 8005fd0:	1a9b      	subs	r3, r3, r2
 8005fd2:	42ab      	cmp	r3, r5
 8005fd4:	dcf2      	bgt.n	8005fbc <_printf_i+0x1e8>
 8005fd6:	e7eb      	b.n	8005fb0 <_printf_i+0x1dc>
 8005fd8:	2500      	movs	r5, #0
 8005fda:	f104 0919 	add.w	r9, r4, #25
 8005fde:	e7f5      	b.n	8005fcc <_printf_i+0x1f8>
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1ac      	bne.n	8005f3e <_printf_i+0x16a>
 8005fe4:	7803      	ldrb	r3, [r0, #0]
 8005fe6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fee:	e76c      	b.n	8005eca <_printf_i+0xf6>
 8005ff0:	08006269 	.word	0x08006269
 8005ff4:	0800627a 	.word	0x0800627a

08005ff8 <_sbrk_r>:
 8005ff8:	b538      	push	{r3, r4, r5, lr}
 8005ffa:	4c06      	ldr	r4, [pc, #24]	; (8006014 <_sbrk_r+0x1c>)
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	4605      	mov	r5, r0
 8006000:	4608      	mov	r0, r1
 8006002:	6023      	str	r3, [r4, #0]
 8006004:	f7ff f8b0 	bl	8005168 <_sbrk>
 8006008:	1c43      	adds	r3, r0, #1
 800600a:	d102      	bne.n	8006012 <_sbrk_r+0x1a>
 800600c:	6823      	ldr	r3, [r4, #0]
 800600e:	b103      	cbz	r3, 8006012 <_sbrk_r+0x1a>
 8006010:	602b      	str	r3, [r5, #0]
 8006012:	bd38      	pop	{r3, r4, r5, pc}
 8006014:	200001d0 	.word	0x200001d0

08006018 <__sread>:
 8006018:	b510      	push	{r4, lr}
 800601a:	460c      	mov	r4, r1
 800601c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006020:	f000 f896 	bl	8006150 <_read_r>
 8006024:	2800      	cmp	r0, #0
 8006026:	bfab      	itete	ge
 8006028:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800602a:	89a3      	ldrhlt	r3, [r4, #12]
 800602c:	181b      	addge	r3, r3, r0
 800602e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006032:	bfac      	ite	ge
 8006034:	6563      	strge	r3, [r4, #84]	; 0x54
 8006036:	81a3      	strhlt	r3, [r4, #12]
 8006038:	bd10      	pop	{r4, pc}

0800603a <__swrite>:
 800603a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800603e:	461f      	mov	r7, r3
 8006040:	898b      	ldrh	r3, [r1, #12]
 8006042:	05db      	lsls	r3, r3, #23
 8006044:	4605      	mov	r5, r0
 8006046:	460c      	mov	r4, r1
 8006048:	4616      	mov	r6, r2
 800604a:	d505      	bpl.n	8006058 <__swrite+0x1e>
 800604c:	2302      	movs	r3, #2
 800604e:	2200      	movs	r2, #0
 8006050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006054:	f000 f868 	bl	8006128 <_lseek_r>
 8006058:	89a3      	ldrh	r3, [r4, #12]
 800605a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800605e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006062:	81a3      	strh	r3, [r4, #12]
 8006064:	4632      	mov	r2, r6
 8006066:	463b      	mov	r3, r7
 8006068:	4628      	mov	r0, r5
 800606a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800606e:	f000 b817 	b.w	80060a0 <_write_r>

08006072 <__sseek>:
 8006072:	b510      	push	{r4, lr}
 8006074:	460c      	mov	r4, r1
 8006076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800607a:	f000 f855 	bl	8006128 <_lseek_r>
 800607e:	1c43      	adds	r3, r0, #1
 8006080:	89a3      	ldrh	r3, [r4, #12]
 8006082:	bf15      	itete	ne
 8006084:	6560      	strne	r0, [r4, #84]	; 0x54
 8006086:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800608a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800608e:	81a3      	strheq	r3, [r4, #12]
 8006090:	bf18      	it	ne
 8006092:	81a3      	strhne	r3, [r4, #12]
 8006094:	bd10      	pop	{r4, pc}

08006096 <__sclose>:
 8006096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800609a:	f000 b813 	b.w	80060c4 <_close_r>
	...

080060a0 <_write_r>:
 80060a0:	b538      	push	{r3, r4, r5, lr}
 80060a2:	4c07      	ldr	r4, [pc, #28]	; (80060c0 <_write_r+0x20>)
 80060a4:	4605      	mov	r5, r0
 80060a6:	4608      	mov	r0, r1
 80060a8:	4611      	mov	r1, r2
 80060aa:	2200      	movs	r2, #0
 80060ac:	6022      	str	r2, [r4, #0]
 80060ae:	461a      	mov	r2, r3
 80060b0:	f7ff f80a 	bl	80050c8 <_write>
 80060b4:	1c43      	adds	r3, r0, #1
 80060b6:	d102      	bne.n	80060be <_write_r+0x1e>
 80060b8:	6823      	ldr	r3, [r4, #0]
 80060ba:	b103      	cbz	r3, 80060be <_write_r+0x1e>
 80060bc:	602b      	str	r3, [r5, #0]
 80060be:	bd38      	pop	{r3, r4, r5, pc}
 80060c0:	200001d0 	.word	0x200001d0

080060c4 <_close_r>:
 80060c4:	b538      	push	{r3, r4, r5, lr}
 80060c6:	4c06      	ldr	r4, [pc, #24]	; (80060e0 <_close_r+0x1c>)
 80060c8:	2300      	movs	r3, #0
 80060ca:	4605      	mov	r5, r0
 80060cc:	4608      	mov	r0, r1
 80060ce:	6023      	str	r3, [r4, #0]
 80060d0:	f7ff f816 	bl	8005100 <_close>
 80060d4:	1c43      	adds	r3, r0, #1
 80060d6:	d102      	bne.n	80060de <_close_r+0x1a>
 80060d8:	6823      	ldr	r3, [r4, #0]
 80060da:	b103      	cbz	r3, 80060de <_close_r+0x1a>
 80060dc:	602b      	str	r3, [r5, #0]
 80060de:	bd38      	pop	{r3, r4, r5, pc}
 80060e0:	200001d0 	.word	0x200001d0

080060e4 <_fstat_r>:
 80060e4:	b538      	push	{r3, r4, r5, lr}
 80060e6:	4c07      	ldr	r4, [pc, #28]	; (8006104 <_fstat_r+0x20>)
 80060e8:	2300      	movs	r3, #0
 80060ea:	4605      	mov	r5, r0
 80060ec:	4608      	mov	r0, r1
 80060ee:	4611      	mov	r1, r2
 80060f0:	6023      	str	r3, [r4, #0]
 80060f2:	f7ff f811 	bl	8005118 <_fstat>
 80060f6:	1c43      	adds	r3, r0, #1
 80060f8:	d102      	bne.n	8006100 <_fstat_r+0x1c>
 80060fa:	6823      	ldr	r3, [r4, #0]
 80060fc:	b103      	cbz	r3, 8006100 <_fstat_r+0x1c>
 80060fe:	602b      	str	r3, [r5, #0]
 8006100:	bd38      	pop	{r3, r4, r5, pc}
 8006102:	bf00      	nop
 8006104:	200001d0 	.word	0x200001d0

08006108 <_isatty_r>:
 8006108:	b538      	push	{r3, r4, r5, lr}
 800610a:	4c06      	ldr	r4, [pc, #24]	; (8006124 <_isatty_r+0x1c>)
 800610c:	2300      	movs	r3, #0
 800610e:	4605      	mov	r5, r0
 8006110:	4608      	mov	r0, r1
 8006112:	6023      	str	r3, [r4, #0]
 8006114:	f7ff f810 	bl	8005138 <_isatty>
 8006118:	1c43      	adds	r3, r0, #1
 800611a:	d102      	bne.n	8006122 <_isatty_r+0x1a>
 800611c:	6823      	ldr	r3, [r4, #0]
 800611e:	b103      	cbz	r3, 8006122 <_isatty_r+0x1a>
 8006120:	602b      	str	r3, [r5, #0]
 8006122:	bd38      	pop	{r3, r4, r5, pc}
 8006124:	200001d0 	.word	0x200001d0

08006128 <_lseek_r>:
 8006128:	b538      	push	{r3, r4, r5, lr}
 800612a:	4c07      	ldr	r4, [pc, #28]	; (8006148 <_lseek_r+0x20>)
 800612c:	4605      	mov	r5, r0
 800612e:	4608      	mov	r0, r1
 8006130:	4611      	mov	r1, r2
 8006132:	2200      	movs	r2, #0
 8006134:	6022      	str	r2, [r4, #0]
 8006136:	461a      	mov	r2, r3
 8006138:	f7ff f809 	bl	800514e <_lseek>
 800613c:	1c43      	adds	r3, r0, #1
 800613e:	d102      	bne.n	8006146 <_lseek_r+0x1e>
 8006140:	6823      	ldr	r3, [r4, #0]
 8006142:	b103      	cbz	r3, 8006146 <_lseek_r+0x1e>
 8006144:	602b      	str	r3, [r5, #0]
 8006146:	bd38      	pop	{r3, r4, r5, pc}
 8006148:	200001d0 	.word	0x200001d0

0800614c <__malloc_lock>:
 800614c:	4770      	bx	lr

0800614e <__malloc_unlock>:
 800614e:	4770      	bx	lr

08006150 <_read_r>:
 8006150:	b538      	push	{r3, r4, r5, lr}
 8006152:	4c07      	ldr	r4, [pc, #28]	; (8006170 <_read_r+0x20>)
 8006154:	4605      	mov	r5, r0
 8006156:	4608      	mov	r0, r1
 8006158:	4611      	mov	r1, r2
 800615a:	2200      	movs	r2, #0
 800615c:	6022      	str	r2, [r4, #0]
 800615e:	461a      	mov	r2, r3
 8006160:	f7fe ff95 	bl	800508e <_read>
 8006164:	1c43      	adds	r3, r0, #1
 8006166:	d102      	bne.n	800616e <_read_r+0x1e>
 8006168:	6823      	ldr	r3, [r4, #0]
 800616a:	b103      	cbz	r3, 800616e <_read_r+0x1e>
 800616c:	602b      	str	r3, [r5, #0]
 800616e:	bd38      	pop	{r3, r4, r5, pc}
 8006170:	200001d0 	.word	0x200001d0

08006174 <_init>:
 8006174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006176:	bf00      	nop
 8006178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800617a:	bc08      	pop	{r3}
 800617c:	469e      	mov	lr, r3
 800617e:	4770      	bx	lr

08006180 <_fini>:
 8006180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006182:	bf00      	nop
 8006184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006186:	bc08      	pop	{r3}
 8006188:	469e      	mov	lr, r3
 800618a:	4770      	bx	lr
