
ComboLock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  08008458  08008458  00018458  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008788  08008788  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008788  08008788  00018788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008790  08008790  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008790  08008790  00018790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008794  08008794  00018794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008798  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  200001e0  08008978  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08008978  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a40  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002346  00000000  00000000  00030c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ec0  00000000  00000000  00032f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000db0  00000000  00000000  00033e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028d2a  00000000  00000000  00034c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b8c3  00000000  00000000  0005d932  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ff456  00000000  00000000  000691f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016864b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b68  00000000  00000000  001686c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800843c 	.word	0x0800843c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800843c 	.word	0x0800843c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <HAL_Init+0x3c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ee4 <HAL_Init+0x3c>)
 8000eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ebc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ebe:	2003      	movs	r0, #3
 8000ec0:	f001 feca 	bl	8002c58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f000 f80f 	bl	8000ee8 <HAL_InitTick>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d002      	beq.n	8000ed6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	71fb      	strb	r3, [r7, #7]
 8000ed4:	e001      	b.n	8000eda <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ed6:	f004 fcd1 	bl	800587c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eda:	79fb      	ldrb	r3, [r7, #7]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40022000 	.word	0x40022000

08000ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ef4:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <HAL_InitTick+0x68>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d022      	beq.n	8000f42 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000efc:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <HAL_InitTick+0x6c>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <HAL_InitTick+0x68>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f08:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f10:	4618      	mov	r0, r3
 8000f12:	f001 fed6 	bl	8002cc2 <HAL_SYSTICK_Config>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d10f      	bne.n	8000f3c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b0f      	cmp	r3, #15
 8000f20:	d809      	bhi.n	8000f36 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f22:	2200      	movs	r2, #0
 8000f24:	6879      	ldr	r1, [r7, #4]
 8000f26:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2a:	f001 fea0 	bl	8002c6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <HAL_InitTick+0x70>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6013      	str	r3, [r2, #0]
 8000f34:	e007      	b.n	8000f46 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	73fb      	strb	r3, [r7, #15]
 8000f3a:	e004      	b.n	8000f46 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	73fb      	strb	r3, [r7, #15]
 8000f40:	e001      	b.n	8000f46 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000004 	.word	0x20000004
 8000f54:	2000000c 	.word	0x2000000c
 8000f58:	20000000 	.word	0x20000000

08000f5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <HAL_IncTick+0x1c>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <HAL_IncTick+0x20>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4413      	add	r3, r2
 8000f6a:	4a03      	ldr	r2, [pc, #12]	; (8000f78 <HAL_IncTick+0x1c>)
 8000f6c:	6013      	str	r3, [r2, #0]
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	20000218 	.word	0x20000218
 8000f7c:	20000004 	.word	0x20000004

08000f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return uwTick;
 8000f84:	4b03      	ldr	r3, [pc, #12]	; (8000f94 <HAL_GetTick+0x14>)
 8000f86:	681b      	ldr	r3, [r3, #0]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000218 	.word	0x20000218

08000f98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa0:	f7ff ffee 	bl	8000f80 <HAL_GetTick>
 8000fa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb0:	d004      	beq.n	8000fbc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <HAL_Delay+0x40>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	4413      	add	r3, r2
 8000fba:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fbc:	bf00      	nop
 8000fbe:	f7ff ffdf 	bl	8000f80 <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	68fa      	ldr	r2, [r7, #12]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d8f7      	bhi.n	8000fbe <HAL_Delay+0x26>
  {
  }
}
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000004 	.word	0x20000004

08000fdc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	431a      	orrs	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001002:	b480      	push	{r7}
 8001004:	b083      	sub	sp, #12
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
 800100a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	431a      	orrs	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	609a      	str	r2, [r3, #8]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001038:	4618      	mov	r0, r3
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001044:	b490      	push	{r4, r7}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
 8001050:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	3360      	adds	r3, #96	; 0x60
 8001056:	461a      	mov	r2, r3
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001060:	6822      	ldr	r2, [r4, #0]
 8001062:	4b08      	ldr	r3, [pc, #32]	; (8001084 <LL_ADC_SetOffset+0x40>)
 8001064:	4013      	ands	r3, r2
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800106c:	683a      	ldr	r2, [r7, #0]
 800106e:	430a      	orrs	r2, r1
 8001070:	4313      	orrs	r3, r2
 8001072:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001076:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001078:	bf00      	nop
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bc90      	pop	{r4, r7}
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	03fff000 	.word	0x03fff000

08001088 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001088:	b490      	push	{r4, r7}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3360      	adds	r3, #96	; 0x60
 8001096:	461a      	mov	r2, r3
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	4413      	add	r3, r2
 800109e:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80010a0:	6823      	ldr	r3, [r4, #0]
 80010a2:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc90      	pop	{r4, r7}
 80010ae:	4770      	bx	lr

080010b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80010b0:	b490      	push	{r4, r7}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	3360      	adds	r3, #96	; 0x60
 80010c0:	461a      	mov	r2, r3
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4413      	add	r3, r2
 80010c8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80010ca:	6823      	ldr	r3, [r4, #0]
 80010cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc90      	pop	{r4, r7}
 80010de:	4770      	bx	lr

080010e0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d101      	bne.n	80010f8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80010f4:	2301      	movs	r3, #1
 80010f6:	e000      	b.n	80010fa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001106:	b490      	push	{r4, r7}
 8001108:	b084      	sub	sp, #16
 800110a:	af00      	add	r7, sp, #0
 800110c:	60f8      	str	r0, [r7, #12]
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	3330      	adds	r3, #48	; 0x30
 8001116:	461a      	mov	r2, r3
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	0a1b      	lsrs	r3, r3, #8
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	f003 030c 	and.w	r3, r3, #12
 8001122:	4413      	add	r3, r2
 8001124:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001126:	6822      	ldr	r2, [r4, #0]
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	f003 031f 	and.w	r3, r3, #31
 800112e:	211f      	movs	r1, #31
 8001130:	fa01 f303 	lsl.w	r3, r1, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	401a      	ands	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	0e9b      	lsrs	r3, r3, #26
 800113c:	f003 011f 	and.w	r1, r3, #31
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	f003 031f 	and.w	r3, r3, #31
 8001146:	fa01 f303 	lsl.w	r3, r1, r3
 800114a:	4313      	orrs	r3, r2
 800114c:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bc90      	pop	{r4, r7}
 8001156:	4770      	bx	lr

08001158 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001158:	b490      	push	{r4, r7}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	3314      	adds	r3, #20
 8001168:	461a      	mov	r2, r3
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	0e5b      	lsrs	r3, r3, #25
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	f003 0304 	and.w	r3, r3, #4
 8001174:	4413      	add	r3, r2
 8001176:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001178:	6822      	ldr	r2, [r4, #0]
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	0d1b      	lsrs	r3, r3, #20
 800117e:	f003 031f 	and.w	r3, r3, #31
 8001182:	2107      	movs	r1, #7
 8001184:	fa01 f303 	lsl.w	r3, r1, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	401a      	ands	r2, r3
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	0d1b      	lsrs	r3, r3, #20
 8001190:	f003 031f 	and.w	r3, r3, #31
 8001194:	6879      	ldr	r1, [r7, #4]
 8001196:	fa01 f303 	lsl.w	r3, r1, r3
 800119a:	4313      	orrs	r3, r2
 800119c:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800119e:	bf00      	nop
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc90      	pop	{r4, r7}
 80011a6:	4770      	bx	lr

080011a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011c0:	43db      	mvns	r3, r3
 80011c2:	401a      	ands	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f003 0318 	and.w	r3, r3, #24
 80011ca:	4908      	ldr	r1, [pc, #32]	; (80011ec <LL_ADC_SetChannelSingleDiff+0x44>)
 80011cc:	40d9      	lsrs	r1, r3
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	400b      	ands	r3, r1
 80011d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011d6:	431a      	orrs	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80011de:	bf00      	nop
 80011e0:	3714      	adds	r7, #20
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	0007ffff 	.word	0x0007ffff

080011f0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	f003 031f 	and.w	r3, r3, #31
}
 8001200:	4618      	mov	r0, r3
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800121c:	4618      	mov	r0, r3
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001238:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	6093      	str	r3, [r2, #8]
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800125c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001260:	d101      	bne.n	8001266 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001262:	2301      	movs	r3, #1
 8001264:	e000      	b.n	8001268 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001266:	2300      	movs	r3, #0
}
 8001268:	4618      	mov	r0, r3
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001284:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001288:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80012b0:	d101      	bne.n	80012b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80012b2:	2301      	movs	r3, #1
 80012b4:	e000      	b.n	80012b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012d8:	f043 0201 	orr.w	r2, r3, #1
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d101      	bne.n	8001304 <LL_ADC_IsEnabled+0x18>
 8001300:	2301      	movs	r3, #1
 8001302:	e000      	b.n	8001306 <LL_ADC_IsEnabled+0x1a>
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001312:	b480      	push	{r7}
 8001314:	b083      	sub	sp, #12
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001322:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001326:	f043 0204 	orr.w	r2, r3, #4
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	2b04      	cmp	r3, #4
 800134c:	d101      	bne.n	8001352 <LL_ADC_REG_IsConversionOngoing+0x18>
 800134e:	2301      	movs	r3, #1
 8001350:	e000      	b.n	8001354 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f003 0308 	and.w	r3, r3, #8
 8001370:	2b08      	cmp	r3, #8
 8001372:	d101      	bne.n	8001378 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001374:	2301      	movs	r3, #1
 8001376:	e000      	b.n	800137a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
	...

08001388 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001388:	b590      	push	{r4, r7, lr}
 800138a:	b089      	sub	sp, #36	; 0x24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001390:	2300      	movs	r3, #0
 8001392:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001394:	2300      	movs	r3, #0
 8001396:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e134      	b.n	800160c <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d109      	bne.n	80013c4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f004 fa8d 	bl	80058d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ff3f 	bl	800124c <LL_ADC_IsDeepPowerDownEnabled>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d004      	beq.n	80013de <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff25 	bl	8001228 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff ff5a 	bl	800129c <LL_ADC_IsInternalRegulatorEnabled>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d113      	bne.n	8001416 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff ff3e 	bl	8001274 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80013f8:	4b86      	ldr	r3, [pc, #536]	; (8001614 <HAL_ADC_Init+0x28c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	099b      	lsrs	r3, r3, #6
 80013fe:	4a86      	ldr	r2, [pc, #536]	; (8001618 <HAL_ADC_Init+0x290>)
 8001400:	fba2 2303 	umull	r2, r3, r2, r3
 8001404:	099b      	lsrs	r3, r3, #6
 8001406:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001408:	e002      	b.n	8001410 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	3b01      	subs	r3, #1
 800140e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f9      	bne.n	800140a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff ff3e 	bl	800129c <LL_ADC_IsInternalRegulatorEnabled>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d10d      	bne.n	8001442 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800142a:	f043 0210 	orr.w	r2, r3, #16
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001436:	f043 0201 	orr.w	r2, r3, #1
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff ff77 	bl	800133a <LL_ADC_REG_IsConversionOngoing>
 800144c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001452:	f003 0310 	and.w	r3, r3, #16
 8001456:	2b00      	cmp	r3, #0
 8001458:	f040 80cf 	bne.w	80015fa <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	2b00      	cmp	r3, #0
 8001460:	f040 80cb 	bne.w	80015fa <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001468:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800146c:	f043 0202 	orr.w	r2, r3, #2
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff37 	bl	80012ec <LL_ADC_IsEnabled>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d115      	bne.n	80014b0 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001484:	4865      	ldr	r0, [pc, #404]	; (800161c <HAL_ADC_Init+0x294>)
 8001486:	f7ff ff31 	bl	80012ec <LL_ADC_IsEnabled>
 800148a:	4604      	mov	r4, r0
 800148c:	4864      	ldr	r0, [pc, #400]	; (8001620 <HAL_ADC_Init+0x298>)
 800148e:	f7ff ff2d 	bl	80012ec <LL_ADC_IsEnabled>
 8001492:	4603      	mov	r3, r0
 8001494:	431c      	orrs	r4, r3
 8001496:	4863      	ldr	r0, [pc, #396]	; (8001624 <HAL_ADC_Init+0x29c>)
 8001498:	f7ff ff28 	bl	80012ec <LL_ADC_IsEnabled>
 800149c:	4603      	mov	r3, r0
 800149e:	4323      	orrs	r3, r4
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d105      	bne.n	80014b0 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	4619      	mov	r1, r3
 80014aa:	485f      	ldr	r0, [pc, #380]	; (8001628 <HAL_ADC_Init+0x2a0>)
 80014ac:	f7ff fd96 	bl	8000fdc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	7e5b      	ldrb	r3, [r3, #25]
 80014b4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014ba:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80014c0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80014c6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014ce:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014d0:	4313      	orrs	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d106      	bne.n	80014ec <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e2:	3b01      	subs	r3, #1
 80014e4:	045b      	lsls	r3, r3, #17
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d009      	beq.n	8001508 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001500:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4313      	orrs	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68da      	ldr	r2, [r3, #12]
 800150e:	4b47      	ldr	r3, [pc, #284]	; (800162c <HAL_ADC_Init+0x2a4>)
 8001510:	4013      	ands	r3, r2
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	6812      	ldr	r2, [r2, #0]
 8001516:	69b9      	ldr	r1, [r7, #24]
 8001518:	430b      	orrs	r3, r1
 800151a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ff0a 	bl	800133a <LL_ADC_REG_IsConversionOngoing>
 8001526:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff17 	bl	8001360 <LL_ADC_INJ_IsConversionOngoing>
 8001532:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d13d      	bne.n	80015b6 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d13a      	bne.n	80015b6 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001544:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800154c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800155c:	f023 0302 	bic.w	r3, r3, #2
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	6812      	ldr	r2, [r2, #0]
 8001564:	69b9      	ldr	r1, [r7, #24]
 8001566:	430b      	orrs	r3, r1
 8001568:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001570:	2b01      	cmp	r3, #1
 8001572:	d118      	bne.n	80015a6 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800157e:	f023 0304 	bic.w	r3, r3, #4
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800158a:	4311      	orrs	r1, r2
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001590:	4311      	orrs	r1, r2
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001596:	430a      	orrs	r2, r1
 8001598:	431a      	orrs	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f042 0201 	orr.w	r2, r2, #1
 80015a2:	611a      	str	r2, [r3, #16]
 80015a4:	e007      	b.n	80015b6 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	691a      	ldr	r2, [r3, #16]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f022 0201 	bic.w	r2, r2, #1
 80015b4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d10c      	bne.n	80015d8 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c4:	f023 010f 	bic.w	r1, r3, #15
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	69db      	ldr	r3, [r3, #28]
 80015cc:	1e5a      	subs	r2, r3, #1
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	631a      	str	r2, [r3, #48]	; 0x30
 80015d6:	e007      	b.n	80015e8 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f022 020f 	bic.w	r2, r2, #15
 80015e6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ec:	f023 0303 	bic.w	r3, r3, #3
 80015f0:	f043 0201 	orr.w	r2, r3, #1
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	655a      	str	r2, [r3, #84]	; 0x54
 80015f8:	e007      	b.n	800160a <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015fe:	f043 0210 	orr.w	r2, r3, #16
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800160a:	7ffb      	ldrb	r3, [r7, #31]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3724      	adds	r7, #36	; 0x24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd90      	pop	{r4, r7, pc}
 8001614:	2000000c 	.word	0x2000000c
 8001618:	053e2d63 	.word	0x053e2d63
 800161c:	50040000 	.word	0x50040000
 8001620:	50040100 	.word	0x50040100
 8001624:	50040200 	.word	0x50040200
 8001628:	50040300 	.word	0x50040300
 800162c:	fff0c007 	.word	0xfff0c007

08001630 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001638:	4857      	ldr	r0, [pc, #348]	; (8001798 <HAL_ADC_Start+0x168>)
 800163a:	f7ff fdd9 	bl	80011f0 <LL_ADC_GetMultimode>
 800163e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fe78 	bl	800133a <LL_ADC_REG_IsConversionOngoing>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	f040 809c 	bne.w	800178a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001658:	2b01      	cmp	r3, #1
 800165a:	d101      	bne.n	8001660 <HAL_ADC_Start+0x30>
 800165c:	2302      	movs	r3, #2
 800165e:	e097      	b.n	8001790 <HAL_ADC_Start+0x160>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2201      	movs	r2, #1
 8001664:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 fcdd 	bl	8002028 <ADC_Enable>
 800166e:	4603      	mov	r3, r0
 8001670:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001672:	7dfb      	ldrb	r3, [r7, #23]
 8001674:	2b00      	cmp	r3, #0
 8001676:	f040 8083 	bne.w	8001780 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800167e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001682:	f023 0301 	bic.w	r3, r3, #1
 8001686:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a42      	ldr	r2, [pc, #264]	; (800179c <HAL_ADC_Start+0x16c>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d002      	beq.n	800169e <HAL_ADC_Start+0x6e>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	e000      	b.n	80016a0 <HAL_ADC_Start+0x70>
 800169e:	4b40      	ldr	r3, [pc, #256]	; (80017a0 <HAL_ADC_Start+0x170>)
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	6812      	ldr	r2, [r2, #0]
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d002      	beq.n	80016ae <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d105      	bne.n	80016ba <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016c6:	d106      	bne.n	80016d6 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016cc:	f023 0206 	bic.w	r2, r3, #6
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	659a      	str	r2, [r3, #88]	; 0x58
 80016d4:	e002      	b.n	80016dc <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	221c      	movs	r2, #28
 80016e2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a2a      	ldr	r2, [pc, #168]	; (800179c <HAL_ADC_Start+0x16c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d002      	beq.n	80016fc <HAL_ADC_Start+0xcc>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	e000      	b.n	80016fe <HAL_ADC_Start+0xce>
 80016fc:	4b28      	ldr	r3, [pc, #160]	; (80017a0 <HAL_ADC_Start+0x170>)
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6812      	ldr	r2, [r2, #0]
 8001702:	4293      	cmp	r3, r2
 8001704:	d008      	beq.n	8001718 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d005      	beq.n	8001718 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	2b05      	cmp	r3, #5
 8001710:	d002      	beq.n	8001718 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	2b09      	cmp	r3, #9
 8001716:	d114      	bne.n	8001742 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d007      	beq.n	8001736 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800172a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800172e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff fde9 	bl	8001312 <LL_ADC_REG_StartConversion>
 8001740:	e025      	b.n	800178e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001746:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a12      	ldr	r2, [pc, #72]	; (800179c <HAL_ADC_Start+0x16c>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d002      	beq.n	800175e <HAL_ADC_Start+0x12e>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	e000      	b.n	8001760 <HAL_ADC_Start+0x130>
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <HAL_ADC_Start+0x170>)
 8001760:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00f      	beq.n	800178e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001772:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001776:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	655a      	str	r2, [r3, #84]	; 0x54
 800177e:	e006      	b.n	800178e <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001788:	e001      	b.n	800178e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800178a:	2302      	movs	r3, #2
 800178c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800178e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	50040300 	.word	0x50040300
 800179c:	50040100 	.word	0x50040100
 80017a0:	50040000 	.word	0x50040000

080017a4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017ae:	4862      	ldr	r0, [pc, #392]	; (8001938 <HAL_ADC_PollForConversion+0x194>)
 80017b0:	f7ff fd1e 	bl	80011f0 <LL_ADC_GetMultimode>
 80017b4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	2b08      	cmp	r3, #8
 80017bc:	d102      	bne.n	80017c4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80017be:	2308      	movs	r3, #8
 80017c0:	61fb      	str	r3, [r7, #28]
 80017c2:	e02a      	b.n	800181a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d005      	beq.n	80017d6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	2b05      	cmp	r3, #5
 80017ce:	d002      	beq.n	80017d6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	2b09      	cmp	r3, #9
 80017d4:	d111      	bne.n	80017fa <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d007      	beq.n	80017f4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e8:	f043 0220 	orr.w	r2, r3, #32
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e09d      	b.n	8001930 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80017f4:	2304      	movs	r3, #4
 80017f6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80017f8:	e00f      	b.n	800181a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80017fa:	484f      	ldr	r0, [pc, #316]	; (8001938 <HAL_ADC_PollForConversion+0x194>)
 80017fc:	f7ff fd06 	bl	800120c <LL_ADC_GetMultiDMATransfer>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d007      	beq.n	8001816 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800180a:	f043 0220 	orr.w	r2, r3, #32
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e08c      	b.n	8001930 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001816:	2304      	movs	r3, #4
 8001818:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800181a:	f7ff fbb1 	bl	8000f80 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001820:	e01a      	b.n	8001858 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001828:	d016      	beq.n	8001858 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800182a:	f7ff fba9 	bl	8000f80 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	429a      	cmp	r2, r3
 8001838:	d302      	bcc.n	8001840 <HAL_ADC_PollForConversion+0x9c>
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d10b      	bne.n	8001858 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001844:	f043 0204 	orr.w	r2, r3, #4
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e06b      	b.n	8001930 <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	4013      	ands	r3, r2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0dd      	beq.n	8001822 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fc32 	bl	80010e0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d01c      	beq.n	80018bc <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	7e5b      	ldrb	r3, [r3, #25]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d118      	bne.n	80018bc <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0308 	and.w	r3, r3, #8
 8001894:	2b08      	cmp	r3, #8
 8001896:	d111      	bne.n	80018bc <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800189c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d105      	bne.n	80018bc <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b4:	f043 0201 	orr.w	r2, r3, #1
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a1e      	ldr	r2, [pc, #120]	; (800193c <HAL_ADC_PollForConversion+0x198>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d002      	beq.n	80018cc <HAL_ADC_PollForConversion+0x128>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	e000      	b.n	80018ce <HAL_ADC_PollForConversion+0x12a>
 80018cc:	4b1c      	ldr	r3, [pc, #112]	; (8001940 <HAL_ADC_PollForConversion+0x19c>)
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	6812      	ldr	r2, [r2, #0]
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d008      	beq.n	80018e8 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d005      	beq.n	80018e8 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	2b05      	cmp	r3, #5
 80018e0:	d002      	beq.n	80018e8 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	2b09      	cmp	r3, #9
 80018e6:	d104      	bne.n	80018f2 <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	61bb      	str	r3, [r7, #24]
 80018f0:	e00c      	b.n	800190c <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a11      	ldr	r2, [pc, #68]	; (800193c <HAL_ADC_PollForConversion+0x198>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d002      	beq.n	8001902 <HAL_ADC_PollForConversion+0x15e>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	e000      	b.n	8001904 <HAL_ADC_PollForConversion+0x160>
 8001902:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <HAL_ADC_PollForConversion+0x19c>)
 8001904:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	2b08      	cmp	r3, #8
 8001910:	d104      	bne.n	800191c <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2208      	movs	r2, #8
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	e008      	b.n	800192e <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d103      	bne.n	800192e <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	220c      	movs	r2, #12
 800192c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3720      	adds	r7, #32
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	50040300 	.word	0x50040300
 800193c:	50040100 	.word	0x50040100
 8001940:	50040000 	.word	0x50040000

08001944 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001952:	4618      	mov	r0, r3
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
	...

08001960 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b0a6      	sub	sp, #152	; 0x98
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800196a:	2300      	movs	r3, #0
 800196c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800197a:	2b01      	cmp	r3, #1
 800197c:	d101      	bne.n	8001982 <HAL_ADC_ConfigChannel+0x22>
 800197e:	2302      	movs	r3, #2
 8001980:	e348      	b.n	8002014 <HAL_ADC_ConfigChannel+0x6b4>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2201      	movs	r2, #1
 8001986:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fcd3 	bl	800133a <LL_ADC_REG_IsConversionOngoing>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	f040 8329 	bne.w	8001fee <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b05      	cmp	r3, #5
 80019a2:	d824      	bhi.n	80019ee <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	3b02      	subs	r3, #2
 80019aa:	2b03      	cmp	r3, #3
 80019ac:	d81b      	bhi.n	80019e6 <HAL_ADC_ConfigChannel+0x86>
 80019ae:	a201      	add	r2, pc, #4	; (adr r2, 80019b4 <HAL_ADC_ConfigChannel+0x54>)
 80019b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b4:	080019c5 	.word	0x080019c5
 80019b8:	080019cd 	.word	0x080019cd
 80019bc:	080019d5 	.word	0x080019d5
 80019c0:	080019dd 	.word	0x080019dd
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	220c      	movs	r2, #12
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	e011      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	2212      	movs	r2, #18
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	e00d      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	2218      	movs	r2, #24
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	e009      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	e004      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	2206      	movs	r2, #6
 80019ea:	605a      	str	r2, [r3, #4]
 80019ec:	e000      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80019ee:	bf00      	nop
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6818      	ldr	r0, [r3, #0]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	6859      	ldr	r1, [r3, #4]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	461a      	mov	r2, r3
 80019fe:	f7ff fb82 	bl	8001106 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fc97 	bl	800133a <LL_ADC_REG_IsConversionOngoing>
 8001a0c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff fca3 	bl	8001360 <LL_ADC_INJ_IsConversionOngoing>
 8001a1a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f040 8148 	bne.w	8001cb8 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f040 8143 	bne.w	8001cb8 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6818      	ldr	r0, [r3, #0]
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	6819      	ldr	r1, [r3, #0]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	f7ff fb8a 	bl	8001158 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	695a      	ldr	r2, [r3, #20]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	08db      	lsrs	r3, r3, #3
 8001a50:	f003 0303 	and.w	r3, r3, #3
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d00a      	beq.n	8001a7c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6818      	ldr	r0, [r3, #0]
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	6919      	ldr	r1, [r3, #16]
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a76:	f7ff fae5 	bl	8001044 <LL_ADC_SetOffset>
 8001a7a:	e11d      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2100      	movs	r1, #0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff fb00 	bl	8001088 <LL_ADC_GetOffsetChannel>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d10a      	bne.n	8001aa8 <HAL_ADC_ConfigChannel+0x148>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2100      	movs	r1, #0
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff faf5 	bl	8001088 <LL_ADC_GetOffsetChannel>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	0e9b      	lsrs	r3, r3, #26
 8001aa2:	f003 021f 	and.w	r2, r3, #31
 8001aa6:	e012      	b.n	8001ace <HAL_ADC_ConfigChannel+0x16e>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2100      	movs	r1, #0
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff faea 	bl	8001088 <LL_ADC_GetOffsetChannel>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001abe:	fa93 f3a3 	rbit	r3, r3
 8001ac2:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ac4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ac6:	fab3 f383 	clz	r3, r3
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	461a      	mov	r2, r3
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d105      	bne.n	8001ae6 <HAL_ADC_ConfigChannel+0x186>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	0e9b      	lsrs	r3, r3, #26
 8001ae0:	f003 031f 	and.w	r3, r3, #31
 8001ae4:	e00a      	b.n	8001afc <HAL_ADC_ConfigChannel+0x19c>
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001aee:	fa93 f3a3 	rbit	r3, r3
 8001af2:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8001af4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001af6:	fab3 f383 	clz	r3, r3
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d106      	bne.n	8001b0e <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2200      	movs	r2, #0
 8001b06:	2100      	movs	r1, #0
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff fad1 	bl	80010b0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2101      	movs	r1, #1
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff fab7 	bl	8001088 <LL_ADC_GetOffsetChannel>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d10a      	bne.n	8001b3a <HAL_ADC_ConfigChannel+0x1da>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2101      	movs	r1, #1
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff faac 	bl	8001088 <LL_ADC_GetOffsetChannel>
 8001b30:	4603      	mov	r3, r0
 8001b32:	0e9b      	lsrs	r3, r3, #26
 8001b34:	f003 021f 	and.w	r2, r3, #31
 8001b38:	e010      	b.n	8001b5c <HAL_ADC_ConfigChannel+0x1fc>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2101      	movs	r1, #1
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff faa1 	bl	8001088 <LL_ADC_GetOffsetChannel>
 8001b46:	4603      	mov	r3, r0
 8001b48:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b4c:	fa93 f3a3 	rbit	r3, r3
 8001b50:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001b52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b54:	fab3 f383 	clz	r3, r3
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d105      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x214>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	0e9b      	lsrs	r3, r3, #26
 8001b6e:	f003 031f 	and.w	r3, r3, #31
 8001b72:	e00a      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x22a>
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b7c:	fa93 f3a3 	rbit	r3, r3
 8001b80:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001b82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b84:	fab3 f383 	clz	r3, r3
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d106      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2200      	movs	r2, #0
 8001b94:	2101      	movs	r1, #1
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff fa8a 	bl	80010b0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2102      	movs	r1, #2
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff fa70 	bl	8001088 <LL_ADC_GetOffsetChannel>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10a      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x268>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2102      	movs	r1, #2
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fa65 	bl	8001088 <LL_ADC_GetOffsetChannel>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	0e9b      	lsrs	r3, r3, #26
 8001bc2:	f003 021f 	and.w	r2, r3, #31
 8001bc6:	e010      	b.n	8001bea <HAL_ADC_ConfigChannel+0x28a>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2102      	movs	r1, #2
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff fa5a 	bl	8001088 <LL_ADC_GetOffsetChannel>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bda:	fa93 f3a3 	rbit	r3, r3
 8001bde:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8001be0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001be2:	fab3 f383 	clz	r3, r3
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	461a      	mov	r2, r3
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d105      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x2a2>
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	0e9b      	lsrs	r3, r3, #26
 8001bfc:	f003 031f 	and.w	r3, r3, #31
 8001c00:	e00a      	b.n	8001c18 <HAL_ADC_ConfigChannel+0x2b8>
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c0a:	fa93 f3a3 	rbit	r3, r3
 8001c0e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001c10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c12:	fab3 f383 	clz	r3, r3
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d106      	bne.n	8001c2a <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2200      	movs	r2, #0
 8001c22:	2102      	movs	r1, #2
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff fa43 	bl	80010b0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2103      	movs	r1, #3
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fa29 	bl	8001088 <LL_ADC_GetOffsetChannel>
 8001c36:	4603      	mov	r3, r0
 8001c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d10a      	bne.n	8001c56 <HAL_ADC_ConfigChannel+0x2f6>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2103      	movs	r1, #3
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fa1e 	bl	8001088 <LL_ADC_GetOffsetChannel>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	0e9b      	lsrs	r3, r3, #26
 8001c50:	f003 021f 	and.w	r2, r3, #31
 8001c54:	e010      	b.n	8001c78 <HAL_ADC_ConfigChannel+0x318>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2103      	movs	r1, #3
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fa13 	bl	8001088 <LL_ADC_GetOffsetChannel>
 8001c62:	4603      	mov	r3, r0
 8001c64:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c68:	fa93 f3a3 	rbit	r3, r3
 8001c6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c70:	fab3 f383 	clz	r3, r3
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	461a      	mov	r2, r3
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d105      	bne.n	8001c90 <HAL_ADC_ConfigChannel+0x330>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	0e9b      	lsrs	r3, r3, #26
 8001c8a:	f003 031f 	and.w	r3, r3, #31
 8001c8e:	e00a      	b.n	8001ca6 <HAL_ADC_ConfigChannel+0x346>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c98:	fa93 f3a3 	rbit	r3, r3
 8001c9c:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8001c9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ca0:	fab3 f383 	clz	r3, r3
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d106      	bne.n	8001cb8 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2103      	movs	r1, #3
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff f9fc 	bl	80010b0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff fb15 	bl	80012ec <LL_ADC_IsEnabled>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f040 810c 	bne.w	8001ee2 <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6818      	ldr	r0, [r3, #0]
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	6819      	ldr	r1, [r3, #0]
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	f7ff fa66 	bl	80011a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	4aad      	ldr	r2, [pc, #692]	; (8001f98 <HAL_ADC_ConfigChannel+0x638>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	f040 80fd 	bne.w	8001ee2 <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d10b      	bne.n	8001d10 <HAL_ADC_ConfigChannel+0x3b0>
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	0e9b      	lsrs	r3, r3, #26
 8001cfe:	3301      	adds	r3, #1
 8001d00:	f003 031f 	and.w	r3, r3, #31
 8001d04:	2b09      	cmp	r3, #9
 8001d06:	bf94      	ite	ls
 8001d08:	2301      	movls	r3, #1
 8001d0a:	2300      	movhi	r3, #0
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	e012      	b.n	8001d36 <HAL_ADC_ConfigChannel+0x3d6>
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d18:	fa93 f3a3 	rbit	r3, r3
 8001d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d20:	fab3 f383 	clz	r3, r3
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	3301      	adds	r3, #1
 8001d28:	f003 031f 	and.w	r3, r3, #31
 8001d2c:	2b09      	cmp	r3, #9
 8001d2e:	bf94      	ite	ls
 8001d30:	2301      	movls	r3, #1
 8001d32:	2300      	movhi	r3, #0
 8001d34:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d064      	beq.n	8001e04 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d107      	bne.n	8001d56 <HAL_ADC_ConfigChannel+0x3f6>
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	0e9b      	lsrs	r3, r3, #26
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	069b      	lsls	r3, r3, #26
 8001d50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d54:	e00e      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x414>
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d5e:	fa93 f3a3 	rbit	r3, r3
 8001d62:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d66:	fab3 f383 	clz	r3, r3
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	069b      	lsls	r3, r3, #26
 8001d70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d109      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x434>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	0e9b      	lsrs	r3, r3, #26
 8001d86:	3301      	adds	r3, #1
 8001d88:	f003 031f 	and.w	r3, r3, #31
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d92:	e010      	b.n	8001db6 <HAL_ADC_ConfigChannel+0x456>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d9c:	fa93 f3a3 	rbit	r3, r3
 8001da0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da4:	fab3 f383 	clz	r3, r3
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	3301      	adds	r3, #1
 8001dac:	f003 031f 	and.w	r3, r3, #31
 8001db0:	2101      	movs	r1, #1
 8001db2:	fa01 f303 	lsl.w	r3, r1, r3
 8001db6:	ea42 0103 	orr.w	r1, r2, r3
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10a      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x47c>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	0e9b      	lsrs	r3, r3, #26
 8001dcc:	3301      	adds	r3, #1
 8001dce:	f003 021f 	and.w	r2, r3, #31
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	4413      	add	r3, r2
 8001dd8:	051b      	lsls	r3, r3, #20
 8001dda:	e011      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x4a0>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de4:	fa93 f3a3 	rbit	r3, r3
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	fab3 f383 	clz	r3, r3
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	3301      	adds	r3, #1
 8001df4:	f003 021f 	and.w	r2, r3, #31
 8001df8:	4613      	mov	r3, r2
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	4413      	add	r3, r2
 8001dfe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e00:	430b      	orrs	r3, r1
 8001e02:	e069      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d107      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x4c0>
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	0e9b      	lsrs	r3, r3, #26
 8001e16:	3301      	adds	r3, #1
 8001e18:	069b      	lsls	r3, r3, #26
 8001e1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e1e:	e00e      	b.n	8001e3e <HAL_ADC_ConfigChannel+0x4de>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e26:	6a3b      	ldr	r3, [r7, #32]
 8001e28:	fa93 f3a3 	rbit	r3, r3
 8001e2c:	61fb      	str	r3, [r7, #28]
  return result;
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	fab3 f383 	clz	r3, r3
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	3301      	adds	r3, #1
 8001e38:	069b      	lsls	r3, r3, #26
 8001e3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d109      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x4fe>
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	0e9b      	lsrs	r3, r3, #26
 8001e50:	3301      	adds	r3, #1
 8001e52:	f003 031f 	and.w	r3, r3, #31
 8001e56:	2101      	movs	r1, #1
 8001e58:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5c:	e010      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x520>
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	fa93 f3a3 	rbit	r3, r3
 8001e6a:	617b      	str	r3, [r7, #20]
  return result;
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	fab3 f383 	clz	r3, r3
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	3301      	adds	r3, #1
 8001e76:	f003 031f 	and.w	r3, r3, #31
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e80:	ea42 0103 	orr.w	r1, r2, r3
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10d      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x54c>
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	0e9b      	lsrs	r3, r3, #26
 8001e96:	3301      	adds	r3, #1
 8001e98:	f003 021f 	and.w	r2, r3, #31
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3b1e      	subs	r3, #30
 8001ea4:	051b      	lsls	r3, r3, #20
 8001ea6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001eaa:	e014      	b.n	8001ed6 <HAL_ADC_ConfigChannel+0x576>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	fa93 f3a3 	rbit	r3, r3
 8001eb8:	60fb      	str	r3, [r7, #12]
  return result;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	fab3 f383 	clz	r3, r3
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	f003 021f 	and.w	r2, r3, #31
 8001ec8:	4613      	mov	r3, r2
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	4413      	add	r3, r2
 8001ece:	3b1e      	subs	r3, #30
 8001ed0:	051b      	lsls	r3, r3, #20
 8001ed2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ed6:	430b      	orrs	r3, r1
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	6892      	ldr	r2, [r2, #8]
 8001edc:	4619      	mov	r1, r3
 8001ede:	f7ff f93b 	bl	8001158 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	4b2d      	ldr	r3, [pc, #180]	; (8001f9c <HAL_ADC_ConfigChannel+0x63c>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 808c 	beq.w	8002008 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ef0:	482b      	ldr	r0, [pc, #172]	; (8001fa0 <HAL_ADC_ConfigChannel+0x640>)
 8001ef2:	f7ff f899 	bl	8001028 <LL_ADC_GetCommonPathInternalCh>
 8001ef6:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a29      	ldr	r2, [pc, #164]	; (8001fa4 <HAL_ADC_ConfigChannel+0x644>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d12b      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x5fc>
 8001f04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d125      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a24      	ldr	r2, [pc, #144]	; (8001fa8 <HAL_ADC_ConfigChannel+0x648>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d004      	beq.n	8001f24 <HAL_ADC_ConfigChannel+0x5c4>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a23      	ldr	r2, [pc, #140]	; (8001fac <HAL_ADC_ConfigChannel+0x64c>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d16e      	bne.n	8002002 <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	481c      	ldr	r0, [pc, #112]	; (8001fa0 <HAL_ADC_ConfigChannel+0x640>)
 8001f30:	f7ff f867 	bl	8001002 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001f34:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <HAL_ADC_ConfigChannel+0x650>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	099b      	lsrs	r3, r3, #6
 8001f3a:	4a1e      	ldr	r2, [pc, #120]	; (8001fb4 <HAL_ADC_ConfigChannel+0x654>)
 8001f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f40:	099a      	lsrs	r2, r3, #6
 8001f42:	4613      	mov	r3, r2
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	4413      	add	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001f4c:	e002      	b.n	8001f54 <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	3b01      	subs	r3, #1
 8001f52:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1f9      	bne.n	8001f4e <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f5a:	e052      	b.n	8002002 <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a15      	ldr	r2, [pc, #84]	; (8001fb8 <HAL_ADC_ConfigChannel+0x658>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d12a      	bne.n	8001fbc <HAL_ADC_ConfigChannel+0x65c>
 8001f66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d124      	bne.n	8001fbc <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a0c      	ldr	r2, [pc, #48]	; (8001fa8 <HAL_ADC_ConfigChannel+0x648>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d004      	beq.n	8001f86 <HAL_ADC_ConfigChannel+0x626>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a0a      	ldr	r2, [pc, #40]	; (8001fac <HAL_ADC_ConfigChannel+0x64c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d13f      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4803      	ldr	r0, [pc, #12]	; (8001fa0 <HAL_ADC_ConfigChannel+0x640>)
 8001f92:	f7ff f836 	bl	8001002 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f96:	e036      	b.n	8002006 <HAL_ADC_ConfigChannel+0x6a6>
 8001f98:	407f0000 	.word	0x407f0000
 8001f9c:	80080000 	.word	0x80080000
 8001fa0:	50040300 	.word	0x50040300
 8001fa4:	c7520000 	.word	0xc7520000
 8001fa8:	50040000 	.word	0x50040000
 8001fac:	50040200 	.word	0x50040200
 8001fb0:	2000000c 	.word	0x2000000c
 8001fb4:	053e2d63 	.word	0x053e2d63
 8001fb8:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a16      	ldr	r2, [pc, #88]	; (800201c <HAL_ADC_ConfigChannel+0x6bc>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d120      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001fc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d11a      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a12      	ldr	r2, [pc, #72]	; (8002020 <HAL_ADC_ConfigChannel+0x6c0>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d115      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fe0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	480f      	ldr	r0, [pc, #60]	; (8002024 <HAL_ADC_ConfigChannel+0x6c4>)
 8001fe8:	f7ff f80b 	bl	8001002 <LL_ADC_SetCommonPathInternalCh>
 8001fec:	e00c      	b.n	8002008 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff2:	f043 0220 	orr.w	r2, r3, #32
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002000:	e002      	b.n	8002008 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002002:	bf00      	nop
 8002004:	e000      	b.n	8002008 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002006:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002010:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8002014:	4618      	mov	r0, r3
 8002016:	3798      	adds	r7, #152	; 0x98
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	80000001 	.word	0x80000001
 8002020:	50040000 	.word	0x50040000
 8002024:	50040300 	.word	0x50040300

08002028 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff f959 	bl	80012ec <LL_ADC_IsEnabled>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d146      	bne.n	80020ce <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	4b24      	ldr	r3, [pc, #144]	; (80020d8 <ADC_Enable+0xb0>)
 8002048:	4013      	ands	r3, r2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00d      	beq.n	800206a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002052:	f043 0210 	orr.w	r2, r3, #16
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205e:	f043 0201 	orr.w	r2, r3, #1
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e032      	b.n	80020d0 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff f928 	bl	80012c4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002074:	f7fe ff84 	bl	8000f80 <HAL_GetTick>
 8002078:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800207a:	e021      	b.n	80020c0 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff f933 	bl	80012ec <LL_ADC_IsEnabled>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d104      	bne.n	8002096 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff f917 	bl	80012c4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002096:	f7fe ff73 	bl	8000f80 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d90d      	bls.n	80020c0 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a8:	f043 0210 	orr.w	r2, r3, #16
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b4:	f043 0201 	orr.w	r2, r3, #1
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e007      	b.n	80020d0 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d1d6      	bne.n	800207c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	8000003f 	.word	0x8000003f

080020dc <LL_ADC_IsEnabled>:
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d101      	bne.n	80020f4 <LL_ADC_IsEnabled+0x18>
 80020f0:	2301      	movs	r3, #1
 80020f2:	e000      	b.n	80020f6 <LL_ADC_IsEnabled+0x1a>
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <LL_ADC_REG_IsConversionOngoing>:
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 0304 	and.w	r3, r3, #4
 8002112:	2b04      	cmp	r3, #4
 8002114:	d101      	bne.n	800211a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002128:	b590      	push	{r4, r7, lr}
 800212a:	b09f      	sub	sp, #124	; 0x7c
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002132:	2300      	movs	r3, #0
 8002134:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800213e:	2b01      	cmp	r3, #1
 8002140:	d101      	bne.n	8002146 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002142:	2302      	movs	r3, #2
 8002144:	e08f      	b.n	8002266 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a47      	ldr	r2, [pc, #284]	; (8002270 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d102      	bne.n	800215e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002158:	4b46      	ldr	r3, [pc, #280]	; (8002274 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800215a:	60bb      	str	r3, [r7, #8]
 800215c:	e001      	b.n	8002162 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800215e:	2300      	movs	r3, #0
 8002160:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10b      	bne.n	8002180 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216c:	f043 0220 	orr.w	r2, r3, #32
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e072      	b.n	8002266 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff ffbd 	bl	8002102 <LL_ADC_REG_IsConversionOngoing>
 8002188:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff ffb7 	bl	8002102 <LL_ADC_REG_IsConversionOngoing>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d154      	bne.n	8002244 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800219a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800219c:	2b00      	cmp	r3, #0
 800219e:	d151      	bne.n	8002244 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80021a0:	4b35      	ldr	r3, [pc, #212]	; (8002278 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80021a2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d02c      	beq.n	8002206 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80021ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	6859      	ldr	r1, [r3, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021be:	035b      	lsls	r3, r3, #13
 80021c0:	430b      	orrs	r3, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021c6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021c8:	4829      	ldr	r0, [pc, #164]	; (8002270 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80021ca:	f7ff ff87 	bl	80020dc <LL_ADC_IsEnabled>
 80021ce:	4604      	mov	r4, r0
 80021d0:	4828      	ldr	r0, [pc, #160]	; (8002274 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80021d2:	f7ff ff83 	bl	80020dc <LL_ADC_IsEnabled>
 80021d6:	4603      	mov	r3, r0
 80021d8:	431c      	orrs	r4, r3
 80021da:	4828      	ldr	r0, [pc, #160]	; (800227c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80021dc:	f7ff ff7e 	bl	80020dc <LL_ADC_IsEnabled>
 80021e0:	4603      	mov	r3, r0
 80021e2:	4323      	orrs	r3, r4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d137      	bne.n	8002258 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80021e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80021f0:	f023 030f 	bic.w	r3, r3, #15
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	6811      	ldr	r1, [r2, #0]
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	6892      	ldr	r2, [r2, #8]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	431a      	orrs	r2, r3
 8002200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002202:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002204:	e028      	b.n	8002258 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800220e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002210:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002212:	4817      	ldr	r0, [pc, #92]	; (8002270 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002214:	f7ff ff62 	bl	80020dc <LL_ADC_IsEnabled>
 8002218:	4604      	mov	r4, r0
 800221a:	4816      	ldr	r0, [pc, #88]	; (8002274 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800221c:	f7ff ff5e 	bl	80020dc <LL_ADC_IsEnabled>
 8002220:	4603      	mov	r3, r0
 8002222:	431c      	orrs	r4, r3
 8002224:	4815      	ldr	r0, [pc, #84]	; (800227c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002226:	f7ff ff59 	bl	80020dc <LL_ADC_IsEnabled>
 800222a:	4603      	mov	r3, r0
 800222c:	4323      	orrs	r3, r4
 800222e:	2b00      	cmp	r3, #0
 8002230:	d112      	bne.n	8002258 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800223a:	f023 030f 	bic.w	r3, r3, #15
 800223e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002240:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002242:	e009      	b.n	8002258 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002248:	f043 0220 	orr.w	r2, r3, #32
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002256:	e000      	b.n	800225a <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002258:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002262:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002266:	4618      	mov	r0, r3
 8002268:	377c      	adds	r7, #124	; 0x7c
 800226a:	46bd      	mov	sp, r7
 800226c:	bd90      	pop	{r4, r7, pc}
 800226e:	bf00      	nop
 8002270:	50040000 	.word	0x50040000
 8002274:	50040100 	.word	0x50040100
 8002278:	50040300 	.word	0x50040300
 800227c:	50040200 	.word	0x50040200

08002280 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e0ed      	b.n	800246e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d102      	bne.n	80022a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f003 fb54 	bl	800594c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0202 	bic.w	r2, r2, #2
 80022b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022b4:	f7fe fe64 	bl	8000f80 <HAL_GetTick>
 80022b8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80022ba:	e012      	b.n	80022e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022bc:	f7fe fe60 	bl	8000f80 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b0a      	cmp	r3, #10
 80022c8:	d90b      	bls.n	80022e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2205      	movs	r2, #5
 80022da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e0c5      	b.n	800246e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1e5      	bne.n	80022bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0201 	orr.w	r2, r2, #1
 80022fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002300:	f7fe fe3e 	bl	8000f80 <HAL_GetTick>
 8002304:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002306:	e012      	b.n	800232e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002308:	f7fe fe3a 	bl	8000f80 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b0a      	cmp	r3, #10
 8002314:	d90b      	bls.n	800232e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2205      	movs	r2, #5
 8002326:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e09f      	b.n	800246e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0e5      	beq.n	8002308 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	7e1b      	ldrb	r3, [r3, #24]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d108      	bne.n	8002356 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	e007      	b.n	8002366 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002364:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	7e5b      	ldrb	r3, [r3, #25]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d108      	bne.n	8002380 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	e007      	b.n	8002390 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800238e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	7e9b      	ldrb	r3, [r3, #26]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d108      	bne.n	80023aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0220 	orr.w	r2, r2, #32
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	e007      	b.n	80023ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0220 	bic.w	r2, r2, #32
 80023b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	7edb      	ldrb	r3, [r3, #27]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d108      	bne.n	80023d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0210 	bic.w	r2, r2, #16
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	e007      	b.n	80023e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0210 	orr.w	r2, r2, #16
 80023e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	7f1b      	ldrb	r3, [r3, #28]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d108      	bne.n	80023fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0208 	orr.w	r2, r2, #8
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	e007      	b.n	800240e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 0208 	bic.w	r2, r2, #8
 800240c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	7f5b      	ldrb	r3, [r3, #29]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d108      	bne.n	8002428 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f042 0204 	orr.w	r2, r2, #4
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	e007      	b.n	8002438 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0204 	bic.w	r2, r2, #4
 8002436:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	431a      	orrs	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	ea42 0103 	orr.w	r1, r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	1e5a      	subs	r2, r3, #1
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002476:	b480      	push	{r7}
 8002478:	b087      	sub	sp, #28
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 3020 	ldrb.w	r3, [r3, #32]
 800248c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800248e:	7cfb      	ldrb	r3, [r7, #19]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d003      	beq.n	800249c <HAL_CAN_ConfigFilter+0x26>
 8002494:	7cfb      	ldrb	r3, [r7, #19]
 8002496:	2b02      	cmp	r3, #2
 8002498:	f040 80aa 	bne.w	80025f0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024a2:	f043 0201 	orr.w	r2, r3, #1
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	f003 031f 	and.w	r3, r3, #31
 80024b4:	2201      	movs	r2, #1
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	43db      	mvns	r3, r3
 80024c6:	401a      	ands	r2, r3
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d123      	bne.n	800251e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	43db      	mvns	r3, r3
 80024e0:	401a      	ands	r2, r3
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80024f8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	3248      	adds	r2, #72	; 0x48
 80024fe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002512:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002514:	6979      	ldr	r1, [r7, #20]
 8002516:	3348      	adds	r3, #72	; 0x48
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	440b      	add	r3, r1
 800251c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d122      	bne.n	800256c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	431a      	orrs	r2, r3
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002546:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	3248      	adds	r2, #72	; 0x48
 800254c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002560:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002562:	6979      	ldr	r1, [r7, #20]
 8002564:	3348      	adds	r3, #72	; 0x48
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	440b      	add	r3, r1
 800256a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d109      	bne.n	8002588 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	43db      	mvns	r3, r3
 800257e:	401a      	ands	r2, r3
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002586:	e007      	b.n	8002598 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	431a      	orrs	r2, r3
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d109      	bne.n	80025b4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	43db      	mvns	r3, r3
 80025aa:	401a      	ands	r2, r3
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80025b2:	e007      	b.n	80025c4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	431a      	orrs	r2, r3
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d107      	bne.n	80025dc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	431a      	orrs	r2, r3
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80025e2:	f023 0201 	bic.w	r2, r3, #1
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80025ec:	2300      	movs	r3, #0
 80025ee:	e006      	b.n	80025fe <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
  }
}
 80025fe:	4618      	mov	r0, r3
 8002600:	371c      	adds	r7, #28
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b084      	sub	sp, #16
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b01      	cmp	r3, #1
 800261c:	d12e      	bne.n	800267c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2202      	movs	r2, #2
 8002622:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 0201 	bic.w	r2, r2, #1
 8002634:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002636:	f7fe fca3 	bl	8000f80 <HAL_GetTick>
 800263a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800263c:	e012      	b.n	8002664 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800263e:	f7fe fc9f 	bl	8000f80 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b0a      	cmp	r3, #10
 800264a:	d90b      	bls.n	8002664 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2205      	movs	r2, #5
 800265c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e012      	b.n	800268a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1e5      	bne.n	800263e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002678:	2300      	movs	r3, #0
 800267a:	e006      	b.n	800268a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
  }
}
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002692:	b480      	push	{r7}
 8002694:	b089      	sub	sp, #36	; 0x24
 8002696:	af00      	add	r7, sp, #0
 8002698:	60f8      	str	r0, [r7, #12]
 800269a:	60b9      	str	r1, [r7, #8]
 800269c:	607a      	str	r2, [r7, #4]
 800269e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80026b0:	7ffb      	ldrb	r3, [r7, #31]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d003      	beq.n	80026be <HAL_CAN_AddTxMessage+0x2c>
 80026b6:	7ffb      	ldrb	r3, [r7, #31]
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	f040 80b8 	bne.w	800282e <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10a      	bne.n	80026de <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d105      	bne.n	80026de <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 80a0 	beq.w	800281e <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	0e1b      	lsrs	r3, r3, #24
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d907      	bls.n	80026fe <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e09e      	b.n	800283c <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80026fe:	2201      	movs	r2, #1
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	409a      	lsls	r2, r3
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10d      	bne.n	800272c <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800271a:	68f9      	ldr	r1, [r7, #12]
 800271c:	6809      	ldr	r1, [r1, #0]
 800271e:	431a      	orrs	r2, r3
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	3318      	adds	r3, #24
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	440b      	add	r3, r1
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	e00f      	b.n	800274c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002736:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800273c:	68f9      	ldr	r1, [r7, #12]
 800273e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002740:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	3318      	adds	r3, #24
 8002746:	011b      	lsls	r3, r3, #4
 8002748:	440b      	add	r3, r1
 800274a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6819      	ldr	r1, [r3, #0]
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	691a      	ldr	r2, [r3, #16]
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	3318      	adds	r3, #24
 8002758:	011b      	lsls	r3, r3, #4
 800275a:	440b      	add	r3, r1
 800275c:	3304      	adds	r3, #4
 800275e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	7d1b      	ldrb	r3, [r3, #20]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d111      	bne.n	800278c <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	3318      	adds	r3, #24
 8002770:	011b      	lsls	r3, r3, #4
 8002772:	4413      	add	r3, r2
 8002774:	3304      	adds	r3, #4
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	6811      	ldr	r1, [r2, #0]
 800277c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	3318      	adds	r3, #24
 8002784:	011b      	lsls	r3, r3, #4
 8002786:	440b      	add	r3, r1
 8002788:	3304      	adds	r3, #4
 800278a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3307      	adds	r3, #7
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	061a      	lsls	r2, r3, #24
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3306      	adds	r3, #6
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	041b      	lsls	r3, r3, #16
 800279c:	431a      	orrs	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3305      	adds	r3, #5
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	021b      	lsls	r3, r3, #8
 80027a6:	4313      	orrs	r3, r2
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	3204      	adds	r2, #4
 80027ac:	7812      	ldrb	r2, [r2, #0]
 80027ae:	4610      	mov	r0, r2
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	6811      	ldr	r1, [r2, #0]
 80027b4:	ea43 0200 	orr.w	r2, r3, r0
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	011b      	lsls	r3, r3, #4
 80027bc:	440b      	add	r3, r1
 80027be:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80027c2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3303      	adds	r3, #3
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	061a      	lsls	r2, r3, #24
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3302      	adds	r3, #2
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	041b      	lsls	r3, r3, #16
 80027d4:	431a      	orrs	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	3301      	adds	r3, #1
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	021b      	lsls	r3, r3, #8
 80027de:	4313      	orrs	r3, r2
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	7812      	ldrb	r2, [r2, #0]
 80027e4:	4610      	mov	r0, r2
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	6811      	ldr	r1, [r2, #0]
 80027ea:	ea43 0200 	orr.w	r2, r3, r0
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	440b      	add	r3, r1
 80027f4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80027f8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	3318      	adds	r3, #24
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	4413      	add	r3, r2
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	6811      	ldr	r1, [r2, #0]
 800280c:	f043 0201 	orr.w	r2, r3, #1
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	3318      	adds	r3, #24
 8002814:	011b      	lsls	r3, r3, #4
 8002816:	440b      	add	r3, r1
 8002818:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	e00e      	b.n	800283c <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e006      	b.n	800283c <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002832:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
  }
}
 800283c:	4618      	mov	r0, r3
 800283e:	3724      	adds	r7, #36	; 0x24
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 3020 	ldrb.w	r3, [r3, #32]
 800285c:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 800285e:	7afb      	ldrb	r3, [r7, #11]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d002      	beq.n	800286a <HAL_CAN_IsTxMessagePending+0x22>
 8002864:	7afb      	ldrb	r3, [r7, #11]
 8002866:	2b02      	cmp	r3, #2
 8002868:	d10b      	bne.n	8002882 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	069b      	lsls	r3, r3, #26
 8002874:	401a      	ands	r2, r3
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	069b      	lsls	r3, r3, #26
 800287a:	429a      	cmp	r2, r3
 800287c:	d001      	beq.n	8002882 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 800287e:	2301      	movs	r3, #1
 8002880:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8002882:	68fb      	ldr	r3, [r7, #12]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002890:	b480      	push	{r7}
 8002892:	b087      	sub	sp, #28
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
 800289c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028a4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80028a6:	7dfb      	ldrb	r3, [r7, #23]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d003      	beq.n	80028b4 <HAL_CAN_GetRxMessage+0x24>
 80028ac:	7dfb      	ldrb	r3, [r7, #23]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	f040 80f4 	bne.w	8002a9c <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10e      	bne.n	80028d8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	f003 0303 	and.w	r3, r3, #3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d116      	bne.n	80028f6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e0e8      	b.n	8002aaa <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	f003 0303 	and.w	r3, r3, #3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d107      	bne.n	80028f6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e0d9      	b.n	8002aaa <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	331b      	adds	r3, #27
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	4413      	add	r3, r2
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0204 	and.w	r2, r3, #4
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10c      	bne.n	800292e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	331b      	adds	r3, #27
 800291c:	011b      	lsls	r3, r3, #4
 800291e:	4413      	add	r3, r2
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	0d5b      	lsrs	r3, r3, #21
 8002924:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	e00b      	b.n	8002946 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	331b      	adds	r3, #27
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	4413      	add	r3, r2
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	08db      	lsrs	r3, r3, #3
 800293e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	331b      	adds	r3, #27
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	4413      	add	r3, r2
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	085b      	lsrs	r3, r3, #1
 8002956:	f003 0201 	and.w	r2, r3, #1
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	331b      	adds	r3, #27
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	4413      	add	r3, r2
 800296a:	3304      	adds	r3, #4
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 020f 	and.w	r2, r3, #15
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	331b      	adds	r3, #27
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	4413      	add	r3, r2
 8002982:	3304      	adds	r3, #4
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	0a1b      	lsrs	r3, r3, #8
 8002988:	b2da      	uxtb	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	331b      	adds	r3, #27
 8002996:	011b      	lsls	r3, r3, #4
 8002998:	4413      	add	r3, r2
 800299a:	3304      	adds	r3, #4
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	0c1b      	lsrs	r3, r3, #16
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	011b      	lsls	r3, r3, #4
 80029ae:	4413      	add	r3, r2
 80029b0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	4413      	add	r3, r2
 80029c6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	0a1a      	lsrs	r2, r3, #8
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	3301      	adds	r3, #1
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	4413      	add	r3, r2
 80029e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	0c1a      	lsrs	r2, r3, #16
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	3302      	adds	r3, #2
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	4413      	add	r3, r2
 80029fa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	0e1a      	lsrs	r2, r3, #24
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	3303      	adds	r3, #3
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	0a1a      	lsrs	r2, r3, #8
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	3305      	adds	r3, #5
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	011b      	lsls	r3, r3, #4
 8002a44:	4413      	add	r3, r2
 8002a46:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	0c1a      	lsrs	r2, r3, #16
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	3306      	adds	r3, #6
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	011b      	lsls	r3, r3, #4
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	0e1a      	lsrs	r2, r3, #24
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	3307      	adds	r3, #7
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d108      	bne.n	8002a88 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68da      	ldr	r2, [r3, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f042 0220 	orr.w	r2, r2, #32
 8002a84:	60da      	str	r2, [r3, #12]
 8002a86:	e007      	b.n	8002a98 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691a      	ldr	r2, [r3, #16]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0220 	orr.w	r2, r2, #32
 8002a96:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	e006      	b.n	8002aaa <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
  }
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	371c      	adds	r7, #28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
	...

08002ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <__NVIC_SetPriorityGrouping+0x44>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aea:	4a04      	ldr	r2, [pc, #16]	; (8002afc <__NVIC_SetPriorityGrouping+0x44>)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	60d3      	str	r3, [r2, #12]
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	e000ed00 	.word	0xe000ed00

08002b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b04:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <__NVIC_GetPriorityGrouping+0x18>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	0a1b      	lsrs	r3, r3, #8
 8002b0a:	f003 0307 	and.w	r3, r3, #7
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	db0b      	blt.n	8002b46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	f003 021f 	and.w	r2, r3, #31
 8002b34:	4907      	ldr	r1, [pc, #28]	; (8002b54 <__NVIC_EnableIRQ+0x38>)
 8002b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3a:	095b      	lsrs	r3, r3, #5
 8002b3c:	2001      	movs	r0, #1
 8002b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	e000e100 	.word	0xe000e100

08002b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	6039      	str	r1, [r7, #0]
 8002b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	db0a      	blt.n	8002b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	490c      	ldr	r1, [pc, #48]	; (8002ba4 <__NVIC_SetPriority+0x4c>)
 8002b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b76:	0112      	lsls	r2, r2, #4
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b80:	e00a      	b.n	8002b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	4908      	ldr	r1, [pc, #32]	; (8002ba8 <__NVIC_SetPriority+0x50>)
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	3b04      	subs	r3, #4
 8002b90:	0112      	lsls	r2, r2, #4
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	440b      	add	r3, r1
 8002b96:	761a      	strb	r2, [r3, #24]
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	e000e100 	.word	0xe000e100
 8002ba8:	e000ed00 	.word	0xe000ed00

08002bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b089      	sub	sp, #36	; 0x24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f1c3 0307 	rsb	r3, r3, #7
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	bf28      	it	cs
 8002bca:	2304      	movcs	r3, #4
 8002bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	2b06      	cmp	r3, #6
 8002bd4:	d902      	bls.n	8002bdc <NVIC_EncodePriority+0x30>
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	3b03      	subs	r3, #3
 8002bda:	e000      	b.n	8002bde <NVIC_EncodePriority+0x32>
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be0:	f04f 32ff 	mov.w	r2, #4294967295
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	43da      	mvns	r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	401a      	ands	r2, r3
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfe:	43d9      	mvns	r1, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c04:	4313      	orrs	r3, r2
         );
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3724      	adds	r7, #36	; 0x24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
	...

08002c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c24:	d301      	bcc.n	8002c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c26:	2301      	movs	r3, #1
 8002c28:	e00f      	b.n	8002c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c2a:	4a0a      	ldr	r2, [pc, #40]	; (8002c54 <SysTick_Config+0x40>)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c32:	210f      	movs	r1, #15
 8002c34:	f04f 30ff 	mov.w	r0, #4294967295
 8002c38:	f7ff ff8e 	bl	8002b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c3c:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <SysTick_Config+0x40>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c42:	4b04      	ldr	r3, [pc, #16]	; (8002c54 <SysTick_Config+0x40>)
 8002c44:	2207      	movs	r2, #7
 8002c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	e000e010 	.word	0xe000e010

08002c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f7ff ff29 	bl	8002ab8 <__NVIC_SetPriorityGrouping>
}
 8002c66:	bf00      	nop
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b086      	sub	sp, #24
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	4603      	mov	r3, r0
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	607a      	str	r2, [r7, #4]
 8002c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c80:	f7ff ff3e 	bl	8002b00 <__NVIC_GetPriorityGrouping>
 8002c84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	68b9      	ldr	r1, [r7, #8]
 8002c8a:	6978      	ldr	r0, [r7, #20]
 8002c8c:	f7ff ff8e 	bl	8002bac <NVIC_EncodePriority>
 8002c90:	4602      	mov	r2, r0
 8002c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c96:	4611      	mov	r1, r2
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff ff5d 	bl	8002b58 <__NVIC_SetPriority>
}
 8002c9e:	bf00      	nop
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b082      	sub	sp, #8
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	4603      	mov	r3, r0
 8002cae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff ff31 	bl	8002b1c <__NVIC_EnableIRQ>
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7ff ffa2 	bl	8002c14 <SysTick_Config>
 8002cd0:	4603      	mov	r3, r0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
	...

08002cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b087      	sub	sp, #28
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cea:	e17f      	b.n	8002fec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 8171 	beq.w	8002fe6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d003      	beq.n	8002d14 <HAL_GPIO_Init+0x38>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b12      	cmp	r3, #18
 8002d12:	d123      	bne.n	8002d5c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	08da      	lsrs	r2, r3, #3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3208      	adds	r2, #8
 8002d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d20:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f003 0307 	and.w	r3, r3, #7
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	220f      	movs	r2, #15
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	43db      	mvns	r3, r3
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	4013      	ands	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	691a      	ldr	r2, [r3, #16]
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	08da      	lsrs	r2, r3, #3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	3208      	adds	r2, #8
 8002d56:	6939      	ldr	r1, [r7, #16]
 8002d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	2203      	movs	r2, #3
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	4013      	ands	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f003 0203 	and.w	r2, r3, #3
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d00b      	beq.n	8002db0 <HAL_GPIO_Init+0xd4>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d007      	beq.n	8002db0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002da4:	2b11      	cmp	r3, #17
 8002da6:	d003      	beq.n	8002db0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2b12      	cmp	r3, #18
 8002dae:	d130      	bne.n	8002e12 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	2203      	movs	r2, #3
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	68da      	ldr	r2, [r3, #12]
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002de6:	2201      	movs	r2, #1
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	43db      	mvns	r3, r3
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	4013      	ands	r3, r2
 8002df4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	091b      	lsrs	r3, r3, #4
 8002dfc:	f003 0201 	and.w	r2, r3, #1
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f003 0303 	and.w	r3, r3, #3
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	d118      	bne.n	8002e50 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002e24:	2201      	movs	r2, #1
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	4013      	ands	r3, r2
 8002e32:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	08db      	lsrs	r3, r3, #3
 8002e3a:	f003 0201 	and.w	r2, r3, #1
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	2203      	movs	r2, #3
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	43db      	mvns	r3, r3
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	4013      	ands	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 80ac 	beq.w	8002fe6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e8e:	4b5e      	ldr	r3, [pc, #376]	; (8003008 <HAL_GPIO_Init+0x32c>)
 8002e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e92:	4a5d      	ldr	r2, [pc, #372]	; (8003008 <HAL_GPIO_Init+0x32c>)
 8002e94:	f043 0301 	orr.w	r3, r3, #1
 8002e98:	6613      	str	r3, [r2, #96]	; 0x60
 8002e9a:	4b5b      	ldr	r3, [pc, #364]	; (8003008 <HAL_GPIO_Init+0x32c>)
 8002e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	60bb      	str	r3, [r7, #8]
 8002ea4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ea6:	4a59      	ldr	r2, [pc, #356]	; (800300c <HAL_GPIO_Init+0x330>)
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	089b      	lsrs	r3, r3, #2
 8002eac:	3302      	adds	r3, #2
 8002eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	220f      	movs	r2, #15
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ed0:	d025      	beq.n	8002f1e <HAL_GPIO_Init+0x242>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a4e      	ldr	r2, [pc, #312]	; (8003010 <HAL_GPIO_Init+0x334>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d01f      	beq.n	8002f1a <HAL_GPIO_Init+0x23e>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a4d      	ldr	r2, [pc, #308]	; (8003014 <HAL_GPIO_Init+0x338>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d019      	beq.n	8002f16 <HAL_GPIO_Init+0x23a>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a4c      	ldr	r2, [pc, #304]	; (8003018 <HAL_GPIO_Init+0x33c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d013      	beq.n	8002f12 <HAL_GPIO_Init+0x236>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a4b      	ldr	r2, [pc, #300]	; (800301c <HAL_GPIO_Init+0x340>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d00d      	beq.n	8002f0e <HAL_GPIO_Init+0x232>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a4a      	ldr	r2, [pc, #296]	; (8003020 <HAL_GPIO_Init+0x344>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d007      	beq.n	8002f0a <HAL_GPIO_Init+0x22e>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a49      	ldr	r2, [pc, #292]	; (8003024 <HAL_GPIO_Init+0x348>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d101      	bne.n	8002f06 <HAL_GPIO_Init+0x22a>
 8002f02:	2306      	movs	r3, #6
 8002f04:	e00c      	b.n	8002f20 <HAL_GPIO_Init+0x244>
 8002f06:	2307      	movs	r3, #7
 8002f08:	e00a      	b.n	8002f20 <HAL_GPIO_Init+0x244>
 8002f0a:	2305      	movs	r3, #5
 8002f0c:	e008      	b.n	8002f20 <HAL_GPIO_Init+0x244>
 8002f0e:	2304      	movs	r3, #4
 8002f10:	e006      	b.n	8002f20 <HAL_GPIO_Init+0x244>
 8002f12:	2303      	movs	r3, #3
 8002f14:	e004      	b.n	8002f20 <HAL_GPIO_Init+0x244>
 8002f16:	2302      	movs	r3, #2
 8002f18:	e002      	b.n	8002f20 <HAL_GPIO_Init+0x244>
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e000      	b.n	8002f20 <HAL_GPIO_Init+0x244>
 8002f1e:	2300      	movs	r3, #0
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	f002 0203 	and.w	r2, r2, #3
 8002f26:	0092      	lsls	r2, r2, #2
 8002f28:	4093      	lsls	r3, r2
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f30:	4936      	ldr	r1, [pc, #216]	; (800300c <HAL_GPIO_Init+0x330>)
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	089b      	lsrs	r3, r3, #2
 8002f36:	3302      	adds	r3, #2
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002f3e:	4b3a      	ldr	r3, [pc, #232]	; (8003028 <HAL_GPIO_Init+0x34c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	43db      	mvns	r3, r3
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f62:	4a31      	ldr	r2, [pc, #196]	; (8003028 <HAL_GPIO_Init+0x34c>)
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002f68:	4b2f      	ldr	r3, [pc, #188]	; (8003028 <HAL_GPIO_Init+0x34c>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	43db      	mvns	r3, r3
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	4013      	ands	r3, r2
 8002f76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d003      	beq.n	8002f8c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f8c:	4a26      	ldr	r2, [pc, #152]	; (8003028 <HAL_GPIO_Init+0x34c>)
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f92:	4b25      	ldr	r3, [pc, #148]	; (8003028 <HAL_GPIO_Init+0x34c>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002fb6:	4a1c      	ldr	r2, [pc, #112]	; (8003028 <HAL_GPIO_Init+0x34c>)
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002fbc:	4b1a      	ldr	r3, [pc, #104]	; (8003028 <HAL_GPIO_Init+0x34c>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d003      	beq.n	8002fe0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002fe0:	4a11      	ldr	r2, [pc, #68]	; (8003028 <HAL_GPIO_Init+0x34c>)
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f47f ae78 	bne.w	8002cec <HAL_GPIO_Init+0x10>
  }
}
 8002ffc:	bf00      	nop
 8002ffe:	371c      	adds	r7, #28
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	40021000 	.word	0x40021000
 800300c:	40010000 	.word	0x40010000
 8003010:	48000400 	.word	0x48000400
 8003014:	48000800 	.word	0x48000800
 8003018:	48000c00 	.word	0x48000c00
 800301c:	48001000 	.word	0x48001000
 8003020:	48001400 	.word	0x48001400
 8003024:	48001800 	.word	0x48001800
 8003028:	40010400 	.word	0x40010400

0800302c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	460b      	mov	r3, r1
 8003036:	807b      	strh	r3, [r7, #2]
 8003038:	4613      	mov	r3, r2
 800303a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800303c:	787b      	ldrb	r3, [r7, #1]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003042:	887a      	ldrh	r2, [r7, #2]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003048:	e002      	b.n	8003050 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800304a:	887a      	ldrh	r2, [r7, #2]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	4603      	mov	r3, r0
 8003064:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003066:	4b08      	ldr	r3, [pc, #32]	; (8003088 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003068:	695a      	ldr	r2, [r3, #20]
 800306a:	88fb      	ldrh	r3, [r7, #6]
 800306c:	4013      	ands	r3, r2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d006      	beq.n	8003080 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003072:	4a05      	ldr	r2, [pc, #20]	; (8003088 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003074:	88fb      	ldrh	r3, [r7, #6]
 8003076:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003078:	88fb      	ldrh	r3, [r7, #6]
 800307a:	4618      	mov	r0, r3
 800307c:	f002 f8b2 	bl	80051e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003080:	bf00      	nop
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40010400 	.word	0x40010400

0800308c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003090:	4b04      	ldr	r3, [pc, #16]	; (80030a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003098:	4618      	mov	r0, r3
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	40007000 	.word	0x40007000

080030a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030b6:	d130      	bne.n	800311a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80030b8:	4b23      	ldr	r3, [pc, #140]	; (8003148 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030c4:	d038      	beq.n	8003138 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030c6:	4b20      	ldr	r3, [pc, #128]	; (8003148 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030ce:	4a1e      	ldr	r2, [pc, #120]	; (8003148 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030d6:	4b1d      	ldr	r3, [pc, #116]	; (800314c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2232      	movs	r2, #50	; 0x32
 80030dc:	fb02 f303 	mul.w	r3, r2, r3
 80030e0:	4a1b      	ldr	r2, [pc, #108]	; (8003150 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80030e2:	fba2 2303 	umull	r2, r3, r2, r3
 80030e6:	0c9b      	lsrs	r3, r3, #18
 80030e8:	3301      	adds	r3, #1
 80030ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030ec:	e002      	b.n	80030f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	3b01      	subs	r3, #1
 80030f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030f4:	4b14      	ldr	r3, [pc, #80]	; (8003148 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003100:	d102      	bne.n	8003108 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1f2      	bne.n	80030ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003108:	4b0f      	ldr	r3, [pc, #60]	; (8003148 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003114:	d110      	bne.n	8003138 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e00f      	b.n	800313a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800311a:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003126:	d007      	beq.n	8003138 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003128:	4b07      	ldr	r3, [pc, #28]	; (8003148 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003130:	4a05      	ldr	r2, [pc, #20]	; (8003148 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003132:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003136:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	40007000 	.word	0x40007000
 800314c:	2000000c 	.word	0x2000000c
 8003150:	431bde83 	.word	0x431bde83

08003154 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b088      	sub	sp, #32
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e39d      	b.n	80038a2 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003166:	4ba4      	ldr	r3, [pc, #656]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 030c 	and.w	r3, r3, #12
 800316e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003170:	4ba1      	ldr	r3, [pc, #644]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f003 0303 	and.w	r3, r3, #3
 8003178:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0310 	and.w	r3, r3, #16
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 80e1 	beq.w	800334a <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d007      	beq.n	800319e <HAL_RCC_OscConfig+0x4a>
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	2b0c      	cmp	r3, #12
 8003192:	f040 8088 	bne.w	80032a6 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	2b01      	cmp	r3, #1
 800319a:	f040 8084 	bne.w	80032a6 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800319e:	4b96      	ldr	r3, [pc, #600]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d005      	beq.n	80031b6 <HAL_RCC_OscConfig+0x62>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e375      	b.n	80038a2 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1a      	ldr	r2, [r3, #32]
 80031ba:	4b8f      	ldr	r3, [pc, #572]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d004      	beq.n	80031d0 <HAL_RCC_OscConfig+0x7c>
 80031c6:	4b8c      	ldr	r3, [pc, #560]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031ce:	e005      	b.n	80031dc <HAL_RCC_OscConfig+0x88>
 80031d0:	4b89      	ldr	r3, [pc, #548]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 80031d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031d6:	091b      	lsrs	r3, r3, #4
 80031d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031dc:	4293      	cmp	r3, r2
 80031de:	d223      	bcs.n	8003228 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f000 fd09 	bl	8003bfc <RCC_SetFlashLatencyFromMSIRange>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e356      	b.n	80038a2 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031f4:	4b80      	ldr	r3, [pc, #512]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a7f      	ldr	r2, [pc, #508]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 80031fa:	f043 0308 	orr.w	r3, r3, #8
 80031fe:	6013      	str	r3, [r2, #0]
 8003200:	4b7d      	ldr	r3, [pc, #500]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	497a      	ldr	r1, [pc, #488]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 800320e:	4313      	orrs	r3, r2
 8003210:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003212:	4b79      	ldr	r3, [pc, #484]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	021b      	lsls	r3, r3, #8
 8003220:	4975      	ldr	r1, [pc, #468]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 8003222:	4313      	orrs	r3, r2
 8003224:	604b      	str	r3, [r1, #4]
 8003226:	e022      	b.n	800326e <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003228:	4b73      	ldr	r3, [pc, #460]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a72      	ldr	r2, [pc, #456]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 800322e:	f043 0308 	orr.w	r3, r3, #8
 8003232:	6013      	str	r3, [r2, #0]
 8003234:	4b70      	ldr	r3, [pc, #448]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	496d      	ldr	r1, [pc, #436]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 8003242:	4313      	orrs	r3, r2
 8003244:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003246:	4b6c      	ldr	r3, [pc, #432]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	021b      	lsls	r3, r3, #8
 8003254:	4968      	ldr	r1, [pc, #416]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 8003256:	4313      	orrs	r3, r2
 8003258:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	4618      	mov	r0, r3
 8003260:	f000 fccc 	bl	8003bfc <RCC_SetFlashLatencyFromMSIRange>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e319      	b.n	80038a2 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800326e:	f000 fc03 	bl	8003a78 <HAL_RCC_GetSysClockFreq>
 8003272:	4601      	mov	r1, r0
 8003274:	4b60      	ldr	r3, [pc, #384]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	091b      	lsrs	r3, r3, #4
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	4a5f      	ldr	r2, [pc, #380]	; (80033fc <HAL_RCC_OscConfig+0x2a8>)
 8003280:	5cd3      	ldrb	r3, [r2, r3]
 8003282:	f003 031f 	and.w	r3, r3, #31
 8003286:	fa21 f303 	lsr.w	r3, r1, r3
 800328a:	4a5d      	ldr	r2, [pc, #372]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 800328c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800328e:	4b5d      	ldr	r3, [pc, #372]	; (8003404 <HAL_RCC_OscConfig+0x2b0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f7fd fe28 	bl	8000ee8 <HAL_InitTick>
 8003298:	4603      	mov	r3, r0
 800329a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800329c:	7bfb      	ldrb	r3, [r7, #15]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d052      	beq.n	8003348 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 80032a2:	7bfb      	ldrb	r3, [r7, #15]
 80032a4:	e2fd      	b.n	80038a2 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d032      	beq.n	8003314 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80032ae:	4b52      	ldr	r3, [pc, #328]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a51      	ldr	r2, [pc, #324]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 80032b4:	f043 0301 	orr.w	r3, r3, #1
 80032b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032ba:	f7fd fe61 	bl	8000f80 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032c2:	f7fd fe5d 	bl	8000f80 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e2e6      	b.n	80038a2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032d4:	4b48      	ldr	r3, [pc, #288]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032e0:	4b45      	ldr	r3, [pc, #276]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a44      	ldr	r2, [pc, #272]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 80032e6:	f043 0308 	orr.w	r3, r3, #8
 80032ea:	6013      	str	r3, [r2, #0]
 80032ec:	4b42      	ldr	r3, [pc, #264]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	493f      	ldr	r1, [pc, #252]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032fe:	4b3e      	ldr	r3, [pc, #248]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	021b      	lsls	r3, r3, #8
 800330c:	493a      	ldr	r1, [pc, #232]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 800330e:	4313      	orrs	r3, r2
 8003310:	604b      	str	r3, [r1, #4]
 8003312:	e01a      	b.n	800334a <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003314:	4b38      	ldr	r3, [pc, #224]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a37      	ldr	r2, [pc, #220]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 800331a:	f023 0301 	bic.w	r3, r3, #1
 800331e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003320:	f7fd fe2e 	bl	8000f80 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003328:	f7fd fe2a 	bl	8000f80 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e2b3      	b.n	80038a2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800333a:	4b2f      	ldr	r3, [pc, #188]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f0      	bne.n	8003328 <HAL_RCC_OscConfig+0x1d4>
 8003346:	e000      	b.n	800334a <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003348:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	d074      	beq.n	8003440 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	2b08      	cmp	r3, #8
 800335a:	d005      	beq.n	8003368 <HAL_RCC_OscConfig+0x214>
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	2b0c      	cmp	r3, #12
 8003360:	d10e      	bne.n	8003380 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2b03      	cmp	r3, #3
 8003366:	d10b      	bne.n	8003380 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003368:	4b23      	ldr	r3, [pc, #140]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d064      	beq.n	800343e <HAL_RCC_OscConfig+0x2ea>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d160      	bne.n	800343e <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e290      	b.n	80038a2 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003388:	d106      	bne.n	8003398 <HAL_RCC_OscConfig+0x244>
 800338a:	4b1b      	ldr	r3, [pc, #108]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a1a      	ldr	r2, [pc, #104]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 8003390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	e01d      	b.n	80033d4 <HAL_RCC_OscConfig+0x280>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033a0:	d10c      	bne.n	80033bc <HAL_RCC_OscConfig+0x268>
 80033a2:	4b15      	ldr	r3, [pc, #84]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a14      	ldr	r2, [pc, #80]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 80033a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	4b12      	ldr	r3, [pc, #72]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a11      	ldr	r2, [pc, #68]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 80033b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	e00b      	b.n	80033d4 <HAL_RCC_OscConfig+0x280>
 80033bc:	4b0e      	ldr	r3, [pc, #56]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a0d      	ldr	r2, [pc, #52]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 80033c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	4b0b      	ldr	r3, [pc, #44]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a0a      	ldr	r2, [pc, #40]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
 80033ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d01c      	beq.n	8003416 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033dc:	f7fd fdd0 	bl	8000f80 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033e2:	e011      	b.n	8003408 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e4:	f7fd fdcc 	bl	8000f80 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b64      	cmp	r3, #100	; 0x64
 80033f0:	d90a      	bls.n	8003408 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e255      	b.n	80038a2 <HAL_RCC_OscConfig+0x74e>
 80033f6:	bf00      	nop
 80033f8:	40021000 	.word	0x40021000
 80033fc:	08008480 	.word	0x08008480
 8003400:	2000000c 	.word	0x2000000c
 8003404:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003408:	4bae      	ldr	r3, [pc, #696]	; (80036c4 <HAL_RCC_OscConfig+0x570>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0e7      	beq.n	80033e4 <HAL_RCC_OscConfig+0x290>
 8003414:	e014      	b.n	8003440 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003416:	f7fd fdb3 	bl	8000f80 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800341e:	f7fd fdaf 	bl	8000f80 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b64      	cmp	r3, #100	; 0x64
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e238      	b.n	80038a2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003430:	4ba4      	ldr	r3, [pc, #656]	; (80036c4 <HAL_RCC_OscConfig+0x570>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1f0      	bne.n	800341e <HAL_RCC_OscConfig+0x2ca>
 800343c:	e000      	b.n	8003440 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800343e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d060      	beq.n	800350e <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	2b04      	cmp	r3, #4
 8003450:	d005      	beq.n	800345e <HAL_RCC_OscConfig+0x30a>
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	2b0c      	cmp	r3, #12
 8003456:	d119      	bne.n	800348c <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	2b02      	cmp	r3, #2
 800345c:	d116      	bne.n	800348c <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800345e:	4b99      	ldr	r3, [pc, #612]	; (80036c4 <HAL_RCC_OscConfig+0x570>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003466:	2b00      	cmp	r3, #0
 8003468:	d005      	beq.n	8003476 <HAL_RCC_OscConfig+0x322>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e215      	b.n	80038a2 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003476:	4b93      	ldr	r3, [pc, #588]	; (80036c4 <HAL_RCC_OscConfig+0x570>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	061b      	lsls	r3, r3, #24
 8003484:	498f      	ldr	r1, [pc, #572]	; (80036c4 <HAL_RCC_OscConfig+0x570>)
 8003486:	4313      	orrs	r3, r2
 8003488:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800348a:	e040      	b.n	800350e <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d023      	beq.n	80034dc <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003494:	4b8b      	ldr	r3, [pc, #556]	; (80036c4 <HAL_RCC_OscConfig+0x570>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a8a      	ldr	r2, [pc, #552]	; (80036c4 <HAL_RCC_OscConfig+0x570>)
 800349a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800349e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a0:	f7fd fd6e 	bl	8000f80 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034a8:	f7fd fd6a 	bl	8000f80 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e1f3      	b.n	80038a2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034ba:	4b82      	ldr	r3, [pc, #520]	; (80036c4 <HAL_RCC_OscConfig+0x570>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0f0      	beq.n	80034a8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c6:	4b7f      	ldr	r3, [pc, #508]	; (80036c4 <HAL_RCC_OscConfig+0x570>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	061b      	lsls	r3, r3, #24
 80034d4:	497b      	ldr	r1, [pc, #492]	; (80036c4 <HAL_RCC_OscConfig+0x570>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	604b      	str	r3, [r1, #4]
 80034da:	e018      	b.n	800350e <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034dc:	4b79      	ldr	r3, [pc, #484]	; (80036c4 <HAL_RCC_OscConfig+0x570>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a78      	ldr	r2, [pc, #480]	; (80036c4 <HAL_RCC_OscConfig+0x570>)
 80034e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e8:	f7fd fd4a 	bl	8000f80 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034f0:	f7fd fd46 	bl	8000f80 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e1cf      	b.n	80038a2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003502:	4b70      	ldr	r3, [pc, #448]	; (80036c4 <HAL_RCC_OscConfig+0x570>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1f0      	bne.n	80034f0 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0308 	and.w	r3, r3, #8
 8003516:	2b00      	cmp	r3, #0
 8003518:	d03c      	beq.n	8003594 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d01c      	beq.n	800355c <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003522:	4b68      	ldr	r3, [pc, #416]	; (80036c4 <HAL_RCC_OscConfig+0x570>)
 8003524:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003528:	4a66      	ldr	r2, [pc, #408]	; (80036c4 <HAL_RCC_OscConfig+0x570>)
 800352a:	f043 0301 	orr.w	r3, r3, #1
 800352e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003532:	f7fd fd25 	bl	8000f80 <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003538:	e008      	b.n	800354c <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800353a:	f7fd fd21 	bl	8000f80 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e1aa      	b.n	80038a2 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800354c:	4b5d      	ldr	r3, [pc, #372]	; (80036c4 <HAL_RCC_OscConfig+0x570>)
 800354e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0ef      	beq.n	800353a <HAL_RCC_OscConfig+0x3e6>
 800355a:	e01b      	b.n	8003594 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800355c:	4b59      	ldr	r3, [pc, #356]	; (80036c4 <HAL_RCC_OscConfig+0x570>)
 800355e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003562:	4a58      	ldr	r2, [pc, #352]	; (80036c4 <HAL_RCC_OscConfig+0x570>)
 8003564:	f023 0301 	bic.w	r3, r3, #1
 8003568:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356c:	f7fd fd08 	bl	8000f80 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003574:	f7fd fd04 	bl	8000f80 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e18d      	b.n	80038a2 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003586:	4b4f      	ldr	r3, [pc, #316]	; (80036c4 <HAL_RCC_OscConfig+0x570>)
 8003588:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1ef      	bne.n	8003574 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 80a5 	beq.w	80036ec <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035a2:	2300      	movs	r3, #0
 80035a4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80035a6:	4b47      	ldr	r3, [pc, #284]	; (80036c4 <HAL_RCC_OscConfig+0x570>)
 80035a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10d      	bne.n	80035ce <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035b2:	4b44      	ldr	r3, [pc, #272]	; (80036c4 <HAL_RCC_OscConfig+0x570>)
 80035b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b6:	4a43      	ldr	r2, [pc, #268]	; (80036c4 <HAL_RCC_OscConfig+0x570>)
 80035b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035bc:	6593      	str	r3, [r2, #88]	; 0x58
 80035be:	4b41      	ldr	r3, [pc, #260]	; (80036c4 <HAL_RCC_OscConfig+0x570>)
 80035c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c6:	60bb      	str	r3, [r7, #8]
 80035c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ca:	2301      	movs	r3, #1
 80035cc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ce:	4b3e      	ldr	r3, [pc, #248]	; (80036c8 <HAL_RCC_OscConfig+0x574>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d118      	bne.n	800360c <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035da:	4b3b      	ldr	r3, [pc, #236]	; (80036c8 <HAL_RCC_OscConfig+0x574>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a3a      	ldr	r2, [pc, #232]	; (80036c8 <HAL_RCC_OscConfig+0x574>)
 80035e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035e6:	f7fd fccb 	bl	8000f80 <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ec:	e008      	b.n	8003600 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ee:	f7fd fcc7 	bl	8000f80 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e150      	b.n	80038a2 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003600:	4b31      	ldr	r3, [pc, #196]	; (80036c8 <HAL_RCC_OscConfig+0x574>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0f0      	beq.n	80035ee <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d108      	bne.n	8003626 <HAL_RCC_OscConfig+0x4d2>
 8003614:	4b2b      	ldr	r3, [pc, #172]	; (80036c4 <HAL_RCC_OscConfig+0x570>)
 8003616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361a:	4a2a      	ldr	r2, [pc, #168]	; (80036c4 <HAL_RCC_OscConfig+0x570>)
 800361c:	f043 0301 	orr.w	r3, r3, #1
 8003620:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003624:	e024      	b.n	8003670 <HAL_RCC_OscConfig+0x51c>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	2b05      	cmp	r3, #5
 800362c:	d110      	bne.n	8003650 <HAL_RCC_OscConfig+0x4fc>
 800362e:	4b25      	ldr	r3, [pc, #148]	; (80036c4 <HAL_RCC_OscConfig+0x570>)
 8003630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003634:	4a23      	ldr	r2, [pc, #140]	; (80036c4 <HAL_RCC_OscConfig+0x570>)
 8003636:	f043 0304 	orr.w	r3, r3, #4
 800363a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800363e:	4b21      	ldr	r3, [pc, #132]	; (80036c4 <HAL_RCC_OscConfig+0x570>)
 8003640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003644:	4a1f      	ldr	r2, [pc, #124]	; (80036c4 <HAL_RCC_OscConfig+0x570>)
 8003646:	f043 0301 	orr.w	r3, r3, #1
 800364a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800364e:	e00f      	b.n	8003670 <HAL_RCC_OscConfig+0x51c>
 8003650:	4b1c      	ldr	r3, [pc, #112]	; (80036c4 <HAL_RCC_OscConfig+0x570>)
 8003652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003656:	4a1b      	ldr	r2, [pc, #108]	; (80036c4 <HAL_RCC_OscConfig+0x570>)
 8003658:	f023 0301 	bic.w	r3, r3, #1
 800365c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003660:	4b18      	ldr	r3, [pc, #96]	; (80036c4 <HAL_RCC_OscConfig+0x570>)
 8003662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003666:	4a17      	ldr	r2, [pc, #92]	; (80036c4 <HAL_RCC_OscConfig+0x570>)
 8003668:	f023 0304 	bic.w	r3, r3, #4
 800366c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d016      	beq.n	80036a6 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003678:	f7fd fc82 	bl	8000f80 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800367e:	e00a      	b.n	8003696 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003680:	f7fd fc7e 	bl	8000f80 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	f241 3288 	movw	r2, #5000	; 0x1388
 800368e:	4293      	cmp	r3, r2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e105      	b.n	80038a2 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003696:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <HAL_RCC_OscConfig+0x570>)
 8003698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0ed      	beq.n	8003680 <HAL_RCC_OscConfig+0x52c>
 80036a4:	e019      	b.n	80036da <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a6:	f7fd fc6b 	bl	8000f80 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036ac:	e00e      	b.n	80036cc <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ae:	f7fd fc67 	bl	8000f80 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036bc:	4293      	cmp	r3, r2
 80036be:	d905      	bls.n	80036cc <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e0ee      	b.n	80038a2 <HAL_RCC_OscConfig+0x74e>
 80036c4:	40021000 	.word	0x40021000
 80036c8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036cc:	4b77      	ldr	r3, [pc, #476]	; (80038ac <HAL_RCC_OscConfig+0x758>)
 80036ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1e9      	bne.n	80036ae <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036da:	7ffb      	ldrb	r3, [r7, #31]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d105      	bne.n	80036ec <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036e0:	4b72      	ldr	r3, [pc, #456]	; (80038ac <HAL_RCC_OscConfig+0x758>)
 80036e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e4:	4a71      	ldr	r2, [pc, #452]	; (80038ac <HAL_RCC_OscConfig+0x758>)
 80036e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ea:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 80d5 	beq.w	80038a0 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	2b0c      	cmp	r3, #12
 80036fa:	f000 808e 	beq.w	800381a <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003702:	2b02      	cmp	r3, #2
 8003704:	d15b      	bne.n	80037be <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003706:	4b69      	ldr	r3, [pc, #420]	; (80038ac <HAL_RCC_OscConfig+0x758>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a68      	ldr	r2, [pc, #416]	; (80038ac <HAL_RCC_OscConfig+0x758>)
 800370c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003710:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003712:	f7fd fc35 	bl	8000f80 <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003718:	e008      	b.n	800372c <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800371a:	f7fd fc31 	bl	8000f80 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e0ba      	b.n	80038a2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800372c:	4b5f      	ldr	r3, [pc, #380]	; (80038ac <HAL_RCC_OscConfig+0x758>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1f0      	bne.n	800371a <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003738:	4b5c      	ldr	r3, [pc, #368]	; (80038ac <HAL_RCC_OscConfig+0x758>)
 800373a:	68da      	ldr	r2, [r3, #12]
 800373c:	4b5c      	ldr	r3, [pc, #368]	; (80038b0 <HAL_RCC_OscConfig+0x75c>)
 800373e:	4013      	ands	r3, r2
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003748:	3a01      	subs	r2, #1
 800374a:	0112      	lsls	r2, r2, #4
 800374c:	4311      	orrs	r1, r2
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003752:	0212      	lsls	r2, r2, #8
 8003754:	4311      	orrs	r1, r2
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800375a:	0852      	lsrs	r2, r2, #1
 800375c:	3a01      	subs	r2, #1
 800375e:	0552      	lsls	r2, r2, #21
 8003760:	4311      	orrs	r1, r2
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003766:	0852      	lsrs	r2, r2, #1
 8003768:	3a01      	subs	r2, #1
 800376a:	0652      	lsls	r2, r2, #25
 800376c:	4311      	orrs	r1, r2
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003772:	0912      	lsrs	r2, r2, #4
 8003774:	0452      	lsls	r2, r2, #17
 8003776:	430a      	orrs	r2, r1
 8003778:	494c      	ldr	r1, [pc, #304]	; (80038ac <HAL_RCC_OscConfig+0x758>)
 800377a:	4313      	orrs	r3, r2
 800377c:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800377e:	4b4b      	ldr	r3, [pc, #300]	; (80038ac <HAL_RCC_OscConfig+0x758>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a4a      	ldr	r2, [pc, #296]	; (80038ac <HAL_RCC_OscConfig+0x758>)
 8003784:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003788:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800378a:	4b48      	ldr	r3, [pc, #288]	; (80038ac <HAL_RCC_OscConfig+0x758>)
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	4a47      	ldr	r2, [pc, #284]	; (80038ac <HAL_RCC_OscConfig+0x758>)
 8003790:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003794:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003796:	f7fd fbf3 	bl	8000f80 <HAL_GetTick>
 800379a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800379c:	e008      	b.n	80037b0 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800379e:	f7fd fbef 	bl	8000f80 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e078      	b.n	80038a2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037b0:	4b3e      	ldr	r3, [pc, #248]	; (80038ac <HAL_RCC_OscConfig+0x758>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0f0      	beq.n	800379e <HAL_RCC_OscConfig+0x64a>
 80037bc:	e070      	b.n	80038a0 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037be:	4b3b      	ldr	r3, [pc, #236]	; (80038ac <HAL_RCC_OscConfig+0x758>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a3a      	ldr	r2, [pc, #232]	; (80038ac <HAL_RCC_OscConfig+0x758>)
 80037c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037c8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80037ca:	4b38      	ldr	r3, [pc, #224]	; (80038ac <HAL_RCC_OscConfig+0x758>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d105      	bne.n	80037e2 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80037d6:	4b35      	ldr	r3, [pc, #212]	; (80038ac <HAL_RCC_OscConfig+0x758>)
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	4a34      	ldr	r2, [pc, #208]	; (80038ac <HAL_RCC_OscConfig+0x758>)
 80037dc:	f023 0303 	bic.w	r3, r3, #3
 80037e0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80037e2:	4b32      	ldr	r3, [pc, #200]	; (80038ac <HAL_RCC_OscConfig+0x758>)
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	4a31      	ldr	r2, [pc, #196]	; (80038ac <HAL_RCC_OscConfig+0x758>)
 80037e8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80037ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037f0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f2:	f7fd fbc5 	bl	8000f80 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037fa:	f7fd fbc1 	bl	8000f80 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e04a      	b.n	80038a2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800380c:	4b27      	ldr	r3, [pc, #156]	; (80038ac <HAL_RCC_OscConfig+0x758>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1f0      	bne.n	80037fa <HAL_RCC_OscConfig+0x6a6>
 8003818:	e042      	b.n	80038a0 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381e:	2b01      	cmp	r3, #1
 8003820:	d101      	bne.n	8003826 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e03d      	b.n	80038a2 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003826:	4b21      	ldr	r3, [pc, #132]	; (80038ac <HAL_RCC_OscConfig+0x758>)
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f003 0203 	and.w	r2, r3, #3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003836:	429a      	cmp	r2, r3
 8003838:	d130      	bne.n	800389c <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003844:	3b01      	subs	r3, #1
 8003846:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003848:	429a      	cmp	r2, r3
 800384a:	d127      	bne.n	800389c <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003856:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003858:	429a      	cmp	r2, r3
 800385a:	d11f      	bne.n	800389c <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003866:	2a07      	cmp	r2, #7
 8003868:	bf14      	ite	ne
 800386a:	2201      	movne	r2, #1
 800386c:	2200      	moveq	r2, #0
 800386e:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003870:	4293      	cmp	r3, r2
 8003872:	d113      	bne.n	800389c <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387e:	085b      	lsrs	r3, r3, #1
 8003880:	3b01      	subs	r3, #1
 8003882:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003884:	429a      	cmp	r2, r3
 8003886:	d109      	bne.n	800389c <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	085b      	lsrs	r3, r3, #1
 8003894:	3b01      	subs	r3, #1
 8003896:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003898:	429a      	cmp	r2, r3
 800389a:	d001      	beq.n	80038a0 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e000      	b.n	80038a2 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3720      	adds	r7, #32
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40021000 	.word	0x40021000
 80038b0:	f99d808c 	.word	0xf99d808c

080038b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e0c8      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038c8:	4b66      	ldr	r3, [pc, #408]	; (8003a64 <HAL_RCC_ClockConfig+0x1b0>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d910      	bls.n	80038f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d6:	4b63      	ldr	r3, [pc, #396]	; (8003a64 <HAL_RCC_ClockConfig+0x1b0>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f023 0207 	bic.w	r2, r3, #7
 80038de:	4961      	ldr	r1, [pc, #388]	; (8003a64 <HAL_RCC_ClockConfig+0x1b0>)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e6:	4b5f      	ldr	r3, [pc, #380]	; (8003a64 <HAL_RCC_ClockConfig+0x1b0>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d001      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e0b0      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	2b00      	cmp	r3, #0
 8003902:	d04c      	beq.n	800399e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	2b03      	cmp	r3, #3
 800390a:	d107      	bne.n	800391c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800390c:	4b56      	ldr	r3, [pc, #344]	; (8003a68 <HAL_RCC_ClockConfig+0x1b4>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d121      	bne.n	800395c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e09e      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	2b02      	cmp	r3, #2
 8003922:	d107      	bne.n	8003934 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003924:	4b50      	ldr	r3, [pc, #320]	; (8003a68 <HAL_RCC_ClockConfig+0x1b4>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d115      	bne.n	800395c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e092      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d107      	bne.n	800394c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800393c:	4b4a      	ldr	r3, [pc, #296]	; (8003a68 <HAL_RCC_ClockConfig+0x1b4>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d109      	bne.n	800395c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e086      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800394c:	4b46      	ldr	r3, [pc, #280]	; (8003a68 <HAL_RCC_ClockConfig+0x1b4>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003954:	2b00      	cmp	r3, #0
 8003956:	d101      	bne.n	800395c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e07e      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800395c:	4b42      	ldr	r3, [pc, #264]	; (8003a68 <HAL_RCC_ClockConfig+0x1b4>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f023 0203 	bic.w	r2, r3, #3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	493f      	ldr	r1, [pc, #252]	; (8003a68 <HAL_RCC_ClockConfig+0x1b4>)
 800396a:	4313      	orrs	r3, r2
 800396c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800396e:	f7fd fb07 	bl	8000f80 <HAL_GetTick>
 8003972:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003974:	e00a      	b.n	800398c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003976:	f7fd fb03 	bl	8000f80 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	f241 3288 	movw	r2, #5000	; 0x1388
 8003984:	4293      	cmp	r3, r2
 8003986:	d901      	bls.n	800398c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e066      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800398c:	4b36      	ldr	r3, [pc, #216]	; (8003a68 <HAL_RCC_ClockConfig+0x1b4>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 020c 	and.w	r2, r3, #12
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	429a      	cmp	r2, r3
 800399c:	d1eb      	bne.n	8003976 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d008      	beq.n	80039bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039aa:	4b2f      	ldr	r3, [pc, #188]	; (8003a68 <HAL_RCC_ClockConfig+0x1b4>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	492c      	ldr	r1, [pc, #176]	; (8003a68 <HAL_RCC_ClockConfig+0x1b4>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039bc:	4b29      	ldr	r3, [pc, #164]	; (8003a64 <HAL_RCC_ClockConfig+0x1b0>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d210      	bcs.n	80039ec <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ca:	4b26      	ldr	r3, [pc, #152]	; (8003a64 <HAL_RCC_ClockConfig+0x1b0>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f023 0207 	bic.w	r2, r3, #7
 80039d2:	4924      	ldr	r1, [pc, #144]	; (8003a64 <HAL_RCC_ClockConfig+0x1b0>)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039da:	4b22      	ldr	r3, [pc, #136]	; (8003a64 <HAL_RCC_ClockConfig+0x1b0>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d001      	beq.n	80039ec <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e036      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d008      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039f8:	4b1b      	ldr	r3, [pc, #108]	; (8003a68 <HAL_RCC_ClockConfig+0x1b4>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	4918      	ldr	r1, [pc, #96]	; (8003a68 <HAL_RCC_ClockConfig+0x1b4>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d009      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a16:	4b14      	ldr	r3, [pc, #80]	; (8003a68 <HAL_RCC_ClockConfig+0x1b4>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	4910      	ldr	r1, [pc, #64]	; (8003a68 <HAL_RCC_ClockConfig+0x1b4>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a2a:	f000 f825 	bl	8003a78 <HAL_RCC_GetSysClockFreq>
 8003a2e:	4601      	mov	r1, r0
 8003a30:	4b0d      	ldr	r3, [pc, #52]	; (8003a68 <HAL_RCC_ClockConfig+0x1b4>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	091b      	lsrs	r3, r3, #4
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	4a0c      	ldr	r2, [pc, #48]	; (8003a6c <HAL_RCC_ClockConfig+0x1b8>)
 8003a3c:	5cd3      	ldrb	r3, [r2, r3]
 8003a3e:	f003 031f 	and.w	r3, r3, #31
 8003a42:	fa21 f303 	lsr.w	r3, r1, r3
 8003a46:	4a0a      	ldr	r2, [pc, #40]	; (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003a48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a4a:	4b0a      	ldr	r3, [pc, #40]	; (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fd fa4a 	bl	8000ee8 <HAL_InitTick>
 8003a54:	4603      	mov	r3, r0
 8003a56:	72fb      	strb	r3, [r7, #11]

  return status;
 8003a58:	7afb      	ldrb	r3, [r7, #11]
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40022000 	.word	0x40022000
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	08008480 	.word	0x08008480
 8003a70:	2000000c 	.word	0x2000000c
 8003a74:	20000000 	.word	0x20000000

08003a78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b089      	sub	sp, #36	; 0x24
 8003a7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61fb      	str	r3, [r7, #28]
 8003a82:	2300      	movs	r3, #0
 8003a84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a86:	4b3d      	ldr	r3, [pc, #244]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x104>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 030c 	and.w	r3, r3, #12
 8003a8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a90:	4b3a      	ldr	r3, [pc, #232]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x104>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	f003 0303 	and.w	r3, r3, #3
 8003a98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d005      	beq.n	8003aac <HAL_RCC_GetSysClockFreq+0x34>
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	2b0c      	cmp	r3, #12
 8003aa4:	d121      	bne.n	8003aea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d11e      	bne.n	8003aea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003aac:	4b33      	ldr	r3, [pc, #204]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x104>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0308 	and.w	r3, r3, #8
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d107      	bne.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ab8:	4b30      	ldr	r3, [pc, #192]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x104>)
 8003aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003abe:	0a1b      	lsrs	r3, r3, #8
 8003ac0:	f003 030f 	and.w	r3, r3, #15
 8003ac4:	61fb      	str	r3, [r7, #28]
 8003ac6:	e005      	b.n	8003ad4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ac8:	4b2c      	ldr	r3, [pc, #176]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x104>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	091b      	lsrs	r3, r3, #4
 8003ace:	f003 030f 	and.w	r3, r3, #15
 8003ad2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ad4:	4a2a      	ldr	r2, [pc, #168]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003adc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10d      	bne.n	8003b00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ae8:	e00a      	b.n	8003b00 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	2b04      	cmp	r3, #4
 8003aee:	d102      	bne.n	8003af6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003af0:	4b24      	ldr	r3, [pc, #144]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003af2:	61bb      	str	r3, [r7, #24]
 8003af4:	e004      	b.n	8003b00 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	2b08      	cmp	r3, #8
 8003afa:	d101      	bne.n	8003b00 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003afc:	4b22      	ldr	r3, [pc, #136]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x110>)
 8003afe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	2b0c      	cmp	r3, #12
 8003b04:	d133      	bne.n	8003b6e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b06:	4b1d      	ldr	r3, [pc, #116]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x104>)
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f003 0303 	and.w	r3, r3, #3
 8003b0e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d002      	beq.n	8003b1c <HAL_RCC_GetSysClockFreq+0xa4>
 8003b16:	2b03      	cmp	r3, #3
 8003b18:	d003      	beq.n	8003b22 <HAL_RCC_GetSysClockFreq+0xaa>
 8003b1a:	e005      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b1c:	4b19      	ldr	r3, [pc, #100]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b1e:	617b      	str	r3, [r7, #20]
      break;
 8003b20:	e005      	b.n	8003b2e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b22:	4b19      	ldr	r3, [pc, #100]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b24:	617b      	str	r3, [r7, #20]
      break;
 8003b26:	e002      	b.n	8003b2e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	617b      	str	r3, [r7, #20]
      break;
 8003b2c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b2e:	4b13      	ldr	r3, [pc, #76]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x104>)
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	091b      	lsrs	r3, r3, #4
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	3301      	adds	r3, #1
 8003b3a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b3c:	4b0f      	ldr	r3, [pc, #60]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x104>)
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	0a1b      	lsrs	r3, r3, #8
 8003b42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	fb02 f203 	mul.w	r2, r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b52:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b54:	4b09      	ldr	r3, [pc, #36]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x104>)
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	0e5b      	lsrs	r3, r3, #25
 8003b5a:	f003 0303 	and.w	r3, r3, #3
 8003b5e:	3301      	adds	r3, #1
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b6e:	69bb      	ldr	r3, [r7, #24]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3724      	adds	r7, #36	; 0x24
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	08008498 	.word	0x08008498
 8003b84:	00f42400 	.word	0x00f42400
 8003b88:	007a1200 	.word	0x007a1200

08003b8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b90:	4b03      	ldr	r3, [pc, #12]	; (8003ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b92:	681b      	ldr	r3, [r3, #0]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	2000000c 	.word	0x2000000c

08003ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ba8:	f7ff fff0 	bl	8003b8c <HAL_RCC_GetHCLKFreq>
 8003bac:	4601      	mov	r1, r0
 8003bae:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	0a1b      	lsrs	r3, r3, #8
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	4a04      	ldr	r2, [pc, #16]	; (8003bcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003bba:	5cd3      	ldrb	r3, [r2, r3]
 8003bbc:	f003 031f 	and.w	r3, r3, #31
 8003bc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	08008490 	.word	0x08008490

08003bd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003bd4:	f7ff ffda 	bl	8003b8c <HAL_RCC_GetHCLKFreq>
 8003bd8:	4601      	mov	r1, r0
 8003bda:	4b06      	ldr	r3, [pc, #24]	; (8003bf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	0adb      	lsrs	r3, r3, #11
 8003be0:	f003 0307 	and.w	r3, r3, #7
 8003be4:	4a04      	ldr	r2, [pc, #16]	; (8003bf8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003be6:	5cd3      	ldrb	r3, [r2, r3]
 8003be8:	f003 031f 	and.w	r3, r3, #31
 8003bec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	08008490 	.word	0x08008490

08003bfc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c04:	2300      	movs	r3, #0
 8003c06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c08:	4b2a      	ldr	r3, [pc, #168]	; (8003cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d003      	beq.n	8003c1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c14:	f7ff fa3a 	bl	800308c <HAL_PWREx_GetVoltageRange>
 8003c18:	6178      	str	r0, [r7, #20]
 8003c1a:	e014      	b.n	8003c46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c1c:	4b25      	ldr	r3, [pc, #148]	; (8003cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c20:	4a24      	ldr	r2, [pc, #144]	; (8003cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c26:	6593      	str	r3, [r2, #88]	; 0x58
 8003c28:	4b22      	ldr	r3, [pc, #136]	; (8003cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c30:	60fb      	str	r3, [r7, #12]
 8003c32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c34:	f7ff fa2a 	bl	800308c <HAL_PWREx_GetVoltageRange>
 8003c38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c3a:	4b1e      	ldr	r3, [pc, #120]	; (8003cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c3e:	4a1d      	ldr	r2, [pc, #116]	; (8003cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c44:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c4c:	d10b      	bne.n	8003c66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b80      	cmp	r3, #128	; 0x80
 8003c52:	d919      	bls.n	8003c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2ba0      	cmp	r3, #160	; 0xa0
 8003c58:	d902      	bls.n	8003c60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	613b      	str	r3, [r7, #16]
 8003c5e:	e013      	b.n	8003c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c60:	2301      	movs	r3, #1
 8003c62:	613b      	str	r3, [r7, #16]
 8003c64:	e010      	b.n	8003c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b80      	cmp	r3, #128	; 0x80
 8003c6a:	d902      	bls.n	8003c72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	613b      	str	r3, [r7, #16]
 8003c70:	e00a      	b.n	8003c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b80      	cmp	r3, #128	; 0x80
 8003c76:	d102      	bne.n	8003c7e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c78:	2302      	movs	r3, #2
 8003c7a:	613b      	str	r3, [r7, #16]
 8003c7c:	e004      	b.n	8003c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b70      	cmp	r3, #112	; 0x70
 8003c82:	d101      	bne.n	8003c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c84:	2301      	movs	r3, #1
 8003c86:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c88:	4b0b      	ldr	r3, [pc, #44]	; (8003cb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f023 0207 	bic.w	r2, r3, #7
 8003c90:	4909      	ldr	r1, [pc, #36]	; (8003cb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c98:	4b07      	ldr	r3, [pc, #28]	; (8003cb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d001      	beq.n	8003caa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e000      	b.n	8003cac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3718      	adds	r7, #24
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	40022000 	.word	0x40022000

08003cbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003cc8:	2300      	movs	r3, #0
 8003cca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d03f      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ce0:	d01c      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003ce2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ce6:	d802      	bhi.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00e      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003cec:	e01f      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003cee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cf2:	d003      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003cf4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003cf8:	d01c      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003cfa:	e018      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003cfc:	4b85      	ldr	r3, [pc, #532]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	4a84      	ldr	r2, [pc, #528]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d06:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d08:	e015      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	3304      	adds	r3, #4
 8003d0e:	2100      	movs	r1, #0
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 fab9 	bl	8004288 <RCCEx_PLLSAI1_Config>
 8003d16:	4603      	mov	r3, r0
 8003d18:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d1a:	e00c      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3320      	adds	r3, #32
 8003d20:	2100      	movs	r1, #0
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 fba0 	bl	8004468 <RCCEx_PLLSAI2_Config>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d2c:	e003      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	74fb      	strb	r3, [r7, #19]
      break;
 8003d32:	e000      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003d34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d36:	7cfb      	ldrb	r3, [r7, #19]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10b      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d3c:	4b75      	ldr	r3, [pc, #468]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d42:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d4a:	4972      	ldr	r1, [pc, #456]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d52:	e001      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d54:	7cfb      	ldrb	r3, [r7, #19]
 8003d56:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d03f      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d6c:	d01c      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003d6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d72:	d802      	bhi.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00e      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003d78:	e01f      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003d7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d7e:	d003      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003d80:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d84:	d01c      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003d86:	e018      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d88:	4b62      	ldr	r3, [pc, #392]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	4a61      	ldr	r2, [pc, #388]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d92:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d94:	e015      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	3304      	adds	r3, #4
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 fa73 	bl	8004288 <RCCEx_PLLSAI1_Config>
 8003da2:	4603      	mov	r3, r0
 8003da4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003da6:	e00c      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	3320      	adds	r3, #32
 8003dac:	2100      	movs	r1, #0
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 fb5a 	bl	8004468 <RCCEx_PLLSAI2_Config>
 8003db4:	4603      	mov	r3, r0
 8003db6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003db8:	e003      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	74fb      	strb	r3, [r7, #19]
      break;
 8003dbe:	e000      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003dc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dc2:	7cfb      	ldrb	r3, [r7, #19]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10b      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003dc8:	4b52      	ldr	r3, [pc, #328]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dd6:	494f      	ldr	r1, [pc, #316]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003dde:	e001      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de0:	7cfb      	ldrb	r3, [r7, #19]
 8003de2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 80a0 	beq.w	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003df2:	2300      	movs	r3, #0
 8003df4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003df6:	4b47      	ldr	r3, [pc, #284]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003e02:	2301      	movs	r3, #1
 8003e04:	e000      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003e06:	2300      	movs	r3, #0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00d      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e0c:	4b41      	ldr	r3, [pc, #260]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e10:	4a40      	ldr	r2, [pc, #256]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e16:	6593      	str	r3, [r2, #88]	; 0x58
 8003e18:	4b3e      	ldr	r3, [pc, #248]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e24:	2301      	movs	r3, #1
 8003e26:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e28:	4b3b      	ldr	r3, [pc, #236]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a3a      	ldr	r2, [pc, #232]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e34:	f7fd f8a4 	bl	8000f80 <HAL_GetTick>
 8003e38:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e3a:	e009      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e3c:	f7fd f8a0 	bl	8000f80 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d902      	bls.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	74fb      	strb	r3, [r7, #19]
        break;
 8003e4e:	e005      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e50:	4b31      	ldr	r3, [pc, #196]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d0ef      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003e5c:	7cfb      	ldrb	r3, [r7, #19]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d15c      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e62:	4b2c      	ldr	r3, [pc, #176]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e6c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d01f      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d019      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e80:	4b24      	ldr	r3, [pc, #144]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e8c:	4b21      	ldr	r3, [pc, #132]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e92:	4a20      	ldr	r2, [pc, #128]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e9c:	4b1d      	ldr	r3, [pc, #116]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea2:	4a1c      	ldr	r2, [pc, #112]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ea4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003eac:	4a19      	ldr	r2, [pc, #100]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d016      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ebe:	f7fd f85f 	bl	8000f80 <HAL_GetTick>
 8003ec2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ec4:	e00b      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ec6:	f7fd f85b 	bl	8000f80 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d902      	bls.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	74fb      	strb	r3, [r7, #19]
            break;
 8003edc:	e006      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ede:	4b0d      	ldr	r3, [pc, #52]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0ec      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003eec:	7cfb      	ldrb	r3, [r7, #19]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10c      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ef2:	4b08      	ldr	r3, [pc, #32]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f02:	4904      	ldr	r1, [pc, #16]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f0a:	e009      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f0c:	7cfb      	ldrb	r3, [r7, #19]
 8003f0e:	74bb      	strb	r3, [r7, #18]
 8003f10:	e006      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003f12:	bf00      	nop
 8003f14:	40021000 	.word	0x40021000
 8003f18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f1c:	7cfb      	ldrb	r3, [r7, #19]
 8003f1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f20:	7c7b      	ldrb	r3, [r7, #17]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d105      	bne.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f26:	4b9e      	ldr	r3, [pc, #632]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f2a:	4a9d      	ldr	r2, [pc, #628]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f30:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00a      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f3e:	4b98      	ldr	r3, [pc, #608]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f44:	f023 0203 	bic.w	r2, r3, #3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4c:	4994      	ldr	r1, [pc, #592]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00a      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f60:	4b8f      	ldr	r3, [pc, #572]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f66:	f023 020c 	bic.w	r2, r3, #12
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6e:	498c      	ldr	r1, [pc, #560]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0304 	and.w	r3, r3, #4
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f82:	4b87      	ldr	r3, [pc, #540]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f88:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f90:	4983      	ldr	r1, [pc, #524]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0308 	and.w	r3, r3, #8
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00a      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fa4:	4b7e      	ldr	r3, [pc, #504]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003faa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb2:	497b      	ldr	r1, [pc, #492]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0310 	and.w	r3, r3, #16
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00a      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003fc6:	4b76      	ldr	r3, [pc, #472]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fd4:	4972      	ldr	r1, [pc, #456]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0320 	and.w	r3, r3, #32
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00a      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fe8:	4b6d      	ldr	r3, [pc, #436]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff6:	496a      	ldr	r1, [pc, #424]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00a      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800400a:	4b65      	ldr	r3, [pc, #404]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800400c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004010:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004018:	4961      	ldr	r1, [pc, #388]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800401a:	4313      	orrs	r3, r2
 800401c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00a      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800402c:	4b5c      	ldr	r3, [pc, #368]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800402e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004032:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800403a:	4959      	ldr	r1, [pc, #356]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800403c:	4313      	orrs	r3, r2
 800403e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00a      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800404e:	4b54      	ldr	r3, [pc, #336]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004054:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800405c:	4950      	ldr	r1, [pc, #320]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800405e:	4313      	orrs	r3, r2
 8004060:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00a      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004070:	4b4b      	ldr	r3, [pc, #300]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004076:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407e:	4948      	ldr	r1, [pc, #288]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004080:	4313      	orrs	r3, r2
 8004082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00a      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004092:	4b43      	ldr	r3, [pc, #268]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004098:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a0:	493f      	ldr	r1, [pc, #252]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d028      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040b4:	4b3a      	ldr	r3, [pc, #232]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040c2:	4937      	ldr	r1, [pc, #220]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040d2:	d106      	bne.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040d4:	4b32      	ldr	r3, [pc, #200]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	4a31      	ldr	r2, [pc, #196]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040de:	60d3      	str	r3, [r2, #12]
 80040e0:	e011      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040ea:	d10c      	bne.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	3304      	adds	r3, #4
 80040f0:	2101      	movs	r1, #1
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 f8c8 	bl	8004288 <RCCEx_PLLSAI1_Config>
 80040f8:	4603      	mov	r3, r0
 80040fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80040fc:	7cfb      	ldrb	r3, [r7, #19]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8004102:	7cfb      	ldrb	r3, [r7, #19]
 8004104:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d028      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004112:	4b23      	ldr	r3, [pc, #140]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004118:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004120:	491f      	ldr	r1, [pc, #124]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004130:	d106      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004132:	4b1b      	ldr	r3, [pc, #108]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	4a1a      	ldr	r2, [pc, #104]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004138:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800413c:	60d3      	str	r3, [r2, #12]
 800413e:	e011      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004144:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004148:	d10c      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	3304      	adds	r3, #4
 800414e:	2101      	movs	r1, #1
 8004150:	4618      	mov	r0, r3
 8004152:	f000 f899 	bl	8004288 <RCCEx_PLLSAI1_Config>
 8004156:	4603      	mov	r3, r0
 8004158:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800415a:	7cfb      	ldrb	r3, [r7, #19]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004160:	7cfb      	ldrb	r3, [r7, #19]
 8004162:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d02b      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004170:	4b0b      	ldr	r3, [pc, #44]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004176:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800417e:	4908      	ldr	r1, [pc, #32]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004180:	4313      	orrs	r3, r2
 8004182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800418a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800418e:	d109      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004190:	4b03      	ldr	r3, [pc, #12]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	4a02      	ldr	r2, [pc, #8]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004196:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800419a:	60d3      	str	r3, [r2, #12]
 800419c:	e014      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800419e:	bf00      	nop
 80041a0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041ac:	d10c      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	3304      	adds	r3, #4
 80041b2:	2101      	movs	r1, #1
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 f867 	bl	8004288 <RCCEx_PLLSAI1_Config>
 80041ba:	4603      	mov	r3, r0
 80041bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041be:	7cfb      	ldrb	r3, [r7, #19]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80041c4:	7cfb      	ldrb	r3, [r7, #19]
 80041c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d02f      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041d4:	4b2b      	ldr	r3, [pc, #172]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041e2:	4928      	ldr	r1, [pc, #160]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041f2:	d10d      	bne.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	3304      	adds	r3, #4
 80041f8:	2102      	movs	r1, #2
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 f844 	bl	8004288 <RCCEx_PLLSAI1_Config>
 8004200:	4603      	mov	r3, r0
 8004202:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004204:	7cfb      	ldrb	r3, [r7, #19]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d014      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800420a:	7cfb      	ldrb	r3, [r7, #19]
 800420c:	74bb      	strb	r3, [r7, #18]
 800420e:	e011      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004214:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004218:	d10c      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	3320      	adds	r3, #32
 800421e:	2102      	movs	r1, #2
 8004220:	4618      	mov	r0, r3
 8004222:	f000 f921 	bl	8004468 <RCCEx_PLLSAI2_Config>
 8004226:	4603      	mov	r3, r0
 8004228:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800422a:	7cfb      	ldrb	r3, [r7, #19]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004230:	7cfb      	ldrb	r3, [r7, #19]
 8004232:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00a      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004240:	4b10      	ldr	r3, [pc, #64]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004246:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800424e:	490d      	ldr	r1, [pc, #52]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004250:	4313      	orrs	r3, r2
 8004252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00b      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004262:	4b08      	ldr	r3, [pc, #32]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004268:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004272:	4904      	ldr	r1, [pc, #16]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004274:	4313      	orrs	r3, r2
 8004276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800427a:	7cbb      	ldrb	r3, [r7, #18]
}
 800427c:	4618      	mov	r0, r3
 800427e:	3718      	adds	r7, #24
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	40021000 	.word	0x40021000

08004288 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004296:	4b73      	ldr	r3, [pc, #460]	; (8004464 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d018      	beq.n	80042d4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80042a2:	4b70      	ldr	r3, [pc, #448]	; (8004464 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	f003 0203 	and.w	r2, r3, #3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d10d      	bne.n	80042ce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
       ||
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d009      	beq.n	80042ce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80042ba:	4b6a      	ldr	r3, [pc, #424]	; (8004464 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	091b      	lsrs	r3, r3, #4
 80042c0:	f003 0307 	and.w	r3, r3, #7
 80042c4:	1c5a      	adds	r2, r3, #1
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
       ||
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d044      	beq.n	8004358 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	73fb      	strb	r3, [r7, #15]
 80042d2:	e041      	b.n	8004358 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d00c      	beq.n	80042f6 <RCCEx_PLLSAI1_Config+0x6e>
 80042dc:	2b03      	cmp	r3, #3
 80042de:	d013      	beq.n	8004308 <RCCEx_PLLSAI1_Config+0x80>
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d120      	bne.n	8004326 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80042e4:	4b5f      	ldr	r3, [pc, #380]	; (8004464 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d11d      	bne.n	800432c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042f4:	e01a      	b.n	800432c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042f6:	4b5b      	ldr	r3, [pc, #364]	; (8004464 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d116      	bne.n	8004330 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004306:	e013      	b.n	8004330 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004308:	4b56      	ldr	r3, [pc, #344]	; (8004464 <RCCEx_PLLSAI1_Config+0x1dc>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10f      	bne.n	8004334 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004314:	4b53      	ldr	r3, [pc, #332]	; (8004464 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d109      	bne.n	8004334 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004324:	e006      	b.n	8004334 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	73fb      	strb	r3, [r7, #15]
      break;
 800432a:	e004      	b.n	8004336 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800432c:	bf00      	nop
 800432e:	e002      	b.n	8004336 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004330:	bf00      	nop
 8004332:	e000      	b.n	8004336 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004334:	bf00      	nop
    }

    if(status == HAL_OK)
 8004336:	7bfb      	ldrb	r3, [r7, #15]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10d      	bne.n	8004358 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800433c:	4b49      	ldr	r3, [pc, #292]	; (8004464 <RCCEx_PLLSAI1_Config+0x1dc>)
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6819      	ldr	r1, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	3b01      	subs	r3, #1
 800434e:	011b      	lsls	r3, r3, #4
 8004350:	430b      	orrs	r3, r1
 8004352:	4944      	ldr	r1, [pc, #272]	; (8004464 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004354:	4313      	orrs	r3, r2
 8004356:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004358:	7bfb      	ldrb	r3, [r7, #15]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d17d      	bne.n	800445a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800435e:	4b41      	ldr	r3, [pc, #260]	; (8004464 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a40      	ldr	r2, [pc, #256]	; (8004464 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004364:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004368:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800436a:	f7fc fe09 	bl	8000f80 <HAL_GetTick>
 800436e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004370:	e009      	b.n	8004386 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004372:	f7fc fe05 	bl	8000f80 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b02      	cmp	r3, #2
 800437e:	d902      	bls.n	8004386 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	73fb      	strb	r3, [r7, #15]
        break;
 8004384:	e005      	b.n	8004392 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004386:	4b37      	ldr	r3, [pc, #220]	; (8004464 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1ef      	bne.n	8004372 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004392:	7bfb      	ldrb	r3, [r7, #15]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d160      	bne.n	800445a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d111      	bne.n	80043c2 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800439e:	4b31      	ldr	r3, [pc, #196]	; (8004464 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80043a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	6892      	ldr	r2, [r2, #8]
 80043ae:	0211      	lsls	r1, r2, #8
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	68d2      	ldr	r2, [r2, #12]
 80043b4:	0912      	lsrs	r2, r2, #4
 80043b6:	0452      	lsls	r2, r2, #17
 80043b8:	430a      	orrs	r2, r1
 80043ba:	492a      	ldr	r1, [pc, #168]	; (8004464 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	610b      	str	r3, [r1, #16]
 80043c0:	e027      	b.n	8004412 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d112      	bne.n	80043ee <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043c8:	4b26      	ldr	r3, [pc, #152]	; (8004464 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80043d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6892      	ldr	r2, [r2, #8]
 80043d8:	0211      	lsls	r1, r2, #8
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6912      	ldr	r2, [r2, #16]
 80043de:	0852      	lsrs	r2, r2, #1
 80043e0:	3a01      	subs	r2, #1
 80043e2:	0552      	lsls	r2, r2, #21
 80043e4:	430a      	orrs	r2, r1
 80043e6:	491f      	ldr	r1, [pc, #124]	; (8004464 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	610b      	str	r3, [r1, #16]
 80043ec:	e011      	b.n	8004412 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043ee:	4b1d      	ldr	r3, [pc, #116]	; (8004464 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80043f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6892      	ldr	r2, [r2, #8]
 80043fe:	0211      	lsls	r1, r2, #8
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6952      	ldr	r2, [r2, #20]
 8004404:	0852      	lsrs	r2, r2, #1
 8004406:	3a01      	subs	r2, #1
 8004408:	0652      	lsls	r2, r2, #25
 800440a:	430a      	orrs	r2, r1
 800440c:	4915      	ldr	r1, [pc, #84]	; (8004464 <RCCEx_PLLSAI1_Config+0x1dc>)
 800440e:	4313      	orrs	r3, r2
 8004410:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004412:	4b14      	ldr	r3, [pc, #80]	; (8004464 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a13      	ldr	r2, [pc, #76]	; (8004464 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004418:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800441c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800441e:	f7fc fdaf 	bl	8000f80 <HAL_GetTick>
 8004422:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004424:	e009      	b.n	800443a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004426:	f7fc fdab 	bl	8000f80 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d902      	bls.n	800443a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	73fb      	strb	r3, [r7, #15]
          break;
 8004438:	e005      	b.n	8004446 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800443a:	4b0a      	ldr	r3, [pc, #40]	; (8004464 <RCCEx_PLLSAI1_Config+0x1dc>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d0ef      	beq.n	8004426 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004446:	7bfb      	ldrb	r3, [r7, #15]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d106      	bne.n	800445a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800444c:	4b05      	ldr	r3, [pc, #20]	; (8004464 <RCCEx_PLLSAI1_Config+0x1dc>)
 800444e:	691a      	ldr	r2, [r3, #16]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	4903      	ldr	r1, [pc, #12]	; (8004464 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004456:	4313      	orrs	r3, r2
 8004458:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800445a:	7bfb      	ldrb	r3, [r7, #15]
}
 800445c:	4618      	mov	r0, r3
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	40021000 	.word	0x40021000

08004468 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004472:	2300      	movs	r3, #0
 8004474:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004476:	4b68      	ldr	r3, [pc, #416]	; (8004618 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	f003 0303 	and.w	r3, r3, #3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d018      	beq.n	80044b4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004482:	4b65      	ldr	r3, [pc, #404]	; (8004618 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	f003 0203 	and.w	r2, r3, #3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	429a      	cmp	r2, r3
 8004490:	d10d      	bne.n	80044ae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
       ||
 8004496:	2b00      	cmp	r3, #0
 8004498:	d009      	beq.n	80044ae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800449a:	4b5f      	ldr	r3, [pc, #380]	; (8004618 <RCCEx_PLLSAI2_Config+0x1b0>)
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	091b      	lsrs	r3, r3, #4
 80044a0:	f003 0307 	and.w	r3, r3, #7
 80044a4:	1c5a      	adds	r2, r3, #1
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
       ||
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d044      	beq.n	8004538 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	73fb      	strb	r3, [r7, #15]
 80044b2:	e041      	b.n	8004538 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d00c      	beq.n	80044d6 <RCCEx_PLLSAI2_Config+0x6e>
 80044bc:	2b03      	cmp	r3, #3
 80044be:	d013      	beq.n	80044e8 <RCCEx_PLLSAI2_Config+0x80>
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d120      	bne.n	8004506 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044c4:	4b54      	ldr	r3, [pc, #336]	; (8004618 <RCCEx_PLLSAI2_Config+0x1b0>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d11d      	bne.n	800450c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044d4:	e01a      	b.n	800450c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044d6:	4b50      	ldr	r3, [pc, #320]	; (8004618 <RCCEx_PLLSAI2_Config+0x1b0>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d116      	bne.n	8004510 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044e6:	e013      	b.n	8004510 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044e8:	4b4b      	ldr	r3, [pc, #300]	; (8004618 <RCCEx_PLLSAI2_Config+0x1b0>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10f      	bne.n	8004514 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044f4:	4b48      	ldr	r3, [pc, #288]	; (8004618 <RCCEx_PLLSAI2_Config+0x1b0>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d109      	bne.n	8004514 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004504:	e006      	b.n	8004514 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	73fb      	strb	r3, [r7, #15]
      break;
 800450a:	e004      	b.n	8004516 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800450c:	bf00      	nop
 800450e:	e002      	b.n	8004516 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004510:	bf00      	nop
 8004512:	e000      	b.n	8004516 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004514:	bf00      	nop
    }

    if(status == HAL_OK)
 8004516:	7bfb      	ldrb	r3, [r7, #15]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10d      	bne.n	8004538 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800451c:	4b3e      	ldr	r3, [pc, #248]	; (8004618 <RCCEx_PLLSAI2_Config+0x1b0>)
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6819      	ldr	r1, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	3b01      	subs	r3, #1
 800452e:	011b      	lsls	r3, r3, #4
 8004530:	430b      	orrs	r3, r1
 8004532:	4939      	ldr	r1, [pc, #228]	; (8004618 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004534:	4313      	orrs	r3, r2
 8004536:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004538:	7bfb      	ldrb	r3, [r7, #15]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d167      	bne.n	800460e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800453e:	4b36      	ldr	r3, [pc, #216]	; (8004618 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a35      	ldr	r2, [pc, #212]	; (8004618 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004544:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004548:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800454a:	f7fc fd19 	bl	8000f80 <HAL_GetTick>
 800454e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004550:	e009      	b.n	8004566 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004552:	f7fc fd15 	bl	8000f80 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d902      	bls.n	8004566 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	73fb      	strb	r3, [r7, #15]
        break;
 8004564:	e005      	b.n	8004572 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004566:	4b2c      	ldr	r3, [pc, #176]	; (8004618 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1ef      	bne.n	8004552 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004572:	7bfb      	ldrb	r3, [r7, #15]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d14a      	bne.n	800460e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d111      	bne.n	80045a2 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800457e:	4b26      	ldr	r3, [pc, #152]	; (8004618 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004586:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	6892      	ldr	r2, [r2, #8]
 800458e:	0211      	lsls	r1, r2, #8
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	68d2      	ldr	r2, [r2, #12]
 8004594:	0912      	lsrs	r2, r2, #4
 8004596:	0452      	lsls	r2, r2, #17
 8004598:	430a      	orrs	r2, r1
 800459a:	491f      	ldr	r1, [pc, #124]	; (8004618 <RCCEx_PLLSAI2_Config+0x1b0>)
 800459c:	4313      	orrs	r3, r2
 800459e:	614b      	str	r3, [r1, #20]
 80045a0:	e011      	b.n	80045c6 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045a2:	4b1d      	ldr	r3, [pc, #116]	; (8004618 <RCCEx_PLLSAI2_Config+0x1b0>)
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80045aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	6892      	ldr	r2, [r2, #8]
 80045b2:	0211      	lsls	r1, r2, #8
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	6912      	ldr	r2, [r2, #16]
 80045b8:	0852      	lsrs	r2, r2, #1
 80045ba:	3a01      	subs	r2, #1
 80045bc:	0652      	lsls	r2, r2, #25
 80045be:	430a      	orrs	r2, r1
 80045c0:	4915      	ldr	r1, [pc, #84]	; (8004618 <RCCEx_PLLSAI2_Config+0x1b0>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80045c6:	4b14      	ldr	r3, [pc, #80]	; (8004618 <RCCEx_PLLSAI2_Config+0x1b0>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a13      	ldr	r2, [pc, #76]	; (8004618 <RCCEx_PLLSAI2_Config+0x1b0>)
 80045cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045d0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d2:	f7fc fcd5 	bl	8000f80 <HAL_GetTick>
 80045d6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045d8:	e009      	b.n	80045ee <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045da:	f7fc fcd1 	bl	8000f80 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d902      	bls.n	80045ee <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	73fb      	strb	r3, [r7, #15]
          break;
 80045ec:	e005      	b.n	80045fa <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045ee:	4b0a      	ldr	r3, [pc, #40]	; (8004618 <RCCEx_PLLSAI2_Config+0x1b0>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d0ef      	beq.n	80045da <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d106      	bne.n	800460e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004600:	4b05      	ldr	r3, [pc, #20]	; (8004618 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004602:	695a      	ldr	r2, [r3, #20]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	4903      	ldr	r1, [pc, #12]	; (8004618 <RCCEx_PLLSAI2_Config+0x1b0>)
 800460a:	4313      	orrs	r3, r2
 800460c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800460e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004610:	4618      	mov	r0, r3
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	40021000 	.word	0x40021000

0800461c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e040      	b.n	80046b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004632:	2b00      	cmp	r3, #0
 8004634:	d106      	bne.n	8004644 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f001 f9c8 	bl	80059d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2224      	movs	r2, #36	; 0x24
 8004648:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 0201 	bic.w	r2, r2, #1
 8004658:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f8c0 	bl	80047e0 <UART_SetConfig>
 8004660:	4603      	mov	r3, r0
 8004662:	2b01      	cmp	r3, #1
 8004664:	d101      	bne.n	800466a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e022      	b.n	80046b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	2b00      	cmp	r3, #0
 8004670:	d002      	beq.n	8004678 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 fbfc 	bl	8004e70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004686:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	689a      	ldr	r2, [r3, #8]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004696:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f042 0201 	orr.w	r2, r2, #1
 80046a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 fc83 	bl	8004fb4 <UART_CheckIdleState>
 80046ae:	4603      	mov	r3, r0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b08a      	sub	sp, #40	; 0x28
 80046bc:	af02      	add	r7, sp, #8
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	603b      	str	r3, [r7, #0]
 80046c4:	4613      	mov	r3, r2
 80046c6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046cc:	2b20      	cmp	r3, #32
 80046ce:	f040 8081 	bne.w	80047d4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <HAL_UART_Transmit+0x26>
 80046d8:	88fb      	ldrh	r3, [r7, #6]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e079      	b.n	80047d6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d101      	bne.n	80046f0 <HAL_UART_Transmit+0x38>
 80046ec:	2302      	movs	r3, #2
 80046ee:	e072      	b.n	80047d6 <HAL_UART_Transmit+0x11e>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2221      	movs	r2, #33	; 0x21
 8004702:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004704:	f7fc fc3c 	bl	8000f80 <HAL_GetTick>
 8004708:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	88fa      	ldrh	r2, [r7, #6]
 800470e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	88fa      	ldrh	r2, [r7, #6]
 8004716:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004722:	d108      	bne.n	8004736 <HAL_UART_Transmit+0x7e>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d104      	bne.n	8004736 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800472c:	2300      	movs	r3, #0
 800472e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	61bb      	str	r3, [r7, #24]
 8004734:	e003      	b.n	800473e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800473a:	2300      	movs	r3, #0
 800473c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800473e:	e02d      	b.n	800479c <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	9300      	str	r3, [sp, #0]
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	2200      	movs	r2, #0
 8004748:	2180      	movs	r1, #128	; 0x80
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f000 fc77 	bl	800503e <UART_WaitOnFlagUntilTimeout>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e03d      	b.n	80047d6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10b      	bne.n	8004778 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	881a      	ldrh	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800476c:	b292      	uxth	r2, r2
 800476e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	3302      	adds	r3, #2
 8004774:	61bb      	str	r3, [r7, #24]
 8004776:	e008      	b.n	800478a <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	781a      	ldrb	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	b292      	uxth	r2, r2
 8004782:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	3301      	adds	r3, #1
 8004788:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004790:	b29b      	uxth	r3, r3
 8004792:	3b01      	subs	r3, #1
 8004794:	b29a      	uxth	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1cb      	bne.n	8004740 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	2200      	movs	r2, #0
 80047b0:	2140      	movs	r1, #64	; 0x40
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 fc43 	bl	800503e <UART_WaitOnFlagUntilTimeout>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e009      	b.n	80047d6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2220      	movs	r2, #32
 80047c6:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80047d0:	2300      	movs	r3, #0
 80047d2:	e000      	b.n	80047d6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80047d4:	2302      	movs	r3, #2
  }
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3720      	adds	r7, #32
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
	...

080047e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047e0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80047e4:	b088      	sub	sp, #32
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80047ea:	2300      	movs	r3, #0
 80047ec:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80047ee:	2300      	movs	r3, #0
 80047f0:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80047f2:	2300      	movs	r3, #0
 80047f4:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	689a      	ldr	r2, [r3, #8]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	431a      	orrs	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	4313      	orrs	r3, r2
 800480c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	4bac      	ldr	r3, [pc, #688]	; (8004ac8 <UART_SetConfig+0x2e8>)
 8004816:	4013      	ands	r3, r2
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6812      	ldr	r2, [r2, #0]
 800481c:	69f9      	ldr	r1, [r7, #28]
 800481e:	430b      	orrs	r3, r1
 8004820:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68da      	ldr	r2, [r3, #12]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	430a      	orrs	r2, r1
 8004836:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4aa2      	ldr	r2, [pc, #648]	; (8004acc <UART_SetConfig+0x2ec>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d004      	beq.n	8004852 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	69fa      	ldr	r2, [r7, #28]
 800484e:	4313      	orrs	r3, r2
 8004850:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	69fa      	ldr	r2, [r7, #28]
 8004862:	430a      	orrs	r2, r1
 8004864:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a99      	ldr	r2, [pc, #612]	; (8004ad0 <UART_SetConfig+0x2f0>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d121      	bne.n	80048b4 <UART_SetConfig+0xd4>
 8004870:	4b98      	ldr	r3, [pc, #608]	; (8004ad4 <UART_SetConfig+0x2f4>)
 8004872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004876:	f003 0303 	and.w	r3, r3, #3
 800487a:	2b03      	cmp	r3, #3
 800487c:	d816      	bhi.n	80048ac <UART_SetConfig+0xcc>
 800487e:	a201      	add	r2, pc, #4	; (adr r2, 8004884 <UART_SetConfig+0xa4>)
 8004880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004884:	08004895 	.word	0x08004895
 8004888:	080048a1 	.word	0x080048a1
 800488c:	0800489b 	.word	0x0800489b
 8004890:	080048a7 	.word	0x080048a7
 8004894:	2301      	movs	r3, #1
 8004896:	76fb      	strb	r3, [r7, #27]
 8004898:	e0e8      	b.n	8004a6c <UART_SetConfig+0x28c>
 800489a:	2302      	movs	r3, #2
 800489c:	76fb      	strb	r3, [r7, #27]
 800489e:	e0e5      	b.n	8004a6c <UART_SetConfig+0x28c>
 80048a0:	2304      	movs	r3, #4
 80048a2:	76fb      	strb	r3, [r7, #27]
 80048a4:	e0e2      	b.n	8004a6c <UART_SetConfig+0x28c>
 80048a6:	2308      	movs	r3, #8
 80048a8:	76fb      	strb	r3, [r7, #27]
 80048aa:	e0df      	b.n	8004a6c <UART_SetConfig+0x28c>
 80048ac:	2310      	movs	r3, #16
 80048ae:	76fb      	strb	r3, [r7, #27]
 80048b0:	bf00      	nop
 80048b2:	e0db      	b.n	8004a6c <UART_SetConfig+0x28c>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a87      	ldr	r2, [pc, #540]	; (8004ad8 <UART_SetConfig+0x2f8>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d134      	bne.n	8004928 <UART_SetConfig+0x148>
 80048be:	4b85      	ldr	r3, [pc, #532]	; (8004ad4 <UART_SetConfig+0x2f4>)
 80048c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c4:	f003 030c 	and.w	r3, r3, #12
 80048c8:	2b0c      	cmp	r3, #12
 80048ca:	d829      	bhi.n	8004920 <UART_SetConfig+0x140>
 80048cc:	a201      	add	r2, pc, #4	; (adr r2, 80048d4 <UART_SetConfig+0xf4>)
 80048ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d2:	bf00      	nop
 80048d4:	08004909 	.word	0x08004909
 80048d8:	08004921 	.word	0x08004921
 80048dc:	08004921 	.word	0x08004921
 80048e0:	08004921 	.word	0x08004921
 80048e4:	08004915 	.word	0x08004915
 80048e8:	08004921 	.word	0x08004921
 80048ec:	08004921 	.word	0x08004921
 80048f0:	08004921 	.word	0x08004921
 80048f4:	0800490f 	.word	0x0800490f
 80048f8:	08004921 	.word	0x08004921
 80048fc:	08004921 	.word	0x08004921
 8004900:	08004921 	.word	0x08004921
 8004904:	0800491b 	.word	0x0800491b
 8004908:	2300      	movs	r3, #0
 800490a:	76fb      	strb	r3, [r7, #27]
 800490c:	e0ae      	b.n	8004a6c <UART_SetConfig+0x28c>
 800490e:	2302      	movs	r3, #2
 8004910:	76fb      	strb	r3, [r7, #27]
 8004912:	e0ab      	b.n	8004a6c <UART_SetConfig+0x28c>
 8004914:	2304      	movs	r3, #4
 8004916:	76fb      	strb	r3, [r7, #27]
 8004918:	e0a8      	b.n	8004a6c <UART_SetConfig+0x28c>
 800491a:	2308      	movs	r3, #8
 800491c:	76fb      	strb	r3, [r7, #27]
 800491e:	e0a5      	b.n	8004a6c <UART_SetConfig+0x28c>
 8004920:	2310      	movs	r3, #16
 8004922:	76fb      	strb	r3, [r7, #27]
 8004924:	bf00      	nop
 8004926:	e0a1      	b.n	8004a6c <UART_SetConfig+0x28c>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a6b      	ldr	r2, [pc, #428]	; (8004adc <UART_SetConfig+0x2fc>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d120      	bne.n	8004974 <UART_SetConfig+0x194>
 8004932:	4b68      	ldr	r3, [pc, #416]	; (8004ad4 <UART_SetConfig+0x2f4>)
 8004934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004938:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800493c:	2b10      	cmp	r3, #16
 800493e:	d00f      	beq.n	8004960 <UART_SetConfig+0x180>
 8004940:	2b10      	cmp	r3, #16
 8004942:	d802      	bhi.n	800494a <UART_SetConfig+0x16a>
 8004944:	2b00      	cmp	r3, #0
 8004946:	d005      	beq.n	8004954 <UART_SetConfig+0x174>
 8004948:	e010      	b.n	800496c <UART_SetConfig+0x18c>
 800494a:	2b20      	cmp	r3, #32
 800494c:	d005      	beq.n	800495a <UART_SetConfig+0x17a>
 800494e:	2b30      	cmp	r3, #48	; 0x30
 8004950:	d009      	beq.n	8004966 <UART_SetConfig+0x186>
 8004952:	e00b      	b.n	800496c <UART_SetConfig+0x18c>
 8004954:	2300      	movs	r3, #0
 8004956:	76fb      	strb	r3, [r7, #27]
 8004958:	e088      	b.n	8004a6c <UART_SetConfig+0x28c>
 800495a:	2302      	movs	r3, #2
 800495c:	76fb      	strb	r3, [r7, #27]
 800495e:	e085      	b.n	8004a6c <UART_SetConfig+0x28c>
 8004960:	2304      	movs	r3, #4
 8004962:	76fb      	strb	r3, [r7, #27]
 8004964:	e082      	b.n	8004a6c <UART_SetConfig+0x28c>
 8004966:	2308      	movs	r3, #8
 8004968:	76fb      	strb	r3, [r7, #27]
 800496a:	e07f      	b.n	8004a6c <UART_SetConfig+0x28c>
 800496c:	2310      	movs	r3, #16
 800496e:	76fb      	strb	r3, [r7, #27]
 8004970:	bf00      	nop
 8004972:	e07b      	b.n	8004a6c <UART_SetConfig+0x28c>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a59      	ldr	r2, [pc, #356]	; (8004ae0 <UART_SetConfig+0x300>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d120      	bne.n	80049c0 <UART_SetConfig+0x1e0>
 800497e:	4b55      	ldr	r3, [pc, #340]	; (8004ad4 <UART_SetConfig+0x2f4>)
 8004980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004984:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004988:	2b40      	cmp	r3, #64	; 0x40
 800498a:	d00f      	beq.n	80049ac <UART_SetConfig+0x1cc>
 800498c:	2b40      	cmp	r3, #64	; 0x40
 800498e:	d802      	bhi.n	8004996 <UART_SetConfig+0x1b6>
 8004990:	2b00      	cmp	r3, #0
 8004992:	d005      	beq.n	80049a0 <UART_SetConfig+0x1c0>
 8004994:	e010      	b.n	80049b8 <UART_SetConfig+0x1d8>
 8004996:	2b80      	cmp	r3, #128	; 0x80
 8004998:	d005      	beq.n	80049a6 <UART_SetConfig+0x1c6>
 800499a:	2bc0      	cmp	r3, #192	; 0xc0
 800499c:	d009      	beq.n	80049b2 <UART_SetConfig+0x1d2>
 800499e:	e00b      	b.n	80049b8 <UART_SetConfig+0x1d8>
 80049a0:	2300      	movs	r3, #0
 80049a2:	76fb      	strb	r3, [r7, #27]
 80049a4:	e062      	b.n	8004a6c <UART_SetConfig+0x28c>
 80049a6:	2302      	movs	r3, #2
 80049a8:	76fb      	strb	r3, [r7, #27]
 80049aa:	e05f      	b.n	8004a6c <UART_SetConfig+0x28c>
 80049ac:	2304      	movs	r3, #4
 80049ae:	76fb      	strb	r3, [r7, #27]
 80049b0:	e05c      	b.n	8004a6c <UART_SetConfig+0x28c>
 80049b2:	2308      	movs	r3, #8
 80049b4:	76fb      	strb	r3, [r7, #27]
 80049b6:	e059      	b.n	8004a6c <UART_SetConfig+0x28c>
 80049b8:	2310      	movs	r3, #16
 80049ba:	76fb      	strb	r3, [r7, #27]
 80049bc:	bf00      	nop
 80049be:	e055      	b.n	8004a6c <UART_SetConfig+0x28c>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a47      	ldr	r2, [pc, #284]	; (8004ae4 <UART_SetConfig+0x304>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d124      	bne.n	8004a14 <UART_SetConfig+0x234>
 80049ca:	4b42      	ldr	r3, [pc, #264]	; (8004ad4 <UART_SetConfig+0x2f4>)
 80049cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049d8:	d012      	beq.n	8004a00 <UART_SetConfig+0x220>
 80049da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049de:	d802      	bhi.n	80049e6 <UART_SetConfig+0x206>
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d007      	beq.n	80049f4 <UART_SetConfig+0x214>
 80049e4:	e012      	b.n	8004a0c <UART_SetConfig+0x22c>
 80049e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049ea:	d006      	beq.n	80049fa <UART_SetConfig+0x21a>
 80049ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049f0:	d009      	beq.n	8004a06 <UART_SetConfig+0x226>
 80049f2:	e00b      	b.n	8004a0c <UART_SetConfig+0x22c>
 80049f4:	2300      	movs	r3, #0
 80049f6:	76fb      	strb	r3, [r7, #27]
 80049f8:	e038      	b.n	8004a6c <UART_SetConfig+0x28c>
 80049fa:	2302      	movs	r3, #2
 80049fc:	76fb      	strb	r3, [r7, #27]
 80049fe:	e035      	b.n	8004a6c <UART_SetConfig+0x28c>
 8004a00:	2304      	movs	r3, #4
 8004a02:	76fb      	strb	r3, [r7, #27]
 8004a04:	e032      	b.n	8004a6c <UART_SetConfig+0x28c>
 8004a06:	2308      	movs	r3, #8
 8004a08:	76fb      	strb	r3, [r7, #27]
 8004a0a:	e02f      	b.n	8004a6c <UART_SetConfig+0x28c>
 8004a0c:	2310      	movs	r3, #16
 8004a0e:	76fb      	strb	r3, [r7, #27]
 8004a10:	bf00      	nop
 8004a12:	e02b      	b.n	8004a6c <UART_SetConfig+0x28c>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a2c      	ldr	r2, [pc, #176]	; (8004acc <UART_SetConfig+0x2ec>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d124      	bne.n	8004a68 <UART_SetConfig+0x288>
 8004a1e:	4b2d      	ldr	r3, [pc, #180]	; (8004ad4 <UART_SetConfig+0x2f4>)
 8004a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a2c:	d012      	beq.n	8004a54 <UART_SetConfig+0x274>
 8004a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a32:	d802      	bhi.n	8004a3a <UART_SetConfig+0x25a>
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d007      	beq.n	8004a48 <UART_SetConfig+0x268>
 8004a38:	e012      	b.n	8004a60 <UART_SetConfig+0x280>
 8004a3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a3e:	d006      	beq.n	8004a4e <UART_SetConfig+0x26e>
 8004a40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a44:	d009      	beq.n	8004a5a <UART_SetConfig+0x27a>
 8004a46:	e00b      	b.n	8004a60 <UART_SetConfig+0x280>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	76fb      	strb	r3, [r7, #27]
 8004a4c:	e00e      	b.n	8004a6c <UART_SetConfig+0x28c>
 8004a4e:	2302      	movs	r3, #2
 8004a50:	76fb      	strb	r3, [r7, #27]
 8004a52:	e00b      	b.n	8004a6c <UART_SetConfig+0x28c>
 8004a54:	2304      	movs	r3, #4
 8004a56:	76fb      	strb	r3, [r7, #27]
 8004a58:	e008      	b.n	8004a6c <UART_SetConfig+0x28c>
 8004a5a:	2308      	movs	r3, #8
 8004a5c:	76fb      	strb	r3, [r7, #27]
 8004a5e:	e005      	b.n	8004a6c <UART_SetConfig+0x28c>
 8004a60:	2310      	movs	r3, #16
 8004a62:	76fb      	strb	r3, [r7, #27]
 8004a64:	bf00      	nop
 8004a66:	e001      	b.n	8004a6c <UART_SetConfig+0x28c>
 8004a68:	2310      	movs	r3, #16
 8004a6a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a16      	ldr	r2, [pc, #88]	; (8004acc <UART_SetConfig+0x2ec>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	f040 80fa 	bne.w	8004c6c <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a78:	7efb      	ldrb	r3, [r7, #27]
 8004a7a:	2b08      	cmp	r3, #8
 8004a7c:	d836      	bhi.n	8004aec <UART_SetConfig+0x30c>
 8004a7e:	a201      	add	r2, pc, #4	; (adr r2, 8004a84 <UART_SetConfig+0x2a4>)
 8004a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a84:	08004aa9 	.word	0x08004aa9
 8004a88:	08004aed 	.word	0x08004aed
 8004a8c:	08004ab1 	.word	0x08004ab1
 8004a90:	08004aed 	.word	0x08004aed
 8004a94:	08004ab7 	.word	0x08004ab7
 8004a98:	08004aed 	.word	0x08004aed
 8004a9c:	08004aed 	.word	0x08004aed
 8004aa0:	08004aed 	.word	0x08004aed
 8004aa4:	08004abf 	.word	0x08004abf
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004aa8:	f7ff f87c 	bl	8003ba4 <HAL_RCC_GetPCLK1Freq>
 8004aac:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004aae:	e020      	b.n	8004af2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004ab0:	4b0d      	ldr	r3, [pc, #52]	; (8004ae8 <UART_SetConfig+0x308>)
 8004ab2:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ab4:	e01d      	b.n	8004af2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004ab6:	f7fe ffdf 	bl	8003a78 <HAL_RCC_GetSysClockFreq>
 8004aba:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004abc:	e019      	b.n	8004af2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004abe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ac2:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ac4:	e015      	b.n	8004af2 <UART_SetConfig+0x312>
 8004ac6:	bf00      	nop
 8004ac8:	efff69f3 	.word	0xefff69f3
 8004acc:	40008000 	.word	0x40008000
 8004ad0:	40013800 	.word	0x40013800
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	40004400 	.word	0x40004400
 8004adc:	40004800 	.word	0x40004800
 8004ae0:	40004c00 	.word	0x40004c00
 8004ae4:	40005000 	.word	0x40005000
 8004ae8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	74fb      	strb	r3, [r7, #19]
        break;
 8004af0:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 81ac 	beq.w	8004e52 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	4613      	mov	r3, r2
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	4413      	add	r3, r2
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d305      	bcc.n	8004b16 <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d902      	bls.n	8004b1c <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	74fb      	strb	r3, [r7, #19]
 8004b1a:	e19a      	b.n	8004e52 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8004b1c:	7efb      	ldrb	r3, [r7, #27]
 8004b1e:	2b08      	cmp	r3, #8
 8004b20:	f200 8091 	bhi.w	8004c46 <UART_SetConfig+0x466>
 8004b24:	a201      	add	r2, pc, #4	; (adr r2, 8004b2c <UART_SetConfig+0x34c>)
 8004b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2a:	bf00      	nop
 8004b2c:	08004b51 	.word	0x08004b51
 8004b30:	08004c47 	.word	0x08004c47
 8004b34:	08004b9d 	.word	0x08004b9d
 8004b38:	08004c47 	.word	0x08004c47
 8004b3c:	08004bd1 	.word	0x08004bd1
 8004b40:	08004c47 	.word	0x08004c47
 8004b44:	08004c47 	.word	0x08004c47
 8004b48:	08004c47 	.word	0x08004c47
 8004b4c:	08004c1d 	.word	0x08004c1d
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004b50:	f7ff f828 	bl	8003ba4 <HAL_RCC_GetPCLK1Freq>
 8004b54:	4603      	mov	r3, r0
 8004b56:	4619      	mov	r1, r3
 8004b58:	f04f 0200 	mov.w	r2, #0
 8004b5c:	f04f 0300 	mov.w	r3, #0
 8004b60:	f04f 0400 	mov.w	r4, #0
 8004b64:	0214      	lsls	r4, r2, #8
 8004b66:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004b6a:	020b      	lsls	r3, r1, #8
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6852      	ldr	r2, [r2, #4]
 8004b70:	0852      	lsrs	r2, r2, #1
 8004b72:	4611      	mov	r1, r2
 8004b74:	f04f 0200 	mov.w	r2, #0
 8004b78:	eb13 0b01 	adds.w	fp, r3, r1
 8004b7c:	eb44 0c02 	adc.w	ip, r4, r2
 8004b80:	4658      	mov	r0, fp
 8004b82:	4661      	mov	r1, ip
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f04f 0400 	mov.w	r4, #0
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	4623      	mov	r3, r4
 8004b90:	f7fc f80a 	bl	8000ba8 <__aeabi_uldivmod>
 8004b94:	4603      	mov	r3, r0
 8004b96:	460c      	mov	r4, r1
 8004b98:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004b9a:	e057      	b.n	8004c4c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	085b      	lsrs	r3, r3, #1
 8004ba2:	f04f 0400 	mov.w	r4, #0
 8004ba6:	49b1      	ldr	r1, [pc, #708]	; (8004e6c <UART_SetConfig+0x68c>)
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	eb13 0b01 	adds.w	fp, r3, r1
 8004bb0:	eb44 0c02 	adc.w	ip, r4, r2
 8004bb4:	4658      	mov	r0, fp
 8004bb6:	4661      	mov	r1, ip
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f04f 0400 	mov.w	r4, #0
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	4623      	mov	r3, r4
 8004bc4:	f7fb fff0 	bl	8000ba8 <__aeabi_uldivmod>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	460c      	mov	r4, r1
 8004bcc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004bce:	e03d      	b.n	8004c4c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004bd0:	f7fe ff52 	bl	8003a78 <HAL_RCC_GetSysClockFreq>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	f04f 0200 	mov.w	r2, #0
 8004bdc:	f04f 0300 	mov.w	r3, #0
 8004be0:	f04f 0400 	mov.w	r4, #0
 8004be4:	0214      	lsls	r4, r2, #8
 8004be6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004bea:	020b      	lsls	r3, r1, #8
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	6852      	ldr	r2, [r2, #4]
 8004bf0:	0852      	lsrs	r2, r2, #1
 8004bf2:	4611      	mov	r1, r2
 8004bf4:	f04f 0200 	mov.w	r2, #0
 8004bf8:	eb13 0b01 	adds.w	fp, r3, r1
 8004bfc:	eb44 0c02 	adc.w	ip, r4, r2
 8004c00:	4658      	mov	r0, fp
 8004c02:	4661      	mov	r1, ip
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f04f 0400 	mov.w	r4, #0
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	4623      	mov	r3, r4
 8004c10:	f7fb ffca 	bl	8000ba8 <__aeabi_uldivmod>
 8004c14:	4603      	mov	r3, r0
 8004c16:	460c      	mov	r4, r1
 8004c18:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004c1a:	e017      	b.n	8004c4c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	085b      	lsrs	r3, r3, #1
 8004c22:	f04f 0400 	mov.w	r4, #0
 8004c26:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004c2a:	f144 0100 	adc.w	r1, r4, #0
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f04f 0400 	mov.w	r4, #0
 8004c36:	461a      	mov	r2, r3
 8004c38:	4623      	mov	r3, r4
 8004c3a:	f7fb ffb5 	bl	8000ba8 <__aeabi_uldivmod>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	460c      	mov	r4, r1
 8004c42:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004c44:	e002      	b.n	8004c4c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	74fb      	strb	r3, [r7, #19]
            break;
 8004c4a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c52:	d308      	bcc.n	8004c66 <UART_SetConfig+0x486>
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c5a:	d204      	bcs.n	8004c66 <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	60da      	str	r2, [r3, #12]
 8004c64:	e0f5      	b.n	8004e52 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	74fb      	strb	r3, [r7, #19]
 8004c6a:	e0f2      	b.n	8004e52 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	69db      	ldr	r3, [r3, #28]
 8004c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c74:	d17f      	bne.n	8004d76 <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8004c76:	7efb      	ldrb	r3, [r7, #27]
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	d85c      	bhi.n	8004d36 <UART_SetConfig+0x556>
 8004c7c:	a201      	add	r2, pc, #4	; (adr r2, 8004c84 <UART_SetConfig+0x4a4>)
 8004c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c82:	bf00      	nop
 8004c84:	08004ca9 	.word	0x08004ca9
 8004c88:	08004cc7 	.word	0x08004cc7
 8004c8c:	08004ce5 	.word	0x08004ce5
 8004c90:	08004d37 	.word	0x08004d37
 8004c94:	08004d01 	.word	0x08004d01
 8004c98:	08004d37 	.word	0x08004d37
 8004c9c:	08004d37 	.word	0x08004d37
 8004ca0:	08004d37 	.word	0x08004d37
 8004ca4:	08004d1f 	.word	0x08004d1f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004ca8:	f7fe ff7c 	bl	8003ba4 <HAL_RCC_GetPCLK1Freq>
 8004cac:	4603      	mov	r3, r0
 8004cae:	005a      	lsls	r2, r3, #1
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	085b      	lsrs	r3, r3, #1
 8004cb6:	441a      	add	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004cc4:	e03a      	b.n	8004d3c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004cc6:	f7fe ff83 	bl	8003bd0 <HAL_RCC_GetPCLK2Freq>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	005a      	lsls	r2, r3, #1
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	085b      	lsrs	r3, r3, #1
 8004cd4:	441a      	add	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ce2:	e02b      	b.n	8004d3c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	085b      	lsrs	r3, r3, #1
 8004cea:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004cee:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	6852      	ldr	r2, [r2, #4]
 8004cf6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004cfe:	e01d      	b.n	8004d3c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004d00:	f7fe feba 	bl	8003a78 <HAL_RCC_GetSysClockFreq>
 8004d04:	4603      	mov	r3, r0
 8004d06:	005a      	lsls	r2, r3, #1
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	085b      	lsrs	r3, r3, #1
 8004d0e:	441a      	add	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004d1c:	e00e      	b.n	8004d3c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	085b      	lsrs	r3, r3, #1
 8004d24:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004d34:	e002      	b.n	8004d3c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	74fb      	strb	r3, [r7, #19]
        break;
 8004d3a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	2b0f      	cmp	r3, #15
 8004d40:	d916      	bls.n	8004d70 <UART_SetConfig+0x590>
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d48:	d212      	bcs.n	8004d70 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	f023 030f 	bic.w	r3, r3, #15
 8004d52:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	085b      	lsrs	r3, r3, #1
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	f003 0307 	and.w	r3, r3, #7
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	897b      	ldrh	r3, [r7, #10]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	897a      	ldrh	r2, [r7, #10]
 8004d6c:	60da      	str	r2, [r3, #12]
 8004d6e:	e070      	b.n	8004e52 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	74fb      	strb	r3, [r7, #19]
 8004d74:	e06d      	b.n	8004e52 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8004d76:	7efb      	ldrb	r3, [r7, #27]
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d859      	bhi.n	8004e30 <UART_SetConfig+0x650>
 8004d7c:	a201      	add	r2, pc, #4	; (adr r2, 8004d84 <UART_SetConfig+0x5a4>)
 8004d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d82:	bf00      	nop
 8004d84:	08004da9 	.word	0x08004da9
 8004d88:	08004dc5 	.word	0x08004dc5
 8004d8c:	08004de1 	.word	0x08004de1
 8004d90:	08004e31 	.word	0x08004e31
 8004d94:	08004dfd 	.word	0x08004dfd
 8004d98:	08004e31 	.word	0x08004e31
 8004d9c:	08004e31 	.word	0x08004e31
 8004da0:	08004e31 	.word	0x08004e31
 8004da4:	08004e19 	.word	0x08004e19
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004da8:	f7fe fefc 	bl	8003ba4 <HAL_RCC_GetPCLK1Freq>
 8004dac:	4602      	mov	r2, r0
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	085b      	lsrs	r3, r3, #1
 8004db4:	441a      	add	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004dc2:	e038      	b.n	8004e36 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004dc4:	f7fe ff04 	bl	8003bd0 <HAL_RCC_GetPCLK2Freq>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	085b      	lsrs	r3, r3, #1
 8004dd0:	441a      	add	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004dde:	e02a      	b.n	8004e36 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	085b      	lsrs	r3, r3, #1
 8004de6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004dea:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6852      	ldr	r2, [r2, #4]
 8004df2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004dfa:	e01c      	b.n	8004e36 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004dfc:	f7fe fe3c 	bl	8003a78 <HAL_RCC_GetSysClockFreq>
 8004e00:	4602      	mov	r2, r0
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	085b      	lsrs	r3, r3, #1
 8004e08:	441a      	add	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e16:	e00e      	b.n	8004e36 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	085b      	lsrs	r3, r3, #1
 8004e1e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e2e:	e002      	b.n	8004e36 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	74fb      	strb	r3, [r7, #19]
        break;
 8004e34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	2b0f      	cmp	r3, #15
 8004e3a:	d908      	bls.n	8004e4e <UART_SetConfig+0x66e>
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e42:	d204      	bcs.n	8004e4e <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	60da      	str	r2, [r3, #12]
 8004e4c:	e001      	b.n	8004e52 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004e5e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3720      	adds	r7, #32
 8004e64:	46bd      	mov	sp, r7
 8004e66:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004e6a:	bf00      	nop
 8004e6c:	f4240000 	.word	0xf4240000

08004e70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00a      	beq.n	8004e9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00a      	beq.n	8004ebc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	f003 0304 	and.w	r3, r3, #4
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00a      	beq.n	8004ede <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	f003 0308 	and.w	r3, r3, #8
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00a      	beq.n	8004f00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	430a      	orrs	r2, r1
 8004efe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f04:	f003 0310 	and.w	r3, r3, #16
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00a      	beq.n	8004f22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f26:	f003 0320 	and.w	r3, r3, #32
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00a      	beq.n	8004f44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d01a      	beq.n	8004f86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f6e:	d10a      	bne.n	8004f86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	430a      	orrs	r2, r1
 8004f84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00a      	beq.n	8004fa8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	605a      	str	r2, [r3, #4]
  }
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af02      	add	r7, sp, #8
 8004fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004fc2:	f7fb ffdd 	bl	8000f80 <HAL_GetTick>
 8004fc6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0308 	and.w	r3, r3, #8
 8004fd2:	2b08      	cmp	r3, #8
 8004fd4:	d10e      	bne.n	8004ff4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fd6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 f82a 	bl	800503e <UART_WaitOnFlagUntilTimeout>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d001      	beq.n	8004ff4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e020      	b.n	8005036 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0304 	and.w	r3, r3, #4
 8004ffe:	2b04      	cmp	r3, #4
 8005000:	d10e      	bne.n	8005020 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005002:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005006:	9300      	str	r3, [sp, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 f814 	bl	800503e <UART_WaitOnFlagUntilTimeout>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d001      	beq.n	8005020 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e00a      	b.n	8005036 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2220      	movs	r2, #32
 8005024:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2220      	movs	r2, #32
 800502a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b084      	sub	sp, #16
 8005042:	af00      	add	r7, sp, #0
 8005044:	60f8      	str	r0, [r7, #12]
 8005046:	60b9      	str	r1, [r7, #8]
 8005048:	603b      	str	r3, [r7, #0]
 800504a:	4613      	mov	r3, r2
 800504c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800504e:	e02a      	b.n	80050a6 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005056:	d026      	beq.n	80050a6 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005058:	f7fb ff92 	bl	8000f80 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	429a      	cmp	r2, r3
 8005066:	d302      	bcc.n	800506e <UART_WaitOnFlagUntilTimeout+0x30>
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d11b      	bne.n	80050a6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800507c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f022 0201 	bic.w	r2, r2, #1
 800508c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2220      	movs	r2, #32
 8005092:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2220      	movs	r2, #32
 8005098:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e00f      	b.n	80050c6 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	69da      	ldr	r2, [r3, #28]
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	4013      	ands	r3, r2
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	bf0c      	ite	eq
 80050b6:	2301      	moveq	r3, #1
 80050b8:	2300      	movne	r3, #0
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	461a      	mov	r2, r3
 80050be:	79fb      	ldrb	r3, [r7, #7]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d0c5      	beq.n	8005050 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <generateTXHeader>:
 */

#include "can.h"

CAN_TxHeaderTypeDef generateTXHeader(uint32_t StdId, uint32_t ExtId, uint32_t IDE, uint32_t RTR,
		uint32_t DLC, FunctionalState TimeTransmit) {
 80050ce:	b4b0      	push	{r4, r5, r7}
 80050d0:	b08b      	sub	sp, #44	; 0x2c
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	60f8      	str	r0, [r7, #12]
 80050d6:	60b9      	str	r1, [r7, #8]
 80050d8:	607a      	str	r2, [r7, #4]
 80050da:	603b      	str	r3, [r7, #0]
	CAN_TxHeaderTypeDef txHeader;
	txHeader.StdId = StdId;
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	613b      	str	r3, [r7, #16]
	txHeader.ExtId = ExtId;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	617b      	str	r3, [r7, #20]
	txHeader.IDE = IDE;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	61bb      	str	r3, [r7, #24]
	txHeader.RTR = RTR;
 80050e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ea:	61fb      	str	r3, [r7, #28]
	txHeader.DLC = DLC;
 80050ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ee:	623b      	str	r3, [r7, #32]
	txHeader.TransmitGlobalTime = DISABLE;
 80050f0:	2300      	movs	r3, #0
 80050f2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	return txHeader;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	461d      	mov	r5, r3
 80050fa:	f107 0410 	add.w	r4, r7, #16
 80050fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005100:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005102:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005106:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	372c      	adds	r7, #44	; 0x2c
 800510e:	46bd      	mov	sp, r7
 8005110:	bcb0      	pop	{r4, r5, r7}
 8005112:	4770      	bx	lr

08005114 <writeToCAN>:

/**
 * Writes to the CAN Transmit Line and returns the amount of data written (approximately)
 *
 */
int writeToCAN(CAN_HandleTypeDef *hcan, uint8_t *data, uint8_t dataSize) {
 8005114:	b580      	push	{r7, lr}
 8005116:	b090      	sub	sp, #64	; 0x40
 8005118:	af04      	add	r7, sp, #16
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	4613      	mov	r3, r2
 8005120:	71fb      	strb	r3, [r7, #7]
	HAL_CAN_Start(hcan);
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f7fd fa71 	bl	800260a <HAL_CAN_Start>
	CAN_TxHeaderTypeDef txHeader = generateTXHeader(CAN_ID, CAN_EXT_ID,
 8005128:	79fb      	ldrb	r3, [r7, #7]
 800512a:	f107 0014 	add.w	r0, r7, #20
 800512e:	2200      	movs	r2, #0
 8005130:	9202      	str	r2, [sp, #8]
 8005132:	9301      	str	r3, [sp, #4]
 8005134:	2300      	movs	r3, #0
 8005136:	9300      	str	r3, [sp, #0]
 8005138:	2300      	movs	r3, #0
 800513a:	2200      	movs	r2, #0
 800513c:	2101      	movs	r1, #1
 800513e:	f7ff ffc6 	bl	80050ce <generateTXHeader>
	CAN_IS_EXT, CAN_RTR_DATA, dataSize, DISABLE);
	uint32_t mailbox = CAN_TX_MAILBOX0;
 8005142:	2301      	movs	r3, #1
 8005144:	613b      	str	r3, [r7, #16]

	if (HAL_CAN_AddTxMessage(hcan, &txHeader, data, &mailbox) != HAL_OK) {
 8005146:	f107 0310 	add.w	r3, r7, #16
 800514a:	f107 0114 	add.w	r1, r7, #20
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f7fd fa9e 	bl	8002692 <HAL_CAN_AddTxMessage>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d002      	beq.n	8005162 <writeToCAN+0x4e>
		return -1;
 800515c:	f04f 33ff 	mov.w	r3, #4294967295
 8005160:	e00e      	b.n	8005180 <writeToCAN+0x6c>
	}
	int i = 0;
 8005162:	2300      	movs	r3, #0
 8005164:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (HAL_CAN_IsTxMessagePending(hcan, mailbox)){
 8005166:	e002      	b.n	800516e <writeToCAN+0x5a>
		i++;
 8005168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800516a:	3301      	adds	r3, #1
 800516c:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (HAL_CAN_IsTxMessagePending(hcan, mailbox)){
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	4619      	mov	r1, r3
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f7fd fb68 	bl	8002848 <HAL_CAN_IsTxMessagePending>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1f4      	bne.n	8005168 <writeToCAN+0x54>
	}
	return dataSize;
 800517e:	79fb      	ldrb	r3, [r7, #7]
}
 8005180:	4618      	mov	r0, r3
 8005182:	3730      	adds	r7, #48	; 0x30
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <readCAN>:

int readCAN(CAN_HandleTypeDef *hcan, uint8_t *data, CAN_RxHeaderTypeDef *rxHeader) {
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, rxHeader, data) != HAL_OK) {
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	2100      	movs	r1, #0
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f7fd fb78 	bl	8002890 <HAL_CAN_GetRxMessage>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d002      	beq.n	80051ac <readCAN+0x24>
		return -1;
 80051a6:	f04f 33ff 	mov.w	r3, #4294967295
 80051aa:	e001      	b.n	80051b0 <readCAN+0x28>
	}
	return rxHeader->DLC;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	691b      	ldr	r3, [r3, #16]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <__io_putchar>:
static void MX_CAN1_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_ADC1_Init(void);
int determineDigit(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch) {
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, &*c, 1, 10);
 80051c6:	f107 010c 	add.w	r1, r7, #12
 80051ca:	230a      	movs	r3, #10
 80051cc:	2201      	movs	r2, #1
 80051ce:	4804      	ldr	r0, [pc, #16]	; (80051e0 <__io_putchar+0x28>)
 80051d0:	f7ff fa72 	bl	80046b8 <HAL_UART_Transmit>
	return ch;
 80051d4:	687b      	ldr	r3, [r7, #4]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	2000028c 	.word	0x2000028c

080051e4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	4603      	mov	r3, r0
 80051ec:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) {
 80051ee:	88fb      	ldrh	r3, [r7, #6]
 80051f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051f4:	d126      	bne.n	8005244 <HAL_GPIO_EXTI_Callback+0x60>
		if ((currentTick - lastTickTime) > 200 && getState() == READ_DIGIT) {
 80051f6:	4b15      	ldr	r3, [pc, #84]	; (800524c <HAL_GPIO_EXTI_Callback+0x68>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a15      	ldr	r2, [pc, #84]	; (8005250 <HAL_GPIO_EXTI_Callback+0x6c>)
 80051fc:	8812      	ldrh	r2, [r2, #0]
 80051fe:	1a9b      	subs	r3, r3, r2
 8005200:	2bc8      	cmp	r3, #200	; 0xc8
 8005202:	d91f      	bls.n	8005244 <HAL_GPIO_EXTI_Callback+0x60>
 8005204:	f000 faea 	bl	80057dc <getState>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d11a      	bne.n	8005244 <HAL_GPIO_EXTI_Callback+0x60>
			int currentDigit = determineDigit();
 800520e:	f000 f825 	bl	800525c <determineDigit>
 8005212:	60f8      	str	r0, [r7, #12]
			adcDigit[(arrayIndex++) % 4] = currentDigit;
 8005214:	4b0f      	ldr	r3, [pc, #60]	; (8005254 <HAL_GPIO_EXTI_Callback+0x70>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	490e      	ldr	r1, [pc, #56]	; (8005254 <HAL_GPIO_EXTI_Callback+0x70>)
 800521c:	600a      	str	r2, [r1, #0]
 800521e:	425a      	negs	r2, r3
 8005220:	f003 0303 	and.w	r3, r3, #3
 8005224:	f002 0203 	and.w	r2, r2, #3
 8005228:	bf58      	it	pl
 800522a:	4253      	negpl	r3, r2
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	b2d1      	uxtb	r1, r2
 8005230:	4a09      	ldr	r2, [pc, #36]	; (8005258 <HAL_GPIO_EXTI_Callback+0x74>)
 8005232:	54d1      	strb	r1, [r2, r3]
			nextState(DIGIT_READ);
 8005234:	2000      	movs	r0, #0
 8005236:	f000 fadd 	bl	80057f4 <nextState>
			lastTickTime = currentTick;
 800523a:	4b04      	ldr	r3, [pc, #16]	; (800524c <HAL_GPIO_EXTI_Callback+0x68>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	b29a      	uxth	r2, r3
 8005240:	4b03      	ldr	r3, [pc, #12]	; (8005250 <HAL_GPIO_EXTI_Callback+0x6c>)
 8005242:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8005244:	bf00      	nop
 8005246:	3710      	adds	r7, #16
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	20000338 	.word	0x20000338
 8005250:	200001fc 	.word	0x200001fc
 8005254:	20000208 	.word	0x20000208
 8005258:	20000288 	.word	0x20000288

0800525c <determineDigit>:

int determineDigit(void) {
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0
	return (((float) adcValue / (float) maxADC) * 5);
 8005260:	4b0d      	ldr	r3, [pc, #52]	; (8005298 <determineDigit+0x3c>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	ee07 3a90 	vmov	s15, r3
 8005268:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800526c:	4b0b      	ldr	r3, [pc, #44]	; (800529c <determineDigit+0x40>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	ee07 3a90 	vmov	s15, r3
 8005274:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005278:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800527c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8005280:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005284:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005288:	ee17 3a90 	vmov	r3, s15
}
 800528c:	4618      	mov	r0, r3
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	20000334 	.word	0x20000334
 800529c:	20000008 	.word	0x20000008

080052a0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b08a      	sub	sp, #40	; 0x28
 80052a4:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	state = READ_DIGIT;
 80052a6:	4b3c      	ldr	r3, [pc, #240]	; (8005398 <main+0xf8>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	701a      	strb	r2, [r3, #0]
	digitsRead = 0;
 80052ac:	4b3b      	ldr	r3, [pc, #236]	; (800539c <main+0xfc>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	601a      	str	r2, [r3, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80052b2:	f7fb fdf9 	bl	8000ea8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80052b6:	f000 f887 	bl	80053c8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80052ba:	f000 fa0b 	bl	80056d4 <MX_GPIO_Init>
	MX_CAN1_Init();
 80052be:	f000 f983 	bl	80055c8 <MX_CAN1_Init>
	MX_USART2_UART_Init();
 80052c2:	f000 f9d7 	bl	8005674 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 80052c6:	f000 f907 	bl	80054d8 <MX_ADC1_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		/* USER CODE BEGIN 3 */
		currentTick = HAL_GetTick();
 80052ca:	f7fb fe59 	bl	8000f80 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	4b33      	ldr	r3, [pc, #204]	; (80053a0 <main+0x100>)
 80052d2:	601a      	str	r2, [r3, #0]
		switch (getState()) {
 80052d4:	f000 fa82 	bl	80057dc <getState>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b03      	cmp	r3, #3
 80052dc:	d858      	bhi.n	8005390 <main+0xf0>
 80052de:	a201      	add	r2, pc, #4	; (adr r2, 80052e4 <main+0x44>)
 80052e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e4:	080052f5 	.word	0x080052f5
 80052e8:	0800532b 	.word	0x0800532b
 80052ec:	08005365 	.word	0x08005365
 80052f0:	08005387 	.word	0x08005387
		case READ_DIGIT: {
			HAL_StatusTypeDef start = HAL_ADC_Start(&hadc1);
 80052f4:	482b      	ldr	r0, [pc, #172]	; (80053a4 <main+0x104>)
 80052f6:	f7fc f99b 	bl	8001630 <HAL_ADC_Start>
 80052fa:	4603      	mov	r3, r0
 80052fc:	77fb      	strb	r3, [r7, #31]
			HAL_StatusTypeDef poll = HAL_ADC_PollForConversion(&hadc1, 100);
 80052fe:	2164      	movs	r1, #100	; 0x64
 8005300:	4828      	ldr	r0, [pc, #160]	; (80053a4 <main+0x104>)
 8005302:	f7fc fa4f 	bl	80017a4 <HAL_ADC_PollForConversion>
 8005306:	4603      	mov	r3, r0
 8005308:	77bb      	strb	r3, [r7, #30]
			adcValue = HAL_ADC_GetValue(&hadc1);
 800530a:	4826      	ldr	r0, [pc, #152]	; (80053a4 <main+0x104>)
 800530c:	f7fc fb1a 	bl	8001944 <HAL_ADC_GetValue>
 8005310:	4602      	mov	r2, r0
 8005312:	4b25      	ldr	r3, [pc, #148]	; (80053a8 <main+0x108>)
 8005314:	601a      	str	r2, [r3, #0]
			printf("%d, %d\n", determineDigit(), digitsRead);
 8005316:	f7ff ffa1 	bl	800525c <determineDigit>
 800531a:	4601      	mov	r1, r0
 800531c:	4b1f      	ldr	r3, [pc, #124]	; (800539c <main+0xfc>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	461a      	mov	r2, r3
 8005322:	4822      	ldr	r0, [pc, #136]	; (80053ac <main+0x10c>)
 8005324:	f001 f95c 	bl	80065e0 <iprintf>
			break;
 8005328:	e032      	b.n	8005390 <main+0xf0>
		}

		case SEND_MESSAGE: {
			printf("%d, %d, %d, %d\n", adcDigit[0], adcDigit[1], adcDigit[2], adcDigit[3]);
 800532a:	4b21      	ldr	r3, [pc, #132]	; (80053b0 <main+0x110>)
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	4619      	mov	r1, r3
 8005330:	4b1f      	ldr	r3, [pc, #124]	; (80053b0 <main+0x110>)
 8005332:	785b      	ldrb	r3, [r3, #1]
 8005334:	461a      	mov	r2, r3
 8005336:	4b1e      	ldr	r3, [pc, #120]	; (80053b0 <main+0x110>)
 8005338:	789b      	ldrb	r3, [r3, #2]
 800533a:	4618      	mov	r0, r3
 800533c:	4b1c      	ldr	r3, [pc, #112]	; (80053b0 <main+0x110>)
 800533e:	78db      	ldrb	r3, [r3, #3]
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	4603      	mov	r3, r0
 8005344:	481b      	ldr	r0, [pc, #108]	; (80053b4 <main+0x114>)
 8005346:	f001 f94b 	bl	80065e0 <iprintf>
			if (writeToCAN(&hcan1, adcDigit, 4) != -1) {
 800534a:	2204      	movs	r2, #4
 800534c:	4918      	ldr	r1, [pc, #96]	; (80053b0 <main+0x110>)
 800534e:	481a      	ldr	r0, [pc, #104]	; (80053b8 <main+0x118>)
 8005350:	f7ff fee0 	bl	8005114 <writeToCAN>
 8005354:	4603      	mov	r3, r0
 8005356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800535a:	d118      	bne.n	800538e <main+0xee>
//				nextState(CAN_SENT);
			} else {
				printf("sad\n");
 800535c:	4817      	ldr	r0, [pc, #92]	; (80053bc <main+0x11c>)
 800535e:	f001 f9b3 	bl	80066c8 <puts>
			}
			break;
 8005362:	e014      	b.n	800538e <main+0xee>
		}

		case RECEIVE_MESSAGE: {
			CAN_RxHeaderTypeDef result;
			if (readCAN(&hcan1, secretMessage, &result) == SECRET_SIZE) {
 8005364:	463b      	mov	r3, r7
 8005366:	461a      	mov	r2, r3
 8005368:	4915      	ldr	r1, [pc, #84]	; (80053c0 <main+0x120>)
 800536a:	4813      	ldr	r0, [pc, #76]	; (80053b8 <main+0x118>)
 800536c:	f7ff ff0c 	bl	8005188 <readCAN>
 8005370:	4603      	mov	r3, r0
 8005372:	2b04      	cmp	r3, #4
 8005374:	d102      	bne.n	800537c <main+0xdc>
				nextState(CAN_RECEIVED);
 8005376:	2002      	movs	r0, #2
 8005378:	f000 fa3c 	bl	80057f4 <nextState>
			}
			printf("Reading CAN");
 800537c:	4811      	ldr	r0, [pc, #68]	; (80053c4 <main+0x124>)
 800537e:	f001 f92f 	bl	80065e0 <iprintf>
			break;
 8005382:	bf00      	nop
 8005384:	e004      	b.n	8005390 <main+0xf0>
		}
		case FINISHED: {
			printf("%s\n", (char*) secretMessage);
 8005386:	480e      	ldr	r0, [pc, #56]	; (80053c0 <main+0x120>)
 8005388:	f001 f99e 	bl	80066c8 <puts>
			break;
 800538c:	e000      	b.n	8005390 <main+0xf0>
			break;
 800538e:	bf00      	nop
		}
		}
		HAL_Delay(10);
 8005390:	200a      	movs	r0, #10
 8005392:	f7fb fe01 	bl	8000f98 <HAL_Delay>
		currentTick = HAL_GetTick();
 8005396:	e798      	b.n	80052ca <main+0x2a>
 8005398:	2000021c 	.word	0x2000021c
 800539c:	20000220 	.word	0x20000220
 80053a0:	20000338 	.word	0x20000338
 80053a4:	20000224 	.word	0x20000224
 80053a8:	20000334 	.word	0x20000334
 80053ac:	08008458 	.word	0x08008458
 80053b0:	20000288 	.word	0x20000288
 80053b4:	08008460 	.word	0x08008460
 80053b8:	2000030c 	.word	0x2000030c
 80053bc:	08008470 	.word	0x08008470
 80053c0:	20000200 	.word	0x20000200
 80053c4:	08008474 	.word	0x08008474

080053c8 <SystemClock_Config>:
	}
	/* USER CODE END 3 */
}

void SystemClock_Config(void)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b0b8      	sub	sp, #224	; 0xe0
 80053cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80053ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80053d2:	2244      	movs	r2, #68	; 0x44
 80053d4:	2100      	movs	r1, #0
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 fc9e 	bl	8005d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80053dc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80053e0:	2200      	movs	r2, #0
 80053e2:	601a      	str	r2, [r3, #0]
 80053e4:	605a      	str	r2, [r3, #4]
 80053e6:	609a      	str	r2, [r3, #8]
 80053e8:	60da      	str	r2, [r3, #12]
 80053ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80053ec:	463b      	mov	r3, r7
 80053ee:	2288      	movs	r2, #136	; 0x88
 80053f0:	2100      	movs	r1, #0
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 fc90 	bl	8005d18 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80053f8:	2302      	movs	r3, #2
 80053fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80053fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005402:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005406:	2310      	movs	r3, #16
 8005408:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800540c:	2302      	movs	r3, #2
 800540e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005412:	2302      	movs	r3, #2
 8005414:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005418:	2301      	movs	r3, #1
 800541a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800541e:	230a      	movs	r3, #10
 8005420:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8005424:	2307      	movs	r3, #7
 8005426:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800542a:	2302      	movs	r3, #2
 800542c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005430:	2302      	movs	r3, #2
 8005432:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005436:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800543a:	4618      	mov	r0, r3
 800543c:	f7fd fe8a 	bl	8003154 <HAL_RCC_OscConfig>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8005446:	f000 f9c1 	bl	80057cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800544a:	230f      	movs	r3, #15
 800544c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005450:	2303      	movs	r3, #3
 8005452:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005456:	2300      	movs	r3, #0
 8005458:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800545c:	2300      	movs	r3, #0
 800545e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005462:	2300      	movs	r3, #0
 8005464:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005468:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800546c:	2104      	movs	r1, #4
 800546e:	4618      	mov	r0, r3
 8005470:	f7fe fa20 	bl	80038b4 <HAL_RCC_ClockConfig>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d001      	beq.n	800547e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800547a:	f000 f9a7 	bl	80057cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 800547e:	f244 0302 	movw	r3, #16386	; 0x4002
 8005482:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005484:	2300      	movs	r3, #0
 8005486:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8005488:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800548c:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800548e:	2302      	movs	r3, #2
 8005490:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8005492:	2301      	movs	r3, #1
 8005494:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8005496:	2308      	movs	r3, #8
 8005498:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800549a:	2307      	movs	r3, #7
 800549c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800549e:	2302      	movs	r3, #2
 80054a0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80054a2:	2302      	movs	r3, #2
 80054a4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80054a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054aa:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80054ac:	463b      	mov	r3, r7
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7fe fc04 	bl	8003cbc <HAL_RCCEx_PeriphCLKConfig>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80054ba:	f000 f987 	bl	80057cc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80054be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80054c2:	f7fd fdf1 	bl	80030a8 <HAL_PWREx_ControlVoltageScaling>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d001      	beq.n	80054d0 <SystemClock_Config+0x108>
  {
    Error_Handler();
 80054cc:	f000 f97e 	bl	80057cc <Error_Handler>
  }
}
 80054d0:	bf00      	nop
 80054d2:	37e0      	adds	r7, #224	; 0xe0
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b08a      	sub	sp, #40	; 0x28
 80054dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80054de:	f107 031c 	add.w	r3, r7, #28
 80054e2:	2200      	movs	r2, #0
 80054e4:	601a      	str	r2, [r3, #0]
 80054e6:	605a      	str	r2, [r3, #4]
 80054e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80054ea:	1d3b      	adds	r3, r7, #4
 80054ec:	2200      	movs	r2, #0
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	605a      	str	r2, [r3, #4]
 80054f2:	609a      	str	r2, [r3, #8]
 80054f4:	60da      	str	r2, [r3, #12]
 80054f6:	611a      	str	r2, [r3, #16]
 80054f8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80054fa:	4b30      	ldr	r3, [pc, #192]	; (80055bc <MX_ADC1_Init+0xe4>)
 80054fc:	4a30      	ldr	r2, [pc, #192]	; (80055c0 <MX_ADC1_Init+0xe8>)
 80054fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4; /*!< ADC asynchronous clock with prescaler division by 4 */
 8005500:	4b2e      	ldr	r3, [pc, #184]	; (80055bc <MX_ADC1_Init+0xe4>)
 8005502:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005506:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005508:	4b2c      	ldr	r3, [pc, #176]	; (80055bc <MX_ADC1_Init+0xe4>)
 800550a:	2200      	movs	r2, #0
 800550c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800550e:	4b2b      	ldr	r3, [pc, #172]	; (80055bc <MX_ADC1_Init+0xe4>)
 8005510:	2200      	movs	r2, #0
 8005512:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005514:	4b29      	ldr	r3, [pc, #164]	; (80055bc <MX_ADC1_Init+0xe4>)
 8005516:	2200      	movs	r2, #0
 8005518:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800551a:	4b28      	ldr	r3, [pc, #160]	; (80055bc <MX_ADC1_Init+0xe4>)
 800551c:	2204      	movs	r2, #4
 800551e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005520:	4b26      	ldr	r3, [pc, #152]	; (80055bc <MX_ADC1_Init+0xe4>)
 8005522:	2200      	movs	r2, #0
 8005524:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005526:	4b25      	ldr	r3, [pc, #148]	; (80055bc <MX_ADC1_Init+0xe4>)
 8005528:	2200      	movs	r2, #0
 800552a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5; //not sure how much this affects function
 800552c:	4b23      	ldr	r3, [pc, #140]	; (80055bc <MX_ADC1_Init+0xe4>)
 800552e:	2205      	movs	r2, #5
 8005530:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005532:	4b22      	ldr	r3, [pc, #136]	; (80055bc <MX_ADC1_Init+0xe4>)
 8005534:	2200      	movs	r2, #0
 8005536:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800553a:	4b20      	ldr	r3, [pc, #128]	; (80055bc <MX_ADC1_Init+0xe4>)
 800553c:	2200      	movs	r2, #0
 800553e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005540:	4b1e      	ldr	r3, [pc, #120]	; (80055bc <MX_ADC1_Init+0xe4>)
 8005542:	2200      	movs	r2, #0
 8005544:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8005546:	4b1d      	ldr	r3, [pc, #116]	; (80055bc <MX_ADC1_Init+0xe4>)
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800554e:	4b1b      	ldr	r3, [pc, #108]	; (80055bc <MX_ADC1_Init+0xe4>)
 8005550:	2200      	movs	r2, #0
 8005552:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8005554:	4b19      	ldr	r3, [pc, #100]	; (80055bc <MX_ADC1_Init+0xe4>)
 8005556:	2200      	movs	r2, #0
 8005558:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800555c:	4817      	ldr	r0, [pc, #92]	; (80055bc <MX_ADC1_Init+0xe4>)
 800555e:	f7fb ff13 	bl	8001388 <HAL_ADC_Init>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8005568:	f000 f930 	bl	80057cc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800556c:	2300      	movs	r3, #0
 800556e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8005570:	f107 031c 	add.w	r3, r7, #28
 8005574:	4619      	mov	r1, r3
 8005576:	4811      	ldr	r0, [pc, #68]	; (80055bc <MX_ADC1_Init+0xe4>)
 8005578:	f7fc fdd6 	bl	8002128 <HAL_ADCEx_MultiModeConfigChannel>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8005582:	f000 f923 	bl	80057cc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5; //Pin A0 is set to ADC Channel 5 by default
 8005586:	4b0f      	ldr	r3, [pc, #60]	; (80055c4 <MX_ADC1_Init+0xec>)
 8005588:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800558a:	2306      	movs	r3, #6
 800558c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5; //Important: 47 Cycles was deemed long enough (by experimentation) to actually get a significant sample out of the ADC module
 800558e:	2304      	movs	r3, #4
 8005590:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005592:	237f      	movs	r3, #127	; 0x7f
 8005594:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005596:	2304      	movs	r3, #4
 8005598:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800559a:	2300      	movs	r3, #0
 800559c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800559e:	1d3b      	adds	r3, r7, #4
 80055a0:	4619      	mov	r1, r3
 80055a2:	4806      	ldr	r0, [pc, #24]	; (80055bc <MX_ADC1_Init+0xe4>)
 80055a4:	f7fc f9dc 	bl	8001960 <HAL_ADC_ConfigChannel>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80055ae:	f000 f90d 	bl	80057cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80055b2:	bf00      	nop
 80055b4:	3728      	adds	r7, #40	; 0x28
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	20000224 	.word	0x20000224
 80055c0:	50040000 	.word	0x50040000
 80055c4:	14f00020 	.word	0x14f00020

080055c8 <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b08a      	sub	sp, #40	; 0x28
 80055cc:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 80055ce:	4b27      	ldr	r3, [pc, #156]	; (800566c <MX_CAN1_Init+0xa4>)
 80055d0:	4a27      	ldr	r2, [pc, #156]	; (8005670 <MX_CAN1_Init+0xa8>)
 80055d2:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 10;
 80055d4:	4b25      	ldr	r3, [pc, #148]	; (800566c <MX_CAN1_Init+0xa4>)
 80055d6:	220a      	movs	r2, #10
 80055d8:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 80055da:	4b24      	ldr	r3, [pc, #144]	; (800566c <MX_CAN1_Init+0xa4>)
 80055dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80055e0:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80055e2:	4b22      	ldr	r3, [pc, #136]	; (800566c <MX_CAN1_Init+0xa4>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80055e8:	4b20      	ldr	r3, [pc, #128]	; (800566c <MX_CAN1_Init+0xa4>)
 80055ea:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80055ee:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80055f0:	4b1e      	ldr	r3, [pc, #120]	; (800566c <MX_CAN1_Init+0xa4>)
 80055f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80055f6:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 80055f8:	4b1c      	ldr	r3, [pc, #112]	; (800566c <MX_CAN1_Init+0xa4>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 80055fe:	4b1b      	ldr	r3, [pc, #108]	; (800566c <MX_CAN1_Init+0xa4>)
 8005600:	2200      	movs	r2, #0
 8005602:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8005604:	4b19      	ldr	r3, [pc, #100]	; (800566c <MX_CAN1_Init+0xa4>)
 8005606:	2200      	movs	r2, #0
 8005608:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = ENABLE;
 800560a:	4b18      	ldr	r3, [pc, #96]	; (800566c <MX_CAN1_Init+0xa4>)
 800560c:	2201      	movs	r2, #1
 800560e:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8005610:	4b16      	ldr	r3, [pc, #88]	; (800566c <MX_CAN1_Init+0xa4>)
 8005612:	2200      	movs	r2, #0
 8005614:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8005616:	4b15      	ldr	r3, [pc, #84]	; (800566c <MX_CAN1_Init+0xa4>)
 8005618:	2200      	movs	r2, #0
 800561a:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 800561c:	4813      	ldr	r0, [pc, #76]	; (800566c <MX_CAN1_Init+0xa4>)
 800561e:	f7fc fe2f 	bl	8002280 <HAL_CAN_Init>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d001      	beq.n	800562c <MX_CAN1_Init+0x64>
		Error_Handler();
 8005628:	f000 f8d0 	bl	80057cc <Error_Handler>
	 * Found Id = 0xXXXXXXXX
	 * Masked = (0x00000000) & 0xXXXXXXXX = 0x00000000
	 * Expected = 0x00000000
	 */
	CAN_FilterTypeDef filterParams;
	filterParams.FilterBank = 0;
 800562c:	2300      	movs	r3, #0
 800562e:	617b      	str	r3, [r7, #20]
	filterParams.FilterFIFOAssignment = CAN_RX_FIFO0;
 8005630:	2300      	movs	r3, #0
 8005632:	613b      	str	r3, [r7, #16]
	filterParams.FilterMode = CAN_FILTERMODE_IDMASK;
 8005634:	2300      	movs	r3, #0
 8005636:	61bb      	str	r3, [r7, #24]
	filterParams.FilterScale = CAN_FILTERSCALE_32BIT;
 8005638:	2301      	movs	r3, #1
 800563a:	61fb      	str	r3, [r7, #28]
	filterParams.FilterIdHigh = 0x0000;
 800563c:	2300      	movs	r3, #0
 800563e:	603b      	str	r3, [r7, #0]
	filterParams.FilterIdLow = 0x0000;
 8005640:	2300      	movs	r3, #0
 8005642:	607b      	str	r3, [r7, #4]
	filterParams.FilterMaskIdHigh = 0x0000;
 8005644:	2300      	movs	r3, #0
 8005646:	60bb      	str	r3, [r7, #8]
	filterParams.FilterMaskIdLow = 0x0000;
 8005648:	2300      	movs	r3, #0
 800564a:	60fb      	str	r3, [r7, #12]
	filterParams.FilterActivation = CAN_FILTER_ENABLE;
 800564c:	2301      	movs	r3, #1
 800564e:	623b      	str	r3, [r7, #32]

	if (HAL_CAN_ConfigFilter(&hcan1, &filterParams) != HAL_OK) {
 8005650:	463b      	mov	r3, r7
 8005652:	4619      	mov	r1, r3
 8005654:	4805      	ldr	r0, [pc, #20]	; (800566c <MX_CAN1_Init+0xa4>)
 8005656:	f7fc ff0e 	bl	8002476 <HAL_CAN_ConfigFilter>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d001      	beq.n	8005664 <MX_CAN1_Init+0x9c>
		Error_Handler();
 8005660:	f000 f8b4 	bl	80057cc <Error_Handler>
	}
	/* USER CODE END CAN1_Init 2 */

}
 8005664:	bf00      	nop
 8005666:	3728      	adds	r7, #40	; 0x28
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	2000030c 	.word	0x2000030c
 8005670:	40006400 	.word	0x40006400

08005674 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8005674:	b580      	push	{r7, lr}
 8005676:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8005678:	4b14      	ldr	r3, [pc, #80]	; (80056cc <MX_USART2_UART_Init+0x58>)
 800567a:	4a15      	ldr	r2, [pc, #84]	; (80056d0 <MX_USART2_UART_Init+0x5c>)
 800567c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800567e:	4b13      	ldr	r3, [pc, #76]	; (80056cc <MX_USART2_UART_Init+0x58>)
 8005680:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005684:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005686:	4b11      	ldr	r3, [pc, #68]	; (80056cc <MX_USART2_UART_Init+0x58>)
 8005688:	2200      	movs	r2, #0
 800568a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800568c:	4b0f      	ldr	r3, [pc, #60]	; (80056cc <MX_USART2_UART_Init+0x58>)
 800568e:	2200      	movs	r2, #0
 8005690:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8005692:	4b0e      	ldr	r3, [pc, #56]	; (80056cc <MX_USART2_UART_Init+0x58>)
 8005694:	2200      	movs	r2, #0
 8005696:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8005698:	4b0c      	ldr	r3, [pc, #48]	; (80056cc <MX_USART2_UART_Init+0x58>)
 800569a:	220c      	movs	r2, #12
 800569c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800569e:	4b0b      	ldr	r3, [pc, #44]	; (80056cc <MX_USART2_UART_Init+0x58>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80056a4:	4b09      	ldr	r3, [pc, #36]	; (80056cc <MX_USART2_UART_Init+0x58>)
 80056a6:	2200      	movs	r2, #0
 80056a8:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80056aa:	4b08      	ldr	r3, [pc, #32]	; (80056cc <MX_USART2_UART_Init+0x58>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80056b0:	4b06      	ldr	r3, [pc, #24]	; (80056cc <MX_USART2_UART_Init+0x58>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80056b6:	4805      	ldr	r0, [pc, #20]	; (80056cc <MX_USART2_UART_Init+0x58>)
 80056b8:	f7fe ffb0 	bl	800461c <HAL_UART_Init>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80056c2:	f000 f883 	bl	80057cc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80056c6:	bf00      	nop
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	2000028c 	.word	0x2000028c
 80056d0:	40004400 	.word	0x40004400

080056d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b08a      	sub	sp, #40	; 0x28
 80056d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056da:	f107 0314 	add.w	r3, r7, #20
 80056de:	2200      	movs	r2, #0
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	605a      	str	r2, [r3, #4]
 80056e4:	609a      	str	r2, [r3, #8]
 80056e6:	60da      	str	r2, [r3, #12]
 80056e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80056ea:	4b35      	ldr	r3, [pc, #212]	; (80057c0 <MX_GPIO_Init+0xec>)
 80056ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056ee:	4a34      	ldr	r2, [pc, #208]	; (80057c0 <MX_GPIO_Init+0xec>)
 80056f0:	f043 0304 	orr.w	r3, r3, #4
 80056f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80056f6:	4b32      	ldr	r3, [pc, #200]	; (80057c0 <MX_GPIO_Init+0xec>)
 80056f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056fa:	f003 0304 	and.w	r3, r3, #4
 80056fe:	613b      	str	r3, [r7, #16]
 8005700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005702:	4b2f      	ldr	r3, [pc, #188]	; (80057c0 <MX_GPIO_Init+0xec>)
 8005704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005706:	4a2e      	ldr	r2, [pc, #184]	; (80057c0 <MX_GPIO_Init+0xec>)
 8005708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800570c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800570e:	4b2c      	ldr	r3, [pc, #176]	; (80057c0 <MX_GPIO_Init+0xec>)
 8005710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800571a:	4b29      	ldr	r3, [pc, #164]	; (80057c0 <MX_GPIO_Init+0xec>)
 800571c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800571e:	4a28      	ldr	r2, [pc, #160]	; (80057c0 <MX_GPIO_Init+0xec>)
 8005720:	f043 0301 	orr.w	r3, r3, #1
 8005724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005726:	4b26      	ldr	r3, [pc, #152]	; (80057c0 <MX_GPIO_Init+0xec>)
 8005728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	60bb      	str	r3, [r7, #8]
 8005730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005732:	4b23      	ldr	r3, [pc, #140]	; (80057c0 <MX_GPIO_Init+0xec>)
 8005734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005736:	4a22      	ldr	r2, [pc, #136]	; (80057c0 <MX_GPIO_Init+0xec>)
 8005738:	f043 0302 	orr.w	r3, r3, #2
 800573c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800573e:	4b20      	ldr	r3, [pc, #128]	; (80057c0 <MX_GPIO_Init+0xec>)
 8005740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005742:	f003 0302 	and.w	r3, r3, #2
 8005746:	607b      	str	r3, [r7, #4]
 8005748:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800574a:	2200      	movs	r2, #0
 800574c:	2120      	movs	r1, #32
 800574e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005752:	f7fd fc6b 	bl	800302c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005756:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800575a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800575c:	4b19      	ldr	r3, [pc, #100]	; (80057c4 <MX_GPIO_Init+0xf0>)
 800575e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005760:	2300      	movs	r3, #0
 8005762:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005764:	f107 0314 	add.w	r3, r7, #20
 8005768:	4619      	mov	r1, r3
 800576a:	4817      	ldr	r0, [pc, #92]	; (80057c8 <MX_GPIO_Init+0xf4>)
 800576c:	f7fd fab6 	bl	8002cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005770:	2301      	movs	r3, #1
 8005772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8005774:	230b      	movs	r3, #11
 8005776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005778:	2300      	movs	r3, #0
 800577a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800577c:	f107 0314 	add.w	r3, r7, #20
 8005780:	4619      	mov	r1, r3
 8005782:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005786:	f7fd faa9 	bl	8002cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800578a:	2320      	movs	r3, #32
 800578c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800578e:	2301      	movs	r3, #1
 8005790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005792:	2300      	movs	r3, #0
 8005794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005796:	2300      	movs	r3, #0
 8005798:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800579a:	f107 0314 	add.w	r3, r7, #20
 800579e:	4619      	mov	r1, r3
 80057a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80057a4:	f7fd fa9a 	bl	8002cdc <HAL_GPIO_Init>


  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80057a8:	2200      	movs	r2, #0
 80057aa:	2100      	movs	r1, #0
 80057ac:	2028      	movs	r0, #40	; 0x28
 80057ae:	f7fd fa5e 	bl	8002c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80057b2:	2028      	movs	r0, #40	; 0x28
 80057b4:	f7fd fa77 	bl	8002ca6 <HAL_NVIC_EnableIRQ>
}
 80057b8:	bf00      	nop
 80057ba:	3728      	adds	r7, #40	; 0x28
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	40021000 	.word	0x40021000
 80057c4:	10210000 	.word	0x10210000
 80057c8:	48000800 	.word	0x48000800

080057cc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80057cc:	b480      	push	{r7}
 80057ce:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80057d0:	bf00      	nop
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
	...

080057dc <getState>:
 */

#include "stateMachine.h"


enum states getState() {
 80057dc:	b480      	push	{r7}
 80057de:	af00      	add	r7, sp, #0
	return state;
 80057e0:	4b03      	ldr	r3, [pc, #12]	; (80057f0 <getState+0x14>)
 80057e2:	781b      	ldrb	r3, [r3, #0]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	2000021c 	.word	0x2000021c

080057f4 <nextState>:

void nextState(enum events event) {
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	4603      	mov	r3, r0
 80057fc:	71fb      	strb	r3, [r7, #7]
	switch(state) {
 80057fe:	4b1d      	ldr	r3, [pc, #116]	; (8005874 <nextState+0x80>)
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	2b03      	cmp	r3, #3
 8005804:	d829      	bhi.n	800585a <nextState+0x66>
 8005806:	a201      	add	r2, pc, #4	; (adr r2, 800580c <nextState+0x18>)
 8005808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580c:	0800581d 	.word	0x0800581d
 8005810:	08005843 	.word	0x08005843
 8005814:	0800584f 	.word	0x0800584f
 8005818:	08005863 	.word	0x08005863
	case READ_DIGIT: {
		if(event == DIGIT_READ) {
 800581c:	79fb      	ldrb	r3, [r7, #7]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d104      	bne.n	800582c <nextState+0x38>
			digitsRead++;
 8005822:	4b15      	ldr	r3, [pc, #84]	; (8005878 <nextState+0x84>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	3301      	adds	r3, #1
 8005828:	4a13      	ldr	r2, [pc, #76]	; (8005878 <nextState+0x84>)
 800582a:	6013      	str	r3, [r2, #0]
		}
		if(digitsRead == 4) {
 800582c:	4b12      	ldr	r3, [pc, #72]	; (8005878 <nextState+0x84>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b04      	cmp	r3, #4
 8005832:	d118      	bne.n	8005866 <nextState+0x72>
			state = SEND_MESSAGE;
 8005834:	4b0f      	ldr	r3, [pc, #60]	; (8005874 <nextState+0x80>)
 8005836:	2201      	movs	r2, #1
 8005838:	701a      	strb	r2, [r3, #0]
			digitsRead = 0;
 800583a:	4b0f      	ldr	r3, [pc, #60]	; (8005878 <nextState+0x84>)
 800583c:	2200      	movs	r2, #0
 800583e:	601a      	str	r2, [r3, #0]
		}
		break;
 8005840:	e011      	b.n	8005866 <nextState+0x72>
	}

	case SEND_MESSAGE: {
		if(event = CAN_SENT) {
 8005842:	2301      	movs	r3, #1
 8005844:	71fb      	strb	r3, [r7, #7]
			state = RECEIVE_MESSAGE;
 8005846:	4b0b      	ldr	r3, [pc, #44]	; (8005874 <nextState+0x80>)
 8005848:	2202      	movs	r2, #2
 800584a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800584c:	e00c      	b.n	8005868 <nextState+0x74>
	}
	case RECEIVE_MESSAGE: {
		if(event = CAN_RECEIVED) {
 800584e:	2302      	movs	r3, #2
 8005850:	71fb      	strb	r3, [r7, #7]
			state = FINISHED;
 8005852:	4b08      	ldr	r3, [pc, #32]	; (8005874 <nextState+0x80>)
 8005854:	2203      	movs	r2, #3
 8005856:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005858:	e006      	b.n	8005868 <nextState+0x74>
	}
	case FINISHED:
		break;
	default:
		state = READ_DIGIT;
 800585a:	4b06      	ldr	r3, [pc, #24]	; (8005874 <nextState+0x80>)
 800585c:	2200      	movs	r2, #0
 800585e:	701a      	strb	r2, [r3, #0]
		break;
 8005860:	e002      	b.n	8005868 <nextState+0x74>
		break;
 8005862:	bf00      	nop
 8005864:	e000      	b.n	8005868 <nextState+0x74>
		break;
 8005866:	bf00      	nop
	}
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr
 8005874:	2000021c 	.word	0x2000021c
 8005878:	20000220 	.word	0x20000220

0800587c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005882:	4b12      	ldr	r3, [pc, #72]	; (80058cc <HAL_MspInit+0x50>)
 8005884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005886:	4a11      	ldr	r2, [pc, #68]	; (80058cc <HAL_MspInit+0x50>)
 8005888:	f043 0301 	orr.w	r3, r3, #1
 800588c:	6613      	str	r3, [r2, #96]	; 0x60
 800588e:	4b0f      	ldr	r3, [pc, #60]	; (80058cc <HAL_MspInit+0x50>)
 8005890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	607b      	str	r3, [r7, #4]
 8005898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800589a:	4b0c      	ldr	r3, [pc, #48]	; (80058cc <HAL_MspInit+0x50>)
 800589c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800589e:	4a0b      	ldr	r2, [pc, #44]	; (80058cc <HAL_MspInit+0x50>)
 80058a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058a4:	6593      	str	r3, [r2, #88]	; 0x58
 80058a6:	4b09      	ldr	r3, [pc, #36]	; (80058cc <HAL_MspInit+0x50>)
 80058a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ae:	603b      	str	r3, [r7, #0]
 80058b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80058b2:	2200      	movs	r2, #0
 80058b4:	2100      	movs	r1, #0
 80058b6:	2005      	movs	r0, #5
 80058b8:	f7fd f9d9 	bl	8002c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80058bc:	2005      	movs	r0, #5
 80058be:	f7fd f9f2 	bl	8002ca6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80058c2:	bf00      	nop
 80058c4:	3708      	adds	r7, #8
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	40021000 	.word	0x40021000

080058d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b08a      	sub	sp, #40	; 0x28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058d8:	f107 0314 	add.w	r3, r7, #20
 80058dc:	2200      	movs	r2, #0
 80058de:	601a      	str	r2, [r3, #0]
 80058e0:	605a      	str	r2, [r3, #4]
 80058e2:	609a      	str	r2, [r3, #8]
 80058e4:	60da      	str	r2, [r3, #12]
 80058e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a15      	ldr	r2, [pc, #84]	; (8005944 <HAL_ADC_MspInit+0x74>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d124      	bne.n	800593c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80058f2:	4b15      	ldr	r3, [pc, #84]	; (8005948 <HAL_ADC_MspInit+0x78>)
 80058f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058f6:	4a14      	ldr	r2, [pc, #80]	; (8005948 <HAL_ADC_MspInit+0x78>)
 80058f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80058fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80058fe:	4b12      	ldr	r3, [pc, #72]	; (8005948 <HAL_ADC_MspInit+0x78>)
 8005900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005902:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005906:	613b      	str	r3, [r7, #16]
 8005908:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800590a:	4b0f      	ldr	r3, [pc, #60]	; (8005948 <HAL_ADC_MspInit+0x78>)
 800590c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800590e:	4a0e      	ldr	r2, [pc, #56]	; (8005948 <HAL_ADC_MspInit+0x78>)
 8005910:	f043 0301 	orr.w	r3, r3, #1
 8005914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005916:	4b0c      	ldr	r3, [pc, #48]	; (8005948 <HAL_ADC_MspInit+0x78>)
 8005918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	60fb      	str	r3, [r7, #12]
 8005920:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005922:	2301      	movs	r3, #1
 8005924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8005926:	230b      	movs	r3, #11
 8005928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800592a:	2300      	movs	r3, #0
 800592c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800592e:	f107 0314 	add.w	r3, r7, #20
 8005932:	4619      	mov	r1, r3
 8005934:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005938:	f7fd f9d0 	bl	8002cdc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800593c:	bf00      	nop
 800593e:	3728      	adds	r7, #40	; 0x28
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	50040000 	.word	0x50040000
 8005948:	40021000 	.word	0x40021000

0800594c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b08a      	sub	sp, #40	; 0x28
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005954:	f107 0314 	add.w	r3, r7, #20
 8005958:	2200      	movs	r2, #0
 800595a:	601a      	str	r2, [r3, #0]
 800595c:	605a      	str	r2, [r3, #4]
 800595e:	609a      	str	r2, [r3, #8]
 8005960:	60da      	str	r2, [r3, #12]
 8005962:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a18      	ldr	r2, [pc, #96]	; (80059cc <HAL_CAN_MspInit+0x80>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d129      	bne.n	80059c2 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800596e:	4b18      	ldr	r3, [pc, #96]	; (80059d0 <HAL_CAN_MspInit+0x84>)
 8005970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005972:	4a17      	ldr	r2, [pc, #92]	; (80059d0 <HAL_CAN_MspInit+0x84>)
 8005974:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005978:	6593      	str	r3, [r2, #88]	; 0x58
 800597a:	4b15      	ldr	r3, [pc, #84]	; (80059d0 <HAL_CAN_MspInit+0x84>)
 800597c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800597e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005982:	613b      	str	r3, [r7, #16]
 8005984:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005986:	4b12      	ldr	r3, [pc, #72]	; (80059d0 <HAL_CAN_MspInit+0x84>)
 8005988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800598a:	4a11      	ldr	r2, [pc, #68]	; (80059d0 <HAL_CAN_MspInit+0x84>)
 800598c:	f043 0301 	orr.w	r3, r3, #1
 8005990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005992:	4b0f      	ldr	r3, [pc, #60]	; (80059d0 <HAL_CAN_MspInit+0x84>)
 8005994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	60fb      	str	r3, [r7, #12]
 800599c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800599e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80059a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059a4:	2302      	movs	r3, #2
 80059a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059a8:	2300      	movs	r3, #0
 80059aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059ac:	2303      	movs	r3, #3
 80059ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80059b0:	2309      	movs	r3, #9
 80059b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059b4:	f107 0314 	add.w	r3, r7, #20
 80059b8:	4619      	mov	r1, r3
 80059ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059be:	f7fd f98d 	bl	8002cdc <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80059c2:	bf00      	nop
 80059c4:	3728      	adds	r7, #40	; 0x28
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	40006400 	.word	0x40006400
 80059d0:	40021000 	.word	0x40021000

080059d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b08a      	sub	sp, #40	; 0x28
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059dc:	f107 0314 	add.w	r3, r7, #20
 80059e0:	2200      	movs	r2, #0
 80059e2:	601a      	str	r2, [r3, #0]
 80059e4:	605a      	str	r2, [r3, #4]
 80059e6:	609a      	str	r2, [r3, #8]
 80059e8:	60da      	str	r2, [r3, #12]
 80059ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a17      	ldr	r2, [pc, #92]	; (8005a50 <HAL_UART_MspInit+0x7c>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d128      	bne.n	8005a48 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80059f6:	4b17      	ldr	r3, [pc, #92]	; (8005a54 <HAL_UART_MspInit+0x80>)
 80059f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059fa:	4a16      	ldr	r2, [pc, #88]	; (8005a54 <HAL_UART_MspInit+0x80>)
 80059fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a00:	6593      	str	r3, [r2, #88]	; 0x58
 8005a02:	4b14      	ldr	r3, [pc, #80]	; (8005a54 <HAL_UART_MspInit+0x80>)
 8005a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a0a:	613b      	str	r3, [r7, #16]
 8005a0c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a0e:	4b11      	ldr	r3, [pc, #68]	; (8005a54 <HAL_UART_MspInit+0x80>)
 8005a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a12:	4a10      	ldr	r2, [pc, #64]	; (8005a54 <HAL_UART_MspInit+0x80>)
 8005a14:	f043 0301 	orr.w	r3, r3, #1
 8005a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a1a:	4b0e      	ldr	r3, [pc, #56]	; (8005a54 <HAL_UART_MspInit+0x80>)
 8005a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	60fb      	str	r3, [r7, #12]
 8005a24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005a26:	230c      	movs	r3, #12
 8005a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a2a:	2302      	movs	r3, #2
 8005a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a32:	2303      	movs	r3, #3
 8005a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005a36:	2307      	movs	r3, #7
 8005a38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a3a:	f107 0314 	add.w	r3, r7, #20
 8005a3e:	4619      	mov	r1, r3
 8005a40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a44:	f7fd f94a 	bl	8002cdc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005a48:	bf00      	nop
 8005a4a:	3728      	adds	r7, #40	; 0x28
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	40004400 	.word	0x40004400
 8005a54:	40021000 	.word	0x40021000

08005a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005a5c:	bf00      	nop
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr

08005a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005a66:	b480      	push	{r7}
 8005a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005a6a:	e7fe      	b.n	8005a6a <HardFault_Handler+0x4>

08005a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005a70:	e7fe      	b.n	8005a70 <MemManage_Handler+0x4>

08005a72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005a72:	b480      	push	{r7}
 8005a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005a76:	e7fe      	b.n	8005a76 <BusFault_Handler+0x4>

08005a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005a7c:	e7fe      	b.n	8005a7c <UsageFault_Handler+0x4>

08005a7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005a82:	bf00      	nop
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005a90:	bf00      	nop
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr

08005a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005a9e:	bf00      	nop
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005aac:	f7fb fa56 	bl	8000f5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005ab0:	bf00      	nop
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8005ab8:	bf00      	nop
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005ac6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005aca:	f7fd fac7 	bl	800305c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005ace:	bf00      	nop
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b086      	sub	sp, #24
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	60f8      	str	r0, [r7, #12]
 8005ada:	60b9      	str	r1, [r7, #8]
 8005adc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ade:	2300      	movs	r3, #0
 8005ae0:	617b      	str	r3, [r7, #20]
 8005ae2:	e00a      	b.n	8005afa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005ae4:	f3af 8000 	nop.w
 8005ae8:	4601      	mov	r1, r0
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	1c5a      	adds	r2, r3, #1
 8005aee:	60ba      	str	r2, [r7, #8]
 8005af0:	b2ca      	uxtb	r2, r1
 8005af2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	3301      	adds	r3, #1
 8005af8:	617b      	str	r3, [r7, #20]
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	dbf0      	blt.n	8005ae4 <_read+0x12>
	}

return len;
 8005b02:	687b      	ldr	r3, [r7, #4]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3718      	adds	r7, #24
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b18:	2300      	movs	r3, #0
 8005b1a:	617b      	str	r3, [r7, #20]
 8005b1c:	e009      	b.n	8005b32 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	1c5a      	adds	r2, r3, #1
 8005b22:	60ba      	str	r2, [r7, #8]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7ff fb46 	bl	80051b8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	617b      	str	r3, [r7, #20]
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	dbf1      	blt.n	8005b1e <_write+0x12>
	}
	return len;
 8005b3a:	687b      	ldr	r3, [r7, #4]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3718      	adds	r7, #24
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <_close>:

int _close(int file)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
	return -1;
 8005b4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b6c:	605a      	str	r2, [r3, #4]
	return 0;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <_isatty>:

int _isatty(int file)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
	return 1;
 8005b84:	2301      	movs	r3, #1
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b085      	sub	sp, #20
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	60f8      	str	r0, [r7, #12]
 8005b9a:	60b9      	str	r1, [r7, #8]
 8005b9c:	607a      	str	r2, [r7, #4]
	return 0;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3714      	adds	r7, #20
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005bb4:	4b11      	ldr	r3, [pc, #68]	; (8005bfc <_sbrk+0x50>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d102      	bne.n	8005bc2 <_sbrk+0x16>
		heap_end = &end;
 8005bbc:	4b0f      	ldr	r3, [pc, #60]	; (8005bfc <_sbrk+0x50>)
 8005bbe:	4a10      	ldr	r2, [pc, #64]	; (8005c00 <_sbrk+0x54>)
 8005bc0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005bc2:	4b0e      	ldr	r3, [pc, #56]	; (8005bfc <_sbrk+0x50>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005bc8:	4b0c      	ldr	r3, [pc, #48]	; (8005bfc <_sbrk+0x50>)
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4413      	add	r3, r2
 8005bd0:	466a      	mov	r2, sp
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d907      	bls.n	8005be6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005bd6:	f000 f875 	bl	8005cc4 <__errno>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	230c      	movs	r3, #12
 8005bde:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005be0:	f04f 33ff 	mov.w	r3, #4294967295
 8005be4:	e006      	b.n	8005bf4 <_sbrk+0x48>
	}

	heap_end += incr;
 8005be6:	4b05      	ldr	r3, [pc, #20]	; (8005bfc <_sbrk+0x50>)
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4413      	add	r3, r2
 8005bee:	4a03      	ldr	r2, [pc, #12]	; (8005bfc <_sbrk+0x50>)
 8005bf0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	2000020c 	.word	0x2000020c
 8005c00:	20000340 	.word	0x20000340

08005c04 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005c04:	b480      	push	{r7}
 8005c06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005c08:	4b17      	ldr	r3, [pc, #92]	; (8005c68 <SystemInit+0x64>)
 8005c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c0e:	4a16      	ldr	r2, [pc, #88]	; (8005c68 <SystemInit+0x64>)
 8005c10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005c18:	4b14      	ldr	r3, [pc, #80]	; (8005c6c <SystemInit+0x68>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a13      	ldr	r2, [pc, #76]	; (8005c6c <SystemInit+0x68>)
 8005c1e:	f043 0301 	orr.w	r3, r3, #1
 8005c22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8005c24:	4b11      	ldr	r3, [pc, #68]	; (8005c6c <SystemInit+0x68>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8005c2a:	4b10      	ldr	r3, [pc, #64]	; (8005c6c <SystemInit+0x68>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a0f      	ldr	r2, [pc, #60]	; (8005c6c <SystemInit+0x68>)
 8005c30:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8005c34:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005c38:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8005c3a:	4b0c      	ldr	r3, [pc, #48]	; (8005c6c <SystemInit+0x68>)
 8005c3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005c40:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005c42:	4b0a      	ldr	r3, [pc, #40]	; (8005c6c <SystemInit+0x68>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a09      	ldr	r2, [pc, #36]	; (8005c6c <SystemInit+0x68>)
 8005c48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c4c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005c4e:	4b07      	ldr	r3, [pc, #28]	; (8005c6c <SystemInit+0x68>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005c54:	4b04      	ldr	r3, [pc, #16]	; (8005c68 <SystemInit+0x64>)
 8005c56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005c5a:	609a      	str	r2, [r3, #8]
#endif
}
 8005c5c:	bf00      	nop
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	e000ed00 	.word	0xe000ed00
 8005c6c:	40021000 	.word	0x40021000

08005c70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005c70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005ca8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005c74:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005c76:	e003      	b.n	8005c80 <LoopCopyDataInit>

08005c78 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005c78:	4b0c      	ldr	r3, [pc, #48]	; (8005cac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005c7a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005c7c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005c7e:	3104      	adds	r1, #4

08005c80 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005c80:	480b      	ldr	r0, [pc, #44]	; (8005cb0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005c82:	4b0c      	ldr	r3, [pc, #48]	; (8005cb4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005c84:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005c86:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005c88:	d3f6      	bcc.n	8005c78 <CopyDataInit>
	ldr	r2, =_sbss
 8005c8a:	4a0b      	ldr	r2, [pc, #44]	; (8005cb8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005c8c:	e002      	b.n	8005c94 <LoopFillZerobss>

08005c8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005c8e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005c90:	f842 3b04 	str.w	r3, [r2], #4

08005c94 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005c94:	4b09      	ldr	r3, [pc, #36]	; (8005cbc <LoopForever+0x16>)
	cmp	r2, r3
 8005c96:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005c98:	d3f9      	bcc.n	8005c8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005c9a:	f7ff ffb3 	bl	8005c04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005c9e:	f000 f817 	bl	8005cd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005ca2:	f7ff fafd 	bl	80052a0 <main>

08005ca6 <LoopForever>:

LoopForever:
    b LoopForever
 8005ca6:	e7fe      	b.n	8005ca6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005ca8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8005cac:	08008798 	.word	0x08008798
	ldr	r0, =_sdata
 8005cb0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005cb4:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 8005cb8:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8005cbc:	20000340 	.word	0x20000340

08005cc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005cc0:	e7fe      	b.n	8005cc0 <ADC1_2_IRQHandler>
	...

08005cc4 <__errno>:
 8005cc4:	4b01      	ldr	r3, [pc, #4]	; (8005ccc <__errno+0x8>)
 8005cc6:	6818      	ldr	r0, [r3, #0]
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	20000010 	.word	0x20000010

08005cd0 <__libc_init_array>:
 8005cd0:	b570      	push	{r4, r5, r6, lr}
 8005cd2:	4e0d      	ldr	r6, [pc, #52]	; (8005d08 <__libc_init_array+0x38>)
 8005cd4:	4c0d      	ldr	r4, [pc, #52]	; (8005d0c <__libc_init_array+0x3c>)
 8005cd6:	1ba4      	subs	r4, r4, r6
 8005cd8:	10a4      	asrs	r4, r4, #2
 8005cda:	2500      	movs	r5, #0
 8005cdc:	42a5      	cmp	r5, r4
 8005cde:	d109      	bne.n	8005cf4 <__libc_init_array+0x24>
 8005ce0:	4e0b      	ldr	r6, [pc, #44]	; (8005d10 <__libc_init_array+0x40>)
 8005ce2:	4c0c      	ldr	r4, [pc, #48]	; (8005d14 <__libc_init_array+0x44>)
 8005ce4:	f002 fbaa 	bl	800843c <_init>
 8005ce8:	1ba4      	subs	r4, r4, r6
 8005cea:	10a4      	asrs	r4, r4, #2
 8005cec:	2500      	movs	r5, #0
 8005cee:	42a5      	cmp	r5, r4
 8005cf0:	d105      	bne.n	8005cfe <__libc_init_array+0x2e>
 8005cf2:	bd70      	pop	{r4, r5, r6, pc}
 8005cf4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005cf8:	4798      	blx	r3
 8005cfa:	3501      	adds	r5, #1
 8005cfc:	e7ee      	b.n	8005cdc <__libc_init_array+0xc>
 8005cfe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d02:	4798      	blx	r3
 8005d04:	3501      	adds	r5, #1
 8005d06:	e7f2      	b.n	8005cee <__libc_init_array+0x1e>
 8005d08:	08008790 	.word	0x08008790
 8005d0c:	08008790 	.word	0x08008790
 8005d10:	08008790 	.word	0x08008790
 8005d14:	08008794 	.word	0x08008794

08005d18 <memset>:
 8005d18:	4402      	add	r2, r0
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d100      	bne.n	8005d22 <memset+0xa>
 8005d20:	4770      	bx	lr
 8005d22:	f803 1b01 	strb.w	r1, [r3], #1
 8005d26:	e7f9      	b.n	8005d1c <memset+0x4>

08005d28 <__cvt>:
 8005d28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d2c:	ec55 4b10 	vmov	r4, r5, d0
 8005d30:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005d32:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005d36:	2d00      	cmp	r5, #0
 8005d38:	460e      	mov	r6, r1
 8005d3a:	4691      	mov	r9, r2
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	bfb8      	it	lt
 8005d40:	4622      	movlt	r2, r4
 8005d42:	462b      	mov	r3, r5
 8005d44:	f027 0720 	bic.w	r7, r7, #32
 8005d48:	bfbb      	ittet	lt
 8005d4a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005d4e:	461d      	movlt	r5, r3
 8005d50:	2300      	movge	r3, #0
 8005d52:	232d      	movlt	r3, #45	; 0x2d
 8005d54:	bfb8      	it	lt
 8005d56:	4614      	movlt	r4, r2
 8005d58:	2f46      	cmp	r7, #70	; 0x46
 8005d5a:	700b      	strb	r3, [r1, #0]
 8005d5c:	d004      	beq.n	8005d68 <__cvt+0x40>
 8005d5e:	2f45      	cmp	r7, #69	; 0x45
 8005d60:	d100      	bne.n	8005d64 <__cvt+0x3c>
 8005d62:	3601      	adds	r6, #1
 8005d64:	2102      	movs	r1, #2
 8005d66:	e000      	b.n	8005d6a <__cvt+0x42>
 8005d68:	2103      	movs	r1, #3
 8005d6a:	ab03      	add	r3, sp, #12
 8005d6c:	9301      	str	r3, [sp, #4]
 8005d6e:	ab02      	add	r3, sp, #8
 8005d70:	9300      	str	r3, [sp, #0]
 8005d72:	4632      	mov	r2, r6
 8005d74:	4653      	mov	r3, sl
 8005d76:	ec45 4b10 	vmov	d0, r4, r5
 8005d7a:	f000 fdf9 	bl	8006970 <_dtoa_r>
 8005d7e:	2f47      	cmp	r7, #71	; 0x47
 8005d80:	4680      	mov	r8, r0
 8005d82:	d102      	bne.n	8005d8a <__cvt+0x62>
 8005d84:	f019 0f01 	tst.w	r9, #1
 8005d88:	d026      	beq.n	8005dd8 <__cvt+0xb0>
 8005d8a:	2f46      	cmp	r7, #70	; 0x46
 8005d8c:	eb08 0906 	add.w	r9, r8, r6
 8005d90:	d111      	bne.n	8005db6 <__cvt+0x8e>
 8005d92:	f898 3000 	ldrb.w	r3, [r8]
 8005d96:	2b30      	cmp	r3, #48	; 0x30
 8005d98:	d10a      	bne.n	8005db0 <__cvt+0x88>
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	4620      	mov	r0, r4
 8005da0:	4629      	mov	r1, r5
 8005da2:	f7fa fe91 	bl	8000ac8 <__aeabi_dcmpeq>
 8005da6:	b918      	cbnz	r0, 8005db0 <__cvt+0x88>
 8005da8:	f1c6 0601 	rsb	r6, r6, #1
 8005dac:	f8ca 6000 	str.w	r6, [sl]
 8005db0:	f8da 3000 	ldr.w	r3, [sl]
 8005db4:	4499      	add	r9, r3
 8005db6:	2200      	movs	r2, #0
 8005db8:	2300      	movs	r3, #0
 8005dba:	4620      	mov	r0, r4
 8005dbc:	4629      	mov	r1, r5
 8005dbe:	f7fa fe83 	bl	8000ac8 <__aeabi_dcmpeq>
 8005dc2:	b938      	cbnz	r0, 8005dd4 <__cvt+0xac>
 8005dc4:	2230      	movs	r2, #48	; 0x30
 8005dc6:	9b03      	ldr	r3, [sp, #12]
 8005dc8:	454b      	cmp	r3, r9
 8005dca:	d205      	bcs.n	8005dd8 <__cvt+0xb0>
 8005dcc:	1c59      	adds	r1, r3, #1
 8005dce:	9103      	str	r1, [sp, #12]
 8005dd0:	701a      	strb	r2, [r3, #0]
 8005dd2:	e7f8      	b.n	8005dc6 <__cvt+0x9e>
 8005dd4:	f8cd 900c 	str.w	r9, [sp, #12]
 8005dd8:	9b03      	ldr	r3, [sp, #12]
 8005dda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ddc:	eba3 0308 	sub.w	r3, r3, r8
 8005de0:	4640      	mov	r0, r8
 8005de2:	6013      	str	r3, [r2, #0]
 8005de4:	b004      	add	sp, #16
 8005de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005dea <__exponent>:
 8005dea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dec:	2900      	cmp	r1, #0
 8005dee:	4604      	mov	r4, r0
 8005df0:	bfba      	itte	lt
 8005df2:	4249      	neglt	r1, r1
 8005df4:	232d      	movlt	r3, #45	; 0x2d
 8005df6:	232b      	movge	r3, #43	; 0x2b
 8005df8:	2909      	cmp	r1, #9
 8005dfa:	f804 2b02 	strb.w	r2, [r4], #2
 8005dfe:	7043      	strb	r3, [r0, #1]
 8005e00:	dd20      	ble.n	8005e44 <__exponent+0x5a>
 8005e02:	f10d 0307 	add.w	r3, sp, #7
 8005e06:	461f      	mov	r7, r3
 8005e08:	260a      	movs	r6, #10
 8005e0a:	fb91 f5f6 	sdiv	r5, r1, r6
 8005e0e:	fb06 1115 	mls	r1, r6, r5, r1
 8005e12:	3130      	adds	r1, #48	; 0x30
 8005e14:	2d09      	cmp	r5, #9
 8005e16:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005e1a:	f103 32ff 	add.w	r2, r3, #4294967295
 8005e1e:	4629      	mov	r1, r5
 8005e20:	dc09      	bgt.n	8005e36 <__exponent+0x4c>
 8005e22:	3130      	adds	r1, #48	; 0x30
 8005e24:	3b02      	subs	r3, #2
 8005e26:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005e2a:	42bb      	cmp	r3, r7
 8005e2c:	4622      	mov	r2, r4
 8005e2e:	d304      	bcc.n	8005e3a <__exponent+0x50>
 8005e30:	1a10      	subs	r0, r2, r0
 8005e32:	b003      	add	sp, #12
 8005e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e36:	4613      	mov	r3, r2
 8005e38:	e7e7      	b.n	8005e0a <__exponent+0x20>
 8005e3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e3e:	f804 2b01 	strb.w	r2, [r4], #1
 8005e42:	e7f2      	b.n	8005e2a <__exponent+0x40>
 8005e44:	2330      	movs	r3, #48	; 0x30
 8005e46:	4419      	add	r1, r3
 8005e48:	7083      	strb	r3, [r0, #2]
 8005e4a:	1d02      	adds	r2, r0, #4
 8005e4c:	70c1      	strb	r1, [r0, #3]
 8005e4e:	e7ef      	b.n	8005e30 <__exponent+0x46>

08005e50 <_printf_float>:
 8005e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e54:	b08d      	sub	sp, #52	; 0x34
 8005e56:	460c      	mov	r4, r1
 8005e58:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005e5c:	4616      	mov	r6, r2
 8005e5e:	461f      	mov	r7, r3
 8005e60:	4605      	mov	r5, r0
 8005e62:	f001 fcb7 	bl	80077d4 <_localeconv_r>
 8005e66:	6803      	ldr	r3, [r0, #0]
 8005e68:	9304      	str	r3, [sp, #16]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7fa f9b0 	bl	80001d0 <strlen>
 8005e70:	2300      	movs	r3, #0
 8005e72:	930a      	str	r3, [sp, #40]	; 0x28
 8005e74:	f8d8 3000 	ldr.w	r3, [r8]
 8005e78:	9005      	str	r0, [sp, #20]
 8005e7a:	3307      	adds	r3, #7
 8005e7c:	f023 0307 	bic.w	r3, r3, #7
 8005e80:	f103 0208 	add.w	r2, r3, #8
 8005e84:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005e88:	f8d4 b000 	ldr.w	fp, [r4]
 8005e8c:	f8c8 2000 	str.w	r2, [r8]
 8005e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e94:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005e98:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005e9c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005ea0:	9307      	str	r3, [sp, #28]
 8005ea2:	f8cd 8018 	str.w	r8, [sp, #24]
 8005ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8005eaa:	4ba7      	ldr	r3, [pc, #668]	; (8006148 <_printf_float+0x2f8>)
 8005eac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005eb0:	f7fa fe3c 	bl	8000b2c <__aeabi_dcmpun>
 8005eb4:	bb70      	cbnz	r0, 8005f14 <_printf_float+0xc4>
 8005eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8005eba:	4ba3      	ldr	r3, [pc, #652]	; (8006148 <_printf_float+0x2f8>)
 8005ebc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ec0:	f7fa fe16 	bl	8000af0 <__aeabi_dcmple>
 8005ec4:	bb30      	cbnz	r0, 8005f14 <_printf_float+0xc4>
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	2300      	movs	r3, #0
 8005eca:	4640      	mov	r0, r8
 8005ecc:	4649      	mov	r1, r9
 8005ece:	f7fa fe05 	bl	8000adc <__aeabi_dcmplt>
 8005ed2:	b110      	cbz	r0, 8005eda <_printf_float+0x8a>
 8005ed4:	232d      	movs	r3, #45	; 0x2d
 8005ed6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eda:	4a9c      	ldr	r2, [pc, #624]	; (800614c <_printf_float+0x2fc>)
 8005edc:	4b9c      	ldr	r3, [pc, #624]	; (8006150 <_printf_float+0x300>)
 8005ede:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005ee2:	bf8c      	ite	hi
 8005ee4:	4690      	movhi	r8, r2
 8005ee6:	4698      	movls	r8, r3
 8005ee8:	2303      	movs	r3, #3
 8005eea:	f02b 0204 	bic.w	r2, fp, #4
 8005eee:	6123      	str	r3, [r4, #16]
 8005ef0:	6022      	str	r2, [r4, #0]
 8005ef2:	f04f 0900 	mov.w	r9, #0
 8005ef6:	9700      	str	r7, [sp, #0]
 8005ef8:	4633      	mov	r3, r6
 8005efa:	aa0b      	add	r2, sp, #44	; 0x2c
 8005efc:	4621      	mov	r1, r4
 8005efe:	4628      	mov	r0, r5
 8005f00:	f000 f9e6 	bl	80062d0 <_printf_common>
 8005f04:	3001      	adds	r0, #1
 8005f06:	f040 808d 	bne.w	8006024 <_printf_float+0x1d4>
 8005f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f0e:	b00d      	add	sp, #52	; 0x34
 8005f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f14:	4642      	mov	r2, r8
 8005f16:	464b      	mov	r3, r9
 8005f18:	4640      	mov	r0, r8
 8005f1a:	4649      	mov	r1, r9
 8005f1c:	f7fa fe06 	bl	8000b2c <__aeabi_dcmpun>
 8005f20:	b110      	cbz	r0, 8005f28 <_printf_float+0xd8>
 8005f22:	4a8c      	ldr	r2, [pc, #560]	; (8006154 <_printf_float+0x304>)
 8005f24:	4b8c      	ldr	r3, [pc, #560]	; (8006158 <_printf_float+0x308>)
 8005f26:	e7da      	b.n	8005ede <_printf_float+0x8e>
 8005f28:	6861      	ldr	r1, [r4, #4]
 8005f2a:	1c4b      	adds	r3, r1, #1
 8005f2c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005f30:	a80a      	add	r0, sp, #40	; 0x28
 8005f32:	d13e      	bne.n	8005fb2 <_printf_float+0x162>
 8005f34:	2306      	movs	r3, #6
 8005f36:	6063      	str	r3, [r4, #4]
 8005f38:	2300      	movs	r3, #0
 8005f3a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005f3e:	ab09      	add	r3, sp, #36	; 0x24
 8005f40:	9300      	str	r3, [sp, #0]
 8005f42:	ec49 8b10 	vmov	d0, r8, r9
 8005f46:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005f4a:	6022      	str	r2, [r4, #0]
 8005f4c:	f8cd a004 	str.w	sl, [sp, #4]
 8005f50:	6861      	ldr	r1, [r4, #4]
 8005f52:	4628      	mov	r0, r5
 8005f54:	f7ff fee8 	bl	8005d28 <__cvt>
 8005f58:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005f5c:	2b47      	cmp	r3, #71	; 0x47
 8005f5e:	4680      	mov	r8, r0
 8005f60:	d109      	bne.n	8005f76 <_printf_float+0x126>
 8005f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f64:	1cd8      	adds	r0, r3, #3
 8005f66:	db02      	blt.n	8005f6e <_printf_float+0x11e>
 8005f68:	6862      	ldr	r2, [r4, #4]
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	dd47      	ble.n	8005ffe <_printf_float+0x1ae>
 8005f6e:	f1aa 0a02 	sub.w	sl, sl, #2
 8005f72:	fa5f fa8a 	uxtb.w	sl, sl
 8005f76:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005f7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f7c:	d824      	bhi.n	8005fc8 <_printf_float+0x178>
 8005f7e:	3901      	subs	r1, #1
 8005f80:	4652      	mov	r2, sl
 8005f82:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005f86:	9109      	str	r1, [sp, #36]	; 0x24
 8005f88:	f7ff ff2f 	bl	8005dea <__exponent>
 8005f8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f8e:	1813      	adds	r3, r2, r0
 8005f90:	2a01      	cmp	r2, #1
 8005f92:	4681      	mov	r9, r0
 8005f94:	6123      	str	r3, [r4, #16]
 8005f96:	dc02      	bgt.n	8005f9e <_printf_float+0x14e>
 8005f98:	6822      	ldr	r2, [r4, #0]
 8005f9a:	07d1      	lsls	r1, r2, #31
 8005f9c:	d501      	bpl.n	8005fa2 <_printf_float+0x152>
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	6123      	str	r3, [r4, #16]
 8005fa2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d0a5      	beq.n	8005ef6 <_printf_float+0xa6>
 8005faa:	232d      	movs	r3, #45	; 0x2d
 8005fac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fb0:	e7a1      	b.n	8005ef6 <_printf_float+0xa6>
 8005fb2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005fb6:	f000 8177 	beq.w	80062a8 <_printf_float+0x458>
 8005fba:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005fbe:	d1bb      	bne.n	8005f38 <_printf_float+0xe8>
 8005fc0:	2900      	cmp	r1, #0
 8005fc2:	d1b9      	bne.n	8005f38 <_printf_float+0xe8>
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e7b6      	b.n	8005f36 <_printf_float+0xe6>
 8005fc8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005fcc:	d119      	bne.n	8006002 <_printf_float+0x1b2>
 8005fce:	2900      	cmp	r1, #0
 8005fd0:	6863      	ldr	r3, [r4, #4]
 8005fd2:	dd0c      	ble.n	8005fee <_printf_float+0x19e>
 8005fd4:	6121      	str	r1, [r4, #16]
 8005fd6:	b913      	cbnz	r3, 8005fde <_printf_float+0x18e>
 8005fd8:	6822      	ldr	r2, [r4, #0]
 8005fda:	07d2      	lsls	r2, r2, #31
 8005fdc:	d502      	bpl.n	8005fe4 <_printf_float+0x194>
 8005fde:	3301      	adds	r3, #1
 8005fe0:	440b      	add	r3, r1
 8005fe2:	6123      	str	r3, [r4, #16]
 8005fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fe6:	65a3      	str	r3, [r4, #88]	; 0x58
 8005fe8:	f04f 0900 	mov.w	r9, #0
 8005fec:	e7d9      	b.n	8005fa2 <_printf_float+0x152>
 8005fee:	b913      	cbnz	r3, 8005ff6 <_printf_float+0x1a6>
 8005ff0:	6822      	ldr	r2, [r4, #0]
 8005ff2:	07d0      	lsls	r0, r2, #31
 8005ff4:	d501      	bpl.n	8005ffa <_printf_float+0x1aa>
 8005ff6:	3302      	adds	r3, #2
 8005ff8:	e7f3      	b.n	8005fe2 <_printf_float+0x192>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e7f1      	b.n	8005fe2 <_printf_float+0x192>
 8005ffe:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006002:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006006:	4293      	cmp	r3, r2
 8006008:	db05      	blt.n	8006016 <_printf_float+0x1c6>
 800600a:	6822      	ldr	r2, [r4, #0]
 800600c:	6123      	str	r3, [r4, #16]
 800600e:	07d1      	lsls	r1, r2, #31
 8006010:	d5e8      	bpl.n	8005fe4 <_printf_float+0x194>
 8006012:	3301      	adds	r3, #1
 8006014:	e7e5      	b.n	8005fe2 <_printf_float+0x192>
 8006016:	2b00      	cmp	r3, #0
 8006018:	bfd4      	ite	le
 800601a:	f1c3 0302 	rsble	r3, r3, #2
 800601e:	2301      	movgt	r3, #1
 8006020:	4413      	add	r3, r2
 8006022:	e7de      	b.n	8005fe2 <_printf_float+0x192>
 8006024:	6823      	ldr	r3, [r4, #0]
 8006026:	055a      	lsls	r2, r3, #21
 8006028:	d407      	bmi.n	800603a <_printf_float+0x1ea>
 800602a:	6923      	ldr	r3, [r4, #16]
 800602c:	4642      	mov	r2, r8
 800602e:	4631      	mov	r1, r6
 8006030:	4628      	mov	r0, r5
 8006032:	47b8      	blx	r7
 8006034:	3001      	adds	r0, #1
 8006036:	d12b      	bne.n	8006090 <_printf_float+0x240>
 8006038:	e767      	b.n	8005f0a <_printf_float+0xba>
 800603a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800603e:	f240 80dc 	bls.w	80061fa <_printf_float+0x3aa>
 8006042:	2200      	movs	r2, #0
 8006044:	2300      	movs	r3, #0
 8006046:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800604a:	f7fa fd3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800604e:	2800      	cmp	r0, #0
 8006050:	d033      	beq.n	80060ba <_printf_float+0x26a>
 8006052:	2301      	movs	r3, #1
 8006054:	4a41      	ldr	r2, [pc, #260]	; (800615c <_printf_float+0x30c>)
 8006056:	4631      	mov	r1, r6
 8006058:	4628      	mov	r0, r5
 800605a:	47b8      	blx	r7
 800605c:	3001      	adds	r0, #1
 800605e:	f43f af54 	beq.w	8005f0a <_printf_float+0xba>
 8006062:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006066:	429a      	cmp	r2, r3
 8006068:	db02      	blt.n	8006070 <_printf_float+0x220>
 800606a:	6823      	ldr	r3, [r4, #0]
 800606c:	07d8      	lsls	r0, r3, #31
 800606e:	d50f      	bpl.n	8006090 <_printf_float+0x240>
 8006070:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006074:	4631      	mov	r1, r6
 8006076:	4628      	mov	r0, r5
 8006078:	47b8      	blx	r7
 800607a:	3001      	adds	r0, #1
 800607c:	f43f af45 	beq.w	8005f0a <_printf_float+0xba>
 8006080:	f04f 0800 	mov.w	r8, #0
 8006084:	f104 091a 	add.w	r9, r4, #26
 8006088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800608a:	3b01      	subs	r3, #1
 800608c:	4543      	cmp	r3, r8
 800608e:	dc09      	bgt.n	80060a4 <_printf_float+0x254>
 8006090:	6823      	ldr	r3, [r4, #0]
 8006092:	079b      	lsls	r3, r3, #30
 8006094:	f100 8103 	bmi.w	800629e <_printf_float+0x44e>
 8006098:	68e0      	ldr	r0, [r4, #12]
 800609a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800609c:	4298      	cmp	r0, r3
 800609e:	bfb8      	it	lt
 80060a0:	4618      	movlt	r0, r3
 80060a2:	e734      	b.n	8005f0e <_printf_float+0xbe>
 80060a4:	2301      	movs	r3, #1
 80060a6:	464a      	mov	r2, r9
 80060a8:	4631      	mov	r1, r6
 80060aa:	4628      	mov	r0, r5
 80060ac:	47b8      	blx	r7
 80060ae:	3001      	adds	r0, #1
 80060b0:	f43f af2b 	beq.w	8005f0a <_printf_float+0xba>
 80060b4:	f108 0801 	add.w	r8, r8, #1
 80060b8:	e7e6      	b.n	8006088 <_printf_float+0x238>
 80060ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060bc:	2b00      	cmp	r3, #0
 80060be:	dc2b      	bgt.n	8006118 <_printf_float+0x2c8>
 80060c0:	2301      	movs	r3, #1
 80060c2:	4a26      	ldr	r2, [pc, #152]	; (800615c <_printf_float+0x30c>)
 80060c4:	4631      	mov	r1, r6
 80060c6:	4628      	mov	r0, r5
 80060c8:	47b8      	blx	r7
 80060ca:	3001      	adds	r0, #1
 80060cc:	f43f af1d 	beq.w	8005f0a <_printf_float+0xba>
 80060d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060d2:	b923      	cbnz	r3, 80060de <_printf_float+0x28e>
 80060d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060d6:	b913      	cbnz	r3, 80060de <_printf_float+0x28e>
 80060d8:	6823      	ldr	r3, [r4, #0]
 80060da:	07d9      	lsls	r1, r3, #31
 80060dc:	d5d8      	bpl.n	8006090 <_printf_float+0x240>
 80060de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060e2:	4631      	mov	r1, r6
 80060e4:	4628      	mov	r0, r5
 80060e6:	47b8      	blx	r7
 80060e8:	3001      	adds	r0, #1
 80060ea:	f43f af0e 	beq.w	8005f0a <_printf_float+0xba>
 80060ee:	f04f 0900 	mov.w	r9, #0
 80060f2:	f104 0a1a 	add.w	sl, r4, #26
 80060f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060f8:	425b      	negs	r3, r3
 80060fa:	454b      	cmp	r3, r9
 80060fc:	dc01      	bgt.n	8006102 <_printf_float+0x2b2>
 80060fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006100:	e794      	b.n	800602c <_printf_float+0x1dc>
 8006102:	2301      	movs	r3, #1
 8006104:	4652      	mov	r2, sl
 8006106:	4631      	mov	r1, r6
 8006108:	4628      	mov	r0, r5
 800610a:	47b8      	blx	r7
 800610c:	3001      	adds	r0, #1
 800610e:	f43f aefc 	beq.w	8005f0a <_printf_float+0xba>
 8006112:	f109 0901 	add.w	r9, r9, #1
 8006116:	e7ee      	b.n	80060f6 <_printf_float+0x2a6>
 8006118:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800611a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800611c:	429a      	cmp	r2, r3
 800611e:	bfa8      	it	ge
 8006120:	461a      	movge	r2, r3
 8006122:	2a00      	cmp	r2, #0
 8006124:	4691      	mov	r9, r2
 8006126:	dd07      	ble.n	8006138 <_printf_float+0x2e8>
 8006128:	4613      	mov	r3, r2
 800612a:	4631      	mov	r1, r6
 800612c:	4642      	mov	r2, r8
 800612e:	4628      	mov	r0, r5
 8006130:	47b8      	blx	r7
 8006132:	3001      	adds	r0, #1
 8006134:	f43f aee9 	beq.w	8005f0a <_printf_float+0xba>
 8006138:	f104 031a 	add.w	r3, r4, #26
 800613c:	f04f 0b00 	mov.w	fp, #0
 8006140:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006144:	9306      	str	r3, [sp, #24]
 8006146:	e015      	b.n	8006174 <_printf_float+0x324>
 8006148:	7fefffff 	.word	0x7fefffff
 800614c:	080084d0 	.word	0x080084d0
 8006150:	080084cc 	.word	0x080084cc
 8006154:	080084d8 	.word	0x080084d8
 8006158:	080084d4 	.word	0x080084d4
 800615c:	080084dc 	.word	0x080084dc
 8006160:	2301      	movs	r3, #1
 8006162:	9a06      	ldr	r2, [sp, #24]
 8006164:	4631      	mov	r1, r6
 8006166:	4628      	mov	r0, r5
 8006168:	47b8      	blx	r7
 800616a:	3001      	adds	r0, #1
 800616c:	f43f aecd 	beq.w	8005f0a <_printf_float+0xba>
 8006170:	f10b 0b01 	add.w	fp, fp, #1
 8006174:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006178:	ebaa 0309 	sub.w	r3, sl, r9
 800617c:	455b      	cmp	r3, fp
 800617e:	dcef      	bgt.n	8006160 <_printf_float+0x310>
 8006180:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006184:	429a      	cmp	r2, r3
 8006186:	44d0      	add	r8, sl
 8006188:	db15      	blt.n	80061b6 <_printf_float+0x366>
 800618a:	6823      	ldr	r3, [r4, #0]
 800618c:	07da      	lsls	r2, r3, #31
 800618e:	d412      	bmi.n	80061b6 <_printf_float+0x366>
 8006190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006192:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006194:	eba3 020a 	sub.w	r2, r3, sl
 8006198:	eba3 0a01 	sub.w	sl, r3, r1
 800619c:	4592      	cmp	sl, r2
 800619e:	bfa8      	it	ge
 80061a0:	4692      	movge	sl, r2
 80061a2:	f1ba 0f00 	cmp.w	sl, #0
 80061a6:	dc0e      	bgt.n	80061c6 <_printf_float+0x376>
 80061a8:	f04f 0800 	mov.w	r8, #0
 80061ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80061b0:	f104 091a 	add.w	r9, r4, #26
 80061b4:	e019      	b.n	80061ea <_printf_float+0x39a>
 80061b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061ba:	4631      	mov	r1, r6
 80061bc:	4628      	mov	r0, r5
 80061be:	47b8      	blx	r7
 80061c0:	3001      	adds	r0, #1
 80061c2:	d1e5      	bne.n	8006190 <_printf_float+0x340>
 80061c4:	e6a1      	b.n	8005f0a <_printf_float+0xba>
 80061c6:	4653      	mov	r3, sl
 80061c8:	4642      	mov	r2, r8
 80061ca:	4631      	mov	r1, r6
 80061cc:	4628      	mov	r0, r5
 80061ce:	47b8      	blx	r7
 80061d0:	3001      	adds	r0, #1
 80061d2:	d1e9      	bne.n	80061a8 <_printf_float+0x358>
 80061d4:	e699      	b.n	8005f0a <_printf_float+0xba>
 80061d6:	2301      	movs	r3, #1
 80061d8:	464a      	mov	r2, r9
 80061da:	4631      	mov	r1, r6
 80061dc:	4628      	mov	r0, r5
 80061de:	47b8      	blx	r7
 80061e0:	3001      	adds	r0, #1
 80061e2:	f43f ae92 	beq.w	8005f0a <_printf_float+0xba>
 80061e6:	f108 0801 	add.w	r8, r8, #1
 80061ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061ee:	1a9b      	subs	r3, r3, r2
 80061f0:	eba3 030a 	sub.w	r3, r3, sl
 80061f4:	4543      	cmp	r3, r8
 80061f6:	dcee      	bgt.n	80061d6 <_printf_float+0x386>
 80061f8:	e74a      	b.n	8006090 <_printf_float+0x240>
 80061fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061fc:	2a01      	cmp	r2, #1
 80061fe:	dc01      	bgt.n	8006204 <_printf_float+0x3b4>
 8006200:	07db      	lsls	r3, r3, #31
 8006202:	d53a      	bpl.n	800627a <_printf_float+0x42a>
 8006204:	2301      	movs	r3, #1
 8006206:	4642      	mov	r2, r8
 8006208:	4631      	mov	r1, r6
 800620a:	4628      	mov	r0, r5
 800620c:	47b8      	blx	r7
 800620e:	3001      	adds	r0, #1
 8006210:	f43f ae7b 	beq.w	8005f0a <_printf_float+0xba>
 8006214:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006218:	4631      	mov	r1, r6
 800621a:	4628      	mov	r0, r5
 800621c:	47b8      	blx	r7
 800621e:	3001      	adds	r0, #1
 8006220:	f108 0801 	add.w	r8, r8, #1
 8006224:	f43f ae71 	beq.w	8005f0a <_printf_float+0xba>
 8006228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800622a:	2200      	movs	r2, #0
 800622c:	f103 3aff 	add.w	sl, r3, #4294967295
 8006230:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006234:	2300      	movs	r3, #0
 8006236:	f7fa fc47 	bl	8000ac8 <__aeabi_dcmpeq>
 800623a:	b9c8      	cbnz	r0, 8006270 <_printf_float+0x420>
 800623c:	4653      	mov	r3, sl
 800623e:	4642      	mov	r2, r8
 8006240:	4631      	mov	r1, r6
 8006242:	4628      	mov	r0, r5
 8006244:	47b8      	blx	r7
 8006246:	3001      	adds	r0, #1
 8006248:	d10e      	bne.n	8006268 <_printf_float+0x418>
 800624a:	e65e      	b.n	8005f0a <_printf_float+0xba>
 800624c:	2301      	movs	r3, #1
 800624e:	4652      	mov	r2, sl
 8006250:	4631      	mov	r1, r6
 8006252:	4628      	mov	r0, r5
 8006254:	47b8      	blx	r7
 8006256:	3001      	adds	r0, #1
 8006258:	f43f ae57 	beq.w	8005f0a <_printf_float+0xba>
 800625c:	f108 0801 	add.w	r8, r8, #1
 8006260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006262:	3b01      	subs	r3, #1
 8006264:	4543      	cmp	r3, r8
 8006266:	dcf1      	bgt.n	800624c <_printf_float+0x3fc>
 8006268:	464b      	mov	r3, r9
 800626a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800626e:	e6de      	b.n	800602e <_printf_float+0x1de>
 8006270:	f04f 0800 	mov.w	r8, #0
 8006274:	f104 0a1a 	add.w	sl, r4, #26
 8006278:	e7f2      	b.n	8006260 <_printf_float+0x410>
 800627a:	2301      	movs	r3, #1
 800627c:	e7df      	b.n	800623e <_printf_float+0x3ee>
 800627e:	2301      	movs	r3, #1
 8006280:	464a      	mov	r2, r9
 8006282:	4631      	mov	r1, r6
 8006284:	4628      	mov	r0, r5
 8006286:	47b8      	blx	r7
 8006288:	3001      	adds	r0, #1
 800628a:	f43f ae3e 	beq.w	8005f0a <_printf_float+0xba>
 800628e:	f108 0801 	add.w	r8, r8, #1
 8006292:	68e3      	ldr	r3, [r4, #12]
 8006294:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006296:	1a9b      	subs	r3, r3, r2
 8006298:	4543      	cmp	r3, r8
 800629a:	dcf0      	bgt.n	800627e <_printf_float+0x42e>
 800629c:	e6fc      	b.n	8006098 <_printf_float+0x248>
 800629e:	f04f 0800 	mov.w	r8, #0
 80062a2:	f104 0919 	add.w	r9, r4, #25
 80062a6:	e7f4      	b.n	8006292 <_printf_float+0x442>
 80062a8:	2900      	cmp	r1, #0
 80062aa:	f43f ae8b 	beq.w	8005fc4 <_printf_float+0x174>
 80062ae:	2300      	movs	r3, #0
 80062b0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80062b4:	ab09      	add	r3, sp, #36	; 0x24
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	ec49 8b10 	vmov	d0, r8, r9
 80062bc:	6022      	str	r2, [r4, #0]
 80062be:	f8cd a004 	str.w	sl, [sp, #4]
 80062c2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80062c6:	4628      	mov	r0, r5
 80062c8:	f7ff fd2e 	bl	8005d28 <__cvt>
 80062cc:	4680      	mov	r8, r0
 80062ce:	e648      	b.n	8005f62 <_printf_float+0x112>

080062d0 <_printf_common>:
 80062d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062d4:	4691      	mov	r9, r2
 80062d6:	461f      	mov	r7, r3
 80062d8:	688a      	ldr	r2, [r1, #8]
 80062da:	690b      	ldr	r3, [r1, #16]
 80062dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062e0:	4293      	cmp	r3, r2
 80062e2:	bfb8      	it	lt
 80062e4:	4613      	movlt	r3, r2
 80062e6:	f8c9 3000 	str.w	r3, [r9]
 80062ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062ee:	4606      	mov	r6, r0
 80062f0:	460c      	mov	r4, r1
 80062f2:	b112      	cbz	r2, 80062fa <_printf_common+0x2a>
 80062f4:	3301      	adds	r3, #1
 80062f6:	f8c9 3000 	str.w	r3, [r9]
 80062fa:	6823      	ldr	r3, [r4, #0]
 80062fc:	0699      	lsls	r1, r3, #26
 80062fe:	bf42      	ittt	mi
 8006300:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006304:	3302      	addmi	r3, #2
 8006306:	f8c9 3000 	strmi.w	r3, [r9]
 800630a:	6825      	ldr	r5, [r4, #0]
 800630c:	f015 0506 	ands.w	r5, r5, #6
 8006310:	d107      	bne.n	8006322 <_printf_common+0x52>
 8006312:	f104 0a19 	add.w	sl, r4, #25
 8006316:	68e3      	ldr	r3, [r4, #12]
 8006318:	f8d9 2000 	ldr.w	r2, [r9]
 800631c:	1a9b      	subs	r3, r3, r2
 800631e:	42ab      	cmp	r3, r5
 8006320:	dc28      	bgt.n	8006374 <_printf_common+0xa4>
 8006322:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006326:	6822      	ldr	r2, [r4, #0]
 8006328:	3300      	adds	r3, #0
 800632a:	bf18      	it	ne
 800632c:	2301      	movne	r3, #1
 800632e:	0692      	lsls	r2, r2, #26
 8006330:	d42d      	bmi.n	800638e <_printf_common+0xbe>
 8006332:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006336:	4639      	mov	r1, r7
 8006338:	4630      	mov	r0, r6
 800633a:	47c0      	blx	r8
 800633c:	3001      	adds	r0, #1
 800633e:	d020      	beq.n	8006382 <_printf_common+0xb2>
 8006340:	6823      	ldr	r3, [r4, #0]
 8006342:	68e5      	ldr	r5, [r4, #12]
 8006344:	f8d9 2000 	ldr.w	r2, [r9]
 8006348:	f003 0306 	and.w	r3, r3, #6
 800634c:	2b04      	cmp	r3, #4
 800634e:	bf08      	it	eq
 8006350:	1aad      	subeq	r5, r5, r2
 8006352:	68a3      	ldr	r3, [r4, #8]
 8006354:	6922      	ldr	r2, [r4, #16]
 8006356:	bf0c      	ite	eq
 8006358:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800635c:	2500      	movne	r5, #0
 800635e:	4293      	cmp	r3, r2
 8006360:	bfc4      	itt	gt
 8006362:	1a9b      	subgt	r3, r3, r2
 8006364:	18ed      	addgt	r5, r5, r3
 8006366:	f04f 0900 	mov.w	r9, #0
 800636a:	341a      	adds	r4, #26
 800636c:	454d      	cmp	r5, r9
 800636e:	d11a      	bne.n	80063a6 <_printf_common+0xd6>
 8006370:	2000      	movs	r0, #0
 8006372:	e008      	b.n	8006386 <_printf_common+0xb6>
 8006374:	2301      	movs	r3, #1
 8006376:	4652      	mov	r2, sl
 8006378:	4639      	mov	r1, r7
 800637a:	4630      	mov	r0, r6
 800637c:	47c0      	blx	r8
 800637e:	3001      	adds	r0, #1
 8006380:	d103      	bne.n	800638a <_printf_common+0xba>
 8006382:	f04f 30ff 	mov.w	r0, #4294967295
 8006386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800638a:	3501      	adds	r5, #1
 800638c:	e7c3      	b.n	8006316 <_printf_common+0x46>
 800638e:	18e1      	adds	r1, r4, r3
 8006390:	1c5a      	adds	r2, r3, #1
 8006392:	2030      	movs	r0, #48	; 0x30
 8006394:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006398:	4422      	add	r2, r4
 800639a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800639e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063a2:	3302      	adds	r3, #2
 80063a4:	e7c5      	b.n	8006332 <_printf_common+0x62>
 80063a6:	2301      	movs	r3, #1
 80063a8:	4622      	mov	r2, r4
 80063aa:	4639      	mov	r1, r7
 80063ac:	4630      	mov	r0, r6
 80063ae:	47c0      	blx	r8
 80063b0:	3001      	adds	r0, #1
 80063b2:	d0e6      	beq.n	8006382 <_printf_common+0xb2>
 80063b4:	f109 0901 	add.w	r9, r9, #1
 80063b8:	e7d8      	b.n	800636c <_printf_common+0x9c>
	...

080063bc <_printf_i>:
 80063bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80063c0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80063c4:	460c      	mov	r4, r1
 80063c6:	7e09      	ldrb	r1, [r1, #24]
 80063c8:	b085      	sub	sp, #20
 80063ca:	296e      	cmp	r1, #110	; 0x6e
 80063cc:	4617      	mov	r7, r2
 80063ce:	4606      	mov	r6, r0
 80063d0:	4698      	mov	r8, r3
 80063d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80063d4:	f000 80b3 	beq.w	800653e <_printf_i+0x182>
 80063d8:	d822      	bhi.n	8006420 <_printf_i+0x64>
 80063da:	2963      	cmp	r1, #99	; 0x63
 80063dc:	d036      	beq.n	800644c <_printf_i+0x90>
 80063de:	d80a      	bhi.n	80063f6 <_printf_i+0x3a>
 80063e0:	2900      	cmp	r1, #0
 80063e2:	f000 80b9 	beq.w	8006558 <_printf_i+0x19c>
 80063e6:	2958      	cmp	r1, #88	; 0x58
 80063e8:	f000 8083 	beq.w	80064f2 <_printf_i+0x136>
 80063ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063f0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80063f4:	e032      	b.n	800645c <_printf_i+0xa0>
 80063f6:	2964      	cmp	r1, #100	; 0x64
 80063f8:	d001      	beq.n	80063fe <_printf_i+0x42>
 80063fa:	2969      	cmp	r1, #105	; 0x69
 80063fc:	d1f6      	bne.n	80063ec <_printf_i+0x30>
 80063fe:	6820      	ldr	r0, [r4, #0]
 8006400:	6813      	ldr	r3, [r2, #0]
 8006402:	0605      	lsls	r5, r0, #24
 8006404:	f103 0104 	add.w	r1, r3, #4
 8006408:	d52a      	bpl.n	8006460 <_printf_i+0xa4>
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	6011      	str	r1, [r2, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	da03      	bge.n	800641a <_printf_i+0x5e>
 8006412:	222d      	movs	r2, #45	; 0x2d
 8006414:	425b      	negs	r3, r3
 8006416:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800641a:	486f      	ldr	r0, [pc, #444]	; (80065d8 <_printf_i+0x21c>)
 800641c:	220a      	movs	r2, #10
 800641e:	e039      	b.n	8006494 <_printf_i+0xd8>
 8006420:	2973      	cmp	r1, #115	; 0x73
 8006422:	f000 809d 	beq.w	8006560 <_printf_i+0x1a4>
 8006426:	d808      	bhi.n	800643a <_printf_i+0x7e>
 8006428:	296f      	cmp	r1, #111	; 0x6f
 800642a:	d020      	beq.n	800646e <_printf_i+0xb2>
 800642c:	2970      	cmp	r1, #112	; 0x70
 800642e:	d1dd      	bne.n	80063ec <_printf_i+0x30>
 8006430:	6823      	ldr	r3, [r4, #0]
 8006432:	f043 0320 	orr.w	r3, r3, #32
 8006436:	6023      	str	r3, [r4, #0]
 8006438:	e003      	b.n	8006442 <_printf_i+0x86>
 800643a:	2975      	cmp	r1, #117	; 0x75
 800643c:	d017      	beq.n	800646e <_printf_i+0xb2>
 800643e:	2978      	cmp	r1, #120	; 0x78
 8006440:	d1d4      	bne.n	80063ec <_printf_i+0x30>
 8006442:	2378      	movs	r3, #120	; 0x78
 8006444:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006448:	4864      	ldr	r0, [pc, #400]	; (80065dc <_printf_i+0x220>)
 800644a:	e055      	b.n	80064f8 <_printf_i+0x13c>
 800644c:	6813      	ldr	r3, [r2, #0]
 800644e:	1d19      	adds	r1, r3, #4
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6011      	str	r1, [r2, #0]
 8006454:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006458:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800645c:	2301      	movs	r3, #1
 800645e:	e08c      	b.n	800657a <_printf_i+0x1be>
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6011      	str	r1, [r2, #0]
 8006464:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006468:	bf18      	it	ne
 800646a:	b21b      	sxthne	r3, r3
 800646c:	e7cf      	b.n	800640e <_printf_i+0x52>
 800646e:	6813      	ldr	r3, [r2, #0]
 8006470:	6825      	ldr	r5, [r4, #0]
 8006472:	1d18      	adds	r0, r3, #4
 8006474:	6010      	str	r0, [r2, #0]
 8006476:	0628      	lsls	r0, r5, #24
 8006478:	d501      	bpl.n	800647e <_printf_i+0xc2>
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	e002      	b.n	8006484 <_printf_i+0xc8>
 800647e:	0668      	lsls	r0, r5, #25
 8006480:	d5fb      	bpl.n	800647a <_printf_i+0xbe>
 8006482:	881b      	ldrh	r3, [r3, #0]
 8006484:	4854      	ldr	r0, [pc, #336]	; (80065d8 <_printf_i+0x21c>)
 8006486:	296f      	cmp	r1, #111	; 0x6f
 8006488:	bf14      	ite	ne
 800648a:	220a      	movne	r2, #10
 800648c:	2208      	moveq	r2, #8
 800648e:	2100      	movs	r1, #0
 8006490:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006494:	6865      	ldr	r5, [r4, #4]
 8006496:	60a5      	str	r5, [r4, #8]
 8006498:	2d00      	cmp	r5, #0
 800649a:	f2c0 8095 	blt.w	80065c8 <_printf_i+0x20c>
 800649e:	6821      	ldr	r1, [r4, #0]
 80064a0:	f021 0104 	bic.w	r1, r1, #4
 80064a4:	6021      	str	r1, [r4, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d13d      	bne.n	8006526 <_printf_i+0x16a>
 80064aa:	2d00      	cmp	r5, #0
 80064ac:	f040 808e 	bne.w	80065cc <_printf_i+0x210>
 80064b0:	4665      	mov	r5, ip
 80064b2:	2a08      	cmp	r2, #8
 80064b4:	d10b      	bne.n	80064ce <_printf_i+0x112>
 80064b6:	6823      	ldr	r3, [r4, #0]
 80064b8:	07db      	lsls	r3, r3, #31
 80064ba:	d508      	bpl.n	80064ce <_printf_i+0x112>
 80064bc:	6923      	ldr	r3, [r4, #16]
 80064be:	6862      	ldr	r2, [r4, #4]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	bfde      	ittt	le
 80064c4:	2330      	movle	r3, #48	; 0x30
 80064c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 80064ce:	ebac 0305 	sub.w	r3, ip, r5
 80064d2:	6123      	str	r3, [r4, #16]
 80064d4:	f8cd 8000 	str.w	r8, [sp]
 80064d8:	463b      	mov	r3, r7
 80064da:	aa03      	add	r2, sp, #12
 80064dc:	4621      	mov	r1, r4
 80064de:	4630      	mov	r0, r6
 80064e0:	f7ff fef6 	bl	80062d0 <_printf_common>
 80064e4:	3001      	adds	r0, #1
 80064e6:	d14d      	bne.n	8006584 <_printf_i+0x1c8>
 80064e8:	f04f 30ff 	mov.w	r0, #4294967295
 80064ec:	b005      	add	sp, #20
 80064ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80064f2:	4839      	ldr	r0, [pc, #228]	; (80065d8 <_printf_i+0x21c>)
 80064f4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80064f8:	6813      	ldr	r3, [r2, #0]
 80064fa:	6821      	ldr	r1, [r4, #0]
 80064fc:	1d1d      	adds	r5, r3, #4
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6015      	str	r5, [r2, #0]
 8006502:	060a      	lsls	r2, r1, #24
 8006504:	d50b      	bpl.n	800651e <_printf_i+0x162>
 8006506:	07ca      	lsls	r2, r1, #31
 8006508:	bf44      	itt	mi
 800650a:	f041 0120 	orrmi.w	r1, r1, #32
 800650e:	6021      	strmi	r1, [r4, #0]
 8006510:	b91b      	cbnz	r3, 800651a <_printf_i+0x15e>
 8006512:	6822      	ldr	r2, [r4, #0]
 8006514:	f022 0220 	bic.w	r2, r2, #32
 8006518:	6022      	str	r2, [r4, #0]
 800651a:	2210      	movs	r2, #16
 800651c:	e7b7      	b.n	800648e <_printf_i+0xd2>
 800651e:	064d      	lsls	r5, r1, #25
 8006520:	bf48      	it	mi
 8006522:	b29b      	uxthmi	r3, r3
 8006524:	e7ef      	b.n	8006506 <_printf_i+0x14a>
 8006526:	4665      	mov	r5, ip
 8006528:	fbb3 f1f2 	udiv	r1, r3, r2
 800652c:	fb02 3311 	mls	r3, r2, r1, r3
 8006530:	5cc3      	ldrb	r3, [r0, r3]
 8006532:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006536:	460b      	mov	r3, r1
 8006538:	2900      	cmp	r1, #0
 800653a:	d1f5      	bne.n	8006528 <_printf_i+0x16c>
 800653c:	e7b9      	b.n	80064b2 <_printf_i+0xf6>
 800653e:	6813      	ldr	r3, [r2, #0]
 8006540:	6825      	ldr	r5, [r4, #0]
 8006542:	6961      	ldr	r1, [r4, #20]
 8006544:	1d18      	adds	r0, r3, #4
 8006546:	6010      	str	r0, [r2, #0]
 8006548:	0628      	lsls	r0, r5, #24
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	d501      	bpl.n	8006552 <_printf_i+0x196>
 800654e:	6019      	str	r1, [r3, #0]
 8006550:	e002      	b.n	8006558 <_printf_i+0x19c>
 8006552:	066a      	lsls	r2, r5, #25
 8006554:	d5fb      	bpl.n	800654e <_printf_i+0x192>
 8006556:	8019      	strh	r1, [r3, #0]
 8006558:	2300      	movs	r3, #0
 800655a:	6123      	str	r3, [r4, #16]
 800655c:	4665      	mov	r5, ip
 800655e:	e7b9      	b.n	80064d4 <_printf_i+0x118>
 8006560:	6813      	ldr	r3, [r2, #0]
 8006562:	1d19      	adds	r1, r3, #4
 8006564:	6011      	str	r1, [r2, #0]
 8006566:	681d      	ldr	r5, [r3, #0]
 8006568:	6862      	ldr	r2, [r4, #4]
 800656a:	2100      	movs	r1, #0
 800656c:	4628      	mov	r0, r5
 800656e:	f7f9 fe37 	bl	80001e0 <memchr>
 8006572:	b108      	cbz	r0, 8006578 <_printf_i+0x1bc>
 8006574:	1b40      	subs	r0, r0, r5
 8006576:	6060      	str	r0, [r4, #4]
 8006578:	6863      	ldr	r3, [r4, #4]
 800657a:	6123      	str	r3, [r4, #16]
 800657c:	2300      	movs	r3, #0
 800657e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006582:	e7a7      	b.n	80064d4 <_printf_i+0x118>
 8006584:	6923      	ldr	r3, [r4, #16]
 8006586:	462a      	mov	r2, r5
 8006588:	4639      	mov	r1, r7
 800658a:	4630      	mov	r0, r6
 800658c:	47c0      	blx	r8
 800658e:	3001      	adds	r0, #1
 8006590:	d0aa      	beq.n	80064e8 <_printf_i+0x12c>
 8006592:	6823      	ldr	r3, [r4, #0]
 8006594:	079b      	lsls	r3, r3, #30
 8006596:	d413      	bmi.n	80065c0 <_printf_i+0x204>
 8006598:	68e0      	ldr	r0, [r4, #12]
 800659a:	9b03      	ldr	r3, [sp, #12]
 800659c:	4298      	cmp	r0, r3
 800659e:	bfb8      	it	lt
 80065a0:	4618      	movlt	r0, r3
 80065a2:	e7a3      	b.n	80064ec <_printf_i+0x130>
 80065a4:	2301      	movs	r3, #1
 80065a6:	464a      	mov	r2, r9
 80065a8:	4639      	mov	r1, r7
 80065aa:	4630      	mov	r0, r6
 80065ac:	47c0      	blx	r8
 80065ae:	3001      	adds	r0, #1
 80065b0:	d09a      	beq.n	80064e8 <_printf_i+0x12c>
 80065b2:	3501      	adds	r5, #1
 80065b4:	68e3      	ldr	r3, [r4, #12]
 80065b6:	9a03      	ldr	r2, [sp, #12]
 80065b8:	1a9b      	subs	r3, r3, r2
 80065ba:	42ab      	cmp	r3, r5
 80065bc:	dcf2      	bgt.n	80065a4 <_printf_i+0x1e8>
 80065be:	e7eb      	b.n	8006598 <_printf_i+0x1dc>
 80065c0:	2500      	movs	r5, #0
 80065c2:	f104 0919 	add.w	r9, r4, #25
 80065c6:	e7f5      	b.n	80065b4 <_printf_i+0x1f8>
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d1ac      	bne.n	8006526 <_printf_i+0x16a>
 80065cc:	7803      	ldrb	r3, [r0, #0]
 80065ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065d6:	e76c      	b.n	80064b2 <_printf_i+0xf6>
 80065d8:	080084de 	.word	0x080084de
 80065dc:	080084ef 	.word	0x080084ef

080065e0 <iprintf>:
 80065e0:	b40f      	push	{r0, r1, r2, r3}
 80065e2:	4b0a      	ldr	r3, [pc, #40]	; (800660c <iprintf+0x2c>)
 80065e4:	b513      	push	{r0, r1, r4, lr}
 80065e6:	681c      	ldr	r4, [r3, #0]
 80065e8:	b124      	cbz	r4, 80065f4 <iprintf+0x14>
 80065ea:	69a3      	ldr	r3, [r4, #24]
 80065ec:	b913      	cbnz	r3, 80065f4 <iprintf+0x14>
 80065ee:	4620      	mov	r0, r4
 80065f0:	f001 f866 	bl	80076c0 <__sinit>
 80065f4:	ab05      	add	r3, sp, #20
 80065f6:	9a04      	ldr	r2, [sp, #16]
 80065f8:	68a1      	ldr	r1, [r4, #8]
 80065fa:	9301      	str	r3, [sp, #4]
 80065fc:	4620      	mov	r0, r4
 80065fe:	f001 fd29 	bl	8008054 <_vfiprintf_r>
 8006602:	b002      	add	sp, #8
 8006604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006608:	b004      	add	sp, #16
 800660a:	4770      	bx	lr
 800660c:	20000010 	.word	0x20000010

08006610 <_puts_r>:
 8006610:	b570      	push	{r4, r5, r6, lr}
 8006612:	460e      	mov	r6, r1
 8006614:	4605      	mov	r5, r0
 8006616:	b118      	cbz	r0, 8006620 <_puts_r+0x10>
 8006618:	6983      	ldr	r3, [r0, #24]
 800661a:	b90b      	cbnz	r3, 8006620 <_puts_r+0x10>
 800661c:	f001 f850 	bl	80076c0 <__sinit>
 8006620:	69ab      	ldr	r3, [r5, #24]
 8006622:	68ac      	ldr	r4, [r5, #8]
 8006624:	b913      	cbnz	r3, 800662c <_puts_r+0x1c>
 8006626:	4628      	mov	r0, r5
 8006628:	f001 f84a 	bl	80076c0 <__sinit>
 800662c:	4b23      	ldr	r3, [pc, #140]	; (80066bc <_puts_r+0xac>)
 800662e:	429c      	cmp	r4, r3
 8006630:	d117      	bne.n	8006662 <_puts_r+0x52>
 8006632:	686c      	ldr	r4, [r5, #4]
 8006634:	89a3      	ldrh	r3, [r4, #12]
 8006636:	071b      	lsls	r3, r3, #28
 8006638:	d51d      	bpl.n	8006676 <_puts_r+0x66>
 800663a:	6923      	ldr	r3, [r4, #16]
 800663c:	b1db      	cbz	r3, 8006676 <_puts_r+0x66>
 800663e:	3e01      	subs	r6, #1
 8006640:	68a3      	ldr	r3, [r4, #8]
 8006642:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006646:	3b01      	subs	r3, #1
 8006648:	60a3      	str	r3, [r4, #8]
 800664a:	b9e9      	cbnz	r1, 8006688 <_puts_r+0x78>
 800664c:	2b00      	cmp	r3, #0
 800664e:	da2e      	bge.n	80066ae <_puts_r+0x9e>
 8006650:	4622      	mov	r2, r4
 8006652:	210a      	movs	r1, #10
 8006654:	4628      	mov	r0, r5
 8006656:	f000 f83f 	bl	80066d8 <__swbuf_r>
 800665a:	3001      	adds	r0, #1
 800665c:	d011      	beq.n	8006682 <_puts_r+0x72>
 800665e:	200a      	movs	r0, #10
 8006660:	e011      	b.n	8006686 <_puts_r+0x76>
 8006662:	4b17      	ldr	r3, [pc, #92]	; (80066c0 <_puts_r+0xb0>)
 8006664:	429c      	cmp	r4, r3
 8006666:	d101      	bne.n	800666c <_puts_r+0x5c>
 8006668:	68ac      	ldr	r4, [r5, #8]
 800666a:	e7e3      	b.n	8006634 <_puts_r+0x24>
 800666c:	4b15      	ldr	r3, [pc, #84]	; (80066c4 <_puts_r+0xb4>)
 800666e:	429c      	cmp	r4, r3
 8006670:	bf08      	it	eq
 8006672:	68ec      	ldreq	r4, [r5, #12]
 8006674:	e7de      	b.n	8006634 <_puts_r+0x24>
 8006676:	4621      	mov	r1, r4
 8006678:	4628      	mov	r0, r5
 800667a:	f000 f87f 	bl	800677c <__swsetup_r>
 800667e:	2800      	cmp	r0, #0
 8006680:	d0dd      	beq.n	800663e <_puts_r+0x2e>
 8006682:	f04f 30ff 	mov.w	r0, #4294967295
 8006686:	bd70      	pop	{r4, r5, r6, pc}
 8006688:	2b00      	cmp	r3, #0
 800668a:	da04      	bge.n	8006696 <_puts_r+0x86>
 800668c:	69a2      	ldr	r2, [r4, #24]
 800668e:	429a      	cmp	r2, r3
 8006690:	dc06      	bgt.n	80066a0 <_puts_r+0x90>
 8006692:	290a      	cmp	r1, #10
 8006694:	d004      	beq.n	80066a0 <_puts_r+0x90>
 8006696:	6823      	ldr	r3, [r4, #0]
 8006698:	1c5a      	adds	r2, r3, #1
 800669a:	6022      	str	r2, [r4, #0]
 800669c:	7019      	strb	r1, [r3, #0]
 800669e:	e7cf      	b.n	8006640 <_puts_r+0x30>
 80066a0:	4622      	mov	r2, r4
 80066a2:	4628      	mov	r0, r5
 80066a4:	f000 f818 	bl	80066d8 <__swbuf_r>
 80066a8:	3001      	adds	r0, #1
 80066aa:	d1c9      	bne.n	8006640 <_puts_r+0x30>
 80066ac:	e7e9      	b.n	8006682 <_puts_r+0x72>
 80066ae:	6823      	ldr	r3, [r4, #0]
 80066b0:	200a      	movs	r0, #10
 80066b2:	1c5a      	adds	r2, r3, #1
 80066b4:	6022      	str	r2, [r4, #0]
 80066b6:	7018      	strb	r0, [r3, #0]
 80066b8:	e7e5      	b.n	8006686 <_puts_r+0x76>
 80066ba:	bf00      	nop
 80066bc:	08008530 	.word	0x08008530
 80066c0:	08008550 	.word	0x08008550
 80066c4:	08008510 	.word	0x08008510

080066c8 <puts>:
 80066c8:	4b02      	ldr	r3, [pc, #8]	; (80066d4 <puts+0xc>)
 80066ca:	4601      	mov	r1, r0
 80066cc:	6818      	ldr	r0, [r3, #0]
 80066ce:	f7ff bf9f 	b.w	8006610 <_puts_r>
 80066d2:	bf00      	nop
 80066d4:	20000010 	.word	0x20000010

080066d8 <__swbuf_r>:
 80066d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066da:	460e      	mov	r6, r1
 80066dc:	4614      	mov	r4, r2
 80066de:	4605      	mov	r5, r0
 80066e0:	b118      	cbz	r0, 80066ea <__swbuf_r+0x12>
 80066e2:	6983      	ldr	r3, [r0, #24]
 80066e4:	b90b      	cbnz	r3, 80066ea <__swbuf_r+0x12>
 80066e6:	f000 ffeb 	bl	80076c0 <__sinit>
 80066ea:	4b21      	ldr	r3, [pc, #132]	; (8006770 <__swbuf_r+0x98>)
 80066ec:	429c      	cmp	r4, r3
 80066ee:	d12a      	bne.n	8006746 <__swbuf_r+0x6e>
 80066f0:	686c      	ldr	r4, [r5, #4]
 80066f2:	69a3      	ldr	r3, [r4, #24]
 80066f4:	60a3      	str	r3, [r4, #8]
 80066f6:	89a3      	ldrh	r3, [r4, #12]
 80066f8:	071a      	lsls	r2, r3, #28
 80066fa:	d52e      	bpl.n	800675a <__swbuf_r+0x82>
 80066fc:	6923      	ldr	r3, [r4, #16]
 80066fe:	b363      	cbz	r3, 800675a <__swbuf_r+0x82>
 8006700:	6923      	ldr	r3, [r4, #16]
 8006702:	6820      	ldr	r0, [r4, #0]
 8006704:	1ac0      	subs	r0, r0, r3
 8006706:	6963      	ldr	r3, [r4, #20]
 8006708:	b2f6      	uxtb	r6, r6
 800670a:	4283      	cmp	r3, r0
 800670c:	4637      	mov	r7, r6
 800670e:	dc04      	bgt.n	800671a <__swbuf_r+0x42>
 8006710:	4621      	mov	r1, r4
 8006712:	4628      	mov	r0, r5
 8006714:	f000 ff6a 	bl	80075ec <_fflush_r>
 8006718:	bb28      	cbnz	r0, 8006766 <__swbuf_r+0x8e>
 800671a:	68a3      	ldr	r3, [r4, #8]
 800671c:	3b01      	subs	r3, #1
 800671e:	60a3      	str	r3, [r4, #8]
 8006720:	6823      	ldr	r3, [r4, #0]
 8006722:	1c5a      	adds	r2, r3, #1
 8006724:	6022      	str	r2, [r4, #0]
 8006726:	701e      	strb	r6, [r3, #0]
 8006728:	6963      	ldr	r3, [r4, #20]
 800672a:	3001      	adds	r0, #1
 800672c:	4283      	cmp	r3, r0
 800672e:	d004      	beq.n	800673a <__swbuf_r+0x62>
 8006730:	89a3      	ldrh	r3, [r4, #12]
 8006732:	07db      	lsls	r3, r3, #31
 8006734:	d519      	bpl.n	800676a <__swbuf_r+0x92>
 8006736:	2e0a      	cmp	r6, #10
 8006738:	d117      	bne.n	800676a <__swbuf_r+0x92>
 800673a:	4621      	mov	r1, r4
 800673c:	4628      	mov	r0, r5
 800673e:	f000 ff55 	bl	80075ec <_fflush_r>
 8006742:	b190      	cbz	r0, 800676a <__swbuf_r+0x92>
 8006744:	e00f      	b.n	8006766 <__swbuf_r+0x8e>
 8006746:	4b0b      	ldr	r3, [pc, #44]	; (8006774 <__swbuf_r+0x9c>)
 8006748:	429c      	cmp	r4, r3
 800674a:	d101      	bne.n	8006750 <__swbuf_r+0x78>
 800674c:	68ac      	ldr	r4, [r5, #8]
 800674e:	e7d0      	b.n	80066f2 <__swbuf_r+0x1a>
 8006750:	4b09      	ldr	r3, [pc, #36]	; (8006778 <__swbuf_r+0xa0>)
 8006752:	429c      	cmp	r4, r3
 8006754:	bf08      	it	eq
 8006756:	68ec      	ldreq	r4, [r5, #12]
 8006758:	e7cb      	b.n	80066f2 <__swbuf_r+0x1a>
 800675a:	4621      	mov	r1, r4
 800675c:	4628      	mov	r0, r5
 800675e:	f000 f80d 	bl	800677c <__swsetup_r>
 8006762:	2800      	cmp	r0, #0
 8006764:	d0cc      	beq.n	8006700 <__swbuf_r+0x28>
 8006766:	f04f 37ff 	mov.w	r7, #4294967295
 800676a:	4638      	mov	r0, r7
 800676c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800676e:	bf00      	nop
 8006770:	08008530 	.word	0x08008530
 8006774:	08008550 	.word	0x08008550
 8006778:	08008510 	.word	0x08008510

0800677c <__swsetup_r>:
 800677c:	4b32      	ldr	r3, [pc, #200]	; (8006848 <__swsetup_r+0xcc>)
 800677e:	b570      	push	{r4, r5, r6, lr}
 8006780:	681d      	ldr	r5, [r3, #0]
 8006782:	4606      	mov	r6, r0
 8006784:	460c      	mov	r4, r1
 8006786:	b125      	cbz	r5, 8006792 <__swsetup_r+0x16>
 8006788:	69ab      	ldr	r3, [r5, #24]
 800678a:	b913      	cbnz	r3, 8006792 <__swsetup_r+0x16>
 800678c:	4628      	mov	r0, r5
 800678e:	f000 ff97 	bl	80076c0 <__sinit>
 8006792:	4b2e      	ldr	r3, [pc, #184]	; (800684c <__swsetup_r+0xd0>)
 8006794:	429c      	cmp	r4, r3
 8006796:	d10f      	bne.n	80067b8 <__swsetup_r+0x3c>
 8006798:	686c      	ldr	r4, [r5, #4]
 800679a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800679e:	b29a      	uxth	r2, r3
 80067a0:	0715      	lsls	r5, r2, #28
 80067a2:	d42c      	bmi.n	80067fe <__swsetup_r+0x82>
 80067a4:	06d0      	lsls	r0, r2, #27
 80067a6:	d411      	bmi.n	80067cc <__swsetup_r+0x50>
 80067a8:	2209      	movs	r2, #9
 80067aa:	6032      	str	r2, [r6, #0]
 80067ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067b0:	81a3      	strh	r3, [r4, #12]
 80067b2:	f04f 30ff 	mov.w	r0, #4294967295
 80067b6:	e03e      	b.n	8006836 <__swsetup_r+0xba>
 80067b8:	4b25      	ldr	r3, [pc, #148]	; (8006850 <__swsetup_r+0xd4>)
 80067ba:	429c      	cmp	r4, r3
 80067bc:	d101      	bne.n	80067c2 <__swsetup_r+0x46>
 80067be:	68ac      	ldr	r4, [r5, #8]
 80067c0:	e7eb      	b.n	800679a <__swsetup_r+0x1e>
 80067c2:	4b24      	ldr	r3, [pc, #144]	; (8006854 <__swsetup_r+0xd8>)
 80067c4:	429c      	cmp	r4, r3
 80067c6:	bf08      	it	eq
 80067c8:	68ec      	ldreq	r4, [r5, #12]
 80067ca:	e7e6      	b.n	800679a <__swsetup_r+0x1e>
 80067cc:	0751      	lsls	r1, r2, #29
 80067ce:	d512      	bpl.n	80067f6 <__swsetup_r+0x7a>
 80067d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067d2:	b141      	cbz	r1, 80067e6 <__swsetup_r+0x6a>
 80067d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067d8:	4299      	cmp	r1, r3
 80067da:	d002      	beq.n	80067e2 <__swsetup_r+0x66>
 80067dc:	4630      	mov	r0, r6
 80067de:	f001 fb67 	bl	8007eb0 <_free_r>
 80067e2:	2300      	movs	r3, #0
 80067e4:	6363      	str	r3, [r4, #52]	; 0x34
 80067e6:	89a3      	ldrh	r3, [r4, #12]
 80067e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80067ec:	81a3      	strh	r3, [r4, #12]
 80067ee:	2300      	movs	r3, #0
 80067f0:	6063      	str	r3, [r4, #4]
 80067f2:	6923      	ldr	r3, [r4, #16]
 80067f4:	6023      	str	r3, [r4, #0]
 80067f6:	89a3      	ldrh	r3, [r4, #12]
 80067f8:	f043 0308 	orr.w	r3, r3, #8
 80067fc:	81a3      	strh	r3, [r4, #12]
 80067fe:	6923      	ldr	r3, [r4, #16]
 8006800:	b94b      	cbnz	r3, 8006816 <__swsetup_r+0x9a>
 8006802:	89a3      	ldrh	r3, [r4, #12]
 8006804:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800680c:	d003      	beq.n	8006816 <__swsetup_r+0x9a>
 800680e:	4621      	mov	r1, r4
 8006810:	4630      	mov	r0, r6
 8006812:	f001 f811 	bl	8007838 <__smakebuf_r>
 8006816:	89a2      	ldrh	r2, [r4, #12]
 8006818:	f012 0301 	ands.w	r3, r2, #1
 800681c:	d00c      	beq.n	8006838 <__swsetup_r+0xbc>
 800681e:	2300      	movs	r3, #0
 8006820:	60a3      	str	r3, [r4, #8]
 8006822:	6963      	ldr	r3, [r4, #20]
 8006824:	425b      	negs	r3, r3
 8006826:	61a3      	str	r3, [r4, #24]
 8006828:	6923      	ldr	r3, [r4, #16]
 800682a:	b953      	cbnz	r3, 8006842 <__swsetup_r+0xc6>
 800682c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006830:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006834:	d1ba      	bne.n	80067ac <__swsetup_r+0x30>
 8006836:	bd70      	pop	{r4, r5, r6, pc}
 8006838:	0792      	lsls	r2, r2, #30
 800683a:	bf58      	it	pl
 800683c:	6963      	ldrpl	r3, [r4, #20]
 800683e:	60a3      	str	r3, [r4, #8]
 8006840:	e7f2      	b.n	8006828 <__swsetup_r+0xac>
 8006842:	2000      	movs	r0, #0
 8006844:	e7f7      	b.n	8006836 <__swsetup_r+0xba>
 8006846:	bf00      	nop
 8006848:	20000010 	.word	0x20000010
 800684c:	08008530 	.word	0x08008530
 8006850:	08008550 	.word	0x08008550
 8006854:	08008510 	.word	0x08008510

08006858 <quorem>:
 8006858:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800685c:	6903      	ldr	r3, [r0, #16]
 800685e:	690c      	ldr	r4, [r1, #16]
 8006860:	42a3      	cmp	r3, r4
 8006862:	4680      	mov	r8, r0
 8006864:	f2c0 8082 	blt.w	800696c <quorem+0x114>
 8006868:	3c01      	subs	r4, #1
 800686a:	f101 0714 	add.w	r7, r1, #20
 800686e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006872:	f100 0614 	add.w	r6, r0, #20
 8006876:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800687a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800687e:	eb06 030c 	add.w	r3, r6, ip
 8006882:	3501      	adds	r5, #1
 8006884:	eb07 090c 	add.w	r9, r7, ip
 8006888:	9301      	str	r3, [sp, #4]
 800688a:	fbb0 f5f5 	udiv	r5, r0, r5
 800688e:	b395      	cbz	r5, 80068f6 <quorem+0x9e>
 8006890:	f04f 0a00 	mov.w	sl, #0
 8006894:	4638      	mov	r0, r7
 8006896:	46b6      	mov	lr, r6
 8006898:	46d3      	mov	fp, sl
 800689a:	f850 2b04 	ldr.w	r2, [r0], #4
 800689e:	b293      	uxth	r3, r2
 80068a0:	fb05 a303 	mla	r3, r5, r3, sl
 80068a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	ebab 0303 	sub.w	r3, fp, r3
 80068ae:	0c12      	lsrs	r2, r2, #16
 80068b0:	f8de b000 	ldr.w	fp, [lr]
 80068b4:	fb05 a202 	mla	r2, r5, r2, sl
 80068b8:	fa13 f38b 	uxtah	r3, r3, fp
 80068bc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80068c0:	fa1f fb82 	uxth.w	fp, r2
 80068c4:	f8de 2000 	ldr.w	r2, [lr]
 80068c8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80068cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068d6:	4581      	cmp	r9, r0
 80068d8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80068dc:	f84e 3b04 	str.w	r3, [lr], #4
 80068e0:	d2db      	bcs.n	800689a <quorem+0x42>
 80068e2:	f856 300c 	ldr.w	r3, [r6, ip]
 80068e6:	b933      	cbnz	r3, 80068f6 <quorem+0x9e>
 80068e8:	9b01      	ldr	r3, [sp, #4]
 80068ea:	3b04      	subs	r3, #4
 80068ec:	429e      	cmp	r6, r3
 80068ee:	461a      	mov	r2, r3
 80068f0:	d330      	bcc.n	8006954 <quorem+0xfc>
 80068f2:	f8c8 4010 	str.w	r4, [r8, #16]
 80068f6:	4640      	mov	r0, r8
 80068f8:	f001 fa06 	bl	8007d08 <__mcmp>
 80068fc:	2800      	cmp	r0, #0
 80068fe:	db25      	blt.n	800694c <quorem+0xf4>
 8006900:	3501      	adds	r5, #1
 8006902:	4630      	mov	r0, r6
 8006904:	f04f 0c00 	mov.w	ip, #0
 8006908:	f857 2b04 	ldr.w	r2, [r7], #4
 800690c:	f8d0 e000 	ldr.w	lr, [r0]
 8006910:	b293      	uxth	r3, r2
 8006912:	ebac 0303 	sub.w	r3, ip, r3
 8006916:	0c12      	lsrs	r2, r2, #16
 8006918:	fa13 f38e 	uxtah	r3, r3, lr
 800691c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006920:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006924:	b29b      	uxth	r3, r3
 8006926:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800692a:	45b9      	cmp	r9, r7
 800692c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006930:	f840 3b04 	str.w	r3, [r0], #4
 8006934:	d2e8      	bcs.n	8006908 <quorem+0xb0>
 8006936:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800693a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800693e:	b92a      	cbnz	r2, 800694c <quorem+0xf4>
 8006940:	3b04      	subs	r3, #4
 8006942:	429e      	cmp	r6, r3
 8006944:	461a      	mov	r2, r3
 8006946:	d30b      	bcc.n	8006960 <quorem+0x108>
 8006948:	f8c8 4010 	str.w	r4, [r8, #16]
 800694c:	4628      	mov	r0, r5
 800694e:	b003      	add	sp, #12
 8006950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006954:	6812      	ldr	r2, [r2, #0]
 8006956:	3b04      	subs	r3, #4
 8006958:	2a00      	cmp	r2, #0
 800695a:	d1ca      	bne.n	80068f2 <quorem+0x9a>
 800695c:	3c01      	subs	r4, #1
 800695e:	e7c5      	b.n	80068ec <quorem+0x94>
 8006960:	6812      	ldr	r2, [r2, #0]
 8006962:	3b04      	subs	r3, #4
 8006964:	2a00      	cmp	r2, #0
 8006966:	d1ef      	bne.n	8006948 <quorem+0xf0>
 8006968:	3c01      	subs	r4, #1
 800696a:	e7ea      	b.n	8006942 <quorem+0xea>
 800696c:	2000      	movs	r0, #0
 800696e:	e7ee      	b.n	800694e <quorem+0xf6>

08006970 <_dtoa_r>:
 8006970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006974:	ec57 6b10 	vmov	r6, r7, d0
 8006978:	b097      	sub	sp, #92	; 0x5c
 800697a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800697c:	9106      	str	r1, [sp, #24]
 800697e:	4604      	mov	r4, r0
 8006980:	920b      	str	r2, [sp, #44]	; 0x2c
 8006982:	9312      	str	r3, [sp, #72]	; 0x48
 8006984:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006988:	e9cd 6700 	strd	r6, r7, [sp]
 800698c:	b93d      	cbnz	r5, 800699e <_dtoa_r+0x2e>
 800698e:	2010      	movs	r0, #16
 8006990:	f000 ff92 	bl	80078b8 <malloc>
 8006994:	6260      	str	r0, [r4, #36]	; 0x24
 8006996:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800699a:	6005      	str	r5, [r0, #0]
 800699c:	60c5      	str	r5, [r0, #12]
 800699e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069a0:	6819      	ldr	r1, [r3, #0]
 80069a2:	b151      	cbz	r1, 80069ba <_dtoa_r+0x4a>
 80069a4:	685a      	ldr	r2, [r3, #4]
 80069a6:	604a      	str	r2, [r1, #4]
 80069a8:	2301      	movs	r3, #1
 80069aa:	4093      	lsls	r3, r2
 80069ac:	608b      	str	r3, [r1, #8]
 80069ae:	4620      	mov	r0, r4
 80069b0:	f000 ffc9 	bl	8007946 <_Bfree>
 80069b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069b6:	2200      	movs	r2, #0
 80069b8:	601a      	str	r2, [r3, #0]
 80069ba:	1e3b      	subs	r3, r7, #0
 80069bc:	bfbb      	ittet	lt
 80069be:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80069c2:	9301      	strlt	r3, [sp, #4]
 80069c4:	2300      	movge	r3, #0
 80069c6:	2201      	movlt	r2, #1
 80069c8:	bfac      	ite	ge
 80069ca:	f8c8 3000 	strge.w	r3, [r8]
 80069ce:	f8c8 2000 	strlt.w	r2, [r8]
 80069d2:	4baf      	ldr	r3, [pc, #700]	; (8006c90 <_dtoa_r+0x320>)
 80069d4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80069d8:	ea33 0308 	bics.w	r3, r3, r8
 80069dc:	d114      	bne.n	8006a08 <_dtoa_r+0x98>
 80069de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80069e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80069e4:	6013      	str	r3, [r2, #0]
 80069e6:	9b00      	ldr	r3, [sp, #0]
 80069e8:	b923      	cbnz	r3, 80069f4 <_dtoa_r+0x84>
 80069ea:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80069ee:	2800      	cmp	r0, #0
 80069f0:	f000 8542 	beq.w	8007478 <_dtoa_r+0xb08>
 80069f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069f6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8006ca4 <_dtoa_r+0x334>
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f000 8544 	beq.w	8007488 <_dtoa_r+0xb18>
 8006a00:	f10b 0303 	add.w	r3, fp, #3
 8006a04:	f000 bd3e 	b.w	8007484 <_dtoa_r+0xb14>
 8006a08:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	2300      	movs	r3, #0
 8006a10:	4630      	mov	r0, r6
 8006a12:	4639      	mov	r1, r7
 8006a14:	f7fa f858 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a18:	4681      	mov	r9, r0
 8006a1a:	b168      	cbz	r0, 8006a38 <_dtoa_r+0xc8>
 8006a1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a1e:	2301      	movs	r3, #1
 8006a20:	6013      	str	r3, [r2, #0]
 8006a22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f000 8524 	beq.w	8007472 <_dtoa_r+0xb02>
 8006a2a:	4b9a      	ldr	r3, [pc, #616]	; (8006c94 <_dtoa_r+0x324>)
 8006a2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006a2e:	f103 3bff 	add.w	fp, r3, #4294967295
 8006a32:	6013      	str	r3, [r2, #0]
 8006a34:	f000 bd28 	b.w	8007488 <_dtoa_r+0xb18>
 8006a38:	aa14      	add	r2, sp, #80	; 0x50
 8006a3a:	a915      	add	r1, sp, #84	; 0x54
 8006a3c:	ec47 6b10 	vmov	d0, r6, r7
 8006a40:	4620      	mov	r0, r4
 8006a42:	f001 f9d8 	bl	8007df6 <__d2b>
 8006a46:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006a4a:	9004      	str	r0, [sp, #16]
 8006a4c:	2d00      	cmp	r5, #0
 8006a4e:	d07c      	beq.n	8006b4a <_dtoa_r+0x1da>
 8006a50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006a54:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006a58:	46b2      	mov	sl, r6
 8006a5a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8006a5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006a62:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8006a66:	2200      	movs	r2, #0
 8006a68:	4b8b      	ldr	r3, [pc, #556]	; (8006c98 <_dtoa_r+0x328>)
 8006a6a:	4650      	mov	r0, sl
 8006a6c:	4659      	mov	r1, fp
 8006a6e:	f7f9 fc0b 	bl	8000288 <__aeabi_dsub>
 8006a72:	a381      	add	r3, pc, #516	; (adr r3, 8006c78 <_dtoa_r+0x308>)
 8006a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a78:	f7f9 fdbe 	bl	80005f8 <__aeabi_dmul>
 8006a7c:	a380      	add	r3, pc, #512	; (adr r3, 8006c80 <_dtoa_r+0x310>)
 8006a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a82:	f7f9 fc03 	bl	800028c <__adddf3>
 8006a86:	4606      	mov	r6, r0
 8006a88:	4628      	mov	r0, r5
 8006a8a:	460f      	mov	r7, r1
 8006a8c:	f7f9 fd4a 	bl	8000524 <__aeabi_i2d>
 8006a90:	a37d      	add	r3, pc, #500	; (adr r3, 8006c88 <_dtoa_r+0x318>)
 8006a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a96:	f7f9 fdaf 	bl	80005f8 <__aeabi_dmul>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	4630      	mov	r0, r6
 8006aa0:	4639      	mov	r1, r7
 8006aa2:	f7f9 fbf3 	bl	800028c <__adddf3>
 8006aa6:	4606      	mov	r6, r0
 8006aa8:	460f      	mov	r7, r1
 8006aaa:	f7fa f855 	bl	8000b58 <__aeabi_d2iz>
 8006aae:	2200      	movs	r2, #0
 8006ab0:	4682      	mov	sl, r0
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	4630      	mov	r0, r6
 8006ab6:	4639      	mov	r1, r7
 8006ab8:	f7fa f810 	bl	8000adc <__aeabi_dcmplt>
 8006abc:	b148      	cbz	r0, 8006ad2 <_dtoa_r+0x162>
 8006abe:	4650      	mov	r0, sl
 8006ac0:	f7f9 fd30 	bl	8000524 <__aeabi_i2d>
 8006ac4:	4632      	mov	r2, r6
 8006ac6:	463b      	mov	r3, r7
 8006ac8:	f7f9 fffe 	bl	8000ac8 <__aeabi_dcmpeq>
 8006acc:	b908      	cbnz	r0, 8006ad2 <_dtoa_r+0x162>
 8006ace:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ad2:	f1ba 0f16 	cmp.w	sl, #22
 8006ad6:	d859      	bhi.n	8006b8c <_dtoa_r+0x21c>
 8006ad8:	4970      	ldr	r1, [pc, #448]	; (8006c9c <_dtoa_r+0x32c>)
 8006ada:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006ade:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ae2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ae6:	f7fa f817 	bl	8000b18 <__aeabi_dcmpgt>
 8006aea:	2800      	cmp	r0, #0
 8006aec:	d050      	beq.n	8006b90 <_dtoa_r+0x220>
 8006aee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006af2:	2300      	movs	r3, #0
 8006af4:	930f      	str	r3, [sp, #60]	; 0x3c
 8006af6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006af8:	1b5d      	subs	r5, r3, r5
 8006afa:	f1b5 0801 	subs.w	r8, r5, #1
 8006afe:	bf49      	itett	mi
 8006b00:	f1c5 0301 	rsbmi	r3, r5, #1
 8006b04:	2300      	movpl	r3, #0
 8006b06:	9305      	strmi	r3, [sp, #20]
 8006b08:	f04f 0800 	movmi.w	r8, #0
 8006b0c:	bf58      	it	pl
 8006b0e:	9305      	strpl	r3, [sp, #20]
 8006b10:	f1ba 0f00 	cmp.w	sl, #0
 8006b14:	db3e      	blt.n	8006b94 <_dtoa_r+0x224>
 8006b16:	2300      	movs	r3, #0
 8006b18:	44d0      	add	r8, sl
 8006b1a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006b1e:	9307      	str	r3, [sp, #28]
 8006b20:	9b06      	ldr	r3, [sp, #24]
 8006b22:	2b09      	cmp	r3, #9
 8006b24:	f200 8090 	bhi.w	8006c48 <_dtoa_r+0x2d8>
 8006b28:	2b05      	cmp	r3, #5
 8006b2a:	bfc4      	itt	gt
 8006b2c:	3b04      	subgt	r3, #4
 8006b2e:	9306      	strgt	r3, [sp, #24]
 8006b30:	9b06      	ldr	r3, [sp, #24]
 8006b32:	f1a3 0302 	sub.w	r3, r3, #2
 8006b36:	bfcc      	ite	gt
 8006b38:	2500      	movgt	r5, #0
 8006b3a:	2501      	movle	r5, #1
 8006b3c:	2b03      	cmp	r3, #3
 8006b3e:	f200 808f 	bhi.w	8006c60 <_dtoa_r+0x2f0>
 8006b42:	e8df f003 	tbb	[pc, r3]
 8006b46:	7f7d      	.short	0x7f7d
 8006b48:	7131      	.short	0x7131
 8006b4a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8006b4e:	441d      	add	r5, r3
 8006b50:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006b54:	2820      	cmp	r0, #32
 8006b56:	dd13      	ble.n	8006b80 <_dtoa_r+0x210>
 8006b58:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006b5c:	9b00      	ldr	r3, [sp, #0]
 8006b5e:	fa08 f800 	lsl.w	r8, r8, r0
 8006b62:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006b66:	fa23 f000 	lsr.w	r0, r3, r0
 8006b6a:	ea48 0000 	orr.w	r0, r8, r0
 8006b6e:	f7f9 fcc9 	bl	8000504 <__aeabi_ui2d>
 8006b72:	2301      	movs	r3, #1
 8006b74:	4682      	mov	sl, r0
 8006b76:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8006b7a:	3d01      	subs	r5, #1
 8006b7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8006b7e:	e772      	b.n	8006a66 <_dtoa_r+0xf6>
 8006b80:	9b00      	ldr	r3, [sp, #0]
 8006b82:	f1c0 0020 	rsb	r0, r0, #32
 8006b86:	fa03 f000 	lsl.w	r0, r3, r0
 8006b8a:	e7f0      	b.n	8006b6e <_dtoa_r+0x1fe>
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e7b1      	b.n	8006af4 <_dtoa_r+0x184>
 8006b90:	900f      	str	r0, [sp, #60]	; 0x3c
 8006b92:	e7b0      	b.n	8006af6 <_dtoa_r+0x186>
 8006b94:	9b05      	ldr	r3, [sp, #20]
 8006b96:	eba3 030a 	sub.w	r3, r3, sl
 8006b9a:	9305      	str	r3, [sp, #20]
 8006b9c:	f1ca 0300 	rsb	r3, sl, #0
 8006ba0:	9307      	str	r3, [sp, #28]
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	930e      	str	r3, [sp, #56]	; 0x38
 8006ba6:	e7bb      	b.n	8006b20 <_dtoa_r+0x1b0>
 8006ba8:	2301      	movs	r3, #1
 8006baa:	930a      	str	r3, [sp, #40]	; 0x28
 8006bac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	dd59      	ble.n	8006c66 <_dtoa_r+0x2f6>
 8006bb2:	9302      	str	r3, [sp, #8]
 8006bb4:	4699      	mov	r9, r3
 8006bb6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006bb8:	2200      	movs	r2, #0
 8006bba:	6072      	str	r2, [r6, #4]
 8006bbc:	2204      	movs	r2, #4
 8006bbe:	f102 0014 	add.w	r0, r2, #20
 8006bc2:	4298      	cmp	r0, r3
 8006bc4:	6871      	ldr	r1, [r6, #4]
 8006bc6:	d953      	bls.n	8006c70 <_dtoa_r+0x300>
 8006bc8:	4620      	mov	r0, r4
 8006bca:	f000 fe88 	bl	80078de <_Balloc>
 8006bce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bd0:	6030      	str	r0, [r6, #0]
 8006bd2:	f1b9 0f0e 	cmp.w	r9, #14
 8006bd6:	f8d3 b000 	ldr.w	fp, [r3]
 8006bda:	f200 80e6 	bhi.w	8006daa <_dtoa_r+0x43a>
 8006bde:	2d00      	cmp	r5, #0
 8006be0:	f000 80e3 	beq.w	8006daa <_dtoa_r+0x43a>
 8006be4:	ed9d 7b00 	vldr	d7, [sp]
 8006be8:	f1ba 0f00 	cmp.w	sl, #0
 8006bec:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006bf0:	dd74      	ble.n	8006cdc <_dtoa_r+0x36c>
 8006bf2:	4a2a      	ldr	r2, [pc, #168]	; (8006c9c <_dtoa_r+0x32c>)
 8006bf4:	f00a 030f 	and.w	r3, sl, #15
 8006bf8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006bfc:	ed93 7b00 	vldr	d7, [r3]
 8006c00:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006c04:	06f0      	lsls	r0, r6, #27
 8006c06:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006c0a:	d565      	bpl.n	8006cd8 <_dtoa_r+0x368>
 8006c0c:	4b24      	ldr	r3, [pc, #144]	; (8006ca0 <_dtoa_r+0x330>)
 8006c0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c12:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c16:	f7f9 fe19 	bl	800084c <__aeabi_ddiv>
 8006c1a:	e9cd 0100 	strd	r0, r1, [sp]
 8006c1e:	f006 060f 	and.w	r6, r6, #15
 8006c22:	2503      	movs	r5, #3
 8006c24:	4f1e      	ldr	r7, [pc, #120]	; (8006ca0 <_dtoa_r+0x330>)
 8006c26:	e04c      	b.n	8006cc2 <_dtoa_r+0x352>
 8006c28:	2301      	movs	r3, #1
 8006c2a:	930a      	str	r3, [sp, #40]	; 0x28
 8006c2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c2e:	4453      	add	r3, sl
 8006c30:	f103 0901 	add.w	r9, r3, #1
 8006c34:	9302      	str	r3, [sp, #8]
 8006c36:	464b      	mov	r3, r9
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	bfb8      	it	lt
 8006c3c:	2301      	movlt	r3, #1
 8006c3e:	e7ba      	b.n	8006bb6 <_dtoa_r+0x246>
 8006c40:	2300      	movs	r3, #0
 8006c42:	e7b2      	b.n	8006baa <_dtoa_r+0x23a>
 8006c44:	2300      	movs	r3, #0
 8006c46:	e7f0      	b.n	8006c2a <_dtoa_r+0x2ba>
 8006c48:	2501      	movs	r5, #1
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	9306      	str	r3, [sp, #24]
 8006c4e:	950a      	str	r5, [sp, #40]	; 0x28
 8006c50:	f04f 33ff 	mov.w	r3, #4294967295
 8006c54:	9302      	str	r3, [sp, #8]
 8006c56:	4699      	mov	r9, r3
 8006c58:	2200      	movs	r2, #0
 8006c5a:	2312      	movs	r3, #18
 8006c5c:	920b      	str	r2, [sp, #44]	; 0x2c
 8006c5e:	e7aa      	b.n	8006bb6 <_dtoa_r+0x246>
 8006c60:	2301      	movs	r3, #1
 8006c62:	930a      	str	r3, [sp, #40]	; 0x28
 8006c64:	e7f4      	b.n	8006c50 <_dtoa_r+0x2e0>
 8006c66:	2301      	movs	r3, #1
 8006c68:	9302      	str	r3, [sp, #8]
 8006c6a:	4699      	mov	r9, r3
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	e7f5      	b.n	8006c5c <_dtoa_r+0x2ec>
 8006c70:	3101      	adds	r1, #1
 8006c72:	6071      	str	r1, [r6, #4]
 8006c74:	0052      	lsls	r2, r2, #1
 8006c76:	e7a2      	b.n	8006bbe <_dtoa_r+0x24e>
 8006c78:	636f4361 	.word	0x636f4361
 8006c7c:	3fd287a7 	.word	0x3fd287a7
 8006c80:	8b60c8b3 	.word	0x8b60c8b3
 8006c84:	3fc68a28 	.word	0x3fc68a28
 8006c88:	509f79fb 	.word	0x509f79fb
 8006c8c:	3fd34413 	.word	0x3fd34413
 8006c90:	7ff00000 	.word	0x7ff00000
 8006c94:	080084dd 	.word	0x080084dd
 8006c98:	3ff80000 	.word	0x3ff80000
 8006c9c:	08008598 	.word	0x08008598
 8006ca0:	08008570 	.word	0x08008570
 8006ca4:	08008509 	.word	0x08008509
 8006ca8:	07f1      	lsls	r1, r6, #31
 8006caa:	d508      	bpl.n	8006cbe <_dtoa_r+0x34e>
 8006cac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006cb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cb4:	f7f9 fca0 	bl	80005f8 <__aeabi_dmul>
 8006cb8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006cbc:	3501      	adds	r5, #1
 8006cbe:	1076      	asrs	r6, r6, #1
 8006cc0:	3708      	adds	r7, #8
 8006cc2:	2e00      	cmp	r6, #0
 8006cc4:	d1f0      	bne.n	8006ca8 <_dtoa_r+0x338>
 8006cc6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006cca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006cce:	f7f9 fdbd 	bl	800084c <__aeabi_ddiv>
 8006cd2:	e9cd 0100 	strd	r0, r1, [sp]
 8006cd6:	e01a      	b.n	8006d0e <_dtoa_r+0x39e>
 8006cd8:	2502      	movs	r5, #2
 8006cda:	e7a3      	b.n	8006c24 <_dtoa_r+0x2b4>
 8006cdc:	f000 80a0 	beq.w	8006e20 <_dtoa_r+0x4b0>
 8006ce0:	f1ca 0600 	rsb	r6, sl, #0
 8006ce4:	4b9f      	ldr	r3, [pc, #636]	; (8006f64 <_dtoa_r+0x5f4>)
 8006ce6:	4fa0      	ldr	r7, [pc, #640]	; (8006f68 <_dtoa_r+0x5f8>)
 8006ce8:	f006 020f 	and.w	r2, r6, #15
 8006cec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006cf8:	f7f9 fc7e 	bl	80005f8 <__aeabi_dmul>
 8006cfc:	e9cd 0100 	strd	r0, r1, [sp]
 8006d00:	1136      	asrs	r6, r6, #4
 8006d02:	2300      	movs	r3, #0
 8006d04:	2502      	movs	r5, #2
 8006d06:	2e00      	cmp	r6, #0
 8006d08:	d17f      	bne.n	8006e0a <_dtoa_r+0x49a>
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1e1      	bne.n	8006cd2 <_dtoa_r+0x362>
 8006d0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f000 8087 	beq.w	8006e24 <_dtoa_r+0x4b4>
 8006d16:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	4b93      	ldr	r3, [pc, #588]	; (8006f6c <_dtoa_r+0x5fc>)
 8006d1e:	4630      	mov	r0, r6
 8006d20:	4639      	mov	r1, r7
 8006d22:	f7f9 fedb 	bl	8000adc <__aeabi_dcmplt>
 8006d26:	2800      	cmp	r0, #0
 8006d28:	d07c      	beq.n	8006e24 <_dtoa_r+0x4b4>
 8006d2a:	f1b9 0f00 	cmp.w	r9, #0
 8006d2e:	d079      	beq.n	8006e24 <_dtoa_r+0x4b4>
 8006d30:	9b02      	ldr	r3, [sp, #8]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	dd35      	ble.n	8006da2 <_dtoa_r+0x432>
 8006d36:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006d3a:	9308      	str	r3, [sp, #32]
 8006d3c:	4639      	mov	r1, r7
 8006d3e:	2200      	movs	r2, #0
 8006d40:	4b8b      	ldr	r3, [pc, #556]	; (8006f70 <_dtoa_r+0x600>)
 8006d42:	4630      	mov	r0, r6
 8006d44:	f7f9 fc58 	bl	80005f8 <__aeabi_dmul>
 8006d48:	e9cd 0100 	strd	r0, r1, [sp]
 8006d4c:	9f02      	ldr	r7, [sp, #8]
 8006d4e:	3501      	adds	r5, #1
 8006d50:	4628      	mov	r0, r5
 8006d52:	f7f9 fbe7 	bl	8000524 <__aeabi_i2d>
 8006d56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d5a:	f7f9 fc4d 	bl	80005f8 <__aeabi_dmul>
 8006d5e:	2200      	movs	r2, #0
 8006d60:	4b84      	ldr	r3, [pc, #528]	; (8006f74 <_dtoa_r+0x604>)
 8006d62:	f7f9 fa93 	bl	800028c <__adddf3>
 8006d66:	4605      	mov	r5, r0
 8006d68:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006d6c:	2f00      	cmp	r7, #0
 8006d6e:	d15d      	bne.n	8006e2c <_dtoa_r+0x4bc>
 8006d70:	2200      	movs	r2, #0
 8006d72:	4b81      	ldr	r3, [pc, #516]	; (8006f78 <_dtoa_r+0x608>)
 8006d74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d78:	f7f9 fa86 	bl	8000288 <__aeabi_dsub>
 8006d7c:	462a      	mov	r2, r5
 8006d7e:	4633      	mov	r3, r6
 8006d80:	e9cd 0100 	strd	r0, r1, [sp]
 8006d84:	f7f9 fec8 	bl	8000b18 <__aeabi_dcmpgt>
 8006d88:	2800      	cmp	r0, #0
 8006d8a:	f040 8288 	bne.w	800729e <_dtoa_r+0x92e>
 8006d8e:	462a      	mov	r2, r5
 8006d90:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006d94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d98:	f7f9 fea0 	bl	8000adc <__aeabi_dcmplt>
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	f040 827c 	bne.w	800729a <_dtoa_r+0x92a>
 8006da2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006da6:	e9cd 2300 	strd	r2, r3, [sp]
 8006daa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f2c0 8150 	blt.w	8007052 <_dtoa_r+0x6e2>
 8006db2:	f1ba 0f0e 	cmp.w	sl, #14
 8006db6:	f300 814c 	bgt.w	8007052 <_dtoa_r+0x6e2>
 8006dba:	4b6a      	ldr	r3, [pc, #424]	; (8006f64 <_dtoa_r+0x5f4>)
 8006dbc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006dc0:	ed93 7b00 	vldr	d7, [r3]
 8006dc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006dcc:	f280 80d8 	bge.w	8006f80 <_dtoa_r+0x610>
 8006dd0:	f1b9 0f00 	cmp.w	r9, #0
 8006dd4:	f300 80d4 	bgt.w	8006f80 <_dtoa_r+0x610>
 8006dd8:	f040 825e 	bne.w	8007298 <_dtoa_r+0x928>
 8006ddc:	2200      	movs	r2, #0
 8006dde:	4b66      	ldr	r3, [pc, #408]	; (8006f78 <_dtoa_r+0x608>)
 8006de0:	ec51 0b17 	vmov	r0, r1, d7
 8006de4:	f7f9 fc08 	bl	80005f8 <__aeabi_dmul>
 8006de8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dec:	f7f9 fe8a 	bl	8000b04 <__aeabi_dcmpge>
 8006df0:	464f      	mov	r7, r9
 8006df2:	464e      	mov	r6, r9
 8006df4:	2800      	cmp	r0, #0
 8006df6:	f040 8234 	bne.w	8007262 <_dtoa_r+0x8f2>
 8006dfa:	2331      	movs	r3, #49	; 0x31
 8006dfc:	f10b 0501 	add.w	r5, fp, #1
 8006e00:	f88b 3000 	strb.w	r3, [fp]
 8006e04:	f10a 0a01 	add.w	sl, sl, #1
 8006e08:	e22f      	b.n	800726a <_dtoa_r+0x8fa>
 8006e0a:	07f2      	lsls	r2, r6, #31
 8006e0c:	d505      	bpl.n	8006e1a <_dtoa_r+0x4aa>
 8006e0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e12:	f7f9 fbf1 	bl	80005f8 <__aeabi_dmul>
 8006e16:	3501      	adds	r5, #1
 8006e18:	2301      	movs	r3, #1
 8006e1a:	1076      	asrs	r6, r6, #1
 8006e1c:	3708      	adds	r7, #8
 8006e1e:	e772      	b.n	8006d06 <_dtoa_r+0x396>
 8006e20:	2502      	movs	r5, #2
 8006e22:	e774      	b.n	8006d0e <_dtoa_r+0x39e>
 8006e24:	f8cd a020 	str.w	sl, [sp, #32]
 8006e28:	464f      	mov	r7, r9
 8006e2a:	e791      	b.n	8006d50 <_dtoa_r+0x3e0>
 8006e2c:	4b4d      	ldr	r3, [pc, #308]	; (8006f64 <_dtoa_r+0x5f4>)
 8006e2e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e32:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006e36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d047      	beq.n	8006ecc <_dtoa_r+0x55c>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	460b      	mov	r3, r1
 8006e40:	2000      	movs	r0, #0
 8006e42:	494e      	ldr	r1, [pc, #312]	; (8006f7c <_dtoa_r+0x60c>)
 8006e44:	f7f9 fd02 	bl	800084c <__aeabi_ddiv>
 8006e48:	462a      	mov	r2, r5
 8006e4a:	4633      	mov	r3, r6
 8006e4c:	f7f9 fa1c 	bl	8000288 <__aeabi_dsub>
 8006e50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006e54:	465d      	mov	r5, fp
 8006e56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e5a:	f7f9 fe7d 	bl	8000b58 <__aeabi_d2iz>
 8006e5e:	4606      	mov	r6, r0
 8006e60:	f7f9 fb60 	bl	8000524 <__aeabi_i2d>
 8006e64:	4602      	mov	r2, r0
 8006e66:	460b      	mov	r3, r1
 8006e68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e6c:	f7f9 fa0c 	bl	8000288 <__aeabi_dsub>
 8006e70:	3630      	adds	r6, #48	; 0x30
 8006e72:	f805 6b01 	strb.w	r6, [r5], #1
 8006e76:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006e7a:	e9cd 0100 	strd	r0, r1, [sp]
 8006e7e:	f7f9 fe2d 	bl	8000adc <__aeabi_dcmplt>
 8006e82:	2800      	cmp	r0, #0
 8006e84:	d163      	bne.n	8006f4e <_dtoa_r+0x5de>
 8006e86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e8a:	2000      	movs	r0, #0
 8006e8c:	4937      	ldr	r1, [pc, #220]	; (8006f6c <_dtoa_r+0x5fc>)
 8006e8e:	f7f9 f9fb 	bl	8000288 <__aeabi_dsub>
 8006e92:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006e96:	f7f9 fe21 	bl	8000adc <__aeabi_dcmplt>
 8006e9a:	2800      	cmp	r0, #0
 8006e9c:	f040 80b7 	bne.w	800700e <_dtoa_r+0x69e>
 8006ea0:	eba5 030b 	sub.w	r3, r5, fp
 8006ea4:	429f      	cmp	r7, r3
 8006ea6:	f77f af7c 	ble.w	8006da2 <_dtoa_r+0x432>
 8006eaa:	2200      	movs	r2, #0
 8006eac:	4b30      	ldr	r3, [pc, #192]	; (8006f70 <_dtoa_r+0x600>)
 8006eae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006eb2:	f7f9 fba1 	bl	80005f8 <__aeabi_dmul>
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006ebc:	4b2c      	ldr	r3, [pc, #176]	; (8006f70 <_dtoa_r+0x600>)
 8006ebe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ec2:	f7f9 fb99 	bl	80005f8 <__aeabi_dmul>
 8006ec6:	e9cd 0100 	strd	r0, r1, [sp]
 8006eca:	e7c4      	b.n	8006e56 <_dtoa_r+0x4e6>
 8006ecc:	462a      	mov	r2, r5
 8006ece:	4633      	mov	r3, r6
 8006ed0:	f7f9 fb92 	bl	80005f8 <__aeabi_dmul>
 8006ed4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006ed8:	eb0b 0507 	add.w	r5, fp, r7
 8006edc:	465e      	mov	r6, fp
 8006ede:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ee2:	f7f9 fe39 	bl	8000b58 <__aeabi_d2iz>
 8006ee6:	4607      	mov	r7, r0
 8006ee8:	f7f9 fb1c 	bl	8000524 <__aeabi_i2d>
 8006eec:	3730      	adds	r7, #48	; 0x30
 8006eee:	4602      	mov	r2, r0
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ef6:	f7f9 f9c7 	bl	8000288 <__aeabi_dsub>
 8006efa:	f806 7b01 	strb.w	r7, [r6], #1
 8006efe:	42ae      	cmp	r6, r5
 8006f00:	e9cd 0100 	strd	r0, r1, [sp]
 8006f04:	f04f 0200 	mov.w	r2, #0
 8006f08:	d126      	bne.n	8006f58 <_dtoa_r+0x5e8>
 8006f0a:	4b1c      	ldr	r3, [pc, #112]	; (8006f7c <_dtoa_r+0x60c>)
 8006f0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f10:	f7f9 f9bc 	bl	800028c <__adddf3>
 8006f14:	4602      	mov	r2, r0
 8006f16:	460b      	mov	r3, r1
 8006f18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f1c:	f7f9 fdfc 	bl	8000b18 <__aeabi_dcmpgt>
 8006f20:	2800      	cmp	r0, #0
 8006f22:	d174      	bne.n	800700e <_dtoa_r+0x69e>
 8006f24:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006f28:	2000      	movs	r0, #0
 8006f2a:	4914      	ldr	r1, [pc, #80]	; (8006f7c <_dtoa_r+0x60c>)
 8006f2c:	f7f9 f9ac 	bl	8000288 <__aeabi_dsub>
 8006f30:	4602      	mov	r2, r0
 8006f32:	460b      	mov	r3, r1
 8006f34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f38:	f7f9 fdd0 	bl	8000adc <__aeabi_dcmplt>
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	f43f af30 	beq.w	8006da2 <_dtoa_r+0x432>
 8006f42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006f46:	2b30      	cmp	r3, #48	; 0x30
 8006f48:	f105 32ff 	add.w	r2, r5, #4294967295
 8006f4c:	d002      	beq.n	8006f54 <_dtoa_r+0x5e4>
 8006f4e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006f52:	e04a      	b.n	8006fea <_dtoa_r+0x67a>
 8006f54:	4615      	mov	r5, r2
 8006f56:	e7f4      	b.n	8006f42 <_dtoa_r+0x5d2>
 8006f58:	4b05      	ldr	r3, [pc, #20]	; (8006f70 <_dtoa_r+0x600>)
 8006f5a:	f7f9 fb4d 	bl	80005f8 <__aeabi_dmul>
 8006f5e:	e9cd 0100 	strd	r0, r1, [sp]
 8006f62:	e7bc      	b.n	8006ede <_dtoa_r+0x56e>
 8006f64:	08008598 	.word	0x08008598
 8006f68:	08008570 	.word	0x08008570
 8006f6c:	3ff00000 	.word	0x3ff00000
 8006f70:	40240000 	.word	0x40240000
 8006f74:	401c0000 	.word	0x401c0000
 8006f78:	40140000 	.word	0x40140000
 8006f7c:	3fe00000 	.word	0x3fe00000
 8006f80:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006f84:	465d      	mov	r5, fp
 8006f86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f8a:	4630      	mov	r0, r6
 8006f8c:	4639      	mov	r1, r7
 8006f8e:	f7f9 fc5d 	bl	800084c <__aeabi_ddiv>
 8006f92:	f7f9 fde1 	bl	8000b58 <__aeabi_d2iz>
 8006f96:	4680      	mov	r8, r0
 8006f98:	f7f9 fac4 	bl	8000524 <__aeabi_i2d>
 8006f9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fa0:	f7f9 fb2a 	bl	80005f8 <__aeabi_dmul>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	4630      	mov	r0, r6
 8006faa:	4639      	mov	r1, r7
 8006fac:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006fb0:	f7f9 f96a 	bl	8000288 <__aeabi_dsub>
 8006fb4:	f805 6b01 	strb.w	r6, [r5], #1
 8006fb8:	eba5 060b 	sub.w	r6, r5, fp
 8006fbc:	45b1      	cmp	r9, r6
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	d139      	bne.n	8007038 <_dtoa_r+0x6c8>
 8006fc4:	f7f9 f962 	bl	800028c <__adddf3>
 8006fc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fcc:	4606      	mov	r6, r0
 8006fce:	460f      	mov	r7, r1
 8006fd0:	f7f9 fda2 	bl	8000b18 <__aeabi_dcmpgt>
 8006fd4:	b9c8      	cbnz	r0, 800700a <_dtoa_r+0x69a>
 8006fd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fda:	4630      	mov	r0, r6
 8006fdc:	4639      	mov	r1, r7
 8006fde:	f7f9 fd73 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fe2:	b110      	cbz	r0, 8006fea <_dtoa_r+0x67a>
 8006fe4:	f018 0f01 	tst.w	r8, #1
 8006fe8:	d10f      	bne.n	800700a <_dtoa_r+0x69a>
 8006fea:	9904      	ldr	r1, [sp, #16]
 8006fec:	4620      	mov	r0, r4
 8006fee:	f000 fcaa 	bl	8007946 <_Bfree>
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ff6:	702b      	strb	r3, [r5, #0]
 8006ff8:	f10a 0301 	add.w	r3, sl, #1
 8006ffc:	6013      	str	r3, [r2, #0]
 8006ffe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007000:	2b00      	cmp	r3, #0
 8007002:	f000 8241 	beq.w	8007488 <_dtoa_r+0xb18>
 8007006:	601d      	str	r5, [r3, #0]
 8007008:	e23e      	b.n	8007488 <_dtoa_r+0xb18>
 800700a:	f8cd a020 	str.w	sl, [sp, #32]
 800700e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007012:	2a39      	cmp	r2, #57	; 0x39
 8007014:	f105 33ff 	add.w	r3, r5, #4294967295
 8007018:	d108      	bne.n	800702c <_dtoa_r+0x6bc>
 800701a:	459b      	cmp	fp, r3
 800701c:	d10a      	bne.n	8007034 <_dtoa_r+0x6c4>
 800701e:	9b08      	ldr	r3, [sp, #32]
 8007020:	3301      	adds	r3, #1
 8007022:	9308      	str	r3, [sp, #32]
 8007024:	2330      	movs	r3, #48	; 0x30
 8007026:	f88b 3000 	strb.w	r3, [fp]
 800702a:	465b      	mov	r3, fp
 800702c:	781a      	ldrb	r2, [r3, #0]
 800702e:	3201      	adds	r2, #1
 8007030:	701a      	strb	r2, [r3, #0]
 8007032:	e78c      	b.n	8006f4e <_dtoa_r+0x5de>
 8007034:	461d      	mov	r5, r3
 8007036:	e7ea      	b.n	800700e <_dtoa_r+0x69e>
 8007038:	2200      	movs	r2, #0
 800703a:	4b9b      	ldr	r3, [pc, #620]	; (80072a8 <_dtoa_r+0x938>)
 800703c:	f7f9 fadc 	bl	80005f8 <__aeabi_dmul>
 8007040:	2200      	movs	r2, #0
 8007042:	2300      	movs	r3, #0
 8007044:	4606      	mov	r6, r0
 8007046:	460f      	mov	r7, r1
 8007048:	f7f9 fd3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800704c:	2800      	cmp	r0, #0
 800704e:	d09a      	beq.n	8006f86 <_dtoa_r+0x616>
 8007050:	e7cb      	b.n	8006fea <_dtoa_r+0x67a>
 8007052:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007054:	2a00      	cmp	r2, #0
 8007056:	f000 808b 	beq.w	8007170 <_dtoa_r+0x800>
 800705a:	9a06      	ldr	r2, [sp, #24]
 800705c:	2a01      	cmp	r2, #1
 800705e:	dc6e      	bgt.n	800713e <_dtoa_r+0x7ce>
 8007060:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007062:	2a00      	cmp	r2, #0
 8007064:	d067      	beq.n	8007136 <_dtoa_r+0x7c6>
 8007066:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800706a:	9f07      	ldr	r7, [sp, #28]
 800706c:	9d05      	ldr	r5, [sp, #20]
 800706e:	9a05      	ldr	r2, [sp, #20]
 8007070:	2101      	movs	r1, #1
 8007072:	441a      	add	r2, r3
 8007074:	4620      	mov	r0, r4
 8007076:	9205      	str	r2, [sp, #20]
 8007078:	4498      	add	r8, r3
 800707a:	f000 fd04 	bl	8007a86 <__i2b>
 800707e:	4606      	mov	r6, r0
 8007080:	2d00      	cmp	r5, #0
 8007082:	dd0c      	ble.n	800709e <_dtoa_r+0x72e>
 8007084:	f1b8 0f00 	cmp.w	r8, #0
 8007088:	dd09      	ble.n	800709e <_dtoa_r+0x72e>
 800708a:	4545      	cmp	r5, r8
 800708c:	9a05      	ldr	r2, [sp, #20]
 800708e:	462b      	mov	r3, r5
 8007090:	bfa8      	it	ge
 8007092:	4643      	movge	r3, r8
 8007094:	1ad2      	subs	r2, r2, r3
 8007096:	9205      	str	r2, [sp, #20]
 8007098:	1aed      	subs	r5, r5, r3
 800709a:	eba8 0803 	sub.w	r8, r8, r3
 800709e:	9b07      	ldr	r3, [sp, #28]
 80070a0:	b1eb      	cbz	r3, 80070de <_dtoa_r+0x76e>
 80070a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d067      	beq.n	8007178 <_dtoa_r+0x808>
 80070a8:	b18f      	cbz	r7, 80070ce <_dtoa_r+0x75e>
 80070aa:	4631      	mov	r1, r6
 80070ac:	463a      	mov	r2, r7
 80070ae:	4620      	mov	r0, r4
 80070b0:	f000 fd88 	bl	8007bc4 <__pow5mult>
 80070b4:	9a04      	ldr	r2, [sp, #16]
 80070b6:	4601      	mov	r1, r0
 80070b8:	4606      	mov	r6, r0
 80070ba:	4620      	mov	r0, r4
 80070bc:	f000 fcec 	bl	8007a98 <__multiply>
 80070c0:	9904      	ldr	r1, [sp, #16]
 80070c2:	9008      	str	r0, [sp, #32]
 80070c4:	4620      	mov	r0, r4
 80070c6:	f000 fc3e 	bl	8007946 <_Bfree>
 80070ca:	9b08      	ldr	r3, [sp, #32]
 80070cc:	9304      	str	r3, [sp, #16]
 80070ce:	9b07      	ldr	r3, [sp, #28]
 80070d0:	1bda      	subs	r2, r3, r7
 80070d2:	d004      	beq.n	80070de <_dtoa_r+0x76e>
 80070d4:	9904      	ldr	r1, [sp, #16]
 80070d6:	4620      	mov	r0, r4
 80070d8:	f000 fd74 	bl	8007bc4 <__pow5mult>
 80070dc:	9004      	str	r0, [sp, #16]
 80070de:	2101      	movs	r1, #1
 80070e0:	4620      	mov	r0, r4
 80070e2:	f000 fcd0 	bl	8007a86 <__i2b>
 80070e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070e8:	4607      	mov	r7, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	f000 81d0 	beq.w	8007490 <_dtoa_r+0xb20>
 80070f0:	461a      	mov	r2, r3
 80070f2:	4601      	mov	r1, r0
 80070f4:	4620      	mov	r0, r4
 80070f6:	f000 fd65 	bl	8007bc4 <__pow5mult>
 80070fa:	9b06      	ldr	r3, [sp, #24]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	4607      	mov	r7, r0
 8007100:	dc40      	bgt.n	8007184 <_dtoa_r+0x814>
 8007102:	9b00      	ldr	r3, [sp, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d139      	bne.n	800717c <_dtoa_r+0x80c>
 8007108:	9b01      	ldr	r3, [sp, #4]
 800710a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800710e:	2b00      	cmp	r3, #0
 8007110:	d136      	bne.n	8007180 <_dtoa_r+0x810>
 8007112:	9b01      	ldr	r3, [sp, #4]
 8007114:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007118:	0d1b      	lsrs	r3, r3, #20
 800711a:	051b      	lsls	r3, r3, #20
 800711c:	b12b      	cbz	r3, 800712a <_dtoa_r+0x7ba>
 800711e:	9b05      	ldr	r3, [sp, #20]
 8007120:	3301      	adds	r3, #1
 8007122:	9305      	str	r3, [sp, #20]
 8007124:	f108 0801 	add.w	r8, r8, #1
 8007128:	2301      	movs	r3, #1
 800712a:	9307      	str	r3, [sp, #28]
 800712c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800712e:	2b00      	cmp	r3, #0
 8007130:	d12a      	bne.n	8007188 <_dtoa_r+0x818>
 8007132:	2001      	movs	r0, #1
 8007134:	e030      	b.n	8007198 <_dtoa_r+0x828>
 8007136:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007138:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800713c:	e795      	b.n	800706a <_dtoa_r+0x6fa>
 800713e:	9b07      	ldr	r3, [sp, #28]
 8007140:	f109 37ff 	add.w	r7, r9, #4294967295
 8007144:	42bb      	cmp	r3, r7
 8007146:	bfbf      	itttt	lt
 8007148:	9b07      	ldrlt	r3, [sp, #28]
 800714a:	9707      	strlt	r7, [sp, #28]
 800714c:	1afa      	sublt	r2, r7, r3
 800714e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007150:	bfbb      	ittet	lt
 8007152:	189b      	addlt	r3, r3, r2
 8007154:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007156:	1bdf      	subge	r7, r3, r7
 8007158:	2700      	movlt	r7, #0
 800715a:	f1b9 0f00 	cmp.w	r9, #0
 800715e:	bfb5      	itete	lt
 8007160:	9b05      	ldrlt	r3, [sp, #20]
 8007162:	9d05      	ldrge	r5, [sp, #20]
 8007164:	eba3 0509 	sublt.w	r5, r3, r9
 8007168:	464b      	movge	r3, r9
 800716a:	bfb8      	it	lt
 800716c:	2300      	movlt	r3, #0
 800716e:	e77e      	b.n	800706e <_dtoa_r+0x6fe>
 8007170:	9f07      	ldr	r7, [sp, #28]
 8007172:	9d05      	ldr	r5, [sp, #20]
 8007174:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007176:	e783      	b.n	8007080 <_dtoa_r+0x710>
 8007178:	9a07      	ldr	r2, [sp, #28]
 800717a:	e7ab      	b.n	80070d4 <_dtoa_r+0x764>
 800717c:	2300      	movs	r3, #0
 800717e:	e7d4      	b.n	800712a <_dtoa_r+0x7ba>
 8007180:	9b00      	ldr	r3, [sp, #0]
 8007182:	e7d2      	b.n	800712a <_dtoa_r+0x7ba>
 8007184:	2300      	movs	r3, #0
 8007186:	9307      	str	r3, [sp, #28]
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800718e:	6918      	ldr	r0, [r3, #16]
 8007190:	f000 fc2b 	bl	80079ea <__hi0bits>
 8007194:	f1c0 0020 	rsb	r0, r0, #32
 8007198:	4440      	add	r0, r8
 800719a:	f010 001f 	ands.w	r0, r0, #31
 800719e:	d047      	beq.n	8007230 <_dtoa_r+0x8c0>
 80071a0:	f1c0 0320 	rsb	r3, r0, #32
 80071a4:	2b04      	cmp	r3, #4
 80071a6:	dd3b      	ble.n	8007220 <_dtoa_r+0x8b0>
 80071a8:	9b05      	ldr	r3, [sp, #20]
 80071aa:	f1c0 001c 	rsb	r0, r0, #28
 80071ae:	4403      	add	r3, r0
 80071b0:	9305      	str	r3, [sp, #20]
 80071b2:	4405      	add	r5, r0
 80071b4:	4480      	add	r8, r0
 80071b6:	9b05      	ldr	r3, [sp, #20]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	dd05      	ble.n	80071c8 <_dtoa_r+0x858>
 80071bc:	461a      	mov	r2, r3
 80071be:	9904      	ldr	r1, [sp, #16]
 80071c0:	4620      	mov	r0, r4
 80071c2:	f000 fd4d 	bl	8007c60 <__lshift>
 80071c6:	9004      	str	r0, [sp, #16]
 80071c8:	f1b8 0f00 	cmp.w	r8, #0
 80071cc:	dd05      	ble.n	80071da <_dtoa_r+0x86a>
 80071ce:	4639      	mov	r1, r7
 80071d0:	4642      	mov	r2, r8
 80071d2:	4620      	mov	r0, r4
 80071d4:	f000 fd44 	bl	8007c60 <__lshift>
 80071d8:	4607      	mov	r7, r0
 80071da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071dc:	b353      	cbz	r3, 8007234 <_dtoa_r+0x8c4>
 80071de:	4639      	mov	r1, r7
 80071e0:	9804      	ldr	r0, [sp, #16]
 80071e2:	f000 fd91 	bl	8007d08 <__mcmp>
 80071e6:	2800      	cmp	r0, #0
 80071e8:	da24      	bge.n	8007234 <_dtoa_r+0x8c4>
 80071ea:	2300      	movs	r3, #0
 80071ec:	220a      	movs	r2, #10
 80071ee:	9904      	ldr	r1, [sp, #16]
 80071f0:	4620      	mov	r0, r4
 80071f2:	f000 fbbf 	bl	8007974 <__multadd>
 80071f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071f8:	9004      	str	r0, [sp, #16]
 80071fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80071fe:	2b00      	cmp	r3, #0
 8007200:	f000 814d 	beq.w	800749e <_dtoa_r+0xb2e>
 8007204:	2300      	movs	r3, #0
 8007206:	4631      	mov	r1, r6
 8007208:	220a      	movs	r2, #10
 800720a:	4620      	mov	r0, r4
 800720c:	f000 fbb2 	bl	8007974 <__multadd>
 8007210:	9b02      	ldr	r3, [sp, #8]
 8007212:	2b00      	cmp	r3, #0
 8007214:	4606      	mov	r6, r0
 8007216:	dc4f      	bgt.n	80072b8 <_dtoa_r+0x948>
 8007218:	9b06      	ldr	r3, [sp, #24]
 800721a:	2b02      	cmp	r3, #2
 800721c:	dd4c      	ble.n	80072b8 <_dtoa_r+0x948>
 800721e:	e011      	b.n	8007244 <_dtoa_r+0x8d4>
 8007220:	d0c9      	beq.n	80071b6 <_dtoa_r+0x846>
 8007222:	9a05      	ldr	r2, [sp, #20]
 8007224:	331c      	adds	r3, #28
 8007226:	441a      	add	r2, r3
 8007228:	9205      	str	r2, [sp, #20]
 800722a:	441d      	add	r5, r3
 800722c:	4498      	add	r8, r3
 800722e:	e7c2      	b.n	80071b6 <_dtoa_r+0x846>
 8007230:	4603      	mov	r3, r0
 8007232:	e7f6      	b.n	8007222 <_dtoa_r+0x8b2>
 8007234:	f1b9 0f00 	cmp.w	r9, #0
 8007238:	dc38      	bgt.n	80072ac <_dtoa_r+0x93c>
 800723a:	9b06      	ldr	r3, [sp, #24]
 800723c:	2b02      	cmp	r3, #2
 800723e:	dd35      	ble.n	80072ac <_dtoa_r+0x93c>
 8007240:	f8cd 9008 	str.w	r9, [sp, #8]
 8007244:	9b02      	ldr	r3, [sp, #8]
 8007246:	b963      	cbnz	r3, 8007262 <_dtoa_r+0x8f2>
 8007248:	4639      	mov	r1, r7
 800724a:	2205      	movs	r2, #5
 800724c:	4620      	mov	r0, r4
 800724e:	f000 fb91 	bl	8007974 <__multadd>
 8007252:	4601      	mov	r1, r0
 8007254:	4607      	mov	r7, r0
 8007256:	9804      	ldr	r0, [sp, #16]
 8007258:	f000 fd56 	bl	8007d08 <__mcmp>
 800725c:	2800      	cmp	r0, #0
 800725e:	f73f adcc 	bgt.w	8006dfa <_dtoa_r+0x48a>
 8007262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007264:	465d      	mov	r5, fp
 8007266:	ea6f 0a03 	mvn.w	sl, r3
 800726a:	f04f 0900 	mov.w	r9, #0
 800726e:	4639      	mov	r1, r7
 8007270:	4620      	mov	r0, r4
 8007272:	f000 fb68 	bl	8007946 <_Bfree>
 8007276:	2e00      	cmp	r6, #0
 8007278:	f43f aeb7 	beq.w	8006fea <_dtoa_r+0x67a>
 800727c:	f1b9 0f00 	cmp.w	r9, #0
 8007280:	d005      	beq.n	800728e <_dtoa_r+0x91e>
 8007282:	45b1      	cmp	r9, r6
 8007284:	d003      	beq.n	800728e <_dtoa_r+0x91e>
 8007286:	4649      	mov	r1, r9
 8007288:	4620      	mov	r0, r4
 800728a:	f000 fb5c 	bl	8007946 <_Bfree>
 800728e:	4631      	mov	r1, r6
 8007290:	4620      	mov	r0, r4
 8007292:	f000 fb58 	bl	8007946 <_Bfree>
 8007296:	e6a8      	b.n	8006fea <_dtoa_r+0x67a>
 8007298:	2700      	movs	r7, #0
 800729a:	463e      	mov	r6, r7
 800729c:	e7e1      	b.n	8007262 <_dtoa_r+0x8f2>
 800729e:	f8dd a020 	ldr.w	sl, [sp, #32]
 80072a2:	463e      	mov	r6, r7
 80072a4:	e5a9      	b.n	8006dfa <_dtoa_r+0x48a>
 80072a6:	bf00      	nop
 80072a8:	40240000 	.word	0x40240000
 80072ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072ae:	f8cd 9008 	str.w	r9, [sp, #8]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f000 80fa 	beq.w	80074ac <_dtoa_r+0xb3c>
 80072b8:	2d00      	cmp	r5, #0
 80072ba:	dd05      	ble.n	80072c8 <_dtoa_r+0x958>
 80072bc:	4631      	mov	r1, r6
 80072be:	462a      	mov	r2, r5
 80072c0:	4620      	mov	r0, r4
 80072c2:	f000 fccd 	bl	8007c60 <__lshift>
 80072c6:	4606      	mov	r6, r0
 80072c8:	9b07      	ldr	r3, [sp, #28]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d04c      	beq.n	8007368 <_dtoa_r+0x9f8>
 80072ce:	6871      	ldr	r1, [r6, #4]
 80072d0:	4620      	mov	r0, r4
 80072d2:	f000 fb04 	bl	80078de <_Balloc>
 80072d6:	6932      	ldr	r2, [r6, #16]
 80072d8:	3202      	adds	r2, #2
 80072da:	4605      	mov	r5, r0
 80072dc:	0092      	lsls	r2, r2, #2
 80072de:	f106 010c 	add.w	r1, r6, #12
 80072e2:	300c      	adds	r0, #12
 80072e4:	f000 faf0 	bl	80078c8 <memcpy>
 80072e8:	2201      	movs	r2, #1
 80072ea:	4629      	mov	r1, r5
 80072ec:	4620      	mov	r0, r4
 80072ee:	f000 fcb7 	bl	8007c60 <__lshift>
 80072f2:	9b00      	ldr	r3, [sp, #0]
 80072f4:	f8cd b014 	str.w	fp, [sp, #20]
 80072f8:	f003 0301 	and.w	r3, r3, #1
 80072fc:	46b1      	mov	r9, r6
 80072fe:	9307      	str	r3, [sp, #28]
 8007300:	4606      	mov	r6, r0
 8007302:	4639      	mov	r1, r7
 8007304:	9804      	ldr	r0, [sp, #16]
 8007306:	f7ff faa7 	bl	8006858 <quorem>
 800730a:	4649      	mov	r1, r9
 800730c:	4605      	mov	r5, r0
 800730e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007312:	9804      	ldr	r0, [sp, #16]
 8007314:	f000 fcf8 	bl	8007d08 <__mcmp>
 8007318:	4632      	mov	r2, r6
 800731a:	9000      	str	r0, [sp, #0]
 800731c:	4639      	mov	r1, r7
 800731e:	4620      	mov	r0, r4
 8007320:	f000 fd0c 	bl	8007d3c <__mdiff>
 8007324:	68c3      	ldr	r3, [r0, #12]
 8007326:	4602      	mov	r2, r0
 8007328:	bb03      	cbnz	r3, 800736c <_dtoa_r+0x9fc>
 800732a:	4601      	mov	r1, r0
 800732c:	9008      	str	r0, [sp, #32]
 800732e:	9804      	ldr	r0, [sp, #16]
 8007330:	f000 fcea 	bl	8007d08 <__mcmp>
 8007334:	9a08      	ldr	r2, [sp, #32]
 8007336:	4603      	mov	r3, r0
 8007338:	4611      	mov	r1, r2
 800733a:	4620      	mov	r0, r4
 800733c:	9308      	str	r3, [sp, #32]
 800733e:	f000 fb02 	bl	8007946 <_Bfree>
 8007342:	9b08      	ldr	r3, [sp, #32]
 8007344:	b9a3      	cbnz	r3, 8007370 <_dtoa_r+0xa00>
 8007346:	9a06      	ldr	r2, [sp, #24]
 8007348:	b992      	cbnz	r2, 8007370 <_dtoa_r+0xa00>
 800734a:	9a07      	ldr	r2, [sp, #28]
 800734c:	b982      	cbnz	r2, 8007370 <_dtoa_r+0xa00>
 800734e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007352:	d029      	beq.n	80073a8 <_dtoa_r+0xa38>
 8007354:	9b00      	ldr	r3, [sp, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	dd01      	ble.n	800735e <_dtoa_r+0x9ee>
 800735a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800735e:	9b05      	ldr	r3, [sp, #20]
 8007360:	1c5d      	adds	r5, r3, #1
 8007362:	f883 8000 	strb.w	r8, [r3]
 8007366:	e782      	b.n	800726e <_dtoa_r+0x8fe>
 8007368:	4630      	mov	r0, r6
 800736a:	e7c2      	b.n	80072f2 <_dtoa_r+0x982>
 800736c:	2301      	movs	r3, #1
 800736e:	e7e3      	b.n	8007338 <_dtoa_r+0x9c8>
 8007370:	9a00      	ldr	r2, [sp, #0]
 8007372:	2a00      	cmp	r2, #0
 8007374:	db04      	blt.n	8007380 <_dtoa_r+0xa10>
 8007376:	d125      	bne.n	80073c4 <_dtoa_r+0xa54>
 8007378:	9a06      	ldr	r2, [sp, #24]
 800737a:	bb1a      	cbnz	r2, 80073c4 <_dtoa_r+0xa54>
 800737c:	9a07      	ldr	r2, [sp, #28]
 800737e:	bb0a      	cbnz	r2, 80073c4 <_dtoa_r+0xa54>
 8007380:	2b00      	cmp	r3, #0
 8007382:	ddec      	ble.n	800735e <_dtoa_r+0x9ee>
 8007384:	2201      	movs	r2, #1
 8007386:	9904      	ldr	r1, [sp, #16]
 8007388:	4620      	mov	r0, r4
 800738a:	f000 fc69 	bl	8007c60 <__lshift>
 800738e:	4639      	mov	r1, r7
 8007390:	9004      	str	r0, [sp, #16]
 8007392:	f000 fcb9 	bl	8007d08 <__mcmp>
 8007396:	2800      	cmp	r0, #0
 8007398:	dc03      	bgt.n	80073a2 <_dtoa_r+0xa32>
 800739a:	d1e0      	bne.n	800735e <_dtoa_r+0x9ee>
 800739c:	f018 0f01 	tst.w	r8, #1
 80073a0:	d0dd      	beq.n	800735e <_dtoa_r+0x9ee>
 80073a2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80073a6:	d1d8      	bne.n	800735a <_dtoa_r+0x9ea>
 80073a8:	9b05      	ldr	r3, [sp, #20]
 80073aa:	9a05      	ldr	r2, [sp, #20]
 80073ac:	1c5d      	adds	r5, r3, #1
 80073ae:	2339      	movs	r3, #57	; 0x39
 80073b0:	7013      	strb	r3, [r2, #0]
 80073b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80073b6:	2b39      	cmp	r3, #57	; 0x39
 80073b8:	f105 32ff 	add.w	r2, r5, #4294967295
 80073bc:	d04f      	beq.n	800745e <_dtoa_r+0xaee>
 80073be:	3301      	adds	r3, #1
 80073c0:	7013      	strb	r3, [r2, #0]
 80073c2:	e754      	b.n	800726e <_dtoa_r+0x8fe>
 80073c4:	9a05      	ldr	r2, [sp, #20]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	f102 0501 	add.w	r5, r2, #1
 80073cc:	dd06      	ble.n	80073dc <_dtoa_r+0xa6c>
 80073ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80073d2:	d0e9      	beq.n	80073a8 <_dtoa_r+0xa38>
 80073d4:	f108 0801 	add.w	r8, r8, #1
 80073d8:	9b05      	ldr	r3, [sp, #20]
 80073da:	e7c2      	b.n	8007362 <_dtoa_r+0x9f2>
 80073dc:	9a02      	ldr	r2, [sp, #8]
 80073de:	f805 8c01 	strb.w	r8, [r5, #-1]
 80073e2:	eba5 030b 	sub.w	r3, r5, fp
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d021      	beq.n	800742e <_dtoa_r+0xabe>
 80073ea:	2300      	movs	r3, #0
 80073ec:	220a      	movs	r2, #10
 80073ee:	9904      	ldr	r1, [sp, #16]
 80073f0:	4620      	mov	r0, r4
 80073f2:	f000 fabf 	bl	8007974 <__multadd>
 80073f6:	45b1      	cmp	r9, r6
 80073f8:	9004      	str	r0, [sp, #16]
 80073fa:	f04f 0300 	mov.w	r3, #0
 80073fe:	f04f 020a 	mov.w	r2, #10
 8007402:	4649      	mov	r1, r9
 8007404:	4620      	mov	r0, r4
 8007406:	d105      	bne.n	8007414 <_dtoa_r+0xaa4>
 8007408:	f000 fab4 	bl	8007974 <__multadd>
 800740c:	4681      	mov	r9, r0
 800740e:	4606      	mov	r6, r0
 8007410:	9505      	str	r5, [sp, #20]
 8007412:	e776      	b.n	8007302 <_dtoa_r+0x992>
 8007414:	f000 faae 	bl	8007974 <__multadd>
 8007418:	4631      	mov	r1, r6
 800741a:	4681      	mov	r9, r0
 800741c:	2300      	movs	r3, #0
 800741e:	220a      	movs	r2, #10
 8007420:	4620      	mov	r0, r4
 8007422:	f000 faa7 	bl	8007974 <__multadd>
 8007426:	4606      	mov	r6, r0
 8007428:	e7f2      	b.n	8007410 <_dtoa_r+0xaa0>
 800742a:	f04f 0900 	mov.w	r9, #0
 800742e:	2201      	movs	r2, #1
 8007430:	9904      	ldr	r1, [sp, #16]
 8007432:	4620      	mov	r0, r4
 8007434:	f000 fc14 	bl	8007c60 <__lshift>
 8007438:	4639      	mov	r1, r7
 800743a:	9004      	str	r0, [sp, #16]
 800743c:	f000 fc64 	bl	8007d08 <__mcmp>
 8007440:	2800      	cmp	r0, #0
 8007442:	dcb6      	bgt.n	80073b2 <_dtoa_r+0xa42>
 8007444:	d102      	bne.n	800744c <_dtoa_r+0xadc>
 8007446:	f018 0f01 	tst.w	r8, #1
 800744a:	d1b2      	bne.n	80073b2 <_dtoa_r+0xa42>
 800744c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007450:	2b30      	cmp	r3, #48	; 0x30
 8007452:	f105 32ff 	add.w	r2, r5, #4294967295
 8007456:	f47f af0a 	bne.w	800726e <_dtoa_r+0x8fe>
 800745a:	4615      	mov	r5, r2
 800745c:	e7f6      	b.n	800744c <_dtoa_r+0xadc>
 800745e:	4593      	cmp	fp, r2
 8007460:	d105      	bne.n	800746e <_dtoa_r+0xafe>
 8007462:	2331      	movs	r3, #49	; 0x31
 8007464:	f10a 0a01 	add.w	sl, sl, #1
 8007468:	f88b 3000 	strb.w	r3, [fp]
 800746c:	e6ff      	b.n	800726e <_dtoa_r+0x8fe>
 800746e:	4615      	mov	r5, r2
 8007470:	e79f      	b.n	80073b2 <_dtoa_r+0xa42>
 8007472:	f8df b064 	ldr.w	fp, [pc, #100]	; 80074d8 <_dtoa_r+0xb68>
 8007476:	e007      	b.n	8007488 <_dtoa_r+0xb18>
 8007478:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800747a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80074dc <_dtoa_r+0xb6c>
 800747e:	b11b      	cbz	r3, 8007488 <_dtoa_r+0xb18>
 8007480:	f10b 0308 	add.w	r3, fp, #8
 8007484:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007486:	6013      	str	r3, [r2, #0]
 8007488:	4658      	mov	r0, fp
 800748a:	b017      	add	sp, #92	; 0x5c
 800748c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007490:	9b06      	ldr	r3, [sp, #24]
 8007492:	2b01      	cmp	r3, #1
 8007494:	f77f ae35 	ble.w	8007102 <_dtoa_r+0x792>
 8007498:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800749a:	9307      	str	r3, [sp, #28]
 800749c:	e649      	b.n	8007132 <_dtoa_r+0x7c2>
 800749e:	9b02      	ldr	r3, [sp, #8]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	dc03      	bgt.n	80074ac <_dtoa_r+0xb3c>
 80074a4:	9b06      	ldr	r3, [sp, #24]
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	f73f aecc 	bgt.w	8007244 <_dtoa_r+0x8d4>
 80074ac:	465d      	mov	r5, fp
 80074ae:	4639      	mov	r1, r7
 80074b0:	9804      	ldr	r0, [sp, #16]
 80074b2:	f7ff f9d1 	bl	8006858 <quorem>
 80074b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80074ba:	f805 8b01 	strb.w	r8, [r5], #1
 80074be:	9a02      	ldr	r2, [sp, #8]
 80074c0:	eba5 030b 	sub.w	r3, r5, fp
 80074c4:	429a      	cmp	r2, r3
 80074c6:	ddb0      	ble.n	800742a <_dtoa_r+0xaba>
 80074c8:	2300      	movs	r3, #0
 80074ca:	220a      	movs	r2, #10
 80074cc:	9904      	ldr	r1, [sp, #16]
 80074ce:	4620      	mov	r0, r4
 80074d0:	f000 fa50 	bl	8007974 <__multadd>
 80074d4:	9004      	str	r0, [sp, #16]
 80074d6:	e7ea      	b.n	80074ae <_dtoa_r+0xb3e>
 80074d8:	080084dc 	.word	0x080084dc
 80074dc:	08008500 	.word	0x08008500

080074e0 <__sflush_r>:
 80074e0:	898a      	ldrh	r2, [r1, #12]
 80074e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074e6:	4605      	mov	r5, r0
 80074e8:	0710      	lsls	r0, r2, #28
 80074ea:	460c      	mov	r4, r1
 80074ec:	d458      	bmi.n	80075a0 <__sflush_r+0xc0>
 80074ee:	684b      	ldr	r3, [r1, #4]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	dc05      	bgt.n	8007500 <__sflush_r+0x20>
 80074f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	dc02      	bgt.n	8007500 <__sflush_r+0x20>
 80074fa:	2000      	movs	r0, #0
 80074fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007500:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007502:	2e00      	cmp	r6, #0
 8007504:	d0f9      	beq.n	80074fa <__sflush_r+0x1a>
 8007506:	2300      	movs	r3, #0
 8007508:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800750c:	682f      	ldr	r7, [r5, #0]
 800750e:	6a21      	ldr	r1, [r4, #32]
 8007510:	602b      	str	r3, [r5, #0]
 8007512:	d032      	beq.n	800757a <__sflush_r+0x9a>
 8007514:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007516:	89a3      	ldrh	r3, [r4, #12]
 8007518:	075a      	lsls	r2, r3, #29
 800751a:	d505      	bpl.n	8007528 <__sflush_r+0x48>
 800751c:	6863      	ldr	r3, [r4, #4]
 800751e:	1ac0      	subs	r0, r0, r3
 8007520:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007522:	b10b      	cbz	r3, 8007528 <__sflush_r+0x48>
 8007524:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007526:	1ac0      	subs	r0, r0, r3
 8007528:	2300      	movs	r3, #0
 800752a:	4602      	mov	r2, r0
 800752c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800752e:	6a21      	ldr	r1, [r4, #32]
 8007530:	4628      	mov	r0, r5
 8007532:	47b0      	blx	r6
 8007534:	1c43      	adds	r3, r0, #1
 8007536:	89a3      	ldrh	r3, [r4, #12]
 8007538:	d106      	bne.n	8007548 <__sflush_r+0x68>
 800753a:	6829      	ldr	r1, [r5, #0]
 800753c:	291d      	cmp	r1, #29
 800753e:	d848      	bhi.n	80075d2 <__sflush_r+0xf2>
 8007540:	4a29      	ldr	r2, [pc, #164]	; (80075e8 <__sflush_r+0x108>)
 8007542:	40ca      	lsrs	r2, r1
 8007544:	07d6      	lsls	r6, r2, #31
 8007546:	d544      	bpl.n	80075d2 <__sflush_r+0xf2>
 8007548:	2200      	movs	r2, #0
 800754a:	6062      	str	r2, [r4, #4]
 800754c:	04d9      	lsls	r1, r3, #19
 800754e:	6922      	ldr	r2, [r4, #16]
 8007550:	6022      	str	r2, [r4, #0]
 8007552:	d504      	bpl.n	800755e <__sflush_r+0x7e>
 8007554:	1c42      	adds	r2, r0, #1
 8007556:	d101      	bne.n	800755c <__sflush_r+0x7c>
 8007558:	682b      	ldr	r3, [r5, #0]
 800755a:	b903      	cbnz	r3, 800755e <__sflush_r+0x7e>
 800755c:	6560      	str	r0, [r4, #84]	; 0x54
 800755e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007560:	602f      	str	r7, [r5, #0]
 8007562:	2900      	cmp	r1, #0
 8007564:	d0c9      	beq.n	80074fa <__sflush_r+0x1a>
 8007566:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800756a:	4299      	cmp	r1, r3
 800756c:	d002      	beq.n	8007574 <__sflush_r+0x94>
 800756e:	4628      	mov	r0, r5
 8007570:	f000 fc9e 	bl	8007eb0 <_free_r>
 8007574:	2000      	movs	r0, #0
 8007576:	6360      	str	r0, [r4, #52]	; 0x34
 8007578:	e7c0      	b.n	80074fc <__sflush_r+0x1c>
 800757a:	2301      	movs	r3, #1
 800757c:	4628      	mov	r0, r5
 800757e:	47b0      	blx	r6
 8007580:	1c41      	adds	r1, r0, #1
 8007582:	d1c8      	bne.n	8007516 <__sflush_r+0x36>
 8007584:	682b      	ldr	r3, [r5, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d0c5      	beq.n	8007516 <__sflush_r+0x36>
 800758a:	2b1d      	cmp	r3, #29
 800758c:	d001      	beq.n	8007592 <__sflush_r+0xb2>
 800758e:	2b16      	cmp	r3, #22
 8007590:	d101      	bne.n	8007596 <__sflush_r+0xb6>
 8007592:	602f      	str	r7, [r5, #0]
 8007594:	e7b1      	b.n	80074fa <__sflush_r+0x1a>
 8007596:	89a3      	ldrh	r3, [r4, #12]
 8007598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800759c:	81a3      	strh	r3, [r4, #12]
 800759e:	e7ad      	b.n	80074fc <__sflush_r+0x1c>
 80075a0:	690f      	ldr	r7, [r1, #16]
 80075a2:	2f00      	cmp	r7, #0
 80075a4:	d0a9      	beq.n	80074fa <__sflush_r+0x1a>
 80075a6:	0793      	lsls	r3, r2, #30
 80075a8:	680e      	ldr	r6, [r1, #0]
 80075aa:	bf08      	it	eq
 80075ac:	694b      	ldreq	r3, [r1, #20]
 80075ae:	600f      	str	r7, [r1, #0]
 80075b0:	bf18      	it	ne
 80075b2:	2300      	movne	r3, #0
 80075b4:	eba6 0807 	sub.w	r8, r6, r7
 80075b8:	608b      	str	r3, [r1, #8]
 80075ba:	f1b8 0f00 	cmp.w	r8, #0
 80075be:	dd9c      	ble.n	80074fa <__sflush_r+0x1a>
 80075c0:	4643      	mov	r3, r8
 80075c2:	463a      	mov	r2, r7
 80075c4:	6a21      	ldr	r1, [r4, #32]
 80075c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80075c8:	4628      	mov	r0, r5
 80075ca:	47b0      	blx	r6
 80075cc:	2800      	cmp	r0, #0
 80075ce:	dc06      	bgt.n	80075de <__sflush_r+0xfe>
 80075d0:	89a3      	ldrh	r3, [r4, #12]
 80075d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075d6:	81a3      	strh	r3, [r4, #12]
 80075d8:	f04f 30ff 	mov.w	r0, #4294967295
 80075dc:	e78e      	b.n	80074fc <__sflush_r+0x1c>
 80075de:	4407      	add	r7, r0
 80075e0:	eba8 0800 	sub.w	r8, r8, r0
 80075e4:	e7e9      	b.n	80075ba <__sflush_r+0xda>
 80075e6:	bf00      	nop
 80075e8:	20400001 	.word	0x20400001

080075ec <_fflush_r>:
 80075ec:	b538      	push	{r3, r4, r5, lr}
 80075ee:	690b      	ldr	r3, [r1, #16]
 80075f0:	4605      	mov	r5, r0
 80075f2:	460c      	mov	r4, r1
 80075f4:	b1db      	cbz	r3, 800762e <_fflush_r+0x42>
 80075f6:	b118      	cbz	r0, 8007600 <_fflush_r+0x14>
 80075f8:	6983      	ldr	r3, [r0, #24]
 80075fa:	b90b      	cbnz	r3, 8007600 <_fflush_r+0x14>
 80075fc:	f000 f860 	bl	80076c0 <__sinit>
 8007600:	4b0c      	ldr	r3, [pc, #48]	; (8007634 <_fflush_r+0x48>)
 8007602:	429c      	cmp	r4, r3
 8007604:	d109      	bne.n	800761a <_fflush_r+0x2e>
 8007606:	686c      	ldr	r4, [r5, #4]
 8007608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800760c:	b17b      	cbz	r3, 800762e <_fflush_r+0x42>
 800760e:	4621      	mov	r1, r4
 8007610:	4628      	mov	r0, r5
 8007612:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007616:	f7ff bf63 	b.w	80074e0 <__sflush_r>
 800761a:	4b07      	ldr	r3, [pc, #28]	; (8007638 <_fflush_r+0x4c>)
 800761c:	429c      	cmp	r4, r3
 800761e:	d101      	bne.n	8007624 <_fflush_r+0x38>
 8007620:	68ac      	ldr	r4, [r5, #8]
 8007622:	e7f1      	b.n	8007608 <_fflush_r+0x1c>
 8007624:	4b05      	ldr	r3, [pc, #20]	; (800763c <_fflush_r+0x50>)
 8007626:	429c      	cmp	r4, r3
 8007628:	bf08      	it	eq
 800762a:	68ec      	ldreq	r4, [r5, #12]
 800762c:	e7ec      	b.n	8007608 <_fflush_r+0x1c>
 800762e:	2000      	movs	r0, #0
 8007630:	bd38      	pop	{r3, r4, r5, pc}
 8007632:	bf00      	nop
 8007634:	08008530 	.word	0x08008530
 8007638:	08008550 	.word	0x08008550
 800763c:	08008510 	.word	0x08008510

08007640 <std>:
 8007640:	2300      	movs	r3, #0
 8007642:	b510      	push	{r4, lr}
 8007644:	4604      	mov	r4, r0
 8007646:	e9c0 3300 	strd	r3, r3, [r0]
 800764a:	6083      	str	r3, [r0, #8]
 800764c:	8181      	strh	r1, [r0, #12]
 800764e:	6643      	str	r3, [r0, #100]	; 0x64
 8007650:	81c2      	strh	r2, [r0, #14]
 8007652:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007656:	6183      	str	r3, [r0, #24]
 8007658:	4619      	mov	r1, r3
 800765a:	2208      	movs	r2, #8
 800765c:	305c      	adds	r0, #92	; 0x5c
 800765e:	f7fe fb5b 	bl	8005d18 <memset>
 8007662:	4b05      	ldr	r3, [pc, #20]	; (8007678 <std+0x38>)
 8007664:	6263      	str	r3, [r4, #36]	; 0x24
 8007666:	4b05      	ldr	r3, [pc, #20]	; (800767c <std+0x3c>)
 8007668:	62a3      	str	r3, [r4, #40]	; 0x28
 800766a:	4b05      	ldr	r3, [pc, #20]	; (8007680 <std+0x40>)
 800766c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800766e:	4b05      	ldr	r3, [pc, #20]	; (8007684 <std+0x44>)
 8007670:	6224      	str	r4, [r4, #32]
 8007672:	6323      	str	r3, [r4, #48]	; 0x30
 8007674:	bd10      	pop	{r4, pc}
 8007676:	bf00      	nop
 8007678:	080082a1 	.word	0x080082a1
 800767c:	080082c3 	.word	0x080082c3
 8007680:	080082fb 	.word	0x080082fb
 8007684:	0800831f 	.word	0x0800831f

08007688 <_cleanup_r>:
 8007688:	4901      	ldr	r1, [pc, #4]	; (8007690 <_cleanup_r+0x8>)
 800768a:	f000 b885 	b.w	8007798 <_fwalk_reent>
 800768e:	bf00      	nop
 8007690:	080075ed 	.word	0x080075ed

08007694 <__sfmoreglue>:
 8007694:	b570      	push	{r4, r5, r6, lr}
 8007696:	1e4a      	subs	r2, r1, #1
 8007698:	2568      	movs	r5, #104	; 0x68
 800769a:	4355      	muls	r5, r2
 800769c:	460e      	mov	r6, r1
 800769e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80076a2:	f000 fc53 	bl	8007f4c <_malloc_r>
 80076a6:	4604      	mov	r4, r0
 80076a8:	b140      	cbz	r0, 80076bc <__sfmoreglue+0x28>
 80076aa:	2100      	movs	r1, #0
 80076ac:	e9c0 1600 	strd	r1, r6, [r0]
 80076b0:	300c      	adds	r0, #12
 80076b2:	60a0      	str	r0, [r4, #8]
 80076b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80076b8:	f7fe fb2e 	bl	8005d18 <memset>
 80076bc:	4620      	mov	r0, r4
 80076be:	bd70      	pop	{r4, r5, r6, pc}

080076c0 <__sinit>:
 80076c0:	6983      	ldr	r3, [r0, #24]
 80076c2:	b510      	push	{r4, lr}
 80076c4:	4604      	mov	r4, r0
 80076c6:	bb33      	cbnz	r3, 8007716 <__sinit+0x56>
 80076c8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80076cc:	6503      	str	r3, [r0, #80]	; 0x50
 80076ce:	4b12      	ldr	r3, [pc, #72]	; (8007718 <__sinit+0x58>)
 80076d0:	4a12      	ldr	r2, [pc, #72]	; (800771c <__sinit+0x5c>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	6282      	str	r2, [r0, #40]	; 0x28
 80076d6:	4298      	cmp	r0, r3
 80076d8:	bf04      	itt	eq
 80076da:	2301      	moveq	r3, #1
 80076dc:	6183      	streq	r3, [r0, #24]
 80076de:	f000 f81f 	bl	8007720 <__sfp>
 80076e2:	6060      	str	r0, [r4, #4]
 80076e4:	4620      	mov	r0, r4
 80076e6:	f000 f81b 	bl	8007720 <__sfp>
 80076ea:	60a0      	str	r0, [r4, #8]
 80076ec:	4620      	mov	r0, r4
 80076ee:	f000 f817 	bl	8007720 <__sfp>
 80076f2:	2200      	movs	r2, #0
 80076f4:	60e0      	str	r0, [r4, #12]
 80076f6:	2104      	movs	r1, #4
 80076f8:	6860      	ldr	r0, [r4, #4]
 80076fa:	f7ff ffa1 	bl	8007640 <std>
 80076fe:	2201      	movs	r2, #1
 8007700:	2109      	movs	r1, #9
 8007702:	68a0      	ldr	r0, [r4, #8]
 8007704:	f7ff ff9c 	bl	8007640 <std>
 8007708:	2202      	movs	r2, #2
 800770a:	2112      	movs	r1, #18
 800770c:	68e0      	ldr	r0, [r4, #12]
 800770e:	f7ff ff97 	bl	8007640 <std>
 8007712:	2301      	movs	r3, #1
 8007714:	61a3      	str	r3, [r4, #24]
 8007716:	bd10      	pop	{r4, pc}
 8007718:	080084c8 	.word	0x080084c8
 800771c:	08007689 	.word	0x08007689

08007720 <__sfp>:
 8007720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007722:	4b1b      	ldr	r3, [pc, #108]	; (8007790 <__sfp+0x70>)
 8007724:	681e      	ldr	r6, [r3, #0]
 8007726:	69b3      	ldr	r3, [r6, #24]
 8007728:	4607      	mov	r7, r0
 800772a:	b913      	cbnz	r3, 8007732 <__sfp+0x12>
 800772c:	4630      	mov	r0, r6
 800772e:	f7ff ffc7 	bl	80076c0 <__sinit>
 8007732:	3648      	adds	r6, #72	; 0x48
 8007734:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007738:	3b01      	subs	r3, #1
 800773a:	d503      	bpl.n	8007744 <__sfp+0x24>
 800773c:	6833      	ldr	r3, [r6, #0]
 800773e:	b133      	cbz	r3, 800774e <__sfp+0x2e>
 8007740:	6836      	ldr	r6, [r6, #0]
 8007742:	e7f7      	b.n	8007734 <__sfp+0x14>
 8007744:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007748:	b16d      	cbz	r5, 8007766 <__sfp+0x46>
 800774a:	3468      	adds	r4, #104	; 0x68
 800774c:	e7f4      	b.n	8007738 <__sfp+0x18>
 800774e:	2104      	movs	r1, #4
 8007750:	4638      	mov	r0, r7
 8007752:	f7ff ff9f 	bl	8007694 <__sfmoreglue>
 8007756:	6030      	str	r0, [r6, #0]
 8007758:	2800      	cmp	r0, #0
 800775a:	d1f1      	bne.n	8007740 <__sfp+0x20>
 800775c:	230c      	movs	r3, #12
 800775e:	603b      	str	r3, [r7, #0]
 8007760:	4604      	mov	r4, r0
 8007762:	4620      	mov	r0, r4
 8007764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007766:	4b0b      	ldr	r3, [pc, #44]	; (8007794 <__sfp+0x74>)
 8007768:	6665      	str	r5, [r4, #100]	; 0x64
 800776a:	e9c4 5500 	strd	r5, r5, [r4]
 800776e:	60a5      	str	r5, [r4, #8]
 8007770:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007774:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007778:	2208      	movs	r2, #8
 800777a:	4629      	mov	r1, r5
 800777c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007780:	f7fe faca 	bl	8005d18 <memset>
 8007784:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007788:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800778c:	e7e9      	b.n	8007762 <__sfp+0x42>
 800778e:	bf00      	nop
 8007790:	080084c8 	.word	0x080084c8
 8007794:	ffff0001 	.word	0xffff0001

08007798 <_fwalk_reent>:
 8007798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800779c:	4680      	mov	r8, r0
 800779e:	4689      	mov	r9, r1
 80077a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80077a4:	2600      	movs	r6, #0
 80077a6:	b914      	cbnz	r4, 80077ae <_fwalk_reent+0x16>
 80077a8:	4630      	mov	r0, r6
 80077aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077ae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80077b2:	3f01      	subs	r7, #1
 80077b4:	d501      	bpl.n	80077ba <_fwalk_reent+0x22>
 80077b6:	6824      	ldr	r4, [r4, #0]
 80077b8:	e7f5      	b.n	80077a6 <_fwalk_reent+0xe>
 80077ba:	89ab      	ldrh	r3, [r5, #12]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d907      	bls.n	80077d0 <_fwalk_reent+0x38>
 80077c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077c4:	3301      	adds	r3, #1
 80077c6:	d003      	beq.n	80077d0 <_fwalk_reent+0x38>
 80077c8:	4629      	mov	r1, r5
 80077ca:	4640      	mov	r0, r8
 80077cc:	47c8      	blx	r9
 80077ce:	4306      	orrs	r6, r0
 80077d0:	3568      	adds	r5, #104	; 0x68
 80077d2:	e7ee      	b.n	80077b2 <_fwalk_reent+0x1a>

080077d4 <_localeconv_r>:
 80077d4:	4b04      	ldr	r3, [pc, #16]	; (80077e8 <_localeconv_r+0x14>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	6a18      	ldr	r0, [r3, #32]
 80077da:	4b04      	ldr	r3, [pc, #16]	; (80077ec <_localeconv_r+0x18>)
 80077dc:	2800      	cmp	r0, #0
 80077de:	bf08      	it	eq
 80077e0:	4618      	moveq	r0, r3
 80077e2:	30f0      	adds	r0, #240	; 0xf0
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	20000010 	.word	0x20000010
 80077ec:	20000074 	.word	0x20000074

080077f0 <__swhatbuf_r>:
 80077f0:	b570      	push	{r4, r5, r6, lr}
 80077f2:	460e      	mov	r6, r1
 80077f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077f8:	2900      	cmp	r1, #0
 80077fa:	b096      	sub	sp, #88	; 0x58
 80077fc:	4614      	mov	r4, r2
 80077fe:	461d      	mov	r5, r3
 8007800:	da07      	bge.n	8007812 <__swhatbuf_r+0x22>
 8007802:	2300      	movs	r3, #0
 8007804:	602b      	str	r3, [r5, #0]
 8007806:	89b3      	ldrh	r3, [r6, #12]
 8007808:	061a      	lsls	r2, r3, #24
 800780a:	d410      	bmi.n	800782e <__swhatbuf_r+0x3e>
 800780c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007810:	e00e      	b.n	8007830 <__swhatbuf_r+0x40>
 8007812:	466a      	mov	r2, sp
 8007814:	f000 fdaa 	bl	800836c <_fstat_r>
 8007818:	2800      	cmp	r0, #0
 800781a:	dbf2      	blt.n	8007802 <__swhatbuf_r+0x12>
 800781c:	9a01      	ldr	r2, [sp, #4]
 800781e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007822:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007826:	425a      	negs	r2, r3
 8007828:	415a      	adcs	r2, r3
 800782a:	602a      	str	r2, [r5, #0]
 800782c:	e7ee      	b.n	800780c <__swhatbuf_r+0x1c>
 800782e:	2340      	movs	r3, #64	; 0x40
 8007830:	2000      	movs	r0, #0
 8007832:	6023      	str	r3, [r4, #0]
 8007834:	b016      	add	sp, #88	; 0x58
 8007836:	bd70      	pop	{r4, r5, r6, pc}

08007838 <__smakebuf_r>:
 8007838:	898b      	ldrh	r3, [r1, #12]
 800783a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800783c:	079d      	lsls	r5, r3, #30
 800783e:	4606      	mov	r6, r0
 8007840:	460c      	mov	r4, r1
 8007842:	d507      	bpl.n	8007854 <__smakebuf_r+0x1c>
 8007844:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007848:	6023      	str	r3, [r4, #0]
 800784a:	6123      	str	r3, [r4, #16]
 800784c:	2301      	movs	r3, #1
 800784e:	6163      	str	r3, [r4, #20]
 8007850:	b002      	add	sp, #8
 8007852:	bd70      	pop	{r4, r5, r6, pc}
 8007854:	ab01      	add	r3, sp, #4
 8007856:	466a      	mov	r2, sp
 8007858:	f7ff ffca 	bl	80077f0 <__swhatbuf_r>
 800785c:	9900      	ldr	r1, [sp, #0]
 800785e:	4605      	mov	r5, r0
 8007860:	4630      	mov	r0, r6
 8007862:	f000 fb73 	bl	8007f4c <_malloc_r>
 8007866:	b948      	cbnz	r0, 800787c <__smakebuf_r+0x44>
 8007868:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800786c:	059a      	lsls	r2, r3, #22
 800786e:	d4ef      	bmi.n	8007850 <__smakebuf_r+0x18>
 8007870:	f023 0303 	bic.w	r3, r3, #3
 8007874:	f043 0302 	orr.w	r3, r3, #2
 8007878:	81a3      	strh	r3, [r4, #12]
 800787a:	e7e3      	b.n	8007844 <__smakebuf_r+0xc>
 800787c:	4b0d      	ldr	r3, [pc, #52]	; (80078b4 <__smakebuf_r+0x7c>)
 800787e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007880:	89a3      	ldrh	r3, [r4, #12]
 8007882:	6020      	str	r0, [r4, #0]
 8007884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007888:	81a3      	strh	r3, [r4, #12]
 800788a:	9b00      	ldr	r3, [sp, #0]
 800788c:	6163      	str	r3, [r4, #20]
 800788e:	9b01      	ldr	r3, [sp, #4]
 8007890:	6120      	str	r0, [r4, #16]
 8007892:	b15b      	cbz	r3, 80078ac <__smakebuf_r+0x74>
 8007894:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007898:	4630      	mov	r0, r6
 800789a:	f000 fd79 	bl	8008390 <_isatty_r>
 800789e:	b128      	cbz	r0, 80078ac <__smakebuf_r+0x74>
 80078a0:	89a3      	ldrh	r3, [r4, #12]
 80078a2:	f023 0303 	bic.w	r3, r3, #3
 80078a6:	f043 0301 	orr.w	r3, r3, #1
 80078aa:	81a3      	strh	r3, [r4, #12]
 80078ac:	89a3      	ldrh	r3, [r4, #12]
 80078ae:	431d      	orrs	r5, r3
 80078b0:	81a5      	strh	r5, [r4, #12]
 80078b2:	e7cd      	b.n	8007850 <__smakebuf_r+0x18>
 80078b4:	08007689 	.word	0x08007689

080078b8 <malloc>:
 80078b8:	4b02      	ldr	r3, [pc, #8]	; (80078c4 <malloc+0xc>)
 80078ba:	4601      	mov	r1, r0
 80078bc:	6818      	ldr	r0, [r3, #0]
 80078be:	f000 bb45 	b.w	8007f4c <_malloc_r>
 80078c2:	bf00      	nop
 80078c4:	20000010 	.word	0x20000010

080078c8 <memcpy>:
 80078c8:	b510      	push	{r4, lr}
 80078ca:	1e43      	subs	r3, r0, #1
 80078cc:	440a      	add	r2, r1
 80078ce:	4291      	cmp	r1, r2
 80078d0:	d100      	bne.n	80078d4 <memcpy+0xc>
 80078d2:	bd10      	pop	{r4, pc}
 80078d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078dc:	e7f7      	b.n	80078ce <memcpy+0x6>

080078de <_Balloc>:
 80078de:	b570      	push	{r4, r5, r6, lr}
 80078e0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80078e2:	4604      	mov	r4, r0
 80078e4:	460e      	mov	r6, r1
 80078e6:	b93d      	cbnz	r5, 80078f8 <_Balloc+0x1a>
 80078e8:	2010      	movs	r0, #16
 80078ea:	f7ff ffe5 	bl	80078b8 <malloc>
 80078ee:	6260      	str	r0, [r4, #36]	; 0x24
 80078f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80078f4:	6005      	str	r5, [r0, #0]
 80078f6:	60c5      	str	r5, [r0, #12]
 80078f8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80078fa:	68eb      	ldr	r3, [r5, #12]
 80078fc:	b183      	cbz	r3, 8007920 <_Balloc+0x42>
 80078fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007906:	b9b8      	cbnz	r0, 8007938 <_Balloc+0x5a>
 8007908:	2101      	movs	r1, #1
 800790a:	fa01 f506 	lsl.w	r5, r1, r6
 800790e:	1d6a      	adds	r2, r5, #5
 8007910:	0092      	lsls	r2, r2, #2
 8007912:	4620      	mov	r0, r4
 8007914:	f000 fabe 	bl	8007e94 <_calloc_r>
 8007918:	b160      	cbz	r0, 8007934 <_Balloc+0x56>
 800791a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800791e:	e00e      	b.n	800793e <_Balloc+0x60>
 8007920:	2221      	movs	r2, #33	; 0x21
 8007922:	2104      	movs	r1, #4
 8007924:	4620      	mov	r0, r4
 8007926:	f000 fab5 	bl	8007e94 <_calloc_r>
 800792a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800792c:	60e8      	str	r0, [r5, #12]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d1e4      	bne.n	80078fe <_Balloc+0x20>
 8007934:	2000      	movs	r0, #0
 8007936:	bd70      	pop	{r4, r5, r6, pc}
 8007938:	6802      	ldr	r2, [r0, #0]
 800793a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800793e:	2300      	movs	r3, #0
 8007940:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007944:	e7f7      	b.n	8007936 <_Balloc+0x58>

08007946 <_Bfree>:
 8007946:	b570      	push	{r4, r5, r6, lr}
 8007948:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800794a:	4606      	mov	r6, r0
 800794c:	460d      	mov	r5, r1
 800794e:	b93c      	cbnz	r4, 8007960 <_Bfree+0x1a>
 8007950:	2010      	movs	r0, #16
 8007952:	f7ff ffb1 	bl	80078b8 <malloc>
 8007956:	6270      	str	r0, [r6, #36]	; 0x24
 8007958:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800795c:	6004      	str	r4, [r0, #0]
 800795e:	60c4      	str	r4, [r0, #12]
 8007960:	b13d      	cbz	r5, 8007972 <_Bfree+0x2c>
 8007962:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007964:	686a      	ldr	r2, [r5, #4]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800796c:	6029      	str	r1, [r5, #0]
 800796e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007972:	bd70      	pop	{r4, r5, r6, pc}

08007974 <__multadd>:
 8007974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007978:	690d      	ldr	r5, [r1, #16]
 800797a:	461f      	mov	r7, r3
 800797c:	4606      	mov	r6, r0
 800797e:	460c      	mov	r4, r1
 8007980:	f101 0c14 	add.w	ip, r1, #20
 8007984:	2300      	movs	r3, #0
 8007986:	f8dc 0000 	ldr.w	r0, [ip]
 800798a:	b281      	uxth	r1, r0
 800798c:	fb02 7101 	mla	r1, r2, r1, r7
 8007990:	0c0f      	lsrs	r7, r1, #16
 8007992:	0c00      	lsrs	r0, r0, #16
 8007994:	fb02 7000 	mla	r0, r2, r0, r7
 8007998:	b289      	uxth	r1, r1
 800799a:	3301      	adds	r3, #1
 800799c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80079a0:	429d      	cmp	r5, r3
 80079a2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80079a6:	f84c 1b04 	str.w	r1, [ip], #4
 80079aa:	dcec      	bgt.n	8007986 <__multadd+0x12>
 80079ac:	b1d7      	cbz	r7, 80079e4 <__multadd+0x70>
 80079ae:	68a3      	ldr	r3, [r4, #8]
 80079b0:	42ab      	cmp	r3, r5
 80079b2:	dc12      	bgt.n	80079da <__multadd+0x66>
 80079b4:	6861      	ldr	r1, [r4, #4]
 80079b6:	4630      	mov	r0, r6
 80079b8:	3101      	adds	r1, #1
 80079ba:	f7ff ff90 	bl	80078de <_Balloc>
 80079be:	6922      	ldr	r2, [r4, #16]
 80079c0:	3202      	adds	r2, #2
 80079c2:	f104 010c 	add.w	r1, r4, #12
 80079c6:	4680      	mov	r8, r0
 80079c8:	0092      	lsls	r2, r2, #2
 80079ca:	300c      	adds	r0, #12
 80079cc:	f7ff ff7c 	bl	80078c8 <memcpy>
 80079d0:	4621      	mov	r1, r4
 80079d2:	4630      	mov	r0, r6
 80079d4:	f7ff ffb7 	bl	8007946 <_Bfree>
 80079d8:	4644      	mov	r4, r8
 80079da:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80079de:	3501      	adds	r5, #1
 80079e0:	615f      	str	r7, [r3, #20]
 80079e2:	6125      	str	r5, [r4, #16]
 80079e4:	4620      	mov	r0, r4
 80079e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080079ea <__hi0bits>:
 80079ea:	0c02      	lsrs	r2, r0, #16
 80079ec:	0412      	lsls	r2, r2, #16
 80079ee:	4603      	mov	r3, r0
 80079f0:	b9b2      	cbnz	r2, 8007a20 <__hi0bits+0x36>
 80079f2:	0403      	lsls	r3, r0, #16
 80079f4:	2010      	movs	r0, #16
 80079f6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80079fa:	bf04      	itt	eq
 80079fc:	021b      	lsleq	r3, r3, #8
 80079fe:	3008      	addeq	r0, #8
 8007a00:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007a04:	bf04      	itt	eq
 8007a06:	011b      	lsleq	r3, r3, #4
 8007a08:	3004      	addeq	r0, #4
 8007a0a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007a0e:	bf04      	itt	eq
 8007a10:	009b      	lsleq	r3, r3, #2
 8007a12:	3002      	addeq	r0, #2
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	db06      	blt.n	8007a26 <__hi0bits+0x3c>
 8007a18:	005b      	lsls	r3, r3, #1
 8007a1a:	d503      	bpl.n	8007a24 <__hi0bits+0x3a>
 8007a1c:	3001      	adds	r0, #1
 8007a1e:	4770      	bx	lr
 8007a20:	2000      	movs	r0, #0
 8007a22:	e7e8      	b.n	80079f6 <__hi0bits+0xc>
 8007a24:	2020      	movs	r0, #32
 8007a26:	4770      	bx	lr

08007a28 <__lo0bits>:
 8007a28:	6803      	ldr	r3, [r0, #0]
 8007a2a:	f013 0207 	ands.w	r2, r3, #7
 8007a2e:	4601      	mov	r1, r0
 8007a30:	d00b      	beq.n	8007a4a <__lo0bits+0x22>
 8007a32:	07da      	lsls	r2, r3, #31
 8007a34:	d423      	bmi.n	8007a7e <__lo0bits+0x56>
 8007a36:	0798      	lsls	r0, r3, #30
 8007a38:	bf49      	itett	mi
 8007a3a:	085b      	lsrmi	r3, r3, #1
 8007a3c:	089b      	lsrpl	r3, r3, #2
 8007a3e:	2001      	movmi	r0, #1
 8007a40:	600b      	strmi	r3, [r1, #0]
 8007a42:	bf5c      	itt	pl
 8007a44:	600b      	strpl	r3, [r1, #0]
 8007a46:	2002      	movpl	r0, #2
 8007a48:	4770      	bx	lr
 8007a4a:	b298      	uxth	r0, r3
 8007a4c:	b9a8      	cbnz	r0, 8007a7a <__lo0bits+0x52>
 8007a4e:	0c1b      	lsrs	r3, r3, #16
 8007a50:	2010      	movs	r0, #16
 8007a52:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007a56:	bf04      	itt	eq
 8007a58:	0a1b      	lsreq	r3, r3, #8
 8007a5a:	3008      	addeq	r0, #8
 8007a5c:	071a      	lsls	r2, r3, #28
 8007a5e:	bf04      	itt	eq
 8007a60:	091b      	lsreq	r3, r3, #4
 8007a62:	3004      	addeq	r0, #4
 8007a64:	079a      	lsls	r2, r3, #30
 8007a66:	bf04      	itt	eq
 8007a68:	089b      	lsreq	r3, r3, #2
 8007a6a:	3002      	addeq	r0, #2
 8007a6c:	07da      	lsls	r2, r3, #31
 8007a6e:	d402      	bmi.n	8007a76 <__lo0bits+0x4e>
 8007a70:	085b      	lsrs	r3, r3, #1
 8007a72:	d006      	beq.n	8007a82 <__lo0bits+0x5a>
 8007a74:	3001      	adds	r0, #1
 8007a76:	600b      	str	r3, [r1, #0]
 8007a78:	4770      	bx	lr
 8007a7a:	4610      	mov	r0, r2
 8007a7c:	e7e9      	b.n	8007a52 <__lo0bits+0x2a>
 8007a7e:	2000      	movs	r0, #0
 8007a80:	4770      	bx	lr
 8007a82:	2020      	movs	r0, #32
 8007a84:	4770      	bx	lr

08007a86 <__i2b>:
 8007a86:	b510      	push	{r4, lr}
 8007a88:	460c      	mov	r4, r1
 8007a8a:	2101      	movs	r1, #1
 8007a8c:	f7ff ff27 	bl	80078de <_Balloc>
 8007a90:	2201      	movs	r2, #1
 8007a92:	6144      	str	r4, [r0, #20]
 8007a94:	6102      	str	r2, [r0, #16]
 8007a96:	bd10      	pop	{r4, pc}

08007a98 <__multiply>:
 8007a98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a9c:	4614      	mov	r4, r2
 8007a9e:	690a      	ldr	r2, [r1, #16]
 8007aa0:	6923      	ldr	r3, [r4, #16]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	bfb8      	it	lt
 8007aa6:	460b      	movlt	r3, r1
 8007aa8:	4688      	mov	r8, r1
 8007aaa:	bfbc      	itt	lt
 8007aac:	46a0      	movlt	r8, r4
 8007aae:	461c      	movlt	r4, r3
 8007ab0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007ab4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007ab8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007abc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007ac0:	eb07 0609 	add.w	r6, r7, r9
 8007ac4:	42b3      	cmp	r3, r6
 8007ac6:	bfb8      	it	lt
 8007ac8:	3101      	addlt	r1, #1
 8007aca:	f7ff ff08 	bl	80078de <_Balloc>
 8007ace:	f100 0514 	add.w	r5, r0, #20
 8007ad2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007ad6:	462b      	mov	r3, r5
 8007ad8:	2200      	movs	r2, #0
 8007ada:	4573      	cmp	r3, lr
 8007adc:	d316      	bcc.n	8007b0c <__multiply+0x74>
 8007ade:	f104 0214 	add.w	r2, r4, #20
 8007ae2:	f108 0114 	add.w	r1, r8, #20
 8007ae6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007aea:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007aee:	9300      	str	r3, [sp, #0]
 8007af0:	9b00      	ldr	r3, [sp, #0]
 8007af2:	9201      	str	r2, [sp, #4]
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d80c      	bhi.n	8007b12 <__multiply+0x7a>
 8007af8:	2e00      	cmp	r6, #0
 8007afa:	dd03      	ble.n	8007b04 <__multiply+0x6c>
 8007afc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d05d      	beq.n	8007bc0 <__multiply+0x128>
 8007b04:	6106      	str	r6, [r0, #16]
 8007b06:	b003      	add	sp, #12
 8007b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b0c:	f843 2b04 	str.w	r2, [r3], #4
 8007b10:	e7e3      	b.n	8007ada <__multiply+0x42>
 8007b12:	f8b2 b000 	ldrh.w	fp, [r2]
 8007b16:	f1bb 0f00 	cmp.w	fp, #0
 8007b1a:	d023      	beq.n	8007b64 <__multiply+0xcc>
 8007b1c:	4689      	mov	r9, r1
 8007b1e:	46ac      	mov	ip, r5
 8007b20:	f04f 0800 	mov.w	r8, #0
 8007b24:	f859 4b04 	ldr.w	r4, [r9], #4
 8007b28:	f8dc a000 	ldr.w	sl, [ip]
 8007b2c:	b2a3      	uxth	r3, r4
 8007b2e:	fa1f fa8a 	uxth.w	sl, sl
 8007b32:	fb0b a303 	mla	r3, fp, r3, sl
 8007b36:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007b3a:	f8dc 4000 	ldr.w	r4, [ip]
 8007b3e:	4443      	add	r3, r8
 8007b40:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007b44:	fb0b 840a 	mla	r4, fp, sl, r8
 8007b48:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007b4c:	46e2      	mov	sl, ip
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007b54:	454f      	cmp	r7, r9
 8007b56:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007b5a:	f84a 3b04 	str.w	r3, [sl], #4
 8007b5e:	d82b      	bhi.n	8007bb8 <__multiply+0x120>
 8007b60:	f8cc 8004 	str.w	r8, [ip, #4]
 8007b64:	9b01      	ldr	r3, [sp, #4]
 8007b66:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007b6a:	3204      	adds	r2, #4
 8007b6c:	f1ba 0f00 	cmp.w	sl, #0
 8007b70:	d020      	beq.n	8007bb4 <__multiply+0x11c>
 8007b72:	682b      	ldr	r3, [r5, #0]
 8007b74:	4689      	mov	r9, r1
 8007b76:	46a8      	mov	r8, r5
 8007b78:	f04f 0b00 	mov.w	fp, #0
 8007b7c:	f8b9 c000 	ldrh.w	ip, [r9]
 8007b80:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007b84:	fb0a 440c 	mla	r4, sl, ip, r4
 8007b88:	445c      	add	r4, fp
 8007b8a:	46c4      	mov	ip, r8
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007b92:	f84c 3b04 	str.w	r3, [ip], #4
 8007b96:	f859 3b04 	ldr.w	r3, [r9], #4
 8007b9a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007b9e:	0c1b      	lsrs	r3, r3, #16
 8007ba0:	fb0a b303 	mla	r3, sl, r3, fp
 8007ba4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007ba8:	454f      	cmp	r7, r9
 8007baa:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007bae:	d805      	bhi.n	8007bbc <__multiply+0x124>
 8007bb0:	f8c8 3004 	str.w	r3, [r8, #4]
 8007bb4:	3504      	adds	r5, #4
 8007bb6:	e79b      	b.n	8007af0 <__multiply+0x58>
 8007bb8:	46d4      	mov	ip, sl
 8007bba:	e7b3      	b.n	8007b24 <__multiply+0x8c>
 8007bbc:	46e0      	mov	r8, ip
 8007bbe:	e7dd      	b.n	8007b7c <__multiply+0xe4>
 8007bc0:	3e01      	subs	r6, #1
 8007bc2:	e799      	b.n	8007af8 <__multiply+0x60>

08007bc4 <__pow5mult>:
 8007bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bc8:	4615      	mov	r5, r2
 8007bca:	f012 0203 	ands.w	r2, r2, #3
 8007bce:	4606      	mov	r6, r0
 8007bd0:	460f      	mov	r7, r1
 8007bd2:	d007      	beq.n	8007be4 <__pow5mult+0x20>
 8007bd4:	3a01      	subs	r2, #1
 8007bd6:	4c21      	ldr	r4, [pc, #132]	; (8007c5c <__pow5mult+0x98>)
 8007bd8:	2300      	movs	r3, #0
 8007bda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007bde:	f7ff fec9 	bl	8007974 <__multadd>
 8007be2:	4607      	mov	r7, r0
 8007be4:	10ad      	asrs	r5, r5, #2
 8007be6:	d035      	beq.n	8007c54 <__pow5mult+0x90>
 8007be8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007bea:	b93c      	cbnz	r4, 8007bfc <__pow5mult+0x38>
 8007bec:	2010      	movs	r0, #16
 8007bee:	f7ff fe63 	bl	80078b8 <malloc>
 8007bf2:	6270      	str	r0, [r6, #36]	; 0x24
 8007bf4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007bf8:	6004      	str	r4, [r0, #0]
 8007bfa:	60c4      	str	r4, [r0, #12]
 8007bfc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007c00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c04:	b94c      	cbnz	r4, 8007c1a <__pow5mult+0x56>
 8007c06:	f240 2171 	movw	r1, #625	; 0x271
 8007c0a:	4630      	mov	r0, r6
 8007c0c:	f7ff ff3b 	bl	8007a86 <__i2b>
 8007c10:	2300      	movs	r3, #0
 8007c12:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c16:	4604      	mov	r4, r0
 8007c18:	6003      	str	r3, [r0, #0]
 8007c1a:	f04f 0800 	mov.w	r8, #0
 8007c1e:	07eb      	lsls	r3, r5, #31
 8007c20:	d50a      	bpl.n	8007c38 <__pow5mult+0x74>
 8007c22:	4639      	mov	r1, r7
 8007c24:	4622      	mov	r2, r4
 8007c26:	4630      	mov	r0, r6
 8007c28:	f7ff ff36 	bl	8007a98 <__multiply>
 8007c2c:	4639      	mov	r1, r7
 8007c2e:	4681      	mov	r9, r0
 8007c30:	4630      	mov	r0, r6
 8007c32:	f7ff fe88 	bl	8007946 <_Bfree>
 8007c36:	464f      	mov	r7, r9
 8007c38:	106d      	asrs	r5, r5, #1
 8007c3a:	d00b      	beq.n	8007c54 <__pow5mult+0x90>
 8007c3c:	6820      	ldr	r0, [r4, #0]
 8007c3e:	b938      	cbnz	r0, 8007c50 <__pow5mult+0x8c>
 8007c40:	4622      	mov	r2, r4
 8007c42:	4621      	mov	r1, r4
 8007c44:	4630      	mov	r0, r6
 8007c46:	f7ff ff27 	bl	8007a98 <__multiply>
 8007c4a:	6020      	str	r0, [r4, #0]
 8007c4c:	f8c0 8000 	str.w	r8, [r0]
 8007c50:	4604      	mov	r4, r0
 8007c52:	e7e4      	b.n	8007c1e <__pow5mult+0x5a>
 8007c54:	4638      	mov	r0, r7
 8007c56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c5a:	bf00      	nop
 8007c5c:	08008660 	.word	0x08008660

08007c60 <__lshift>:
 8007c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c64:	460c      	mov	r4, r1
 8007c66:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c6a:	6923      	ldr	r3, [r4, #16]
 8007c6c:	6849      	ldr	r1, [r1, #4]
 8007c6e:	eb0a 0903 	add.w	r9, sl, r3
 8007c72:	68a3      	ldr	r3, [r4, #8]
 8007c74:	4607      	mov	r7, r0
 8007c76:	4616      	mov	r6, r2
 8007c78:	f109 0501 	add.w	r5, r9, #1
 8007c7c:	42ab      	cmp	r3, r5
 8007c7e:	db32      	blt.n	8007ce6 <__lshift+0x86>
 8007c80:	4638      	mov	r0, r7
 8007c82:	f7ff fe2c 	bl	80078de <_Balloc>
 8007c86:	2300      	movs	r3, #0
 8007c88:	4680      	mov	r8, r0
 8007c8a:	f100 0114 	add.w	r1, r0, #20
 8007c8e:	461a      	mov	r2, r3
 8007c90:	4553      	cmp	r3, sl
 8007c92:	db2b      	blt.n	8007cec <__lshift+0x8c>
 8007c94:	6920      	ldr	r0, [r4, #16]
 8007c96:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c9a:	f104 0314 	add.w	r3, r4, #20
 8007c9e:	f016 021f 	ands.w	r2, r6, #31
 8007ca2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ca6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007caa:	d025      	beq.n	8007cf8 <__lshift+0x98>
 8007cac:	f1c2 0e20 	rsb	lr, r2, #32
 8007cb0:	2000      	movs	r0, #0
 8007cb2:	681e      	ldr	r6, [r3, #0]
 8007cb4:	468a      	mov	sl, r1
 8007cb6:	4096      	lsls	r6, r2
 8007cb8:	4330      	orrs	r0, r6
 8007cba:	f84a 0b04 	str.w	r0, [sl], #4
 8007cbe:	f853 0b04 	ldr.w	r0, [r3], #4
 8007cc2:	459c      	cmp	ip, r3
 8007cc4:	fa20 f00e 	lsr.w	r0, r0, lr
 8007cc8:	d814      	bhi.n	8007cf4 <__lshift+0x94>
 8007cca:	6048      	str	r0, [r1, #4]
 8007ccc:	b108      	cbz	r0, 8007cd2 <__lshift+0x72>
 8007cce:	f109 0502 	add.w	r5, r9, #2
 8007cd2:	3d01      	subs	r5, #1
 8007cd4:	4638      	mov	r0, r7
 8007cd6:	f8c8 5010 	str.w	r5, [r8, #16]
 8007cda:	4621      	mov	r1, r4
 8007cdc:	f7ff fe33 	bl	8007946 <_Bfree>
 8007ce0:	4640      	mov	r0, r8
 8007ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ce6:	3101      	adds	r1, #1
 8007ce8:	005b      	lsls	r3, r3, #1
 8007cea:	e7c7      	b.n	8007c7c <__lshift+0x1c>
 8007cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	e7cd      	b.n	8007c90 <__lshift+0x30>
 8007cf4:	4651      	mov	r1, sl
 8007cf6:	e7dc      	b.n	8007cb2 <__lshift+0x52>
 8007cf8:	3904      	subs	r1, #4
 8007cfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cfe:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d02:	459c      	cmp	ip, r3
 8007d04:	d8f9      	bhi.n	8007cfa <__lshift+0x9a>
 8007d06:	e7e4      	b.n	8007cd2 <__lshift+0x72>

08007d08 <__mcmp>:
 8007d08:	6903      	ldr	r3, [r0, #16]
 8007d0a:	690a      	ldr	r2, [r1, #16]
 8007d0c:	1a9b      	subs	r3, r3, r2
 8007d0e:	b530      	push	{r4, r5, lr}
 8007d10:	d10c      	bne.n	8007d2c <__mcmp+0x24>
 8007d12:	0092      	lsls	r2, r2, #2
 8007d14:	3014      	adds	r0, #20
 8007d16:	3114      	adds	r1, #20
 8007d18:	1884      	adds	r4, r0, r2
 8007d1a:	4411      	add	r1, r2
 8007d1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007d20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007d24:	4295      	cmp	r5, r2
 8007d26:	d003      	beq.n	8007d30 <__mcmp+0x28>
 8007d28:	d305      	bcc.n	8007d36 <__mcmp+0x2e>
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	bd30      	pop	{r4, r5, pc}
 8007d30:	42a0      	cmp	r0, r4
 8007d32:	d3f3      	bcc.n	8007d1c <__mcmp+0x14>
 8007d34:	e7fa      	b.n	8007d2c <__mcmp+0x24>
 8007d36:	f04f 33ff 	mov.w	r3, #4294967295
 8007d3a:	e7f7      	b.n	8007d2c <__mcmp+0x24>

08007d3c <__mdiff>:
 8007d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d40:	460d      	mov	r5, r1
 8007d42:	4607      	mov	r7, r0
 8007d44:	4611      	mov	r1, r2
 8007d46:	4628      	mov	r0, r5
 8007d48:	4614      	mov	r4, r2
 8007d4a:	f7ff ffdd 	bl	8007d08 <__mcmp>
 8007d4e:	1e06      	subs	r6, r0, #0
 8007d50:	d108      	bne.n	8007d64 <__mdiff+0x28>
 8007d52:	4631      	mov	r1, r6
 8007d54:	4638      	mov	r0, r7
 8007d56:	f7ff fdc2 	bl	80078de <_Balloc>
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d64:	bfa4      	itt	ge
 8007d66:	4623      	movge	r3, r4
 8007d68:	462c      	movge	r4, r5
 8007d6a:	4638      	mov	r0, r7
 8007d6c:	6861      	ldr	r1, [r4, #4]
 8007d6e:	bfa6      	itte	ge
 8007d70:	461d      	movge	r5, r3
 8007d72:	2600      	movge	r6, #0
 8007d74:	2601      	movlt	r6, #1
 8007d76:	f7ff fdb2 	bl	80078de <_Balloc>
 8007d7a:	692b      	ldr	r3, [r5, #16]
 8007d7c:	60c6      	str	r6, [r0, #12]
 8007d7e:	6926      	ldr	r6, [r4, #16]
 8007d80:	f105 0914 	add.w	r9, r5, #20
 8007d84:	f104 0214 	add.w	r2, r4, #20
 8007d88:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007d8c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007d90:	f100 0514 	add.w	r5, r0, #20
 8007d94:	f04f 0e00 	mov.w	lr, #0
 8007d98:	f852 ab04 	ldr.w	sl, [r2], #4
 8007d9c:	f859 4b04 	ldr.w	r4, [r9], #4
 8007da0:	fa1e f18a 	uxtah	r1, lr, sl
 8007da4:	b2a3      	uxth	r3, r4
 8007da6:	1ac9      	subs	r1, r1, r3
 8007da8:	0c23      	lsrs	r3, r4, #16
 8007daa:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007dae:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007db2:	b289      	uxth	r1, r1
 8007db4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007db8:	45c8      	cmp	r8, r9
 8007dba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007dbe:	4694      	mov	ip, r2
 8007dc0:	f845 3b04 	str.w	r3, [r5], #4
 8007dc4:	d8e8      	bhi.n	8007d98 <__mdiff+0x5c>
 8007dc6:	45bc      	cmp	ip, r7
 8007dc8:	d304      	bcc.n	8007dd4 <__mdiff+0x98>
 8007dca:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007dce:	b183      	cbz	r3, 8007df2 <__mdiff+0xb6>
 8007dd0:	6106      	str	r6, [r0, #16]
 8007dd2:	e7c5      	b.n	8007d60 <__mdiff+0x24>
 8007dd4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007dd8:	fa1e f381 	uxtah	r3, lr, r1
 8007ddc:	141a      	asrs	r2, r3, #16
 8007dde:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007de8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007dec:	f845 3b04 	str.w	r3, [r5], #4
 8007df0:	e7e9      	b.n	8007dc6 <__mdiff+0x8a>
 8007df2:	3e01      	subs	r6, #1
 8007df4:	e7e9      	b.n	8007dca <__mdiff+0x8e>

08007df6 <__d2b>:
 8007df6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007dfa:	460e      	mov	r6, r1
 8007dfc:	2101      	movs	r1, #1
 8007dfe:	ec59 8b10 	vmov	r8, r9, d0
 8007e02:	4615      	mov	r5, r2
 8007e04:	f7ff fd6b 	bl	80078de <_Balloc>
 8007e08:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007e0c:	4607      	mov	r7, r0
 8007e0e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e12:	bb34      	cbnz	r4, 8007e62 <__d2b+0x6c>
 8007e14:	9301      	str	r3, [sp, #4]
 8007e16:	f1b8 0300 	subs.w	r3, r8, #0
 8007e1a:	d027      	beq.n	8007e6c <__d2b+0x76>
 8007e1c:	a802      	add	r0, sp, #8
 8007e1e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8007e22:	f7ff fe01 	bl	8007a28 <__lo0bits>
 8007e26:	9900      	ldr	r1, [sp, #0]
 8007e28:	b1f0      	cbz	r0, 8007e68 <__d2b+0x72>
 8007e2a:	9a01      	ldr	r2, [sp, #4]
 8007e2c:	f1c0 0320 	rsb	r3, r0, #32
 8007e30:	fa02 f303 	lsl.w	r3, r2, r3
 8007e34:	430b      	orrs	r3, r1
 8007e36:	40c2      	lsrs	r2, r0
 8007e38:	617b      	str	r3, [r7, #20]
 8007e3a:	9201      	str	r2, [sp, #4]
 8007e3c:	9b01      	ldr	r3, [sp, #4]
 8007e3e:	61bb      	str	r3, [r7, #24]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	bf14      	ite	ne
 8007e44:	2102      	movne	r1, #2
 8007e46:	2101      	moveq	r1, #1
 8007e48:	6139      	str	r1, [r7, #16]
 8007e4a:	b1c4      	cbz	r4, 8007e7e <__d2b+0x88>
 8007e4c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007e50:	4404      	add	r4, r0
 8007e52:	6034      	str	r4, [r6, #0]
 8007e54:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007e58:	6028      	str	r0, [r5, #0]
 8007e5a:	4638      	mov	r0, r7
 8007e5c:	b003      	add	sp, #12
 8007e5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e66:	e7d5      	b.n	8007e14 <__d2b+0x1e>
 8007e68:	6179      	str	r1, [r7, #20]
 8007e6a:	e7e7      	b.n	8007e3c <__d2b+0x46>
 8007e6c:	a801      	add	r0, sp, #4
 8007e6e:	f7ff fddb 	bl	8007a28 <__lo0bits>
 8007e72:	9b01      	ldr	r3, [sp, #4]
 8007e74:	617b      	str	r3, [r7, #20]
 8007e76:	2101      	movs	r1, #1
 8007e78:	6139      	str	r1, [r7, #16]
 8007e7a:	3020      	adds	r0, #32
 8007e7c:	e7e5      	b.n	8007e4a <__d2b+0x54>
 8007e7e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007e82:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007e86:	6030      	str	r0, [r6, #0]
 8007e88:	6918      	ldr	r0, [r3, #16]
 8007e8a:	f7ff fdae 	bl	80079ea <__hi0bits>
 8007e8e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007e92:	e7e1      	b.n	8007e58 <__d2b+0x62>

08007e94 <_calloc_r>:
 8007e94:	b538      	push	{r3, r4, r5, lr}
 8007e96:	fb02 f401 	mul.w	r4, r2, r1
 8007e9a:	4621      	mov	r1, r4
 8007e9c:	f000 f856 	bl	8007f4c <_malloc_r>
 8007ea0:	4605      	mov	r5, r0
 8007ea2:	b118      	cbz	r0, 8007eac <_calloc_r+0x18>
 8007ea4:	4622      	mov	r2, r4
 8007ea6:	2100      	movs	r1, #0
 8007ea8:	f7fd ff36 	bl	8005d18 <memset>
 8007eac:	4628      	mov	r0, r5
 8007eae:	bd38      	pop	{r3, r4, r5, pc}

08007eb0 <_free_r>:
 8007eb0:	b538      	push	{r3, r4, r5, lr}
 8007eb2:	4605      	mov	r5, r0
 8007eb4:	2900      	cmp	r1, #0
 8007eb6:	d045      	beq.n	8007f44 <_free_r+0x94>
 8007eb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ebc:	1f0c      	subs	r4, r1, #4
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	bfb8      	it	lt
 8007ec2:	18e4      	addlt	r4, r4, r3
 8007ec4:	f000 fa98 	bl	80083f8 <__malloc_lock>
 8007ec8:	4a1f      	ldr	r2, [pc, #124]	; (8007f48 <_free_r+0x98>)
 8007eca:	6813      	ldr	r3, [r2, #0]
 8007ecc:	4610      	mov	r0, r2
 8007ece:	b933      	cbnz	r3, 8007ede <_free_r+0x2e>
 8007ed0:	6063      	str	r3, [r4, #4]
 8007ed2:	6014      	str	r4, [r2, #0]
 8007ed4:	4628      	mov	r0, r5
 8007ed6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007eda:	f000 ba8e 	b.w	80083fa <__malloc_unlock>
 8007ede:	42a3      	cmp	r3, r4
 8007ee0:	d90c      	bls.n	8007efc <_free_r+0x4c>
 8007ee2:	6821      	ldr	r1, [r4, #0]
 8007ee4:	1862      	adds	r2, r4, r1
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	bf04      	itt	eq
 8007eea:	681a      	ldreq	r2, [r3, #0]
 8007eec:	685b      	ldreq	r3, [r3, #4]
 8007eee:	6063      	str	r3, [r4, #4]
 8007ef0:	bf04      	itt	eq
 8007ef2:	1852      	addeq	r2, r2, r1
 8007ef4:	6022      	streq	r2, [r4, #0]
 8007ef6:	6004      	str	r4, [r0, #0]
 8007ef8:	e7ec      	b.n	8007ed4 <_free_r+0x24>
 8007efa:	4613      	mov	r3, r2
 8007efc:	685a      	ldr	r2, [r3, #4]
 8007efe:	b10a      	cbz	r2, 8007f04 <_free_r+0x54>
 8007f00:	42a2      	cmp	r2, r4
 8007f02:	d9fa      	bls.n	8007efa <_free_r+0x4a>
 8007f04:	6819      	ldr	r1, [r3, #0]
 8007f06:	1858      	adds	r0, r3, r1
 8007f08:	42a0      	cmp	r0, r4
 8007f0a:	d10b      	bne.n	8007f24 <_free_r+0x74>
 8007f0c:	6820      	ldr	r0, [r4, #0]
 8007f0e:	4401      	add	r1, r0
 8007f10:	1858      	adds	r0, r3, r1
 8007f12:	4282      	cmp	r2, r0
 8007f14:	6019      	str	r1, [r3, #0]
 8007f16:	d1dd      	bne.n	8007ed4 <_free_r+0x24>
 8007f18:	6810      	ldr	r0, [r2, #0]
 8007f1a:	6852      	ldr	r2, [r2, #4]
 8007f1c:	605a      	str	r2, [r3, #4]
 8007f1e:	4401      	add	r1, r0
 8007f20:	6019      	str	r1, [r3, #0]
 8007f22:	e7d7      	b.n	8007ed4 <_free_r+0x24>
 8007f24:	d902      	bls.n	8007f2c <_free_r+0x7c>
 8007f26:	230c      	movs	r3, #12
 8007f28:	602b      	str	r3, [r5, #0]
 8007f2a:	e7d3      	b.n	8007ed4 <_free_r+0x24>
 8007f2c:	6820      	ldr	r0, [r4, #0]
 8007f2e:	1821      	adds	r1, r4, r0
 8007f30:	428a      	cmp	r2, r1
 8007f32:	bf04      	itt	eq
 8007f34:	6811      	ldreq	r1, [r2, #0]
 8007f36:	6852      	ldreq	r2, [r2, #4]
 8007f38:	6062      	str	r2, [r4, #4]
 8007f3a:	bf04      	itt	eq
 8007f3c:	1809      	addeq	r1, r1, r0
 8007f3e:	6021      	streq	r1, [r4, #0]
 8007f40:	605c      	str	r4, [r3, #4]
 8007f42:	e7c7      	b.n	8007ed4 <_free_r+0x24>
 8007f44:	bd38      	pop	{r3, r4, r5, pc}
 8007f46:	bf00      	nop
 8007f48:	20000210 	.word	0x20000210

08007f4c <_malloc_r>:
 8007f4c:	b570      	push	{r4, r5, r6, lr}
 8007f4e:	1ccd      	adds	r5, r1, #3
 8007f50:	f025 0503 	bic.w	r5, r5, #3
 8007f54:	3508      	adds	r5, #8
 8007f56:	2d0c      	cmp	r5, #12
 8007f58:	bf38      	it	cc
 8007f5a:	250c      	movcc	r5, #12
 8007f5c:	2d00      	cmp	r5, #0
 8007f5e:	4606      	mov	r6, r0
 8007f60:	db01      	blt.n	8007f66 <_malloc_r+0x1a>
 8007f62:	42a9      	cmp	r1, r5
 8007f64:	d903      	bls.n	8007f6e <_malloc_r+0x22>
 8007f66:	230c      	movs	r3, #12
 8007f68:	6033      	str	r3, [r6, #0]
 8007f6a:	2000      	movs	r0, #0
 8007f6c:	bd70      	pop	{r4, r5, r6, pc}
 8007f6e:	f000 fa43 	bl	80083f8 <__malloc_lock>
 8007f72:	4a21      	ldr	r2, [pc, #132]	; (8007ff8 <_malloc_r+0xac>)
 8007f74:	6814      	ldr	r4, [r2, #0]
 8007f76:	4621      	mov	r1, r4
 8007f78:	b991      	cbnz	r1, 8007fa0 <_malloc_r+0x54>
 8007f7a:	4c20      	ldr	r4, [pc, #128]	; (8007ffc <_malloc_r+0xb0>)
 8007f7c:	6823      	ldr	r3, [r4, #0]
 8007f7e:	b91b      	cbnz	r3, 8007f88 <_malloc_r+0x3c>
 8007f80:	4630      	mov	r0, r6
 8007f82:	f000 f97d 	bl	8008280 <_sbrk_r>
 8007f86:	6020      	str	r0, [r4, #0]
 8007f88:	4629      	mov	r1, r5
 8007f8a:	4630      	mov	r0, r6
 8007f8c:	f000 f978 	bl	8008280 <_sbrk_r>
 8007f90:	1c43      	adds	r3, r0, #1
 8007f92:	d124      	bne.n	8007fde <_malloc_r+0x92>
 8007f94:	230c      	movs	r3, #12
 8007f96:	6033      	str	r3, [r6, #0]
 8007f98:	4630      	mov	r0, r6
 8007f9a:	f000 fa2e 	bl	80083fa <__malloc_unlock>
 8007f9e:	e7e4      	b.n	8007f6a <_malloc_r+0x1e>
 8007fa0:	680b      	ldr	r3, [r1, #0]
 8007fa2:	1b5b      	subs	r3, r3, r5
 8007fa4:	d418      	bmi.n	8007fd8 <_malloc_r+0x8c>
 8007fa6:	2b0b      	cmp	r3, #11
 8007fa8:	d90f      	bls.n	8007fca <_malloc_r+0x7e>
 8007faa:	600b      	str	r3, [r1, #0]
 8007fac:	50cd      	str	r5, [r1, r3]
 8007fae:	18cc      	adds	r4, r1, r3
 8007fb0:	4630      	mov	r0, r6
 8007fb2:	f000 fa22 	bl	80083fa <__malloc_unlock>
 8007fb6:	f104 000b 	add.w	r0, r4, #11
 8007fba:	1d23      	adds	r3, r4, #4
 8007fbc:	f020 0007 	bic.w	r0, r0, #7
 8007fc0:	1ac3      	subs	r3, r0, r3
 8007fc2:	d0d3      	beq.n	8007f6c <_malloc_r+0x20>
 8007fc4:	425a      	negs	r2, r3
 8007fc6:	50e2      	str	r2, [r4, r3]
 8007fc8:	e7d0      	b.n	8007f6c <_malloc_r+0x20>
 8007fca:	428c      	cmp	r4, r1
 8007fcc:	684b      	ldr	r3, [r1, #4]
 8007fce:	bf16      	itet	ne
 8007fd0:	6063      	strne	r3, [r4, #4]
 8007fd2:	6013      	streq	r3, [r2, #0]
 8007fd4:	460c      	movne	r4, r1
 8007fd6:	e7eb      	b.n	8007fb0 <_malloc_r+0x64>
 8007fd8:	460c      	mov	r4, r1
 8007fda:	6849      	ldr	r1, [r1, #4]
 8007fdc:	e7cc      	b.n	8007f78 <_malloc_r+0x2c>
 8007fde:	1cc4      	adds	r4, r0, #3
 8007fe0:	f024 0403 	bic.w	r4, r4, #3
 8007fe4:	42a0      	cmp	r0, r4
 8007fe6:	d005      	beq.n	8007ff4 <_malloc_r+0xa8>
 8007fe8:	1a21      	subs	r1, r4, r0
 8007fea:	4630      	mov	r0, r6
 8007fec:	f000 f948 	bl	8008280 <_sbrk_r>
 8007ff0:	3001      	adds	r0, #1
 8007ff2:	d0cf      	beq.n	8007f94 <_malloc_r+0x48>
 8007ff4:	6025      	str	r5, [r4, #0]
 8007ff6:	e7db      	b.n	8007fb0 <_malloc_r+0x64>
 8007ff8:	20000210 	.word	0x20000210
 8007ffc:	20000214 	.word	0x20000214

08008000 <__sfputc_r>:
 8008000:	6893      	ldr	r3, [r2, #8]
 8008002:	3b01      	subs	r3, #1
 8008004:	2b00      	cmp	r3, #0
 8008006:	b410      	push	{r4}
 8008008:	6093      	str	r3, [r2, #8]
 800800a:	da08      	bge.n	800801e <__sfputc_r+0x1e>
 800800c:	6994      	ldr	r4, [r2, #24]
 800800e:	42a3      	cmp	r3, r4
 8008010:	db01      	blt.n	8008016 <__sfputc_r+0x16>
 8008012:	290a      	cmp	r1, #10
 8008014:	d103      	bne.n	800801e <__sfputc_r+0x1e>
 8008016:	f85d 4b04 	ldr.w	r4, [sp], #4
 800801a:	f7fe bb5d 	b.w	80066d8 <__swbuf_r>
 800801e:	6813      	ldr	r3, [r2, #0]
 8008020:	1c58      	adds	r0, r3, #1
 8008022:	6010      	str	r0, [r2, #0]
 8008024:	7019      	strb	r1, [r3, #0]
 8008026:	4608      	mov	r0, r1
 8008028:	f85d 4b04 	ldr.w	r4, [sp], #4
 800802c:	4770      	bx	lr

0800802e <__sfputs_r>:
 800802e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008030:	4606      	mov	r6, r0
 8008032:	460f      	mov	r7, r1
 8008034:	4614      	mov	r4, r2
 8008036:	18d5      	adds	r5, r2, r3
 8008038:	42ac      	cmp	r4, r5
 800803a:	d101      	bne.n	8008040 <__sfputs_r+0x12>
 800803c:	2000      	movs	r0, #0
 800803e:	e007      	b.n	8008050 <__sfputs_r+0x22>
 8008040:	463a      	mov	r2, r7
 8008042:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008046:	4630      	mov	r0, r6
 8008048:	f7ff ffda 	bl	8008000 <__sfputc_r>
 800804c:	1c43      	adds	r3, r0, #1
 800804e:	d1f3      	bne.n	8008038 <__sfputs_r+0xa>
 8008050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008054 <_vfiprintf_r>:
 8008054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008058:	460c      	mov	r4, r1
 800805a:	b09d      	sub	sp, #116	; 0x74
 800805c:	4617      	mov	r7, r2
 800805e:	461d      	mov	r5, r3
 8008060:	4606      	mov	r6, r0
 8008062:	b118      	cbz	r0, 800806c <_vfiprintf_r+0x18>
 8008064:	6983      	ldr	r3, [r0, #24]
 8008066:	b90b      	cbnz	r3, 800806c <_vfiprintf_r+0x18>
 8008068:	f7ff fb2a 	bl	80076c0 <__sinit>
 800806c:	4b7c      	ldr	r3, [pc, #496]	; (8008260 <_vfiprintf_r+0x20c>)
 800806e:	429c      	cmp	r4, r3
 8008070:	d158      	bne.n	8008124 <_vfiprintf_r+0xd0>
 8008072:	6874      	ldr	r4, [r6, #4]
 8008074:	89a3      	ldrh	r3, [r4, #12]
 8008076:	0718      	lsls	r0, r3, #28
 8008078:	d55e      	bpl.n	8008138 <_vfiprintf_r+0xe4>
 800807a:	6923      	ldr	r3, [r4, #16]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d05b      	beq.n	8008138 <_vfiprintf_r+0xe4>
 8008080:	2300      	movs	r3, #0
 8008082:	9309      	str	r3, [sp, #36]	; 0x24
 8008084:	2320      	movs	r3, #32
 8008086:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800808a:	2330      	movs	r3, #48	; 0x30
 800808c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008090:	9503      	str	r5, [sp, #12]
 8008092:	f04f 0b01 	mov.w	fp, #1
 8008096:	46b8      	mov	r8, r7
 8008098:	4645      	mov	r5, r8
 800809a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800809e:	b10b      	cbz	r3, 80080a4 <_vfiprintf_r+0x50>
 80080a0:	2b25      	cmp	r3, #37	; 0x25
 80080a2:	d154      	bne.n	800814e <_vfiprintf_r+0xfa>
 80080a4:	ebb8 0a07 	subs.w	sl, r8, r7
 80080a8:	d00b      	beq.n	80080c2 <_vfiprintf_r+0x6e>
 80080aa:	4653      	mov	r3, sl
 80080ac:	463a      	mov	r2, r7
 80080ae:	4621      	mov	r1, r4
 80080b0:	4630      	mov	r0, r6
 80080b2:	f7ff ffbc 	bl	800802e <__sfputs_r>
 80080b6:	3001      	adds	r0, #1
 80080b8:	f000 80c2 	beq.w	8008240 <_vfiprintf_r+0x1ec>
 80080bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080be:	4453      	add	r3, sl
 80080c0:	9309      	str	r3, [sp, #36]	; 0x24
 80080c2:	f898 3000 	ldrb.w	r3, [r8]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	f000 80ba 	beq.w	8008240 <_vfiprintf_r+0x1ec>
 80080cc:	2300      	movs	r3, #0
 80080ce:	f04f 32ff 	mov.w	r2, #4294967295
 80080d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080d6:	9304      	str	r3, [sp, #16]
 80080d8:	9307      	str	r3, [sp, #28]
 80080da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080de:	931a      	str	r3, [sp, #104]	; 0x68
 80080e0:	46a8      	mov	r8, r5
 80080e2:	2205      	movs	r2, #5
 80080e4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80080e8:	485e      	ldr	r0, [pc, #376]	; (8008264 <_vfiprintf_r+0x210>)
 80080ea:	f7f8 f879 	bl	80001e0 <memchr>
 80080ee:	9b04      	ldr	r3, [sp, #16]
 80080f0:	bb78      	cbnz	r0, 8008152 <_vfiprintf_r+0xfe>
 80080f2:	06d9      	lsls	r1, r3, #27
 80080f4:	bf44      	itt	mi
 80080f6:	2220      	movmi	r2, #32
 80080f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80080fc:	071a      	lsls	r2, r3, #28
 80080fe:	bf44      	itt	mi
 8008100:	222b      	movmi	r2, #43	; 0x2b
 8008102:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008106:	782a      	ldrb	r2, [r5, #0]
 8008108:	2a2a      	cmp	r2, #42	; 0x2a
 800810a:	d02a      	beq.n	8008162 <_vfiprintf_r+0x10e>
 800810c:	9a07      	ldr	r2, [sp, #28]
 800810e:	46a8      	mov	r8, r5
 8008110:	2000      	movs	r0, #0
 8008112:	250a      	movs	r5, #10
 8008114:	4641      	mov	r1, r8
 8008116:	f811 3b01 	ldrb.w	r3, [r1], #1
 800811a:	3b30      	subs	r3, #48	; 0x30
 800811c:	2b09      	cmp	r3, #9
 800811e:	d969      	bls.n	80081f4 <_vfiprintf_r+0x1a0>
 8008120:	b360      	cbz	r0, 800817c <_vfiprintf_r+0x128>
 8008122:	e024      	b.n	800816e <_vfiprintf_r+0x11a>
 8008124:	4b50      	ldr	r3, [pc, #320]	; (8008268 <_vfiprintf_r+0x214>)
 8008126:	429c      	cmp	r4, r3
 8008128:	d101      	bne.n	800812e <_vfiprintf_r+0xda>
 800812a:	68b4      	ldr	r4, [r6, #8]
 800812c:	e7a2      	b.n	8008074 <_vfiprintf_r+0x20>
 800812e:	4b4f      	ldr	r3, [pc, #316]	; (800826c <_vfiprintf_r+0x218>)
 8008130:	429c      	cmp	r4, r3
 8008132:	bf08      	it	eq
 8008134:	68f4      	ldreq	r4, [r6, #12]
 8008136:	e79d      	b.n	8008074 <_vfiprintf_r+0x20>
 8008138:	4621      	mov	r1, r4
 800813a:	4630      	mov	r0, r6
 800813c:	f7fe fb1e 	bl	800677c <__swsetup_r>
 8008140:	2800      	cmp	r0, #0
 8008142:	d09d      	beq.n	8008080 <_vfiprintf_r+0x2c>
 8008144:	f04f 30ff 	mov.w	r0, #4294967295
 8008148:	b01d      	add	sp, #116	; 0x74
 800814a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800814e:	46a8      	mov	r8, r5
 8008150:	e7a2      	b.n	8008098 <_vfiprintf_r+0x44>
 8008152:	4a44      	ldr	r2, [pc, #272]	; (8008264 <_vfiprintf_r+0x210>)
 8008154:	1a80      	subs	r0, r0, r2
 8008156:	fa0b f000 	lsl.w	r0, fp, r0
 800815a:	4318      	orrs	r0, r3
 800815c:	9004      	str	r0, [sp, #16]
 800815e:	4645      	mov	r5, r8
 8008160:	e7be      	b.n	80080e0 <_vfiprintf_r+0x8c>
 8008162:	9a03      	ldr	r2, [sp, #12]
 8008164:	1d11      	adds	r1, r2, #4
 8008166:	6812      	ldr	r2, [r2, #0]
 8008168:	9103      	str	r1, [sp, #12]
 800816a:	2a00      	cmp	r2, #0
 800816c:	db01      	blt.n	8008172 <_vfiprintf_r+0x11e>
 800816e:	9207      	str	r2, [sp, #28]
 8008170:	e004      	b.n	800817c <_vfiprintf_r+0x128>
 8008172:	4252      	negs	r2, r2
 8008174:	f043 0302 	orr.w	r3, r3, #2
 8008178:	9207      	str	r2, [sp, #28]
 800817a:	9304      	str	r3, [sp, #16]
 800817c:	f898 3000 	ldrb.w	r3, [r8]
 8008180:	2b2e      	cmp	r3, #46	; 0x2e
 8008182:	d10e      	bne.n	80081a2 <_vfiprintf_r+0x14e>
 8008184:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008188:	2b2a      	cmp	r3, #42	; 0x2a
 800818a:	d138      	bne.n	80081fe <_vfiprintf_r+0x1aa>
 800818c:	9b03      	ldr	r3, [sp, #12]
 800818e:	1d1a      	adds	r2, r3, #4
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	9203      	str	r2, [sp, #12]
 8008194:	2b00      	cmp	r3, #0
 8008196:	bfb8      	it	lt
 8008198:	f04f 33ff 	movlt.w	r3, #4294967295
 800819c:	f108 0802 	add.w	r8, r8, #2
 80081a0:	9305      	str	r3, [sp, #20]
 80081a2:	4d33      	ldr	r5, [pc, #204]	; (8008270 <_vfiprintf_r+0x21c>)
 80081a4:	f898 1000 	ldrb.w	r1, [r8]
 80081a8:	2203      	movs	r2, #3
 80081aa:	4628      	mov	r0, r5
 80081ac:	f7f8 f818 	bl	80001e0 <memchr>
 80081b0:	b140      	cbz	r0, 80081c4 <_vfiprintf_r+0x170>
 80081b2:	2340      	movs	r3, #64	; 0x40
 80081b4:	1b40      	subs	r0, r0, r5
 80081b6:	fa03 f000 	lsl.w	r0, r3, r0
 80081ba:	9b04      	ldr	r3, [sp, #16]
 80081bc:	4303      	orrs	r3, r0
 80081be:	f108 0801 	add.w	r8, r8, #1
 80081c2:	9304      	str	r3, [sp, #16]
 80081c4:	f898 1000 	ldrb.w	r1, [r8]
 80081c8:	482a      	ldr	r0, [pc, #168]	; (8008274 <_vfiprintf_r+0x220>)
 80081ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081ce:	2206      	movs	r2, #6
 80081d0:	f108 0701 	add.w	r7, r8, #1
 80081d4:	f7f8 f804 	bl	80001e0 <memchr>
 80081d8:	2800      	cmp	r0, #0
 80081da:	d037      	beq.n	800824c <_vfiprintf_r+0x1f8>
 80081dc:	4b26      	ldr	r3, [pc, #152]	; (8008278 <_vfiprintf_r+0x224>)
 80081de:	bb1b      	cbnz	r3, 8008228 <_vfiprintf_r+0x1d4>
 80081e0:	9b03      	ldr	r3, [sp, #12]
 80081e2:	3307      	adds	r3, #7
 80081e4:	f023 0307 	bic.w	r3, r3, #7
 80081e8:	3308      	adds	r3, #8
 80081ea:	9303      	str	r3, [sp, #12]
 80081ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ee:	444b      	add	r3, r9
 80081f0:	9309      	str	r3, [sp, #36]	; 0x24
 80081f2:	e750      	b.n	8008096 <_vfiprintf_r+0x42>
 80081f4:	fb05 3202 	mla	r2, r5, r2, r3
 80081f8:	2001      	movs	r0, #1
 80081fa:	4688      	mov	r8, r1
 80081fc:	e78a      	b.n	8008114 <_vfiprintf_r+0xc0>
 80081fe:	2300      	movs	r3, #0
 8008200:	f108 0801 	add.w	r8, r8, #1
 8008204:	9305      	str	r3, [sp, #20]
 8008206:	4619      	mov	r1, r3
 8008208:	250a      	movs	r5, #10
 800820a:	4640      	mov	r0, r8
 800820c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008210:	3a30      	subs	r2, #48	; 0x30
 8008212:	2a09      	cmp	r2, #9
 8008214:	d903      	bls.n	800821e <_vfiprintf_r+0x1ca>
 8008216:	2b00      	cmp	r3, #0
 8008218:	d0c3      	beq.n	80081a2 <_vfiprintf_r+0x14e>
 800821a:	9105      	str	r1, [sp, #20]
 800821c:	e7c1      	b.n	80081a2 <_vfiprintf_r+0x14e>
 800821e:	fb05 2101 	mla	r1, r5, r1, r2
 8008222:	2301      	movs	r3, #1
 8008224:	4680      	mov	r8, r0
 8008226:	e7f0      	b.n	800820a <_vfiprintf_r+0x1b6>
 8008228:	ab03      	add	r3, sp, #12
 800822a:	9300      	str	r3, [sp, #0]
 800822c:	4622      	mov	r2, r4
 800822e:	4b13      	ldr	r3, [pc, #76]	; (800827c <_vfiprintf_r+0x228>)
 8008230:	a904      	add	r1, sp, #16
 8008232:	4630      	mov	r0, r6
 8008234:	f7fd fe0c 	bl	8005e50 <_printf_float>
 8008238:	f1b0 3fff 	cmp.w	r0, #4294967295
 800823c:	4681      	mov	r9, r0
 800823e:	d1d5      	bne.n	80081ec <_vfiprintf_r+0x198>
 8008240:	89a3      	ldrh	r3, [r4, #12]
 8008242:	065b      	lsls	r3, r3, #25
 8008244:	f53f af7e 	bmi.w	8008144 <_vfiprintf_r+0xf0>
 8008248:	9809      	ldr	r0, [sp, #36]	; 0x24
 800824a:	e77d      	b.n	8008148 <_vfiprintf_r+0xf4>
 800824c:	ab03      	add	r3, sp, #12
 800824e:	9300      	str	r3, [sp, #0]
 8008250:	4622      	mov	r2, r4
 8008252:	4b0a      	ldr	r3, [pc, #40]	; (800827c <_vfiprintf_r+0x228>)
 8008254:	a904      	add	r1, sp, #16
 8008256:	4630      	mov	r0, r6
 8008258:	f7fe f8b0 	bl	80063bc <_printf_i>
 800825c:	e7ec      	b.n	8008238 <_vfiprintf_r+0x1e4>
 800825e:	bf00      	nop
 8008260:	08008530 	.word	0x08008530
 8008264:	0800866c 	.word	0x0800866c
 8008268:	08008550 	.word	0x08008550
 800826c:	08008510 	.word	0x08008510
 8008270:	08008672 	.word	0x08008672
 8008274:	08008676 	.word	0x08008676
 8008278:	08005e51 	.word	0x08005e51
 800827c:	0800802f 	.word	0x0800802f

08008280 <_sbrk_r>:
 8008280:	b538      	push	{r3, r4, r5, lr}
 8008282:	4c06      	ldr	r4, [pc, #24]	; (800829c <_sbrk_r+0x1c>)
 8008284:	2300      	movs	r3, #0
 8008286:	4605      	mov	r5, r0
 8008288:	4608      	mov	r0, r1
 800828a:	6023      	str	r3, [r4, #0]
 800828c:	f7fd fc8e 	bl	8005bac <_sbrk>
 8008290:	1c43      	adds	r3, r0, #1
 8008292:	d102      	bne.n	800829a <_sbrk_r+0x1a>
 8008294:	6823      	ldr	r3, [r4, #0]
 8008296:	b103      	cbz	r3, 800829a <_sbrk_r+0x1a>
 8008298:	602b      	str	r3, [r5, #0]
 800829a:	bd38      	pop	{r3, r4, r5, pc}
 800829c:	2000033c 	.word	0x2000033c

080082a0 <__sread>:
 80082a0:	b510      	push	{r4, lr}
 80082a2:	460c      	mov	r4, r1
 80082a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082a8:	f000 f8a8 	bl	80083fc <_read_r>
 80082ac:	2800      	cmp	r0, #0
 80082ae:	bfab      	itete	ge
 80082b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80082b2:	89a3      	ldrhlt	r3, [r4, #12]
 80082b4:	181b      	addge	r3, r3, r0
 80082b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80082ba:	bfac      	ite	ge
 80082bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80082be:	81a3      	strhlt	r3, [r4, #12]
 80082c0:	bd10      	pop	{r4, pc}

080082c2 <__swrite>:
 80082c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082c6:	461f      	mov	r7, r3
 80082c8:	898b      	ldrh	r3, [r1, #12]
 80082ca:	05db      	lsls	r3, r3, #23
 80082cc:	4605      	mov	r5, r0
 80082ce:	460c      	mov	r4, r1
 80082d0:	4616      	mov	r6, r2
 80082d2:	d505      	bpl.n	80082e0 <__swrite+0x1e>
 80082d4:	2302      	movs	r3, #2
 80082d6:	2200      	movs	r2, #0
 80082d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082dc:	f000 f868 	bl	80083b0 <_lseek_r>
 80082e0:	89a3      	ldrh	r3, [r4, #12]
 80082e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082ea:	81a3      	strh	r3, [r4, #12]
 80082ec:	4632      	mov	r2, r6
 80082ee:	463b      	mov	r3, r7
 80082f0:	4628      	mov	r0, r5
 80082f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082f6:	f000 b817 	b.w	8008328 <_write_r>

080082fa <__sseek>:
 80082fa:	b510      	push	{r4, lr}
 80082fc:	460c      	mov	r4, r1
 80082fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008302:	f000 f855 	bl	80083b0 <_lseek_r>
 8008306:	1c43      	adds	r3, r0, #1
 8008308:	89a3      	ldrh	r3, [r4, #12]
 800830a:	bf15      	itete	ne
 800830c:	6560      	strne	r0, [r4, #84]	; 0x54
 800830e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008312:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008316:	81a3      	strheq	r3, [r4, #12]
 8008318:	bf18      	it	ne
 800831a:	81a3      	strhne	r3, [r4, #12]
 800831c:	bd10      	pop	{r4, pc}

0800831e <__sclose>:
 800831e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008322:	f000 b813 	b.w	800834c <_close_r>
	...

08008328 <_write_r>:
 8008328:	b538      	push	{r3, r4, r5, lr}
 800832a:	4c07      	ldr	r4, [pc, #28]	; (8008348 <_write_r+0x20>)
 800832c:	4605      	mov	r5, r0
 800832e:	4608      	mov	r0, r1
 8008330:	4611      	mov	r1, r2
 8008332:	2200      	movs	r2, #0
 8008334:	6022      	str	r2, [r4, #0]
 8008336:	461a      	mov	r2, r3
 8008338:	f7fd fbe8 	bl	8005b0c <_write>
 800833c:	1c43      	adds	r3, r0, #1
 800833e:	d102      	bne.n	8008346 <_write_r+0x1e>
 8008340:	6823      	ldr	r3, [r4, #0]
 8008342:	b103      	cbz	r3, 8008346 <_write_r+0x1e>
 8008344:	602b      	str	r3, [r5, #0]
 8008346:	bd38      	pop	{r3, r4, r5, pc}
 8008348:	2000033c 	.word	0x2000033c

0800834c <_close_r>:
 800834c:	b538      	push	{r3, r4, r5, lr}
 800834e:	4c06      	ldr	r4, [pc, #24]	; (8008368 <_close_r+0x1c>)
 8008350:	2300      	movs	r3, #0
 8008352:	4605      	mov	r5, r0
 8008354:	4608      	mov	r0, r1
 8008356:	6023      	str	r3, [r4, #0]
 8008358:	f7fd fbf4 	bl	8005b44 <_close>
 800835c:	1c43      	adds	r3, r0, #1
 800835e:	d102      	bne.n	8008366 <_close_r+0x1a>
 8008360:	6823      	ldr	r3, [r4, #0]
 8008362:	b103      	cbz	r3, 8008366 <_close_r+0x1a>
 8008364:	602b      	str	r3, [r5, #0]
 8008366:	bd38      	pop	{r3, r4, r5, pc}
 8008368:	2000033c 	.word	0x2000033c

0800836c <_fstat_r>:
 800836c:	b538      	push	{r3, r4, r5, lr}
 800836e:	4c07      	ldr	r4, [pc, #28]	; (800838c <_fstat_r+0x20>)
 8008370:	2300      	movs	r3, #0
 8008372:	4605      	mov	r5, r0
 8008374:	4608      	mov	r0, r1
 8008376:	4611      	mov	r1, r2
 8008378:	6023      	str	r3, [r4, #0]
 800837a:	f7fd fbef 	bl	8005b5c <_fstat>
 800837e:	1c43      	adds	r3, r0, #1
 8008380:	d102      	bne.n	8008388 <_fstat_r+0x1c>
 8008382:	6823      	ldr	r3, [r4, #0]
 8008384:	b103      	cbz	r3, 8008388 <_fstat_r+0x1c>
 8008386:	602b      	str	r3, [r5, #0]
 8008388:	bd38      	pop	{r3, r4, r5, pc}
 800838a:	bf00      	nop
 800838c:	2000033c 	.word	0x2000033c

08008390 <_isatty_r>:
 8008390:	b538      	push	{r3, r4, r5, lr}
 8008392:	4c06      	ldr	r4, [pc, #24]	; (80083ac <_isatty_r+0x1c>)
 8008394:	2300      	movs	r3, #0
 8008396:	4605      	mov	r5, r0
 8008398:	4608      	mov	r0, r1
 800839a:	6023      	str	r3, [r4, #0]
 800839c:	f7fd fbee 	bl	8005b7c <_isatty>
 80083a0:	1c43      	adds	r3, r0, #1
 80083a2:	d102      	bne.n	80083aa <_isatty_r+0x1a>
 80083a4:	6823      	ldr	r3, [r4, #0]
 80083a6:	b103      	cbz	r3, 80083aa <_isatty_r+0x1a>
 80083a8:	602b      	str	r3, [r5, #0]
 80083aa:	bd38      	pop	{r3, r4, r5, pc}
 80083ac:	2000033c 	.word	0x2000033c

080083b0 <_lseek_r>:
 80083b0:	b538      	push	{r3, r4, r5, lr}
 80083b2:	4c07      	ldr	r4, [pc, #28]	; (80083d0 <_lseek_r+0x20>)
 80083b4:	4605      	mov	r5, r0
 80083b6:	4608      	mov	r0, r1
 80083b8:	4611      	mov	r1, r2
 80083ba:	2200      	movs	r2, #0
 80083bc:	6022      	str	r2, [r4, #0]
 80083be:	461a      	mov	r2, r3
 80083c0:	f7fd fbe7 	bl	8005b92 <_lseek>
 80083c4:	1c43      	adds	r3, r0, #1
 80083c6:	d102      	bne.n	80083ce <_lseek_r+0x1e>
 80083c8:	6823      	ldr	r3, [r4, #0]
 80083ca:	b103      	cbz	r3, 80083ce <_lseek_r+0x1e>
 80083cc:	602b      	str	r3, [r5, #0]
 80083ce:	bd38      	pop	{r3, r4, r5, pc}
 80083d0:	2000033c 	.word	0x2000033c

080083d4 <__ascii_mbtowc>:
 80083d4:	b082      	sub	sp, #8
 80083d6:	b901      	cbnz	r1, 80083da <__ascii_mbtowc+0x6>
 80083d8:	a901      	add	r1, sp, #4
 80083da:	b142      	cbz	r2, 80083ee <__ascii_mbtowc+0x1a>
 80083dc:	b14b      	cbz	r3, 80083f2 <__ascii_mbtowc+0x1e>
 80083de:	7813      	ldrb	r3, [r2, #0]
 80083e0:	600b      	str	r3, [r1, #0]
 80083e2:	7812      	ldrb	r2, [r2, #0]
 80083e4:	1c10      	adds	r0, r2, #0
 80083e6:	bf18      	it	ne
 80083e8:	2001      	movne	r0, #1
 80083ea:	b002      	add	sp, #8
 80083ec:	4770      	bx	lr
 80083ee:	4610      	mov	r0, r2
 80083f0:	e7fb      	b.n	80083ea <__ascii_mbtowc+0x16>
 80083f2:	f06f 0001 	mvn.w	r0, #1
 80083f6:	e7f8      	b.n	80083ea <__ascii_mbtowc+0x16>

080083f8 <__malloc_lock>:
 80083f8:	4770      	bx	lr

080083fa <__malloc_unlock>:
 80083fa:	4770      	bx	lr

080083fc <_read_r>:
 80083fc:	b538      	push	{r3, r4, r5, lr}
 80083fe:	4c07      	ldr	r4, [pc, #28]	; (800841c <_read_r+0x20>)
 8008400:	4605      	mov	r5, r0
 8008402:	4608      	mov	r0, r1
 8008404:	4611      	mov	r1, r2
 8008406:	2200      	movs	r2, #0
 8008408:	6022      	str	r2, [r4, #0]
 800840a:	461a      	mov	r2, r3
 800840c:	f7fd fb61 	bl	8005ad2 <_read>
 8008410:	1c43      	adds	r3, r0, #1
 8008412:	d102      	bne.n	800841a <_read_r+0x1e>
 8008414:	6823      	ldr	r3, [r4, #0]
 8008416:	b103      	cbz	r3, 800841a <_read_r+0x1e>
 8008418:	602b      	str	r3, [r5, #0]
 800841a:	bd38      	pop	{r3, r4, r5, pc}
 800841c:	2000033c 	.word	0x2000033c

08008420 <__ascii_wctomb>:
 8008420:	b149      	cbz	r1, 8008436 <__ascii_wctomb+0x16>
 8008422:	2aff      	cmp	r2, #255	; 0xff
 8008424:	bf85      	ittet	hi
 8008426:	238a      	movhi	r3, #138	; 0x8a
 8008428:	6003      	strhi	r3, [r0, #0]
 800842a:	700a      	strbls	r2, [r1, #0]
 800842c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008430:	bf98      	it	ls
 8008432:	2001      	movls	r0, #1
 8008434:	4770      	bx	lr
 8008436:	4608      	mov	r0, r1
 8008438:	4770      	bx	lr
	...

0800843c <_init>:
 800843c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800843e:	bf00      	nop
 8008440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008442:	bc08      	pop	{r3}
 8008444:	469e      	mov	lr, r3
 8008446:	4770      	bx	lr

08008448 <_fini>:
 8008448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800844a:	bf00      	nop
 800844c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800844e:	bc08      	pop	{r3}
 8008450:	469e      	mov	lr, r3
 8008452:	4770      	bx	lr
